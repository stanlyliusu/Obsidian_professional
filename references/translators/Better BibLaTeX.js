{
	"translatorID": "f895aa0d-f28e-47fe-b247-2ea77c6ed583",
	"translatorType": 2,
	"label": "Better BibLaTeX",
	"description": "exports references in BibLaTeX format",
	"creator": "Simon Kornblith, Richard Karnesky, Anders Johansson and Emiliano Heyns",
	"target": "bib",
	"minVersion": "4.0.27",
	"maxVersion": "",
	"configOptions": {
		"getCollections": true,
		"hash": "eca783580c7e6e6f02a75442edc6a58a3681df4b7db2226263475e925813b1b9"
	},
	"displayOptions": {
		"exportNotes": false,
		"exportFileData": false,
		"useJournalAbbreviation": false,
		"keepUpdated": false
	},
	"priority": 50,
	"inRepository": false,
	"lastUpdated": "2021-10-09"
}

ZOTERO_CONFIG = {"GUID":"zotero@chnm.gmu.edu","ID":"zotero","CLIENT_NAME":"Zotero","DOMAIN_NAME":"zotero.org","REPOSITORY_URL":"https://repo.zotero.org/repo/","BASE_URI":"http://zotero.org/","WWW_BASE_URL":"https://www.zotero.org/","PROXY_AUTH_URL":"https://zoteroproxycheck.s3.amazonaws.com/test","API_URL":"https://api.zotero.org/","STREAMING_URL":"wss://stream.zotero.org/","SERVICES_URL":"https://services.zotero.org/","API_VERSION":3,"CONNECTOR_MIN_VERSION":"5.0.39","PREF_BRANCH":"extensions.zotero.","BOOKMARKLET_ORIGIN":"https://www.zotero.org","BOOKMARKLET_URL":"https://www.zotero.org/bookmarklet/","START_URL":"https://www.zotero.org/start","QUICK_START_URL":"https://www.zotero.org/support/quick_start_guide","PDF_TOOLS_URL":"https://www.zotero.org/download/xpdf/","SUPPORT_URL":"https://www.zotero.org/support/","TROUBLESHOOTING_URL":"https://www.zotero.org/support/getting_help","FEEDBACK_URL":"https://forums.zotero.org/","CONNECTORS_URL":"https://www.zotero.org/download/connectors"}
var global = Function("return this")();
if (typeof ZOTERO_TRANSLATOR_INFO === 'undefined') var ZOTERO_TRANSLATOR_INFO = {"translatorID":"f895aa0d-f28e-47fe-b247-2ea77c6ed583","translatorType":2,"label":"Better BibLaTeX","description":"exports references in BibLaTeX format","creator":"Simon Kornblith, Richard Karnesky, Anders Johansson and Emiliano Heyns","target":"bib","minVersion":"4.0.27","maxVersion":"","configOptions":{"getCollections":true},"displayOptions":{"exportNotes":false,"exportFileData":false,"useJournalAbbreviation":false,"keepUpdated":false},"priority":50,"inRepository":false};
var BetterBibLaTeX__Translator__doExport = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/safe-stable-stringify/index.js
  var require_safe_stable_stringify = __commonJS({
    "node_modules/safe-stable-stringify/index.js"(exports, module) {
      var stringify2 = main();
      stringify2.configure = main;
      stringify2.default = stringify2;
      module.exports = stringify2;
      var strEscapeSequencesRegExp = /[\x00-\x1f\x22\x5c]/;
      var strEscapeSequencesReplacer = /[\x00-\x1f\x22\x5c]/g;
      var meta2 = [
        "\\u0000",
        "\\u0001",
        "\\u0002",
        "\\u0003",
        "\\u0004",
        "\\u0005",
        "\\u0006",
        "\\u0007",
        "\\b",
        "\\t",
        "\\n",
        "\\u000b",
        "\\f",
        "\\r",
        "\\u000e",
        "\\u000f",
        "\\u0010",
        "\\u0011",
        "\\u0012",
        "\\u0013",
        "\\u0014",
        "\\u0015",
        "\\u0016",
        "\\u0017",
        "\\u0018",
        "\\u0019",
        "\\u001a",
        "\\u001b",
        "\\u001c",
        "\\u001d",
        "\\u001e",
        "\\u001f",
        "",
        "",
        '\\"',
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "\\\\"
      ];
      function escapeFn(str) {
        return meta2[str.charCodeAt(0)];
      }
      function strEscape(str) {
        if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) {
          return str;
        }
        if (str.length > 100) {
          return str.replace(strEscapeSequencesReplacer, escapeFn);
        }
        let result = "";
        let last = 0;
        let i = 0;
        for (; i < str.length; i++) {
          const point = str.charCodeAt(i);
          if (point === 34 || point === 92 || point < 32) {
            if (last === i) {
              result += meta2[point];
            } else {
              result += `${str.slice(last, i)}${meta2[point]}`;
            }
            last = i + 1;
          }
        }
        if (last === 0) {
          result = str;
        } else if (last !== i) {
          result += str.slice(last);
        }
        return result;
      }
      function insertSort(array) {
        if (array.length > 200) {
          return array.sort();
        }
        for (let i = 1; i < array.length; i++) {
          const currentValue = array[i];
          let position = i;
          while (position !== 0 && array[position - 1] > currentValue) {
            array[position] = array[position - 1];
            position--;
          }
          array[position] = currentValue;
        }
        return array;
      }
      var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())), Symbol.toStringTag).get;
      function isTypedArray(value) {
        return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0;
      }
      function stringifyTypedArray(array, separator) {
        if (array.length === 0) {
          return "";
        }
        const whitespace = separator === "," ? "" : " ";
        let res = `"0":${whitespace}${array[0]}`;
        for (let i = 1; i < array.length; i++) {
          res += `${separator}"${i}":${whitespace}${array[i]}`;
        }
        return res;
      }
      function getCircularValueOption(options) {
        if (options && Object.prototype.hasOwnProperty.call(options, "circularValue")) {
          var circularValue = options.circularValue;
          if (typeof circularValue === "string") {
            circularValue = `"${circularValue}"`;
          } else if (circularValue !== null) {
            throw new TypeError('The "circularValue" argument must be of type string or the value null');
          }
        }
        return circularValue === void 0 ? '"[Circular]"' : circularValue;
      }
      function getBigIntOption(options) {
        if (options && Object.prototype.hasOwnProperty.call(options, "bigint")) {
          var bigint = options.bigint;
          if (typeof bigint !== "boolean") {
            throw new TypeError('The "bigint" argument must be of type boolean');
          }
        }
        return bigint === void 0 ? true : bigint;
      }
      function getDeterministicOption(options) {
        if (options && Object.prototype.hasOwnProperty.call(options, "deterministic")) {
          var deterministic = options.deterministic;
          if (typeof deterministic !== "boolean") {
            throw new TypeError('The "deterministic" argument must be of type boolean');
          }
        }
        return deterministic === void 0 ? true : deterministic;
      }
      function main(options) {
        const circularValue = getCircularValueOption(options);
        const bigint = getBigIntOption(options);
        const deterministic = getDeterministicOption(options);
        function stringifyFullFn(key, parent, stack, replacer, spacer, indentation) {
          let value = parent[key];
          if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
            value = value.toJSON(key);
          }
          value = replacer.call(parent, key, value);
          switch (typeof value) {
            case "string":
              return `"${strEscape(value)}"`;
            case "object": {
              if (value === null) {
                return "null";
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              let res = "";
              let join = ",";
              const originalIndentation = indentation;
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                stack.push(value);
                if (spacer !== "") {
                  indentation += spacer;
                  res += `
${indentation}`;
                  join = `,
${indentation}`;
                }
                let i = 0;
                for (; i < value.length - 1; i++) {
                  const tmp2 = stringifyFullFn(i, value, stack, replacer, spacer, indentation);
                  res += tmp2 !== void 0 ? tmp2 : "null";
                  res += join;
                }
                const tmp = stringifyFullFn(i, value, stack, replacer, spacer, indentation);
                res += tmp !== void 0 ? tmp : "null";
                if (spacer !== "") {
                  res += `
${originalIndentation}`;
                }
                stack.pop();
                return `[${res}]`;
              }
              let keys = Object.keys(value);
              if (keys.length === 0) {
                return "{}";
              }
              let whitespace = "";
              let separator = "";
              if (spacer !== "") {
                indentation += spacer;
                join = `,
${indentation}`;
                whitespace = " ";
              }
              if (isTypedArray(value)) {
                res += stringifyTypedArray(value, join);
                keys = keys.slice(value.length);
                separator = join;
              }
              if (deterministic) {
                keys = insertSort(keys);
              }
              stack.push(value);
              for (const key2 of keys) {
                const tmp = stringifyFullFn(key2, value, stack, replacer, spacer, indentation);
                if (tmp !== void 0) {
                  res += `${separator}"${strEscape(key2)}":${whitespace}${tmp}`;
                  separator = join;
                }
              }
              if (spacer !== "" && separator.length > 1) {
                res = `
${indentation}${res}
${originalIndentation}`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "bigint":
              return bigint ? String(value) : void 0;
          }
        }
        function stringifyFullArr(key, value, stack, replacer, spacer, indentation) {
          if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
            value = value.toJSON(key);
          }
          switch (typeof value) {
            case "string":
              return `"${strEscape(value)}"`;
            case "object": {
              if (value === null) {
                return "null";
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              const originalIndentation = indentation;
              let res = "";
              let join = ",";
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                stack.push(value);
                if (spacer !== "") {
                  indentation += spacer;
                  res += `
${indentation}`;
                  join = `,
${indentation}`;
                }
                let i = 0;
                for (; i < value.length - 1; i++) {
                  const tmp2 = stringifyFullArr(i, value[i], stack, replacer, spacer, indentation);
                  res += tmp2 !== void 0 ? tmp2 : "null";
                  res += join;
                }
                const tmp = stringifyFullArr(i, value[i], stack, replacer, spacer, indentation);
                res += tmp !== void 0 ? tmp : "null";
                if (spacer !== "") {
                  res += `
${originalIndentation}`;
                }
                stack.pop();
                return `[${res}]`;
              }
              if (replacer.length === 0) {
                return "{}";
              }
              stack.push(value);
              let whitespace = "";
              if (spacer !== "") {
                indentation += spacer;
                join = `,
${indentation}`;
                whitespace = " ";
              }
              let separator = "";
              for (const key2 of replacer) {
                if (typeof key2 === "string" || typeof key2 === "number") {
                  const tmp = stringifyFullArr(key2, value[key2], stack, replacer, spacer, indentation);
                  if (tmp !== void 0) {
                    res += `${separator}"${strEscape(key2)}":${whitespace}${tmp}`;
                    separator = join;
                  }
                }
              }
              if (spacer !== "" && separator.length > 1) {
                res = `
${indentation}${res}
${originalIndentation}`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "bigint":
              return bigint ? String(value) : void 0;
          }
        }
        function stringifyIndent(key, value, stack, spacer, indentation) {
          switch (typeof value) {
            case "string":
              return `"${strEscape(value)}"`;
            case "object": {
              if (value === null) {
                return "null";
              }
              if (typeof value.toJSON === "function") {
                value = value.toJSON(key);
                if (typeof value !== "object") {
                  return stringifyIndent(key, value, stack, spacer, indentation);
                }
                if (value === null) {
                  return "null";
                }
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              const originalIndentation = indentation;
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                stack.push(value);
                indentation += spacer;
                let res2 = `
${indentation}`;
                const join2 = `,
${indentation}`;
                let i = 0;
                for (; i < value.length - 1; i++) {
                  const tmp2 = stringifyIndent(i, value[i], stack, spacer, indentation);
                  res2 += tmp2 !== void 0 ? tmp2 : "null";
                  res2 += join2;
                }
                const tmp = stringifyIndent(i, value[i], stack, spacer, indentation);
                res2 += tmp !== void 0 ? tmp : "null";
                res2 += `
${originalIndentation}`;
                stack.pop();
                return `[${res2}]`;
              }
              let keys = Object.keys(value);
              if (keys.length === 0) {
                return "{}";
              }
              indentation += spacer;
              const join = `,
${indentation}`;
              let res = "";
              let separator = "";
              if (isTypedArray(value)) {
                res += stringifyTypedArray(value, join);
                keys = keys.slice(value.length);
                separator = join;
              }
              if (deterministic) {
                keys = insertSort(keys);
              }
              stack.push(value);
              for (const key2 of keys) {
                const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
                if (tmp !== void 0) {
                  res += `${separator}"${strEscape(key2)}": ${tmp}`;
                  separator = join;
                }
              }
              if (separator !== "") {
                res = `
${indentation}${res}
${originalIndentation}`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "bigint":
              return bigint ? String(value) : void 0;
          }
        }
        function stringifySimple(key, value, stack) {
          switch (typeof value) {
            case "string":
              return `"${strEscape(value)}"`;
            case "object": {
              if (value === null) {
                return "null";
              }
              if (typeof value.toJSON === "function") {
                value = value.toJSON(key);
                if (typeof value !== "object") {
                  return stringifySimple(key, value, stack);
                }
                if (value === null) {
                  return "null";
                }
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              let res = "";
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                stack.push(value);
                let i = 0;
                for (; i < value.length - 1; i++) {
                  const tmp2 = stringifySimple(i, value[i], stack);
                  res += tmp2 !== void 0 ? tmp2 : "null";
                  res += ",";
                }
                const tmp = stringifySimple(i, value[i], stack);
                res += tmp !== void 0 ? tmp : "null";
                stack.pop();
                return `[${res}]`;
              }
              let keys = Object.keys(value);
              if (keys.length === 0) {
                return "{}";
              }
              let separator = "";
              if (isTypedArray(value)) {
                res += stringifyTypedArray(value, ",");
                keys = keys.slice(value.length);
              }
              if (deterministic) {
                keys = insertSort(keys);
              }
              stack.push(value);
              for (const key2 of keys) {
                const tmp = stringifySimple(key2, value[key2], stack);
                if (tmp !== void 0) {
                  res += `${separator}"${strEscape(key2)}":${tmp}`;
                  separator = ",";
                }
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "bigint":
              return bigint ? String(value) : void 0;
          }
        }
        function stringify3(value, replacer, space) {
          if (arguments.length > 1) {
            let spacer = "";
            if (typeof space === "number") {
              spacer = " ".repeat(space);
            } else if (typeof space === "string") {
              spacer = space;
            }
            if (replacer != null) {
              if (typeof replacer === "function") {
                return stringifyFullFn("", { "": value }, [], replacer, spacer, "");
              }
              if (Array.isArray(replacer)) {
                return stringifyFullArr("", value, [], replacer, spacer, "");
              }
            }
            if (spacer !== "") {
              return stringifyIndent("", value, [], spacer, "");
            }
          }
          return stringifySimple("", value, []);
        }
        return stringify3;
      }
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      var __extends;
      var __assign;
      var __rest;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __spreadArray;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __createBinding;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id2, v) {
            return exports2[id2] = previous ? previous(id2, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator = function(thisArg, body2) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body2.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        };
        __createBinding = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar2 = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar2.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar2;
        };
        __spread = function() {
          for (var ar2 = [], i = 0; i < arguments.length; i++)
            ar2 = ar2.concat(__read(arguments[i]));
          return ar2;
        };
        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray = function(to2, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar2; i < l; i++) {
              if (ar2 || !(i in from)) {
                if (!ar2)
                  ar2 = Array.prototype.slice.call(from, 0, i);
                ar2[i] = from[i];
              }
            }
          return to2.concat(ar2 || Array.prototype.slice.call(from));
        };
        __await = function(v) {
          return this instanceof __await ? (this.v = v, this) : new __await(v);
        };
        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__spreadArray", __spreadArray);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      });
    }
  });

  // node_modules/@retorquere/bibtex-parser/grammar.js
  var require_grammar = __commonJS({
    "node_modules/@retorquere/bibtex-parser/grammar.js"(exports, module) {
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          "class": function(expectation) {
            var escapedParts = "", i;
            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0; i < expected2.length; i++) {
            descriptions[i] = describeExpectation(expected2[i]);
          }
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== void 0 ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = { Bibliography: peg$parseBibliography }, peg$startRuleFunction = peg$parseBibliography, peg$c0 = function(r) {
          return {
            kind: "Bibliography",
            loc: location(),
            source: text(),
            children: r
          };
        }, peg$c1 = "@", peg$c2 = peg$literalExpectation("@", false), peg$c3 = "comment", peg$c4 = peg$literalExpectation("comment", true), peg$c5 = function(v) {
          return {
            kind: "BracedComment",
            loc: location(),
            source: text(),
            value: v.slice(1, -1)
          };
        }, peg$c6 = /^[^\n\r]/, peg$c7 = peg$classExpectation(["\n", "\r"], true, false), peg$c8 = /^[\n\r]/, peg$c9 = peg$classExpectation(["\n", "\r"], false, false), peg$c10 = function(v) {
          return {
            kind: "LineComment",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v)
          };
        }, peg$c11 = /^[^@]/, peg$c12 = peg$classExpectation(["@"], true, false), peg$c13 = function(v) {
          return {
            kind: "NonEntryText",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v)
          };
        }, peg$c14 = function(n) {
          return n;
        }, peg$c15 = "{", peg$c16 = peg$literalExpectation("{", false), peg$c17 = /^[^{}]/, peg$c18 = peg$classExpectation(["{", "}"], true, false), peg$c19 = "}", peg$c20 = peg$literalExpectation("}", false), peg$c21 = function(comment) {
          return "{" + comment.join("") + "}";
        }, peg$c22 = /^[_A-Za-z]/, peg$c23 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"]], false, false), peg$c24 = /^[({]/, peg$c25 = peg$classExpectation(["(", "{"], false, false), peg$c26 = /^[})]/, peg$c27 = peg$classExpectation(["}", ")"], false, false), peg$c28 = function(type2, id2, fields) {
          return {
            kind: "Entry",
            id: id2 || "",
            type: type2.toLowerCase(),
            loc: location(),
            source: text(),
            fields
          };
        }, peg$c29 = "preamble", peg$c30 = peg$literalExpectation("preamble", true), peg$c31 = function(opener, v, closer) {
          switch (opener + closer) {
            case "{}":
            case "()":
              break;
            default:
              throw new Error(`Unbalanced opener-closer for preamble: ${opener}...${closer}`);
              break;
          }
          return {
            kind: "PreambleExpression",
            loc: location(),
            source: text(),
            value: v.reduce((a, b) => a.concat(b), [])
          };
        }, peg$c32 = "string", peg$c33 = peg$literalExpectation("string", true), peg$c34 = function(k, v) {
          return {
            kind: "StringDeclaration",
            loc: location(),
            source: text(),
            name: k,
            value: v.reduce((a, b) => a.concat(b), [])
          };
        }, peg$c35 = /^[^ \t\r\n,]/, peg$c36 = peg$classExpectation([" ", "	", "\r", "\n", ","], true, false), peg$c37 = ",", peg$c38 = peg$literalExpectation(",", false), peg$c39 = function(id2) {
          return id2;
        }, peg$c40 = function(name) {
          return isVerbatimField(name) && unnestFields.includes(name);
        }, peg$c41 = function(name, value) {
          return {
            kind: "Field",
            loc: location(),
            source: text(),
            name,
            loc: location(),
            value: [protect(value)]
          };
        }, peg$c42 = function(name) {
          return isVerbatimField(name);
        }, peg$c43 = function(name, value) {
          return {
            kind: "Field",
            loc: location(),
            source: text(),
            name,
            loc: location(),
            value: [protect(value)]
          };
        }, peg$c44 = function(name, value) {
          if (unnestFields.includes(name) && Array.isArray(value) && value.length === 1 && value[0].kind === "Block") {
            if (options.unnestMode === "preserve") {
              value[0].case = "preserve";
            } else {
              value = value[0].value;
            }
          }
          return handle_markup_switches({
            kind: "Field",
            loc: location(),
            source: text(),
            name,
            value
          });
        }, peg$c45 = /^[_:a-zA-Z0-9\-]/, peg$c46 = peg$classExpectation(["_", ":", ["a", "z"], ["A", "Z"], ["0", "9"], "-"], false, false), peg$c47 = function(name) {
          return name.toLowerCase();
        }, peg$c48 = '"', peg$c49 = peg$literalExpectation('"', false), peg$c50 = function(v) {
          v = v || {
            kind: "Text",
            loc: location(),
            source: text(),
            value: ""
          };
          v.mode = "verbatim";
          return basicTextConversions(v);
        }, peg$c51 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: v.join("").trim(),
            mode: "verbatim"
          });
        }, peg$c52 = function(v) {
          return v;
        }, peg$c53 = function(v) {
          return "{" + v.join("") + "}";
        }, peg$c54 = function() {
          return math.set(false);
        }, peg$c55 = function(v) {
          return v.reduce((a, b) => a.concat(b), []);
        }, peg$c56 = function(v) {
          return v;
        }, peg$c57 = "{\\verb", peg$c58 = peg$literalExpectation("{\\verb", false), peg$c59 = /^[a-zA-Z]/, peg$c60 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false), peg$c61 = /^[^\^_${}\\]/, peg$c62 = peg$classExpectation(["^", "_", "$", "{", "}", "\\"], true, false), peg$c63 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace(v),
            mode: math.on ? "math" : "text"
          });
        }, peg$c64 = /^[^\^_${}"\\]/, peg$c65 = peg$classExpectation(["^", "_", "$", "{", "}", '"', "\\"], true, false), peg$c66 = /^[0-9]/, peg$c67 = peg$classExpectation([["0", "9"]], false, false), peg$c68 = function(v) {
          return {
            kind: "Number",
            loc: location(),
            source: text(),
            value: parseInt(v, 10)
          };
        }, peg$c69 = function(v) {
          return {
            kind: "StringReference",
            loc: location(),
            source: text(),
            name: v
          };
        }, peg$c70 = "\\begin{", peg$c71 = peg$literalExpectation("\\begin{", false), peg$c72 = /^[a-zA-Z0-9]/, peg$c73 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false), peg$c74 = "\\end{", peg$c75 = peg$literalExpectation("\\end{", false), peg$c76 = function(env, v, cenv) {
          return env === cenv;
        }, peg$c77 = function(env, v, cenv) {
          if (markup[env]) {
            return {
              kind: "Block",
              loc: location(),
              source: text(),
              value: v,
              markup: { [markup[env]]: true }
            };
          } else {
            return {
              kind: "Environment",
              loc: location(),
              source: text(),
              value: v,
              env
            };
          }
        }, peg$c78 = "{\\", peg$c79 = peg$literalExpectation("{\\", false), peg$c80 = "\\", peg$c81 = peg$literalExpectation("\\", false), peg$c82 = /^[ij]/, peg$c83 = peg$classExpectation(["i", "j"], false, false), peg$c84 = function(mark, char) {
          return {
            kind: "DiacriticCommand",
            loc: location(),
            source: text(),
            mark,
            dotless: !!char[1],
            character: char[1] || char[0]
          };
        }, peg$c85 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: v.join("").trim(),
            mode: "verbatim"
          });
        }, peg$c86 = function(v) {
          const block = {
            kind: "Block",
            loc: location(),
            source: text(),
            value: v,
            markup: {},
            case: "protect"
          };
          let leadingcmd = block.value.length && (block.value[0].kind.endsWith("Command") || block.value[0].kind === "Environment") ? block.value[0] : null;
          let leadingcmdblockarg = leadingcmd && leadingcmd.kind === "RegularCommand" && leadingcmd.arguments.required.length && leadingcmd.arguments.required[0].kind === "Block" && leadingcmd.arguments.required[0];
          if (leadingcmd) {
            delete block.case;
            if (leadingcmdblockarg && leadingcmdblockarg.case === "protect")
              delete leadingcmdblockarg.case;
            if (markup[leadingcmd.command]) {
              block.markup[markup[leadingcmd.command]] = true;
              block.value.shift();
            }
          }
          return handle_markup_switches(block);
        }, peg$c87 = function() {
          return !math.on;
        }, peg$c88 = "$", peg$c89 = peg$literalExpectation("$", false), peg$c90 = "$$", peg$c91 = peg$literalExpectation("$$", false), peg$c92 = function(mode) {
          return math.set(true);
        }, peg$c93 = function(mode, v) {
          return math.set(false);
        }, peg$c94 = function(mode, v) {
          return {
            kind: mode == "$$" ? "DisplayMath" : "InlineMath",
            loc: location(),
            source: text(),
            value: v,
            case: "protect",
            markup: {}
          };
        }, peg$c95 = "%", peg$c96 = peg$literalExpectation("%", false), peg$c97 = /^[^\r\n]/, peg$c98 = peg$classExpectation(["\r", "\n"], true, false), peg$c99 = function(v) {
          return {
            kind: "LineComment",
            loc: location(),
            source: text(),
            value: v
          };
        }, peg$c100 = /^[_\^]/, peg$c101 = peg$classExpectation(["_", "^"], false, false), peg$c102 = function(mode, v) {
          if (v.kind === "Block")
            v = v.value;
          return {
            kind: mode === "_" ? "SubscriptCommand" : "SuperscriptCommand",
            loc: location(),
            source: text(),
            value: v
          };
        }, peg$c103 = function(mark, v) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: mark,
            arguments: {
              optional: [],
              required: [protect(v)]
            }
          };
        }, peg$c104 = /^[^A-Za-z0-9\t\r\n]/, peg$c105 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "	", "\r", "\n"], true, false), peg$c106 = function(v) {
          return {
            kind: "SymbolCommand",
            loc: location(),
            source: text(),
            command: v
          };
        }, peg$c107 = "newcommand", peg$c108 = peg$literalExpectation("newcommand", false), peg$c109 = function(cmd, name) {
          return name.value.length == 1 && name.value[0].kind === "RegularCommand";
        }, peg$c110 = function(cmd, name, optional, def) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional: [],
              required: [name, def]
            }
          };
        }, peg$c111 = "begin", peg$c112 = peg$literalExpectation("begin", false), peg$c113 = "end", peg$c114 = peg$literalExpectation("end", false), peg$c115 = /^[A-Za-z]/, peg$c116 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false), peg$c117 = function(cmd) {
          return verbatimCommands.includes(cmd) && has_arguments[cmd] === 2;
        }, peg$c118 = function(cmd, optional, req1, req2) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [protect(req1), protect(req2)]
            }
          };
        }, peg$c119 = function(cmd) {
          return verbatimCommands.includes(cmd) && has_arguments[cmd] === 1;
        }, peg$c120 = function(cmd, optional, req) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [protect(req)]
            }
          };
        }, peg$c121 = function(cmd) {
          return has_arguments[cmd] === 2;
        }, peg$c122 = function(cmd, optional, req1, req2) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [req1, req2]
            }
          };
        }, peg$c123 = function(cmd) {
          return has_arguments[cmd] === 1;
        }, peg$c124 = function(cmd, optional, req) {
          let m;
          if (req.kind === "Block") {
            switch (cmd) {
              case "textsuperscript":
              case "sp":
                req.markup.sup = true;
                break;
              case "textsubscript":
              case "sb":
                req.markup.sub = true;
                break;
              case "textsc":
                req.markup.smallCaps = true;
                break;
              case "enquote":
              case "mkbibquote":
                req.markup.enquote = true;
                break;
              case "textbf":
              case "mkbibbold":
                req.markup.bold = true;
                break;
              case "emph":
              case "textit":
              case "mkbibitalic":
              case "mkbibemph":
                req.markup.italics = true;
                break;
              default:
                if (m = cmd.match(/^((sub)*)section$/)) {
                  req.markup[`h${m[1].length / 3 + 1}`] = true;
                }
            }
          }
          if (cmd === "bibcyr")
            delete req.case;
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: [req]
            }
          };
        }, peg$c125 = function(cmd, optional) {
          return {
            kind: "RegularCommand",
            loc: location(),
            source: text(),
            command: cmd,
            arguments: {
              optional,
              required: []
            }
          };
        }, peg$c126 = "[", peg$c127 = peg$literalExpectation("[", false), peg$c128 = /^[^\]]/, peg$c129 = peg$classExpectation(["]"], true, false), peg$c130 = "]", peg$c131 = peg$literalExpectation("]", false), peg$c132 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: v,
            mode: math.on ? "math" : "text"
          });
        }, peg$c133 = /^[^ \t\^_${}\\]/, peg$c134 = peg$classExpectation([" ", "	", "^", "_", "$", "{", "}", "\\"], true, false), peg$c135 = function(v) {
          return basicTextConversions({
            kind: "Text",
            loc: location(),
            source: text(),
            value: normalizeWhitespace([v]),
            mode: math.on ? "math" : "text"
          });
        }, peg$c136 = /^[a-zA-Z\-_]/, peg$c137 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false), peg$c138 = /^[a-zA-Z0-9\-&_:]/, peg$c139 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "&", "_", ":"], false, false), peg$c140 = /^['`"=~\^.]/, peg$c141 = peg$classExpectation(["'", "`", '"', "=", "~", "^", "."], false, false), peg$c142 = /^['`"=~\^.cbuvdrHk]/, peg$c143 = peg$classExpectation(["'", "`", '"', "=", "~", "^", ".", "c", "b", "u", "v", "d", "r", "H", "k"], false, false), peg$c144 = "=", peg$c145 = peg$literalExpectation("=", false), peg$c146 = "#", peg$c147 = peg$literalExpectation("#", false), peg$c148 = /^[\r\n]/, peg$c149 = peg$classExpectation(["\r", "\n"], false, false), peg$c150 = peg$otherExpectation("Mandatory Horizontal Whitespace"), peg$c151 = /^[ \t]/, peg$c152 = peg$classExpectation([" ", "	"], false, false), peg$c153 = peg$otherExpectation("Optional Horizontal Whitespace"), peg$c154 = peg$otherExpectation("Mandatory Vertical Whitespace"), peg$c155 = peg$otherExpectation("Optional Vertical Whitespace"), peg$c156 = peg$otherExpectation("Mandatory Whitespace"), peg$c157 = /^[ \t\n\r]/, peg$c158 = peg$classExpectation([" ", "	", "\n", "\r"], false, false), peg$c159 = peg$otherExpectation("Optional Whitespace"), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return { type: "literal", text: text2, ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return { type: "class", parts, inverted, ignoreCase };
        }
        function peg$anyExpectation() {
          return { type: "any" };
        }
        function peg$endExpectation() {
          return { type: "end" };
        }
        function peg$otherExpectation(description) {
          return { type: "other", description };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseBibliography() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseNode();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseNode();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseComment() {
          var s0, s1, s2, s3, s4, s5, s6, s7;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c1;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c2);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c3) {
                s3 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c4);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__h();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseBracedComment();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 64) {
              s1 = peg$c1;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c3) {
                  s3 = input.substr(peg$currPos, 7);
                  peg$currPos += 7;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c4);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse__h();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    if (peg$c6.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c6.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c7);
                        }
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      if (peg$c8.test(input.charAt(peg$currPos))) {
                        s7 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c9);
                        }
                      }
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        if (peg$c8.test(input.charAt(peg$currPos))) {
                          s7 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c9);
                          }
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c10(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c12);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$c6.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c7);
                  }
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$c6.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c8.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                  }
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c8.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c9);
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c13(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseNode() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseComment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePreambleExpression();
            if (s1 === peg$FAILED) {
              s1 = peg$parseStringDeclaration();
              if (s1 === peg$FAILED) {
                s1 = peg$parseEntry();
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseBracedComment() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c15;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c16);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c17.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c18);
              }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseBracedComment();
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c17.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c18);
                }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$parseBracedComment();
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c19;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c20);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEntry() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c1;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c2);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              if (peg$c22.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c23);
                }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c22.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c23);
                    }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = input.substring(s3, peg$currPos);
              } else {
                s3 = s4;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (peg$c24.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c25);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseEntryId();
                      if (s7 === peg$FAILED) {
                        s7 = null;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$parseField();
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$parseField();
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse__();
                            if (s10 !== peg$FAILED) {
                              if (peg$c26.test(input.charAt(peg$currPos))) {
                                s11 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c27);
                                }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse__();
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c28(s3, s7, s9);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsePreambleExpression() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c1;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c2);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c29) {
                s3 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c30);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (peg$c24.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c25);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseEnvironment();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseBlock();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseMath();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parseCommand();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parseText();
                            }
                          }
                        }
                      }
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseEnvironment();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseBlock();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parseMath();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parseCommand();
                              if (s8 === peg$FAILED) {
                                s8 = peg$parseText();
                              }
                            }
                          }
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (s8 !== peg$FAILED) {
                          if (peg$c26.test(input.charAt(peg$currPos))) {
                            s9 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c27);
                            }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse__();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c31(s5, s7, s9);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseStringDeclaration() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c1;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c2);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c32) {
                s3 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c33);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (peg$c24.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c25);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseVariableName();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseFieldSeparator();
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$parseRegularValue();
                          if (s10 !== peg$FAILED) {
                            while (s10 !== peg$FAILED) {
                              s9.push(s10);
                              s10 = peg$parseRegularValue();
                            }
                          } else {
                            s9 = peg$FAILED;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse__();
                            if (s10 !== peg$FAILED) {
                              if (peg$c26.test(input.charAt(peg$currPos))) {
                                s11 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c27);
                                }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse__();
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c34(s7, s9);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEntryId() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c35.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c36);
              }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c35.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c36);
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s4 = peg$c37;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c38);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c39(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseField() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8;
          s0 = peg$currPos;
          s1 = peg$parseFieldName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c40(s1);
            if (s2) {
              s2 = void 0;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseFieldSeparator();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s4 = peg$c15;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c16);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s6 = peg$c15;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c16);
                    }
                  }
                  peg$silentFails--;
                  if (s6 !== peg$FAILED) {
                    peg$currPos = s5;
                    s5 = void 0;
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseVerbatimFieldValue();
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s7 = peg$c19;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c20);
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseFieldTerminator();
                        if (s8 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c41(s1, s6);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFieldName();
            if (s1 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s2 = peg$c42(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseFieldSeparator();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseVerbatimFieldValue();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseFieldTerminator();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c43(s1, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseFieldName();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseFieldSeparator();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseFieldValue();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseFieldTerminator();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c44(s1, s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseFieldName() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c45.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c46);
              }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c45.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c46);
                  }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c47(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseVerbatimFieldValue() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c48;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c49);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTextNoQuotes();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c48;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c49);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c50(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c15;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c16);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseVerbatimText();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseVerbatimText();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s3 = peg$c19;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c20);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c51(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseVerbatimText() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          if (peg$c17.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c18);
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c17.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c18);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
          } else {
            s1 = s2;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c15;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c16);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseVerbatimText();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseVerbatimText();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s3 = peg$c19;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c20);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c53(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseFieldValue() {
          var s0, s1, s2, s3;
          s0 = peg$parseNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$c54();
            if (s1) {
              s1 = void 0;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseRegularValue();
              if (s3 === peg$FAILED) {
                s3 = peg$parseStringValue();
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseRegularValue();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseStringValue();
                }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseRegularValue() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c48;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c49);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseEnvironment();
            if (s3 === peg$FAILED) {
              s3 = peg$parseBlock();
              if (s3 === peg$FAILED) {
                s3 = peg$parseMath();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCommand();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseTextNoQuotes();
                  }
                }
              }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseEnvironment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseBlock();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseMath();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseTextNoQuotes();
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c48;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c49);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseConcat();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c56(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c57) {
              s1 = peg$c57;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (peg$c59.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c60);
                }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseVerbatimText();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseVerbatimText();
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s4 = peg$c19;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c20);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseConcat();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c51(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c15;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c16);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseMath();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseCommand();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseEnvironment();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseBlock();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseMath();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseCommand();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c19;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c20);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseConcat();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c56(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseStringReference();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseConcat();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c56(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseStringValue() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseStringReference();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseConcat();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseText() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c62);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c62);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseTextNoQuotes() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c64.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c64.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c65);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseNumber() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          if (peg$c66.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c67);
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c66.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c67);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
          } else {
            s1 = s2;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c68(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseStringReference() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseVariableName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c69(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseEnvironment() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c70) {
            s1 = peg$c70;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c71);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c72.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c73);
              }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c72.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c73);
                  }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c19;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c20);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseEnvironment();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseBlock();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseCommand();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseMath();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseText();
                      }
                    }
                  }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseEnvironment();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseBlock();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseCommand();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseMath();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c74) {
                    s5 = peg$c74;
                    peg$currPos += 5;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c75);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = [];
                    if (peg$c72.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c73);
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        if (peg$c72.test(input.charAt(peg$currPos))) {
                          s8 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c73);
                          }
                        }
                      }
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = input.substring(s6, peg$currPos);
                    } else {
                      s6 = s7;
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s7 = peg$c19;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c20);
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s8 = peg$c76(s2, s4, s6);
                        if (s8) {
                          s8 = void 0;
                        } else {
                          s8 = peg$FAILED;
                        }
                        if (s8 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c77(s2, s4, s6);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseBlock() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c78) {
            s1 = peg$c78;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c79);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExtendedDiacritic();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                if (peg$c72.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c73);
                  }
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s5 = peg$c80;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c81);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    if (peg$c82.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c83);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c19;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c20);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c84(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c57) {
              s1 = peg$c57;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (peg$c59.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c60);
                }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseVerbatimText();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseVerbatimText();
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s4 = peg$c19;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c20);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c85(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c15;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c16);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseMath();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseEnvironment();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseBlock();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseCommand();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseMath();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseText();
                        }
                      }
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c19;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c20);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c86(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseMath() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$c87();
          if (s1) {
            s1 = void 0;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
              s2 = peg$c88;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c89);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c90) {
                s2 = peg$c90;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c91);
                }
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s3 = peg$c92(s2);
              if (s3) {
                s3 = void 0;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseBlock();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseCommand();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseText();
                  }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseBlock();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseCommand();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseText();
                    }
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 36) {
                    s5 = peg$c88;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c89);
                    }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c90) {
                      s5 = peg$c90;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                      }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s6 = peg$c93(s2, s4);
                    if (s6) {
                      s6 = void 0;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c94(s2, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseLineComment() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 37) {
            s1 = peg$c95;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c96);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__h();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              if (peg$c97.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c98);
                }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c97.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c98);
                    }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = input.substring(s3, peg$currPos);
              } else {
                s3 = s4;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseEOL();
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseEOL();
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c99(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommand() {
          var s0;
          s0 = peg$parseScriptCommand();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDiacriticCommand();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRegularCommand();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSymbolCommand();
              }
            }
          }
          return s0;
        }
        function peg$parseScriptCommand() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (peg$c100.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c101);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__h();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseRequiredArgument();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c102(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseDiacriticCommand() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c80;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c81);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSimpleDiacritic();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                if (peg$c72.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c73);
                  }
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s5 = peg$c80;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c81);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    if (peg$c82.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c83);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c84(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c80;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c81);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseExtendedDiacritic();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s3 = peg$c15;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c16);
                  }
                }
                if (s3 !== peg$FAILED) {
                  if (peg$c72.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c73);
                    }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s5 = peg$c80;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c81);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      if (peg$c82.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c83);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s5 = peg$c19;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c20);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c84(s2, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c80;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c81);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseExtendedDiacritic();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s4 = peg$c15;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c16);
                    }
                  }
                  peg$silentFails--;
                  if (s4 !== peg$FAILED) {
                    peg$currPos = s3;
                    s3 = void 0;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseRegularValue();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c103(s2, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseSymbolCommand() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c80;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c81);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (peg$c104.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c105);
              }
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c106(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseRegularCommand() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c80;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c81);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c107) {
              s2 = peg$c107;
              peg$currPos += 10;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c108);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseBlock();
              if (s3 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s4 = peg$c109(s2, s3);
                if (s4) {
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseOptionalArgument();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseOptionalArgument();
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseRequiredArgument();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c110(s2, s3, s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c80;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c81);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 5) === peg$c111) {
                s3 = peg$c111;
                peg$currPos += 5;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c112);
                }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 3) === peg$c113) {
                  s4 = peg$c113;
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c114);
                  }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = [];
                  if (peg$c115.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c116);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c115.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c116);
                        }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = input.substring(s4, peg$currPos);
                  } else {
                    s4 = s5;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s5 = peg$c117(s4);
                    if (s5) {
                      s5 = void 0;
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseOptionalArgument();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseOptionalArgument();
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parse__h();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$currPos;
                          peg$silentFails++;
                          if (input.charCodeAt(peg$currPos) === 123) {
                            s9 = peg$c15;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c16);
                            }
                          }
                          peg$silentFails--;
                          if (s9 !== peg$FAILED) {
                            peg$currPos = s8;
                            s8 = void 0;
                          } else {
                            s8 = peg$FAILED;
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseVerbatimFieldValue();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parseVerbatimFieldValue();
                              if (s10 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c118(s4, s6, s9, s10);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c80;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c81);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 5) === peg$c111) {
                  s3 = peg$c111;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c112);
                  }
                }
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 3) === peg$c113) {
                    s4 = peg$c113;
                    peg$currPos += 3;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c114);
                    }
                  }
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = void 0;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = [];
                    if (peg$c115.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c116);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$c115.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c116);
                          }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = input.substring(s4, peg$currPos);
                    } else {
                      s4 = s5;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s5 = peg$c119(s4);
                      if (s5) {
                        s5 = void 0;
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parseOptionalArgument();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parseOptionalArgument();
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parse__h();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$currPos;
                            peg$silentFails++;
                            if (input.charCodeAt(peg$currPos) === 123) {
                              s9 = peg$c15;
                              peg$currPos++;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c16);
                              }
                            }
                            peg$silentFails--;
                            if (s9 !== peg$FAILED) {
                              peg$currPos = s8;
                              s8 = void 0;
                            } else {
                              s8 = peg$FAILED;
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseVerbatimFieldValue();
                              if (s9 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c120(s4, s6, s9);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c80;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c81);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 5) === peg$c111) {
                    s3 = peg$c111;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c112);
                    }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c113) {
                      s4 = peg$c113;
                      peg$currPos += 3;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c114);
                      }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = [];
                      if (peg$c115.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c116);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          if (peg$c115.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c116);
                            }
                          }
                        }
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = input.substring(s4, peg$currPos);
                      } else {
                        s4 = s5;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s5 = peg$c121(s4);
                        if (s5) {
                          s5 = void 0;
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parseOptionalArgument();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parseOptionalArgument();
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parse__h();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseRequiredArgument();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseRequiredArgument();
                                if (s9 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c122(s4, s6, s8, s9);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s1 = peg$c80;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c81);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 5) === peg$c111) {
                      s3 = peg$c111;
                      peg$currPos += 5;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c112);
                      }
                    }
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = void 0;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 3) === peg$c113) {
                        s4 = peg$c113;
                        peg$currPos += 3;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c114);
                        }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        s5 = [];
                        if (peg$c115.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c116);
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            if (peg$c115.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c116);
                              }
                            }
                          }
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s4 = input.substring(s4, peg$currPos);
                        } else {
                          s4 = s5;
                        }
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s5 = peg$c123(s4);
                          if (s5) {
                            s5 = void 0;
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parseOptionalArgument();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parseOptionalArgument();
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parse__h();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseRequiredArgument();
                                if (s8 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c124(s4, s6, s8);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s1 = peg$c80;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c81);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 5) === peg$c111) {
                        s3 = peg$c111;
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c112);
                        }
                      }
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 3) === peg$c113) {
                          s4 = peg$c113;
                          peg$currPos += 3;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c114);
                          }
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                          s3 = void 0;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = [];
                          if (peg$c115.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c116);
                            }
                          }
                          if (s6 !== peg$FAILED) {
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              if (peg$c115.test(input.charAt(peg$currPos))) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c116);
                                }
                              }
                            }
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseOptionalArgument();
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              s6 = peg$parseOptionalArgument();
                            }
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parse__();
                              if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c125(s4, s5);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseOptionalArgument() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c126;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c127);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__h();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              if (peg$c128.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c129);
                }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c128.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c129);
                    }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = input.substring(s3, peg$currPos);
              } else {
                s3 = s4;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__h();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c130;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c131);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c132(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseRequiredArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parse__h();
          if (s1 !== peg$FAILED) {
            if (peg$c133.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c134);
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c135(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBlock();
            if (s1 === peg$FAILED) {
              s1 = peg$parseCommand();
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c52(s1);
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parseVariableName() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (peg$c136.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c137);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c138.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c139);
              }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c138.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c139);
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          return s0;
        }
        function peg$parseSimpleDiacritic() {
          var s0;
          if (peg$c140.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c141);
            }
          }
          return s0;
        }
        function peg$parseExtendedDiacritic() {
          var s0;
          if (peg$c142.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c143);
            }
          }
          return s0;
        }
        function peg$parseFieldSeparator() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c144;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c145);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseFieldTerminator() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c37;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c38);
              }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__h();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseLineComment();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseEOL();
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseLineComment();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseEOL();
                  }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseConcat() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 35) {
              s2 = peg$c146;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c147);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEOL() {
          var s0;
          if (peg$c148.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c149);
            }
          }
          return s0;
        }
        function peg$parse_h() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c151.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c151.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c152);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c150);
            }
          }
          return s0;
        }
        function peg$parse__h() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c151.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c152);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c151.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c152);
              }
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c153);
            }
          }
          return s0;
        }
        function peg$parse_v() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c148.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c149);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c148.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c149);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c154);
            }
          }
          return s0;
        }
        function peg$parse__v() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c148.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c149);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c148.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c149);
              }
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c155);
            }
          }
          return s0;
        }
        function peg$parse_() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c157.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c158);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c157.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c158);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c156);
            }
          }
          return s0;
        }
        function peg$parse__() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c157.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c158);
            }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c157.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c158);
              }
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c159);
            }
          }
          return s0;
        }
        const markup = {
          sl: "italics",
          em: "italics",
          it: "italics",
          itshape: "italics",
          bf: "bold",
          bfseries: "bold",
          sc: "smallCaps",
          scshape: "smallCaps",
          tt: "fixedWidth",
          rm: "roman",
          sf: "sansSerif",
          verb: "verbatim"
        };
        const unnestFields = (options.unnestFields || []).map((field) => field.toLowerCase());
        const verbatimFields = (options.verbatimFields || ["urlraw", "url", "doi", "file", "files", "eprint", "verba", "verbb", "verbc"]).map((field) => typeof field === "string" ? field.toLowerCase() : field);
        const verbatimCommands = options.verbatimCommands || ["texttt", "url", "href"];
        function isVerbatimField(name) {
          return verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
        }
        function normalizeWhitespace(textArr) {
          return textArr.reduce((prev, curr) => {
            if (/\s/.test(curr)) {
              if (/\s/.test(prev[prev.length - 1])) {
                return prev;
              } else {
                return prev + " ";
              }
            }
            return prev + curr;
          }, "");
        }
        const has_arguments = {
          ElsevierGlyph: 1,
          end: 1,
          begin: 1,
          bibcyr: 1,
          bibstring: 1,
          chsf: 1,
          cite: 1,
          cyrchar: 1,
          ding: 1,
          emph: 1,
          enquote: 1,
          frac: 2,
          href: 2,
          hspace: 1,
          mathrm: 1,
          mbox: 1,
          mkbibbold: 1,
          mkbibemph: 1,
          mkbibitalic: 1,
          mkbibquote: 1,
          newcommand: 2,
          noopsort: 1,
          ocirc: 1,
          section: 1,
          sb: 1,
          sp: 1,
          subsection: 1,
          subsubsection: 1,
          subsubsubsection: 1,
          t: 1,
          textbf: 1,
          textit: 1,
          textrm: 1,
          textsc: 1,
          textsubscript: 1,
          textsuperscript: 1,
          texttt: 1,
          url: 1,
          vphantom: 1,
          vspace: 1
        };
        if (options.combiningDiacritics) {
          for (const cmd of options.combiningDiacritics) {
            has_arguments[cmd] = 1;
          }
        }
        function say() {
          console.log(JSON.stringify(Array.from(arguments), null, 2));
          return true;
        }
        function peek(n) {
          return input.substr(peg$savedPos, n);
        }
        const math = {
          on: false,
          set: function(state) {
            this.on = state;
            return true;
          }
        };
        function basicTextConversions(node) {
          if (node.kind !== "Text")
            throw new Error(node.kind + " is not a Text node");
          switch (node.mode) {
            case "verbatim":
              break;
            case "math":
              node.value = node.value.replace(/~/g, "\xA0");
              break;
            case "text":
              node.value = node.value.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/</g, "\xA1").replace(/>/g, "\xBF").replace(/~/g, "\xA0").replace(/``/g, options.markup.enquote.open).replace(/''/g, options.markup.enquote.close);
              break;
            default:
              throw new Error(`Unexpected text mode ${node.mode}`);
          }
          return node;
        }
        function protect(v) {
          let source2;
          if (Array.isArray(v)) {
            source2 = v.map((e) => e.source).join("");
          } else {
            v = [v];
            source2 = v.source;
          }
          return {
            kind: "Block",
            value: v,
            markup: {},
            case: "protect",
            source: source2
          };
        }
        function handle_markup_switches(block) {
          const value = block.value;
          if (!Array.isArray(value))
            return block;
          block.value = [];
          const pseudo = {
            block: null,
            markup: {}
          };
          function pseudo_block() {
            pseudo.block = {
              kind: "Block",
              loc: location(),
              source: "",
              value: [],
              markup: JSON.parse(JSON.stringify(pseudo.markup)),
              pseudo: true
            };
            block.value.push(pseudo.block);
          }
          for (const node of value) {
            if (node.kind === "Environment" || node.kind === "Block") {
              block.value.push(node);
              if (Object.keys(pseudo.markup).length) {
                pseudo_block();
              } else {
                pseudo.block = null;
              }
              continue;
            }
            if (node.kind === "RegularCommand" && markup[node.command]) {
              if (pseudo.markup.italics) {
                delete pseudo.markup.italics;
                if (markup[node.command] !== "italics")
                  pseudo.markup[markup[node.command]] = true;
              } else {
                pseudo.markup[markup[node.command]] = true;
              }
              if (Object.keys(pseudo.markup).length) {
                pseudo_block();
              } else {
                pseudo.block = null;
              }
            }
            if (pseudo.block) {
              pseudo.block.source += node.source;
              pseudo.block.value.push(node);
            } else {
              block.value.push(node);
            }
          }
          block.value = block.value.filter((node) => !(node.pseudo && node.value.length === 0));
          return block;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });

  // node_modules/@retorquere/bibtex-parser/chunker.js
  var require_chunker = __commonJS({
    "node_modules/@retorquere/bibtex-parser/chunker.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.promises = exports.parse = void 0;
      var ParseError = class extends Error {
        constructor(message, parser) {
          message += ` @ ${parser.pos}`;
          if (parser.parsing)
            message += ` in ${JSON.stringify(parser.parsing)}`;
          super(message);
          this.name = "ParseError";
        }
      };
      var letter = new RegExp("[" + [
        /\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A/.source,
        /\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC/.source,
        /\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A/.source,
        /\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F/.source,
        /\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source
      ].join("") + "]");
      var BibtexParser = class {
        constructor() {
          this.pos = 0;
          this.entries = 0;
          this.parsing = null;
          this.chunks = [];
        }
        parse(input, options = {}) {
          this.max_entries = options.max_entries || 0;
          this.input = input;
          this.bibtex();
          return this.chunks;
        }
        async parseAsync(input, options = {}) {
          this.max_entries = options.max_entries || 0;
          this.input = input;
          await this.bibtexAsync();
          return this.chunks;
        }
        isWhitespace(s, horizontalOnly = false) {
          return s === " " || s === "	" || !horizontalOnly && (s === "\r" || s === "\n");
        }
        match(s) {
          this.skipWhitespace();
          if (this.input.substr(this.pos, s.length) !== s) {
            throw new ParseError(`Token mismatch, expected ${JSON.stringify(s)}, found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
          }
          this.pos += s.length;
          this.skipWhitespace();
        }
        tryMatch(s) {
          this.skipWhitespace();
          return this.input.substr(this.pos, s.length) === s;
        }
        skipWhitespace() {
          while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
            this.pos++;
          if (this.input[this.pos] === "%") {
            while (this.pos < this.input.length && this.input[this.pos] !== "\n")
              this.pos++;
            while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
              this.pos++;
          }
        }
        value_braces() {
          let bracecount = 0;
          this.match("{");
          const start = this.pos;
          let math = false;
          while (true) {
            switch (this.input[this.pos]) {
              case "\\":
                this.pos += 1;
                break;
              case "{":
                bracecount++;
                break;
              case "}":
                if (bracecount === 0) {
                  if (math)
                    throw new ParseError("Unclosed math section", this);
                  this.pos++;
                  return this.input.substring(start, this.pos - 1);
                }
                bracecount--;
                break;
              case "$":
                math = !math;
                break;
            }
            this.pos++;
            if (this.pos >= this.input.length) {
              throw new ParseError(`Unterminated brace-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
            }
          }
        }
        value_quotes() {
          this.match('"');
          const start = this.pos;
          let bracecount = 0;
          while (true) {
            switch (this.input[this.pos]) {
              case "\\":
                this.pos += 1;
                break;
              case "{":
                bracecount++;
                break;
              case "}":
                bracecount--;
                break;
              case '"':
                if (bracecount <= 0) {
                  this.pos++;
                  return this.input.substring(start, this.pos - 1);
                }
            }
            this.pos++;
            if (this.pos >= this.input.length) {
              throw new ParseError(`Unterminated quote-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
            }
          }
        }
        single_value() {
          if (this.tryMatch("{")) {
            return this.value_braces();
          } else if (this.tryMatch('"')) {
            return this.value_quotes();
          } else {
            return this.key();
          }
        }
        value() {
          const values = [];
          values.push(this.single_value());
          while (this.tryMatch("#")) {
            this.match("#");
            values.push(this.single_value());
          }
          return values.join("");
        }
        key(allowUnicode = false) {
          const start = this.pos;
          while (true) {
            if (this.pos === this.input.length) {
              throw new ParseError("Runaway key", this);
            }
            if (this.input[this.pos].match(/['a-zA-Z0-9&;_:\\./-]/)) {
              this.pos++;
            } else if (allowUnicode && this.input[this.pos].match(letter)) {
              this.pos++;
            } else {
              return this.input.substring(start, this.pos);
            }
          }
        }
        key_equals_value() {
          const key = this.key();
          if (!this.tryMatch("=")) {
            throw new ParseError(`... = value expected, equals sign missing: ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
          }
          this.match("=");
          const val = this.value();
          return [key, val];
        }
        key_value_list() {
          this.key_equals_value();
          while (this.tryMatch(",")) {
            this.match(",");
            if (this.tryMatch("}")) {
              break;
            }
            this.key_equals_value();
          }
        }
        entry(_d) {
          this.parsing = this.key(true);
          this.match(",");
          this.key_value_list();
        }
        directive() {
          this.match("@");
          return `@${this.key()}`.toLowerCase();
        }
        string() {
          this.key_equals_value();
        }
        preamble() {
          this.value();
        }
        comment() {
          while (this.isWhitespace(this.input[this.pos], true))
            this.pos++;
          if (this.input[this.pos] === "{") {
            this.value_braces();
            return;
          }
          while (this.input[this.pos] !== "\n" && this.pos < this.input.length)
            this.pos++;
        }
        hasMore() {
          if (this.max_entries && this.entries >= this.max_entries)
            return false;
          return this.pos < this.input.length;
        }
        bibtex() {
          while (this.hasMore()) {
            this.parseNext();
          }
        }
        bibtexAsync() {
          return this.hasMore() ? new Promise((resolve) => resolve(this.parseNext())).then(() => this.bibtexAsync()) : Promise.resolve(null);
        }
        parseNext() {
          const chunk = {
            offset: {
              pos: this.pos,
              line: this.input.substring(0, this.pos).split("\n").length - 1
            },
            error: null,
            text: null
          };
          this.skipWhitespace();
          if (this.pos >= this.input.length)
            return;
          let guard = "";
          try {
            const d = this.directive();
            switch (d) {
              case "@string":
                this.match("{");
                this.string();
                this.match("}");
                chunk.stringDeclaration = true;
                break;
              case "@preamble":
                this.match("{");
                this.preamble();
                this.match("}");
                chunk.preamble = true;
                break;
              case "@comment":
                this.comment();
                chunk.comment = true;
                break;
              default:
                if (this.tryMatch("{")) {
                  guard = "{}";
                } else if (this.tryMatch("(")) {
                  guard = "()";
                } else {
                  throw new ParseError(`Token mismatch, expected '{' or '(', found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
                }
                this.match(guard[0]);
                this.entry(d);
                this.match(guard[1]);
                chunk.entry = true;
                this.entries++;
                break;
            }
          } catch (err) {
            if (err.name !== "ParseError")
              throw err;
            chunk.error = err.message;
            this.pos = chunk.offset.pos + 1;
            while (this.pos < this.input.length && this.input[this.pos] !== "@")
              this.pos++;
          }
          const text = this.input.substring(chunk.offset.pos, this.pos);
          const last = this.chunks.length - 1;
          if (chunk.error && this.chunks.length && this.chunks[last].error) {
            this.chunks[last].text += text;
          } else {
            chunk.text = text;
            this.chunks.push(chunk);
          }
        }
      };
      function parse2(input, options = {}) {
        return new BibtexParser().parse(input, options);
      }
      exports.parse = parse2;
      exports.promises = {
        async parse(input, options = {}) {
          return await new BibtexParser().parseAsync(input, options);
        }
      };
    }
  });

  // node_modules/@retorquere/bibtex-parser/jabref.js
  var require_jabref = __commonJS({
    "node_modules/@retorquere/bibtex-parser/jabref.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = void 0;
      function decode(s, sep = ";") {
        s = s.replace(/\r?\n/g, "");
        let pos = 0;
        const records = [""];
        while (pos < s.length) {
          switch (s[pos]) {
            case "\\":
              pos++;
              records[0] += s[pos];
              break;
            case sep:
              records.unshift("");
              break;
            default:
              records[0] += s[pos];
          }
          pos++;
        }
        return records.reverse().filter((record) => record);
      }
      function parse2(comments) {
        const result = {
          root: [],
          groups: {}
        };
        const levels = [];
        const decoded = {
          fileDirectory: null,
          groupsversion: null,
          groupstree: null,
          grouping: null,
          databaseType: null
        };
        comments = comments.filter((comment) => {
          const m = comment.match(/^jabref-meta:\s*([^:]+):([\s\S]*)/);
          if (m) {
            decoded[m[1]] = decode(m[2]);
            return false;
          }
          return true;
        });
        if (decoded.groupsversion)
          result.groupsversion = parseInt(decoded.groupsversion[0].trim()) || decoded.groupsversion[0];
        if (decoded.fileDirectory)
          result.fileDirectory = decoded.fileDirectory[0];
        if (decoded.databaseType)
          result.databaseType = decoded.databaseType[0];
        for (const tree of ["groupstree", "grouping"]) {
          if (!decoded[tree])
            continue;
          for (const encoded of decoded[tree]) {
            const fields = decode(encoded);
            const level_type_name = decode(fields.shift(), ":");
            const m = /^([0-9]+) (.+)/.exec(level_type_name[0]);
            if (!m)
              break;
            const level = parseInt(m[1]);
            const type2 = m[2];
            if (type2 === "AllEntriesGroup")
              continue;
            const name = level_type_name[1];
            const intersection = decode(fields.shift())[0];
            const keys = tree === "grouping" ? [] : fields.map((field) => decode(field)[0]);
            const group = {
              name,
              entries: keys,
              groups: []
            };
            result.groups[name] = result.groups[name] || group;
            if (levels.length < level) {
              levels.push(group);
            } else {
              levels[level - 1] = group;
            }
            if (level === 1) {
              result.root.push(group);
            } else {
              const parent = levels[level - 2];
              switch (intersection) {
                case "0":
                  break;
                case "1":
                  group.entries = group.entries.filter((key) => parent.entries.includes(key));
                  break;
                case "2":
                  group.entries = group.entries.concat(parent.entries.filter((key) => !group.entries.includes(key)));
                  break;
              }
              levels[level - 2].groups.push(group);
            }
          }
        }
        return { comments, jabref: result };
      }
      exports.parse = parse2;
    }
  });

  // node_modules/unicode2latex/tables/ascii.json
  var require_ascii = __commonJS({
    "node_modules/unicode2latex/tables/ascii.json"(exports, module) {
      module.exports = {
        "#": { math: "\\#", text: "\\#" },
        $: { math: "\\$", text: "\\$" },
        "%": { math: "\\%", text: "\\%" },
        "&": { math: "\\&", text: "\\&" },
        "/\u200B": { text: "\\slash", commandspacer: true },
        "<": { math: "<" },
        ">": { math: ">" },
        "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
        "^": { math: "\\sphat", text: "\\^" },
        _: { math: "\\_", text: "\\_" },
        i\uFE20a\uFE21: { text: "\\t{ia}" },
        "{": { math: "\\lbrace", text: "\\{" },
        "}": { math: "\\rbrace", text: "\\}" },
        "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
        "\xA0": { math: "~", space: true, text: "~" },
        "\xA1": { text: "\\textexclamdown", commandspacer: true },
        "\xA2": { math: "\\cent", text: "\\textcent", commandspacer: true, textpackages: ["textcomp"] },
        "\xA3": { math: "\\pounds", text: "\\textsterling", commandspacer: true, textpackages: ["textcomp"] },
        "\xA4": { text: "\\textcurrency", commandspacer: true, textpackages: ["textcomp"] },
        "\xA5": { math: "\\yen", text: "\\textyen", commandspacer: true, textpackages: ["textcomp"] },
        "\xA6": { text: "\\textbrokenbar", commandspacer: true, textpackages: ["textcomp"] },
        "\xA7": { text: "\\textsection", commandspacer: true, textpackages: ["textcomp"] },
        "\xA8": { math: "\\spddot", text: "\\textasciidieresis", commandspacer: true },
        "\xA9": { text: "\\textcopyright", commandspacer: true, textpackages: ["textcomp"] },
        \u00AA: { text: "\\textordfeminine", commandspacer: true, textpackages: ["textcomp"] },
        "\xAB": { text: "\\guillemotleft", commandspacer: true },
        "\xAC": { math: "\\lnot" },
        "\xAD": { math: "\\-", text: "\\-" },
        "\xAE": { math: "\\circledR", text: "\\textregistered", commandspacer: true, textpackages: ["textcomp"] },
        "\xAF": { text: "\\textasciimacron", commandspacer: true },
        "\xB0": { math: "^\\circ", text: "\\textdegree", commandspacer: true, textpackages: ["textcomp"] },
        "\xB1": { math: "\\pm" },
        "\xB2": { math: "^{2}" },
        "\xB3": { math: "^{3}" },
        "\xB4": { text: "\\textasciiacute", commandspacer: true },
        \u00B5: { text: "\\textmu", commandspacer: true },
        "\xB6": { text: "\\textparagraph", commandspacer: true, textpackages: ["textcomp"] },
        "\xB7": { math: "\\cdot" },
        "\xB8": { text: "\\c", commandspacer: true },
        "\xB9": { math: "^{1}" },
        \u00BA: { text: "\\textordmasculine", commandspacer: true, textpackages: ["textcomp"] },
        "\xBB": { text: "\\guillemotright", commandspacer: true },
        "\xBC": { math: "\\frac{1}{4}" },
        "\xBD": { math: "\\frac{1}{2}" },
        "\xBE": { math: "\\frac{3}{4}" },
        "\xBF": { text: "\\textquestiondown", commandspacer: true },
        \u00C0: { text: "\\`A" },
        \u00C1: { text: "\\'A" },
        \u00C2: { text: "\\^A" },
        \u00C3: { text: "\\~A" },
        \u00C4: { text: '\\"A' },
        \u00C5: { text: "\\AA", commandspacer: true },
        \u00C6: { text: "\\AE", commandspacer: true },
        \u00C7: { text: "\\c{C}" },
        \u00C8: { text: "\\`E" },
        \u00C9: { text: "\\'E" },
        \u00CA: { text: "\\^E" },
        \u00CB: { text: '\\"E' },
        \u00CC: { text: "\\`I" },
        \u00CD: { text: "\\'I" },
        \u00CE: { text: "\\^I" },
        \u00CF: { text: '\\"I' },
        \u00D0: { text: "\\DH", commandspacer: true },
        \u00D1: { text: "\\~N" },
        \u00D2: { text: "\\`O" },
        \u00D3: { text: "\\'O" },
        \u00D4: { text: "\\^O" },
        \u00D5: { text: "\\~O" },
        \u00D6: { text: '\\"O' },
        "\xD7": { math: "\\times", text: "\\texttimes", commandspacer: true },
        \u00D8: { text: "\\O", commandspacer: true },
        \u00D9: { text: "\\`U" },
        \u00DA: { text: "\\'U" },
        \u00DB: { text: "\\^U" },
        \u00DC: { text: '\\"U' },
        \u00DD: { text: "\\'Y" },
        \u00DE: { text: "\\TH", commandspacer: true },
        \u00DF: { text: "\\ss", commandspacer: true },
        \u00E0: { text: "\\`a" },
        \u00E1: { text: "\\'a" },
        \u00E2: { text: "\\^a" },
        \u00E3: { text: "\\~a" },
        \u00E4: { text: '\\"a' },
        \u00E5: { text: "\\aa", commandspacer: true },
        \u00E6: { text: "\\ae", commandspacer: true },
        \u00E7: { text: "\\c{c}" },
        \u00E8: { text: "\\`e" },
        \u00E9: { text: "\\'e" },
        \u00EA: { text: "\\^e" },
        \u00EB: { text: '\\"e' },
        \u00EC: { text: "\\`i" },
        \u00ED: { text: "\\'i" },
        \u00EE: { text: "\\^i" },
        \u00EF: { text: '\\"i' },
        \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "\\dh", commandspacer: true },
        \u00F1: { text: "\\~n" },
        \u00F2: { text: "\\`o" },
        \u00F3: { text: "\\'o" },
        \u00F4: { text: "\\^o" },
        \u00F5: { text: "\\~o" },
        \u00F6: { text: '\\"o' },
        "\xF7": { math: "\\div" },
        \u00F8: { text: "\\o", commandspacer: true },
        \u00F9: { text: "\\`u" },
        \u00FA: { text: "\\'u" },
        \u00FB: { text: "\\^u" },
        \u00FC: { text: '\\"u' },
        \u00FD: { text: "\\'y" },
        \u00FE: { text: "\\th", commandspacer: true },
        \u00FF: { text: '\\"y' },
        \u0100: { text: "\\=A" },
        \u0101: { text: "\\=a" },
        \u0102: { text: "\\u{A}" },
        \u0103: { text: "\\u{a}" },
        \u0104: { text: "\\k{A}" },
        \u0105: { text: "\\k{a}" },
        \u0106: { text: "\\'C" },
        \u0107: { text: "\\'c" },
        \u0108: { text: "\\^C" },
        \u0109: { text: "\\^c" },
        \u010A: { text: "\\.C" },
        \u010B: { text: "\\.c" },
        \u010C: { text: "\\v{C}" },
        \u010D: { text: "\\v{c}" },
        \u010E: { text: "\\v{D}" },
        \u010F: { text: "\\v{d}" },
        \u0110: { text: "\\DJ", commandspacer: true },
        \u0111: { text: "\\dj", commandspacer: true },
        \u0112: { text: "\\=E" },
        \u0113: { text: "\\=e" },
        \u0114: { text: "\\u{E}" },
        \u0115: { text: "\\u{e}" },
        \u0116: { text: "\\.E" },
        \u0117: { text: "\\.e" },
        \u0118: { text: "\\k{E}" },
        \u0119: { text: "\\k{e}" },
        \u011A: { text: "\\v{E}" },
        \u011B: { text: "\\v{e}" },
        \u011C: { text: "\\^G" },
        \u011D: { text: "\\^g" },
        \u011E: { text: "\\u{G}" },
        \u011F: { text: "\\u{g}" },
        \u0120: { text: "\\.G" },
        \u0121: { text: "\\.g" },
        \u0122: { text: "\\c{G}" },
        \u0123: { text: "\\c{g}" },
        \u0124: { text: "\\^H" },
        \u0125: { text: "\\^h" },
        \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
        \u0127: { math: "\\Elzxh" },
        \u0128: { text: "\\~I" },
        \u0129: { text: "\\~i" },
        \u012A: { text: "\\=I" },
        \u012B: { text: "\\=i" },
        \u012C: { text: "\\u{I}" },
        \u012D: { text: "{\\u \\i}" },
        \u012E: { text: "\\k{I}" },
        \u012F: { text: "\\k{i}" },
        \u0130: { text: "\\.I" },
        \u0131: { math: "\\imath", text: "\\i", commandspacer: true },
        \u0132: { text: "IJ" },
        \u0133: { text: "ij" },
        \u0134: { text: "\\^J" },
        \u0135: { text: "\\^\\j", commandspacer: true },
        \u0136: { text: "\\c{K}" },
        \u0137: { text: "\\c{k}" },
        \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
        \u0139: { text: "\\'L" },
        \u013A: { text: "\\'l" },
        \u013B: { text: "\\c{L}" },
        \u013C: { text: "\\c{l}" },
        \u013D: { text: "\\v{L}" },
        \u013E: { text: "\\v{l}" },
        \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
        \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
        \u0141: { text: "\\L", commandspacer: true },
        \u0142: { text: "\\l", commandspacer: true },
        \u0143: { text: "\\'N" },
        \u0144: { text: "\\'n" },
        \u0145: { text: "\\c{N}" },
        \u0146: { text: "\\c{n}" },
        \u0147: { text: "\\v{N}" },
        \u0148: { text: "\\v{n}" },
        \u0149: { text: "'n" },
        \u014A: { text: "\\NG", commandspacer: true },
        \u014B: { text: "\\ng", commandspacer: true },
        \u014C: { text: "\\=O" },
        \u014D: { text: "\\=o" },
        \u014E: { text: "\\u{O}" },
        \u014F: { text: "\\u{o}" },
        \u0150: { text: "\\H{O}" },
        \u0151: { text: "\\H{o}" },
        \u0152: { text: "\\OE", commandspacer: true },
        \u0153: { text: "\\oe", commandspacer: true },
        \u0154: { text: "\\'R" },
        \u0155: { text: "\\'r" },
        \u0156: { text: "\\c{R}" },
        \u0157: { text: "\\c{r}" },
        \u0158: { text: "\\v{R}" },
        \u0159: { text: "\\v{r}" },
        \u015A: { text: "\\'S" },
        \u015B: { text: "\\'s" },
        \u015C: { text: "\\^S" },
        \u015D: { text: "\\^s" },
        \u015E: { text: "\\c{S}" },
        \u015F: { text: "\\c{s}" },
        \u0160: { text: "\\v{S}" },
        \u0161: { text: "\\v{s}" },
        \u0162: { text: "\\c{T}" },
        \u0163: { text: "\\c{t}" },
        \u0164: { text: "\\v{T}" },
        \u0165: { text: "\\v{t}" },
        \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
        \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
        \u0168: { text: "\\~U" },
        \u0169: { text: "\\~u" },
        \u016A: { text: "\\=U" },
        \u016B: { text: "\\=u" },
        \u016C: { text: "\\u{U}" },
        \u016D: { text: "\\u{u}" },
        \u016E: { text: "\\r{U}" },
        \u016F: { text: "\\r{u}" },
        \u0170: { text: "\\H{U}" },
        \u0171: { text: "\\H{u}" },
        \u0172: { text: "\\k{U}" },
        \u0173: { text: "\\k{u}" },
        \u0174: { text: "\\^W" },
        \u0175: { text: "\\^w" },
        \u0176: { text: "\\^Y" },
        \u0177: { text: "\\^y" },
        \u0178: { text: '\\"Y' },
        \u0179: { text: "\\'Z" },
        \u017A: { text: "\\'z" },
        \u017B: { text: "\\.Z" },
        \u017C: { text: "\\.z" },
        \u017D: { text: "\\v{Z}" },
        \u017E: { text: "\\v{z}" },
        \u017F: { text: "s" },
        \u0192: { math: "f" },
        \u0195: { text: "\\texthvlig", commandspacer: true },
        \u019E: { text: "\\textnrleg", commandspacer: true },
        \u01AA: { text: "\\textesh", commandspacer: true },
        \u01B5: { math: "\\Zbar" },
        \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
        \u01C2: { text: "\\textdoublepipe", commandspacer: true },
        \u01CD: { text: "\\v{A}" },
        \u01CE: { text: "\\v{a}" },
        \u01CF: { text: "\\v{I}" },
        \u01D0: { text: "\\v{i}" },
        \u01D1: { text: "\\v{O}" },
        \u01D2: { text: "\\v{o}" },
        \u01D3: { text: "\\v{U}" },
        \u01D4: { text: "\\v{u}" },
        \u01E6: { text: "\\v{G}" },
        \u01E7: { text: "\\v{g}" },
        \u01E8: { text: "\\v{K}" },
        \u01E9: { text: "\\v{k}" },
        \u01EA: { text: "\\k{O}" },
        \u01EB: { text: "\\k{o}" },
        \u01F0: { text: "\\v{j}" },
        \u01F4: { text: "\\'G" },
        \u01F5: { text: "\\'g" },
        \u0228: { text: "\\c{E}" },
        \u0229: { text: "\\c{e}" },
        "\u0237": { math: "\\jmath" },
        \u0250: { math: "\\Elztrna" },
        \u0252: { math: "\\Elztrnsa" },
        \u0254: { math: "\\Elzopeno" },
        \u0256: { math: "\\Elzrtld" },
        \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
        \u0259: { math: "\\Elzschwa" },
        \u025B: { math: "\\varepsilon" },
        \u0261: { text: "g" },
        \u0263: { math: "\\Elzpgamma" },
        \u0264: { math: "\\Elzpbgam" },
        \u0265: { math: "\\Elztrnh" },
        \u026C: { math: "\\Elzbtdl" },
        \u026D: { math: "\\Elzrtll" },
        \u026F: { math: "\\Elztrnm" },
        \u0270: { math: "\\Elztrnmlr" },
        \u0271: { math: "\\Elzltlmr" },
        \u0272: { text: "\\Elzltln", commandspacer: true },
        \u0273: { math: "\\Elzrtln" },
        \u0277: { math: "\\Elzclomeg" },
        \u0278: { text: "\\textphi", commandspacer: true },
        \u0279: { math: "\\Elztrnr" },
        \u027A: { math: "\\Elztrnrl" },
        \u027B: { math: "\\Elzrttrnr" },
        \u027C: { math: "\\Elzrl" },
        \u027D: { math: "\\Elzrtlr" },
        \u027E: { math: "\\Elzfhr" },
        \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
        \u0282: { math: "\\Elzrtls" },
        \u0283: { math: "\\Elzesh" },
        \u0287: { math: "\\Elztrnt" },
        \u0288: { math: "\\Elzrtlt" },
        \u028A: { math: "\\Elzpupsil" },
        \u028B: { math: "\\Elzpscrv" },
        \u028C: { math: "\\Elzinvv" },
        \u028D: { math: "\\Elzinvw" },
        \u028E: { math: "\\Elztrny" },
        \u0290: { math: "\\Elzrtlz" },
        \u0292: { math: "\\Elzyogh" },
        \u0294: { math: "\\Elzglst" },
        \u0295: { math: "\\Elzreglst" },
        \u0296: { math: "\\Elzinglst" },
        \u029E: { text: "\\textturnk", commandspacer: true },
        \u02A4: { math: "\\Elzdyogh" },
        \u02A7: { math: "\\Elztesh" },
        \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
        \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
        \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
        \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
        \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
        "\u02B9": { text: "'" },
        \u02BB: { text: "'" },
        \u02BC: { text: "'" },
        \u02BD: { text: "'" },
        \u02BF: { text: "\\lasp", commandspacer: true, textpackages: ["mathscinet"] },
        "\u02C6": { text: "\\textasciicircum", commandspacer: true },
        "\u02C7": { text: "\\textasciicaron", commandspacer: true },
        "\u02C8": { math: "\\Elzverts" },
        "\u02C9": { text: "-" },
        "\u02CC": { math: "\\Elzverti" },
        \u02D0: { math: "\\Elzlmrk" },
        \u02D1: { math: "\\Elzhlmrk" },
        "\u02D2": { math: "\\Elzsbrhr" },
        "\u02D3": { math: "\\Elzsblhr" },
        "\u02D4": { math: "\\Elzrais" },
        "\u02D5": { math: "\\Elzlow" },
        "\u02D8": { text: "\\textasciibreve", commandspacer: true },
        "\u02D9": { text: "\\textperiodcentered", commandspacer: true, textpackages: ["textcomp"] },
        "\u02DA": { text: "\\r{}" },
        "\u02DB": { text: "\\k{}" },
        "\u02DC": { text: "\\texttildelow", commandspacer: true },
        "\u02DD": { text: "\\H{}" },
        \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
        \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
        \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
        "\u02E5": { text: "\\tone{55}" },
        "\u02E6": { text: "\\tone{44}" },
        "\u02E7": { text: "\\tone{33}" },
        "\u02E8": { text: "\\tone{22}" },
        "\u02E9": { text: "\\tone{11}" },
        "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
        "\u0300\u0304": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0300": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0300\u0307": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0300": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
        "\u0301\u0304": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0301": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u030C": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030C\u0301": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
        "\u0302\u0307": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0302": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
        "\u0303\u0307": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0303": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
        "\u0305": { math: "\\overline", combiningdiacritic: true },
        "\u0306": { math: "\\breve", combiningdiacritic: true, text: "\\u", commandspacer: true },
        "\u0306\u0304": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0306": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
        "\u0307\u0301": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u0307": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0306": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0306\u0307": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
        "\u0309": { math: "\\ovhook" },
        "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "\\r", commandspacer: true },
        "\u030A\u0304": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u030A": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030B": { text: "\\H", commandspacer: true, combiningdiacritic: true },
        "\u030C": { math: "\\check", text: "\\v", commandspacer: true, combiningdiacritic: true },
        "\u030D": { text: "\\textvbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030E": { text: "\\textdoublevbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030F": { text: "\\textdoublegrave", commandspacer: true, combiningdiacritic: true },
        "\u0310": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
        "\u0312": { math: "\\oturnedcomma" },
        "\u0315": { math: "\\ocommatopright" },
        "\u0316": { text: "\\textsubgrave", commandspacer: true, combiningdiacritic: true },
        "\u0318": { text: "\\textadvancing", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0319": { text: "\\textretracting", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031A": { math: "\\droang", text: "\\textcorner", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031C": { text: "\\textsublhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031D": { text: "\\textraising", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031E": { text: "\\textlowering", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031F": { text: "\\textsubplus", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0321": { math: "\\Elzpalh" },
        "\u0322": { text: "\\Elzrh", commandspacer: true },
        "\u0323": { text: "\\d", commandspacer: true, combiningdiacritic: true },
        "\u0324": { text: "\\textsubumlaut", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0325": { text: "\\textsubring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0327": { text: "\\c", commandspacer: true, combiningdiacritic: true },
        "\u0328": { text: "\\k", commandspacer: true, combiningdiacritic: true },
        "\u0329": { text: "\\textsyllabic", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032A": { math: "\\Elzsbbrg", text: "\\textsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
        "\u032C": { text: "\\textsubwedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032F": { text: "\\textsubarch", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0330": { math: "\\utilde", text: "\\textsubtilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "\\textsubbar", commandspacer: true, textpackages: ["tipa"] },
        "\u0332": { math: "\\underline" },
        "\u0334": { text: "\\textsuperimposetilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0335": { text: "\\Elzxl", commandspacer: true },
        "\u0336": { text: "\\Elzbar", commandspacer: true },
        "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
        "\u0338": { math: "\\not" },
        "\u0339": { text: "\\textsubrhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033A": { text: "\\textinvsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033B": { text: "\\textsubsquare", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033C": { text: "\\textseagull", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033D": { text: "\\textovercross", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
        "\u0374": { text: "'" },
        "\u0375": { text: "," },
        "\u037E": { text: ";" },
        \u0386: { text: "\\'A" },
        \u0388: { text: "\\'E" },
        \u0389: { text: "\\'H" },
        \u038A: { text: "{\\'{}I}" },
        \u038C: { text: "{\\'{}O}" },
        \u038E: { math: "\\mathrm{'Y}" },
        \u038F: { math: "\\mathrm{'\\Omega}" },
        \u0390: { math: "\\acute{\\ddot{\\iota}}" },
        \u0391: { math: "A" },
        \u0392: { math: "B" },
        \u0393: { math: "\\Gamma" },
        \u0394: { math: "\\Delta" },
        \u0395: { math: "E" },
        \u0396: { math: "Z" },
        \u0397: { math: "H" },
        \u0398: { math: "\\Theta" },
        \u0399: { math: "I" },
        \u039A: { math: "K" },
        \u039B: { math: "\\Lambda" },
        \u039C: { math: "M" },
        \u039D: { math: "N" },
        \u039E: { math: "\\Xi" },
        \u039F: { math: "O" },
        \u03A0: { math: "\\Pi" },
        \u03A1: { math: "P" },
        \u03A3: { math: "\\Sigma" },
        \u03A4: { math: "T" },
        \u03A5: { math: "\\Upsilon" },
        \u03A6: { math: "\\Phi" },
        \u03A7: { math: "X" },
        \u03A8: { math: "\\Psi" },
        \u03A9: { math: "\\Omega" },
        \u03AA: { math: "\\mathrm{\\ddot{I}}" },
        \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
        \u03AC: { text: "{\\'$\\alpha$}" },
        \u03AD: { math: "\\acute{\\epsilon}" },
        \u03AE: { math: "\\acute{\\eta}" },
        \u03AF: { math: "\\acute{\\iota}" },
        \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
        \u03B1: { math: "\\alpha" },
        \u03B2: { math: "\\beta" },
        \u03B3: { math: "\\gamma" },
        \u03B4: { math: "\\delta" },
        \u03B5: { math: "\\epsilon" },
        \u03B6: { math: "\\zeta" },
        \u03B7: { math: "\\eta" },
        \u03B8: { math: "\\theta", text: "\\texttheta", commandspacer: true },
        \u03B9: { math: "\\iota" },
        \u03BA: { math: "\\kappa" },
        \u03BB: { math: "\\lambda" },
        \u03BC: { math: "\\mu" },
        \u03BD: { math: "\\nu" },
        \u03BE: { math: "\\xi" },
        \u03BF: { math: "o" },
        \u03C0: { math: "\\pi" },
        \u03C1: { math: "\\rho" },
        \u03C2: { math: "\\varsigma" },
        \u03C3: { math: "\\sigma" },
        \u03C4: { math: "\\tau" },
        \u03C5: { math: "\\upsilon" },
        \u03C6: { math: "\\varphi" },
        \u03C7: { math: "\\chi" },
        \u03C8: { math: "\\psi" },
        \u03C9: { math: "\\omega" },
        \u03CA: { math: "\\ddot{\\iota}" },
        \u03CB: { math: "\\ddot{\\upsilon}" },
        \u03CC: { text: "\\'o" },
        \u03CD: { math: "\\acute{\\upsilon}" },
        \u03CE: { math: "\\acute{\\omega}" },
        \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
        \u03D1: { math: "\\vartheta", text: "\\textvartheta", commandspacer: true },
        \u03D2: { math: "\\Upsilon" },
        \u03D5: { math: "\\phi" },
        \u03D6: { math: "\\varpi" },
        "\u03D8": { math: "\\Qoppa" },
        "\u03D9": { math: "\\qoppa" },
        \u03DA: { math: "\\Stigma" },
        \u03DB: { math: "\\stigma" },
        \u03DC: { math: "\\Digamma" },
        \u03DD: { math: "\\digamma" },
        \u03DE: { math: "\\Koppa" },
        \u03DF: { math: "\\koppa" },
        \u03E0: { math: "\\Sampi" },
        \u03E1: { math: "\\sampi" },
        \u03F0: { math: "\\varkappa" },
        \u03F1: { math: "\\varrho" },
        "\u03F4": { math: "\\upvarTheta", text: "\\textTheta", commandspacer: true },
        "\u03F5": { math: "\\epsilon" },
        "\u03F6": { math: "\\backepsilon" },
        \u0401: { text: "\\cyrchar\\CYRYO", commandspacer: true },
        \u0402: { text: "\\cyrchar\\CYRDJE", commandspacer: true },
        \u0403: { text: "\\cyrchar{\\'\\CYRG}" },
        \u0404: { text: "\\cyrchar\\CYRIE", commandspacer: true },
        \u0405: { text: "\\cyrchar\\CYRDZE", commandspacer: true },
        \u0406: { text: "\\cyrchar\\CYRII", commandspacer: true },
        \u0407: { text: "\\cyrchar\\CYRYI", commandspacer: true },
        \u0408: { text: "\\cyrchar\\CYRJE", commandspacer: true },
        \u0409: { text: "\\cyrchar\\CYRLJE", commandspacer: true },
        \u040A: { text: "\\cyrchar\\CYRNJE", commandspacer: true },
        \u040B: { text: "\\cyrchar\\CYRTSHE", commandspacer: true },
        \u040C: { text: "\\cyrchar{\\'\\CYRK}" },
        \u040E: { text: "\\cyrchar\\CYRUSHRT", commandspacer: true },
        \u040F: { text: "\\cyrchar\\CYRDZHE", commandspacer: true },
        \u0410: { text: "\\cyrchar\\CYRA", commandspacer: true },
        \u0411: { text: "\\cyrchar\\CYRB", commandspacer: true },
        \u0412: { text: "\\cyrchar\\CYRV", commandspacer: true },
        \u0413: { text: "\\cyrchar\\CYRG", commandspacer: true },
        \u0414: { text: "\\cyrchar\\CYRD", commandspacer: true },
        \u0415: { text: "\\cyrchar\\CYRE", commandspacer: true },
        \u0416: { text: "\\cyrchar\\CYRZH", commandspacer: true },
        \u0417: { text: "\\cyrchar\\CYRZ", commandspacer: true },
        \u0418: { text: "\\cyrchar\\CYRI", commandspacer: true },
        \u0419: { text: "\\cyrchar\\CYRISHRT", commandspacer: true },
        \u041A: { text: "\\cyrchar\\CYRK", commandspacer: true },
        \u041B: { text: "\\cyrchar\\CYRL", commandspacer: true },
        \u041C: { text: "\\cyrchar\\CYRM", commandspacer: true },
        \u041D: { text: "\\cyrchar\\CYRN", commandspacer: true },
        \u041E: { text: "\\cyrchar\\CYRO", commandspacer: true },
        \u041F: { text: "\\cyrchar\\CYRP", commandspacer: true },
        \u0420: { text: "\\cyrchar\\CYRR", commandspacer: true },
        \u0421: { text: "\\cyrchar\\CYRS", commandspacer: true },
        \u0422: { text: "\\cyrchar\\CYRT", commandspacer: true },
        \u0423: { text: "\\cyrchar\\CYRU", commandspacer: true },
        \u0424: { text: "\\cyrchar\\CYRF", commandspacer: true },
        \u0425: { text: "\\cyrchar\\CYRH", commandspacer: true },
        \u0426: { text: "\\cyrchar\\CYRC", commandspacer: true },
        \u0427: { text: "\\cyrchar\\CYRCH", commandspacer: true },
        \u0428: { text: "\\cyrchar\\CYRSH", commandspacer: true },
        \u0429: { text: "\\cyrchar\\CYRSHCH", commandspacer: true },
        \u042A: { text: "\\cyrchar\\CYRHRDSN", commandspacer: true },
        \u042B: { text: "\\cyrchar\\CYRERY", commandspacer: true },
        \u042C: { text: "\\cyrchar\\CYRSFTSN", commandspacer: true },
        \u042D: { text: "\\cyrchar\\CYREREV", commandspacer: true },
        \u042E: { text: "\\cyrchar\\CYRYU", commandspacer: true },
        \u042F: { text: "\\cyrchar\\CYRYA", commandspacer: true },
        \u0430: { text: "\\cyrchar\\cyra", commandspacer: true },
        \u0431: { text: "\\cyrchar\\cyrb", commandspacer: true },
        \u0432: { text: "\\cyrchar\\cyrv", commandspacer: true },
        \u0433: { text: "\\cyrchar\\cyrg", commandspacer: true },
        \u0434: { text: "\\cyrchar\\cyrd", commandspacer: true },
        \u0435: { text: "\\cyrchar\\cyre", commandspacer: true },
        \u0436: { text: "\\cyrchar\\cyrzh", commandspacer: true },
        \u0437: { text: "\\cyrchar\\cyrz", commandspacer: true },
        \u0438: { text: "\\cyrchar\\cyri", commandspacer: true },
        \u0439: { text: "\\cyrchar\\cyrishrt", commandspacer: true },
        \u043A: { text: "\\cyrchar\\cyrk", commandspacer: true },
        \u043B: { text: "\\cyrchar\\cyrl", commandspacer: true },
        \u043C: { text: "\\cyrchar\\cyrm", commandspacer: true },
        \u043D: { text: "\\cyrchar\\cyrn", commandspacer: true },
        \u043E: { text: "\\cyrchar\\cyro", commandspacer: true },
        \u043F: { text: "\\cyrchar\\cyrp", commandspacer: true },
        \u0440: { text: "\\cyrchar\\cyrr", commandspacer: true },
        \u0441: { text: "\\cyrchar\\cyrs", commandspacer: true },
        \u0442: { text: "\\cyrchar\\cyrt", commandspacer: true },
        \u0443: { text: "\\cyrchar\\cyru", commandspacer: true },
        \u0444: { text: "\\cyrchar\\cyrf", commandspacer: true },
        \u0445: { text: "\\cyrchar\\cyrh", commandspacer: true },
        \u0446: { text: "\\cyrchar\\cyrc", commandspacer: true },
        \u0447: { text: "\\cyrchar\\cyrch", commandspacer: true },
        \u0448: { text: "\\cyrchar\\cyrsh", commandspacer: true },
        \u0449: { text: "\\cyrchar\\cyrshch", commandspacer: true },
        \u044A: { text: "\\cyrchar\\cyrhrdsn", commandspacer: true },
        \u044B: { text: "\\cyrchar\\cyrery", commandspacer: true },
        \u044C: { text: "\\cyrchar\\cyrsftsn", commandspacer: true },
        \u044D: { text: "\\cyrchar\\cyrerev", commandspacer: true },
        \u044E: { text: "\\cyrchar\\cyryu", commandspacer: true },
        \u044F: { text: "\\cyrchar\\cyrya", commandspacer: true },
        \u0451: { text: "\\cyrchar\\cyryo", commandspacer: true },
        \u0452: { text: "\\cyrchar\\cyrdje", commandspacer: true },
        \u0453: { text: "\\cyrchar{\\'\\cyrg}" },
        \u0454: { text: "\\cyrchar\\cyrie", commandspacer: true },
        \u0455: { text: "\\cyrchar\\cyrdze", commandspacer: true },
        \u0456: { text: "\\cyrchar\\cyrii", commandspacer: true },
        \u0457: { text: "\\cyrchar\\cyryi", commandspacer: true },
        \u0458: { text: "\\cyrchar\\cyrje", commandspacer: true },
        \u0459: { text: "\\cyrchar\\cyrlje", commandspacer: true },
        \u045A: { text: "\\cyrchar\\cyrnje", commandspacer: true },
        \u045B: { text: "\\cyrchar\\cyrtshe", commandspacer: true },
        \u045C: { text: "\\cyrchar{\\'\\cyrk}" },
        \u045E: { text: "\\cyrchar\\cyrushrt", commandspacer: true },
        \u045F: { text: "\\cyrchar\\cyrdzhe", commandspacer: true },
        \u0460: { text: "\\cyrchar\\CYROMEGA", commandspacer: true },
        \u0461: { text: "\\cyrchar\\cyromega", commandspacer: true },
        \u0462: { text: "\\cyrchar\\CYRYAT", commandspacer: true },
        \u0464: { text: "\\cyrchar\\CYRIOTE", commandspacer: true },
        \u0465: { text: "\\cyrchar\\cyriote", commandspacer: true },
        \u0466: { text: "\\cyrchar\\CYRLYUS", commandspacer: true },
        \u0467: { text: "\\cyrchar\\cyrlyus", commandspacer: true },
        \u0468: { text: "\\cyrchar\\CYRIOTLYUS", commandspacer: true },
        \u0469: { text: "\\cyrchar\\cyriotlyus", commandspacer: true },
        \u046A: { text: "\\cyrchar\\CYRBYUS", commandspacer: true },
        \u046C: { text: "\\cyrchar\\CYRIOTBYUS", commandspacer: true },
        \u046D: { text: "\\cyrchar\\cyriotbyus", commandspacer: true },
        \u046E: { text: "\\cyrchar\\CYRKSI", commandspacer: true },
        \u046F: { text: "\\cyrchar\\cyrksi", commandspacer: true },
        \u0470: { text: "\\cyrchar\\CYRPSI", commandspacer: true },
        \u0471: { text: "\\cyrchar\\cyrpsi", commandspacer: true },
        \u0472: { text: "\\cyrchar\\CYRFITA", commandspacer: true },
        \u0474: { text: "\\cyrchar\\CYRIZH", commandspacer: true },
        \u0478: { text: "\\cyrchar\\CYRUK", commandspacer: true },
        \u0479: { text: "\\cyrchar\\cyruk", commandspacer: true },
        \u047A: { text: "\\cyrchar\\CYROMEGARND", commandspacer: true },
        \u047B: { text: "\\cyrchar\\cyromegarnd", commandspacer: true },
        \u047C: { text: "\\cyrchar\\CYROMEGATITLO", commandspacer: true },
        \u047D: { text: "\\cyrchar\\cyromegatitlo", commandspacer: true },
        \u047E: { text: "\\cyrchar\\CYROT", commandspacer: true },
        \u047F: { text: "\\cyrchar\\cyrot", commandspacer: true },
        \u0480: { text: "\\cyrchar\\CYRKOPPA", commandspacer: true },
        \u0481: { text: "\\cyrchar\\cyrkoppa", commandspacer: true },
        "\u0482": { text: "\\cyrchar\\cyrthousands", commandspacer: true },
        "\u0488": { text: "\\cyrchar\\cyrhundredthousands", commandspacer: true },
        "\u0489": { text: "\\cyrchar\\cyrmillions", commandspacer: true },
        \u048C: { text: "\\cyrchar\\CYRSEMISFTSN", commandspacer: true },
        \u048D: { text: "\\cyrchar\\cyrsemisftsn", commandspacer: true },
        \u048E: { text: "\\cyrchar\\CYRRTICK", commandspacer: true },
        \u048F: { text: "\\cyrchar\\cyrrtick", commandspacer: true },
        \u0490: { text: "\\cyrchar\\CYRGUP", commandspacer: true },
        \u0491: { text: "\\cyrchar\\cyrgup", commandspacer: true },
        \u0492: { text: "\\cyrchar\\CYRGHCRS", commandspacer: true },
        \u0493: { text: "\\cyrchar\\cyrghcrs", commandspacer: true },
        \u0494: { text: "\\cyrchar\\CYRGHK", commandspacer: true },
        \u0495: { text: "\\cyrchar\\cyrghk", commandspacer: true },
        \u0496: { text: "\\cyrchar\\CYRZHDSC", commandspacer: true },
        \u0497: { text: "\\cyrchar\\cyrzhdsc", commandspacer: true },
        \u0498: { text: "\\cyrchar\\CYRZDSC", commandspacer: true },
        \u0499: { text: "\\cyrchar\\cyrzdsc", commandspacer: true },
        \u049A: { text: "\\cyrchar\\CYRKDSC", commandspacer: true },
        \u049B: { text: "\\cyrchar\\cyrkdsc", commandspacer: true },
        \u049C: { text: "\\cyrchar\\CYRKVCRS", commandspacer: true },
        \u049D: { text: "\\cyrchar\\cyrkvcrs", commandspacer: true },
        \u049E: { text: "\\cyrchar\\CYRKHCRS", commandspacer: true },
        \u049F: { text: "\\cyrchar\\cyrkhcrs", commandspacer: true },
        \u04A0: { text: "\\cyrchar\\CYRKBEAK", commandspacer: true },
        \u04A1: { text: "\\cyrchar\\cyrkbeak", commandspacer: true },
        \u04A2: { text: "\\cyrchar\\CYRNDSC", commandspacer: true },
        \u04A3: { text: "\\cyrchar\\cyrndsc", commandspacer: true },
        \u04A4: { text: "\\cyrchar\\CYRNG", commandspacer: true },
        \u04A5: { text: "\\cyrchar\\cyrng", commandspacer: true },
        \u04A6: { text: "\\cyrchar\\CYRPHK", commandspacer: true },
        \u04A7: { text: "\\cyrchar\\cyrphk", commandspacer: true },
        \u04A8: { text: "\\cyrchar\\CYRABHHA", commandspacer: true },
        \u04A9: { text: "\\cyrchar\\cyrabhha", commandspacer: true },
        \u04AA: { text: "\\cyrchar\\CYRSDSC", commandspacer: true },
        \u04AB: { text: "\\cyrchar\\cyrsdsc", commandspacer: true },
        \u04AC: { text: "\\cyrchar\\CYRTDSC", commandspacer: true },
        \u04AD: { text: "\\cyrchar\\cyrtdsc", commandspacer: true },
        \u04AE: { text: "\\cyrchar\\CYRY", commandspacer: true },
        \u04AF: { text: "\\cyrchar\\cyry", commandspacer: true },
        \u04B0: { text: "\\cyrchar\\CYRYHCRS", commandspacer: true },
        \u04B1: { text: "\\cyrchar\\cyryhcrs", commandspacer: true },
        \u04B2: { text: "\\cyrchar\\CYRHDSC", commandspacer: true },
        \u04B3: { text: "\\cyrchar\\cyrhdsc", commandspacer: true },
        \u04B4: { text: "\\cyrchar\\CYRTETSE", commandspacer: true },
        \u04B5: { text: "\\cyrchar\\cyrtetse", commandspacer: true },
        \u04B6: { text: "\\cyrchar\\CYRCHRDSC", commandspacer: true },
        \u04B7: { text: "\\cyrchar\\cyrchrdsc", commandspacer: true },
        \u04B8: { text: "\\cyrchar\\CYRCHVCRS", commandspacer: true },
        \u04B9: { text: "\\cyrchar\\cyrchvcrs", commandspacer: true },
        \u04BA: { text: "\\cyrchar\\CYRSHHA", commandspacer: true },
        \u04BB: { text: "\\cyrchar\\cyrshha", commandspacer: true },
        \u04BC: { text: "\\cyrchar\\CYRABHCH", commandspacer: true },
        \u04BD: { text: "\\cyrchar\\cyrabhch", commandspacer: true },
        \u04BE: { text: "\\cyrchar\\CYRABHCHDSC", commandspacer: true },
        \u04BF: { text: "\\cyrchar\\cyrabhchdsc", commandspacer: true },
        \u04C0: { text: "\\cyrchar\\CYRpalochka", commandspacer: true },
        \u04C3: { text: "\\cyrchar\\CYRKHK", commandspacer: true },
        \u04C4: { text: "\\cyrchar\\cyrkhk", commandspacer: true },
        \u04C7: { text: "\\cyrchar\\CYRNHK", commandspacer: true },
        \u04C8: { text: "\\cyrchar\\cyrnhk", commandspacer: true },
        \u04CB: { text: "\\cyrchar\\CYRCHLDSC", commandspacer: true },
        \u04CC: { text: "\\cyrchar\\cyrchldsc", commandspacer: true },
        \u04D4: { text: "\\cyrchar\\CYRAE", commandspacer: true },
        \u04D5: { text: "\\cyrchar\\cyrae", commandspacer: true },
        \u04D8: { text: "\\cyrchar\\CYRSCHWA", commandspacer: true },
        \u04D9: { text: "\\cyrchar\\cyrschwa", commandspacer: true },
        \u04E0: { text: "\\cyrchar\\CYRABHDZE", commandspacer: true },
        \u04E1: { text: "\\cyrchar\\cyrabhdze", commandspacer: true },
        \u04E8: { text: "\\cyrchar\\CYROTLD", commandspacer: true },
        \u04E9: { text: "\\cyrchar\\cyrotld", commandspacer: true },
        "\u0871": { math: "\\\\backslash" },
        "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
        "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
        "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
        "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
        "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
        "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
        "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
        "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
        "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
        "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
        "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
        "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
        "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
        "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
        "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
        \u1E02: { text: "\\.B" },
        \u1E03: { text: "\\.b" },
        \u1E04: { text: "\\d{B}" },
        \u1E05: { text: "\\d{b}" },
        \u1E06: { text: "\\b{B}" },
        \u1E07: { text: "\\b{b}" },
        \u1E0A: { text: "\\.D" },
        \u1E0B: { text: "\\.d" },
        \u1E0C: { text: "\\d{D}" },
        \u1E0D: { text: "\\d{d}" },
        \u1E0E: { text: "\\b{D}" },
        \u1E0F: { text: "\\b{d}" },
        \u1E10: { text: "\\c{D}" },
        \u1E11: { text: "\\c{d}" },
        \u1E1C: { text: "\\c{\\u{E}}" },
        \u1E1D: { text: "\\c{\\u{e}}" },
        \u1E1E: { text: "\\.F" },
        \u1E1F: { text: "\\.f" },
        \u1E20: { text: "\\=G" },
        \u1E21: { text: "\\=g" },
        \u1E22: { text: "\\.H" },
        \u1E23: { text: "\\.h" },
        \u1E24: { text: "\\d{H}" },
        \u1E25: { text: "\\d{h}" },
        \u1E26: { text: '\\"H' },
        \u1E27: { text: '\\"h' },
        \u1E28: { text: "\\c{H}" },
        \u1E29: { text: "\\c{h}" },
        \u1E30: { text: "\\'K" },
        \u1E31: { text: "\\'k" },
        \u1E32: { text: "\\d{K}" },
        \u1E33: { text: "\\d{k}" },
        \u1E34: { text: "\\b{K}" },
        \u1E35: { text: "\\b{k}" },
        \u1E36: { text: "\\d{L}" },
        \u1E37: { text: "\\d{l}" },
        \u1E3A: { text: "\\b{L}" },
        \u1E3B: { text: "\\b{l}" },
        \u1E3E: { text: "\\'M" },
        \u1E3F: { text: "\\'m" },
        \u1E40: { text: "\\.M" },
        \u1E41: { text: "\\.m" },
        \u1E42: { text: "\\d{M}" },
        \u1E43: { text: "\\d{m}" },
        \u1E44: { text: "\\.N" },
        \u1E45: { text: "\\.n" },
        \u1E46: { text: "\\d{N}" },
        \u1E47: { text: "\\d{n}" },
        \u1E48: { text: "\\b{N}" },
        \u1E49: { text: "\\b{n}" },
        \u1E54: { text: "\\'P" },
        \u1E55: { text: "\\'p" },
        \u1E56: { text: "\\.P" },
        \u1E57: { text: "\\.p" },
        \u1E58: { text: "\\.R" },
        \u1E59: { text: "\\.r" },
        \u1E5A: { text: "\\d{R}" },
        \u1E5B: { text: "\\d{r}" },
        \u1E5E: { text: "\\b{R}" },
        \u1E5F: { text: "\\b{r}" },
        \u1E60: { text: "\\.S" },
        \u1E61: { text: "\\.s" },
        \u1E62: { text: "\\d{S}" },
        \u1E63: { text: "\\d{s}" },
        \u1E6A: { text: "\\.T" },
        \u1E6B: { text: "\\.t" },
        \u1E6C: { text: "\\d{T}" },
        \u1E6D: { text: "\\d{t}" },
        \u1E6E: { text: "\\b{T}" },
        \u1E6F: { text: "\\b{t}" },
        \u1E7C: { text: "\\~V" },
        \u1E7D: { text: "\\~v" },
        \u1E7E: { text: "\\d{V}" },
        \u1E7F: { text: "\\d{v}" },
        \u1E80: { text: "\\`W" },
        \u1E81: { text: "\\`w" },
        \u1E82: { text: "\\'W" },
        \u1E83: { text: "\\'w" },
        \u1E84: { text: '\\"W' },
        \u1E85: { text: '\\"w' },
        \u1E86: { text: "\\.W" },
        \u1E87: { text: "\\.w" },
        \u1E88: { text: "\\d{W}" },
        \u1E89: { text: "\\d{w}" },
        \u1E8A: { text: "\\.X" },
        \u1E8B: { text: "\\.x" },
        \u1E8C: { text: '\\"X' },
        \u1E8D: { text: '\\"x' },
        \u1E8E: { text: "\\.Y" },
        \u1E8F: { text: "\\.y" },
        \u1E90: { text: "\\^Z" },
        \u1E91: { text: "\\^z" },
        \u1E92: { text: "\\d{Z}" },
        \u1E93: { text: "\\d{z}" },
        \u1E94: { text: "\\b{Z}" },
        \u1E95: { text: "\\b{z}" },
        \u1E96: { text: "\\b{h}" },
        \u1E97: { text: '\\"t' },
        \u1E98: { text: "\\r{w}" },
        \u1E99: { text: "\\r{y}" },
        \u1EA0: { text: "\\d{A}" },
        \u1EA1: { text: "\\d{a}" },
        \u1EB8: { text: "\\d{E}" },
        \u1EB9: { text: "\\d{e}" },
        \u1EBC: { text: "\\~E" },
        \u1EBD: { text: "\\~e" },
        \u1ECA: { text: "\\d{I}" },
        \u1ECB: { text: "\\d{i}" },
        \u1ECC: { text: "\\d{O}" },
        \u1ECD: { text: "\\d{o}" },
        \u1EE4: { text: "\\d{U}" },
        \u1EE5: { text: "\\d{u}" },
        \u1EF2: { text: "\\`Y" },
        \u1EF3: { text: "\\`y" },
        \u1EF4: { text: "\\d{Y}" },
        \u1EF5: { text: "\\d{y}" },
        \u1EF8: { text: "\\~Y" },
        \u1EF9: { text: "\\~y" },
        "\u2000": { text: " ", space: true },
        "\u2001": { math: "\\quad", space: true },
        "\u2002": { text: "\\hspace{0.6em}", space: true },
        "\u2003": { math: "\\quad", space: true, text: "\\hspace{1em}" },
        "\u2004": { text: "\\;", space: true },
        "\u2005": { text: "\\hspace{0.25em}", space: true },
        "\u2006": { text: "\\hspace{0.166em}", space: true },
        "\u2007": { text: "\\hphantom{0}", space: true },
        "\u2008": { text: "\\hphantom{,}", space: true },
        "\u2009": { text: "\\,", space: true },
        "\u200A": { math: "\\mkern1mu", space: true },
        "\u200B": { text: "\\hspace{0pt}", space: true },
        "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
        "\u2010": { text: "-" },
        "\u2011": { text: "-" },
        "\u2012": { text: "-" },
        "\u2013": { text: "\\textendash", commandspacer: true },
        "\u2014": { text: "\\textemdash", commandspacer: true },
        "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
        "\u2016": { math: "\\Vert" },
        "\u2017": { math: "\\twolowline" },
        "\u2018": { text: "`" },
        "\u2019": { text: "'" },
        "\u201A": { text: "," },
        "\u201B": { math: "\\Elzreapos" },
        "\u201C": { text: "``" },
        "\u201D": { text: "''" },
        "\u201E": { text: ",," },
        "\u201F": { text: "\\quotedblbase", commandspacer: true },
        "\u2020": { math: "\\dagger", text: "\\textdagger", commandspacer: true, textpackages: ["textcomp"] },
        "\u2021": { math: "\\ddagger", text: "\\textdaggerdbl", commandspacer: true, textpackages: ["textcomp"] },
        "\u2022": { math: "\\bullet", text: "\\textbullet", commandspacer: true, textpackages: ["textcomp"] },
        "\u2023": { text: ">" },
        "\u2024": { text: "." },
        "\u2025": { math: "\\enleadertwodots", text: ".." },
        "\u2026": { math: "\\ldots", text: "\\ldots", commandspacer: true },
        "\u2027": { text: "-" },
        "\u202F": { text: " ", space: true },
        "\u2030": { text: "\\textperthousand", commandspacer: true, textpackages: ["textcomp"] },
        "\u2031": { text: "\\textpertenthousand", commandspacer: true, textpackages: ["textcomp"] },
        "\u2032": { math: "{'}" },
        "\u2033": { math: "{''}" },
        "\u2034": { math: "{'''}" },
        "\u2035": { math: "\\backprime" },
        "\u2036": { math: "\\backdprime" },
        "\u2037": { math: "\\backtrprime" },
        "\u2038": { math: "\\caretinsert" },
        "\u2039": { text: "\\guilsinglleft", commandspacer: true },
        "\u203A": { text: "\\guilsinglright", commandspacer: true },
        "\u203C": { math: "\\Exclam" },
        "\u203E": { text: "-" },
        "\u2043": { math: "\\hyphenbullet" },
        "\u2044": { math: "\\fracslash" },
        "\u2047": { math: "\\Question" },
        "\u2048": { text: "?!" },
        "\u2049": { text: "!?" },
        "\u204A": { text: "7" },
        "\u2050": { math: "\\closure" },
        "\u2057": { math: "''''" },
        "\u205F": { math: "\\:", space: true, text: "\\:" },
        "\u2060": { text: "\\nolinebreak", commandspacer: true },
        "\u2070": { math: "^{0}" },
        "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
        "\u2074": { math: "^{4}" },
        "\u2075": { math: "^{5}" },
        "\u2076": { math: "^{6}" },
        "\u2077": { math: "^{7}" },
        "\u2078": { math: "^{8}" },
        "\u2079": { math: "^{9}" },
        "\u207A": { math: "^{+}" },
        "\u207B": { math: "^{-}" },
        "\u207C": { math: "^{=}" },
        "\u207D": { math: "^{(}" },
        "\u207E": { math: "^{)}" },
        \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
        "\u2080": { math: "_{0}" },
        "\u2081": { math: "_{1}" },
        "\u2082": { math: "_{2}" },
        "\u2083": { math: "_{3}" },
        "\u2084": { math: "_{4}" },
        "\u2085": { math: "_{5}" },
        "\u2086": { math: "_{6}" },
        "\u2087": { math: "_{7}" },
        "\u2088": { math: "_{8}" },
        "\u2089": { math: "_{9}" },
        "\u208A": { math: "_{+}" },
        "\u208B": { math: "_{-}" },
        "\u208C": { math: "_{=}" },
        "\u208D": { math: "_{(}" },
        "\u208E": { math: "_{)}" },
        "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
        "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
        "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
        "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
        "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
        "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
        "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
        "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
        "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
        "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
        "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
        "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
        "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
        "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
        "\u20AC": { math: "\\euro", text: "\\texteuro", commandspacer: true },
        "\u20D0": { math: "\\lvec" },
        "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u20D2": { math: "\\vertoverlay" },
        "\u20D6": { math: "\\LVec" },
        "\u20D7": { math: "\\vec" },
        "\u20DB": { math: "\\dddot" },
        "\u20DC": { math: "\\ddddot" },
        "\u20DD": { math: "\\enclosecircle" },
        "\u20DE": { math: "\\enclosesquare" },
        "\u20DF": { math: "\\enclosediamond" },
        "\u20E1": { math: "\\overleftrightarrow" },
        "\u20E4": { math: "\\enclosetriangle" },
        "\u20E7": { math: "\\annuity" },
        "\u20E8": { math: "\\threeunderdot" },
        "\u20E9": { math: "\\widebridgeabove" },
        "\u20EC": { math: "\\underrightharpoondown" },
        "\u20ED": { math: "\\underleftharpoondown" },
        "\u20EE": { math: "\\underleftarrow" },
        "\u20EF": { math: "\\underrightarrow" },
        "\u20F0": { math: "\\asteraccent" },
        "\u2100": { text: "a/c" },
        "\u2101": { text: "a/s" },
        \u2102: { math: "\\mathbb{C}" },
        "\u2103": { text: "\\textcelsius", commandspacer: true },
        "\u2105": { text: "c/o" },
        "\u2106": { text: "c/u" },
        \u2107: { math: "\\Euler" },
        "\u2109": { text: "F" },
        \u210A: { math: "\\mathscr{g}" },
        \u210B: { math: "\\mathscr{H}" },
        \u210C: { math: "\\mathfrak{H}" },
        \u210D: { math: "\\mathbb{H}" },
        \u210E: { math: "\\Planckconst" },
        \u210F: { math: "\\hslash" },
        \u2110: { math: "\\mathscr{I}" },
        \u2111: { math: "\\mathfrak{I}" },
        \u2112: { math: "\\mathscr{L}" },
        \u2113: { math: "\\mathscr{l}" },
        \u2115: { math: "\\mathbb{N}" },
        "\u2116": { text: "\\cyrchar\\textnumero", commandspacer: true },
        "\u2117": { text: "\\textcircledP", commandspacer: true },
        "\u2118": { math: "\\wp" },
        \u2119: { math: "\\mathbb{P}" },
        \u211A: { math: "\\mathbb{Q}" },
        \u211B: { math: "\\mathscr{R}" },
        \u211C: { math: "\\mathfrak{R}" },
        \u211D: { math: "\\mathbb{R}" },
        "\u211E": { math: "\\Elzxrat" },
        "\u2120": { text: "\\textservicemark", commandspacer: true },
        "\u2121": { text: "TEL" },
        "\u2122": { text: "\\texttrademark", commandspacer: true, textpackages: ["textcomp"] },
        \u2124: { math: "\\mathbb{Z}" },
        \u2126: { math: "\\Omega" },
        "\u2127": { math: "\\mho" },
        \u2128: { math: "\\mathfrak{Z}" },
        "\u2129": { text: "\\textriota", commandspacer: true },
        \u212A: { text: "K" },
        \u212B: { math: "\\Angstroem", text: "\\AA", commandspacer: true },
        \u212C: { math: "\\mathscr{B}" },
        \u212D: { math: "\\mathfrak{C}" },
        "\u212E": { text: "\\textestimated", commandspacer: true },
        \u212F: { math: "\\mathscr{e}" },
        \u2130: { math: "\\mathscr{E}" },
        \u2131: { math: "\\mathscr{F}" },
        "\u2132": { math: "\\Finv" },
        \u2133: { math: "\\mathscr{M}" },
        \u2134: { math: "\\mathscr{o}" },
        \u2135: { math: "\\aleph" },
        \u2136: { math: "\\beth" },
        \u2137: { math: "\\gimel" },
        \u2138: { math: "\\daleth" },
        "\u213C": { math: "\\mathbb{\\pi}" },
        "\u213D": { math: "\\mathbb{\\gamma}" },
        "\u213E": { math: "\\mathbb{\\Gamma}" },
        "\u213F": { math: "\\mathbb{\\Pi}" },
        "\u2140": { math: "\\mathbb{\\Sigma}" },
        "\u2141": { math: "\\Game" },
        "\u2142": { math: "\\sansLturned" },
        "\u2143": { math: "\\sansLmirrored" },
        "\u2144": { math: "\\Yup" },
        "\u2145": { math: "\\CapitalDifferentialD" },
        "\u2146": { math: "\\DifferentialD" },
        "\u2147": { math: "\\ExponetialE" },
        "\u2148": { math: "\\ComplexI" },
        "\u2149": { math: "\\ComplexJ" },
        "\u214A": { math: "\\PropertyLine" },
        "\u214B": { math: "\\invamp" },
        "\u2150": { math: "\\frac{1}{7}" },
        "\u2151": { math: "\\frac{1}{9}" },
        "\u2152": { math: "\\frac{1}{10}" },
        "\u2153": { math: "\\frac{1}{3}" },
        "\u2154": { math: "\\frac{2}{3}" },
        "\u2155": { math: "\\frac{1}{5}" },
        "\u2156": { math: "\\frac{2}{5}" },
        "\u2157": { math: "\\frac{3}{5}" },
        "\u2158": { math: "\\frac{4}{5}" },
        "\u2159": { math: "\\frac{1}{6}" },
        "\u215A": { math: "\\frac{5}{6}" },
        "\u215B": { math: "\\frac{1}{8}" },
        "\u215C": { math: "\\frac{3}{8}" },
        "\u215D": { math: "\\frac{5}{8}" },
        "\u215E": { math: "\\frac{7}{8}" },
        "\u215F": { math: "\\frac{1}" },
        "\u2160": { text: "I" },
        "\u2161": { text: "II" },
        "\u2162": { text: "III" },
        "\u2163": { text: "IV" },
        "\u2164": { text: "V" },
        "\u2165": { text: "VI" },
        "\u2166": { text: "VII" },
        "\u2167": { text: "VIII" },
        "\u2168": { text: "IX" },
        "\u2169": { text: "X" },
        "\u216A": { text: "XI" },
        "\u216B": { text: "XII" },
        "\u216C": { text: "L" },
        "\u216D": { text: "C" },
        "\u216E": { text: "D" },
        "\u216F": { text: "M" },
        "\u2170": { text: "i" },
        "\u2171": { text: "ii" },
        "\u2172": { text: "iii" },
        "\u2173": { text: "iv" },
        "\u2174": { text: "v" },
        "\u2175": { text: "vi" },
        "\u2176": { text: "vii" },
        "\u2177": { text: "viii" },
        "\u2178": { text: "ix" },
        "\u2179": { text: "x" },
        "\u217A": { text: "xi" },
        "\u217B": { text: "xii" },
        "\u217C": { text: "l" },
        "\u217D": { text: "c" },
        "\u217E": { text: "d" },
        "\u217F": { text: "m" },
        "\u2189": { math: "\\frac{0}{3}" },
        "\u2190": { math: "\\leftarrow" },
        "\u2191": { math: "\\uparrow" },
        "\u2192": { math: "\\rightarrow", text: "\\textrightarrow", commandspacer: true, textpackages: ["textcomp"] },
        "\u2193": { math: "\\downarrow" },
        "\u2194": { math: "\\leftrightarrow" },
        "\u2195": { math: "\\updownarrow" },
        "\u2196": { math: "\\nwarrow" },
        "\u2197": { math: "\\nearrow" },
        "\u2198": { math: "\\searrow" },
        "\u2199": { math: "\\swarrow" },
        "\u219A": { math: "\\nleftarrow" },
        "\u219B": { math: "\\nrightarrow" },
        "\u219C": { math: "\\arrowwaveleft" },
        "\u219D": { math: "\\arrowwaveright" },
        "\u219E": { math: "\\twoheadleftarrow" },
        "\u219F": { math: "\\twoheaduparrow" },
        "\u21A0": { math: "\\twoheadrightarrow" },
        "\u21A1": { math: "\\twoheaddownarrow" },
        "\u21A2": { math: "\\leftarrowtail" },
        "\u21A3": { math: "\\rightarrowtail" },
        "\u21A4": { math: "\\mapsfrom" },
        "\u21A5": { math: "\\MapsUp" },
        "\u21A6": { math: "\\mapsto" },
        "\u21A7": { math: "\\MapsDown" },
        "\u21A8": { math: "\\updownarrowbar" },
        "\u21A9": { math: "\\hookleftarrow" },
        "\u21AA": { math: "\\hookrightarrow" },
        "\u21AB": { math: "\\looparrowleft" },
        "\u21AC": { math: "\\looparrowright" },
        "\u21AD": { math: "\\leftrightsquigarrow" },
        "\u21AE": { math: "\\nleftrightarrow" },
        "\u21AF": { math: "\\lightning" },
        "\u21B0": { math: "\\Lsh" },
        "\u21B1": { math: "\\Rsh" },
        "\u21B2": { math: "\\dlsh" },
        "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
        "\u21B4": { math: "\\linefeed" },
        "\u21B5": { math: "\\carriagereturn" },
        "\u21B6": { math: "\\curvearrowleft" },
        "\u21B7": { math: "\\curvearrowright" },
        "\u21B8": { math: "\\barovernorthwestarrow" },
        "\u21B9": { math: "\\barleftarrowrightarrowba" },
        "\u21BA": { math: "\\circlearrowleft" },
        "\u21BB": { math: "\\circlearrowright" },
        "\u21BC": { math: "\\leftharpoonup" },
        "\u21BD": { math: "\\leftharpoondown" },
        "\u21BE": { math: "\\upharpoonright" },
        "\u21BF": { math: "\\upharpoonleft" },
        "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u21C1": { math: "\\rightharpoondown" },
        "\u21C2": { math: "\\downharpoonright" },
        "\u21C3": { math: "\\downharpoonleft" },
        "\u21C4": { math: "\\rightleftarrows" },
        "\u21C5": { math: "\\dblarrowupdown" },
        "\u21C6": { math: "\\leftrightarrows" },
        "\u21C7": { math: "\\leftleftarrows" },
        "\u21C8": { math: "\\upuparrows" },
        "\u21C9": { math: "\\rightrightarrows" },
        "\u21CA": { math: "\\downdownarrows" },
        "\u21CB": { math: "\\leftrightharpoons" },
        "\u21CC": { math: "\\rightleftharpoons" },
        "\u21CD": { math: "\\nLeftarrow" },
        "\u21CE": { math: "\\nLeftrightarrow" },
        "\u21CF": { math: "\\nRightarrow" },
        "\u21D0": { math: "\\Leftarrow" },
        "\u21D1": { math: "\\Uparrow" },
        "\u21D2": { math: "\\Rightarrow" },
        "\u21D3": { math: "\\Downarrow" },
        "\u21D4": { math: "\\Leftrightarrow" },
        "\u21D5": { math: "\\Updownarrow" },
        "\u21D6": { math: "\\Nwarrow" },
        "\u21D7": { math: "\\Nearrow" },
        "\u21D8": { math: "\\Searrow" },
        "\u21D9": { math: "\\Swarrow" },
        "\u21DA": { math: "\\Lleftarrow" },
        "\u21DB": { math: "\\Rrightarrow" },
        "\u21DC": { math: "\\leftsquigarrow" },
        "\u21DD": { math: "\\rightsquigarrow" },
        "\u21DE": { math: "\\nHuparrow" },
        "\u21DF": { math: "\\nHdownarrow" },
        "\u21E0": { math: "\\dashleftarrow" },
        "\u21E1": { math: "\\updasharrow" },
        "\u21E2": { math: "\\dashrightarrow" },
        "\u21E3": { math: "\\downdasharrow" },
        "\u21E4": { math: "\\LeftArrowBar" },
        "\u21E5": { math: "\\RightArrowBar" },
        "\u21E6": { math: "\\leftwhitearrow" },
        "\u21E7": { math: "\\upwhitearrow" },
        "\u21E8": { math: "\\rightwhitearrow" },
        "\u21E9": { math: "\\downwhitearrow" },
        "\u21EA": { math: "\\whitearrowupfrombar" },
        "\u21F4": { math: "\\circleonrightarrow" },
        "\u21F5": { math: "\\DownArrowUpArrow" },
        "\u21F6": { math: "\\rightthreearrows" },
        "\u21F7": { math: "\\nvleftarrow" },
        "\u21F8": { math: "\\pfun" },
        "\u21F9": { math: "\\nvleftrightarrow" },
        "\u21FA": { math: "\\nVleftarrow" },
        "\u21FB": { math: "\\ffun" },
        "\u21FC": { math: "\\nVleftrightarrow" },
        "\u21FD": { math: "\\leftarrowtriangle" },
        "\u21FE": { math: "\\rightarrowtriangle" },
        "\u21FF": { math: "\\leftrightarrowtriangle" },
        "\u2200": { math: "\\forall" },
        "\u2201": { math: "\\complement" },
        "\u2202": { math: "\\partial" },
        "\u2203": { math: "\\exists" },
        "\u2204": { math: "\\nexists" },
        "\u2205": { math: "\\varnothing" },
        "\u2206": { math: "\\increment" },
        "\u2207": { math: "\\nabla" },
        "\u2208": { math: "\\in" },
        "\u2209": { math: "\\not\\in" },
        "\u220A": { math: "\\smallin" },
        "\u220B": { math: "\\ni" },
        "\u220C": { math: "\\not\\ni" },
        "\u220D": { math: "\\smallni" },
        "\u220E": { math: "\\QED" },
        "\u220F": { math: "\\prod" },
        "\u2210": { math: "\\coprod" },
        "\u2211": { math: "\\sum" },
        "\u2212": { math: "-", text: "-" },
        "\u2213": { math: "\\mp" },
        "\u2214": { math: "\\dotplus" },
        "\u2215": { text: "/" },
        "\u2216": { math: "\\setminus" },
        "\u2217": { math: "{_\\ast}" },
        "\u2218": { math: "\\circ" },
        "\u2219": { math: "\\bullet" },
        "\u221A": { math: "\\surd" },
        "\u221B": { math: "\\sqrt[3]" },
        "\u221C": { math: "\\sqrt[4]" },
        "\u221D": { math: "\\propto" },
        "\u221E": { math: "\\infty" },
        "\u221F": { math: "\\rightangle" },
        "\u2220": { math: "\\angle" },
        "\u2221": { math: "\\measuredangle" },
        "\u2222": { math: "\\sphericalangle" },
        "\u2223": { math: "\\mid" },
        "\u2224": { math: "\\nmid" },
        "\u2225": { math: "\\parallel" },
        "\u2226": { math: "\\nparallel" },
        "\u2227": { math: "\\wedge" },
        "\u2228": { math: "\\vee" },
        "\u2229": { math: "\\cap" },
        "\u222A": { math: "\\cup" },
        "\u222B": { math: "\\int" },
        "\u222C": { math: "{\\int\\!\\int}" },
        "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
        "\u222E": { math: "\\oint" },
        "\u222F": { math: "\\surfintegral" },
        "\u2230": { math: "\\volintegral" },
        "\u2231": { math: "\\clwintegral" },
        "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2234": { math: "\\therefore" },
        "\u2235": { math: "\\because" },
        "\u2236": { math: ":" },
        "\u2237": { math: "\\Colon" },
        "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
        "\u2239": { math: "\\eqcolon" },
        "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
        "\u223B": { math: "\\homothetic" },
        "\u223C": { math: "\\sim" },
        "\u223D": { math: "\\backsim" },
        "\u223E": { math: "\\lazysinv" },
        "\u223F": { math: "\\AC" },
        "\u2240": { math: "\\wr" },
        "\u2241": { math: "\\not\\sim" },
        "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
        "\u2242\u0338": { math: "\\NotEqualTilde" },
        "\u2243": { math: "\\simeq" },
        "\u2244": { math: "\\not\\simeq" },
        "\u2245": { math: "\\cong" },
        "\u2246": { math: "\\approxnotequal" },
        "\u2247": { math: "\\not\\cong" },
        "\u2248": { math: "\\approx" },
        "\u2249": { math: "\\not\\approx" },
        "\u224A": { math: "\\approxeq" },
        "\u224B": { math: "\\tildetrpl" },
        "\u224B\u0338": { math: "\\not\\apid" },
        "\u224C": { math: "\\allequal" },
        "\u224D": { math: "\\asymp" },
        "\u224E": { math: "\\Bumpeq" },
        "\u224E\u0338": { math: "\\NotHumpDownHump" },
        "\u224F": { math: "\\bumpeq" },
        "\u224F\u0338": { math: "\\NotHumpEqual" },
        "\u2250": { math: "\\doteq" },
        "\u2250\u0338": { math: "\\not\\doteq" },
        "\u2251": { math: "\\doteqdot" },
        "\u2252": { math: "\\fallingdotseq" },
        "\u2253": { math: "\\risingdotseq" },
        "\u2254": { math: "\\coloneq", text: ":=" },
        "\u2255": { math: "=:" },
        "\u2256": { math: "\\eqcirc" },
        "\u2257": { math: "\\circeq" },
        "\u2258": { math: "\\arceq" },
        "\u2259": { math: "\\estimates" },
        "\u225B": { math: "\\starequal" },
        "\u225C": { math: "\\triangleq" },
        "\u225D": { math: "\\eqdef" },
        "\u225E": { math: "\\measeq" },
        "\u2260": { math: "\\neq" },
        "\u2261": { math: "\\equiv" },
        "\u2262": { math: "\\not\\equiv" },
        "\u2263": { math: "\\Equiv" },
        "\u2264": { math: "\\leq" },
        "\u2265": { math: "\\geq" },
        "\u2266": { math: "\\leqq" },
        "\u2267": { math: "\\geqq" },
        "\u2268": { math: "\\lneqq" },
        "\u2268\uFE00": { math: "\\lvertneqq" },
        "\u2269": { math: "\\gneqq" },
        "\u2269\uFE00": { math: "\\gvertneqq" },
        "\u226A": { math: "\\ll" },
        "\u226A\u0338": { math: "\\NotLessLess" },
        "\u226B": { math: "\\gg" },
        "\u226B\u0338": { math: "\\NotGreaterGreater" },
        "\u226C": { math: "\\between" },
        "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
        "\u226E": { math: "\\not<" },
        "\u226F": { math: "\\not>" },
        "\u2270": { math: "\\not\\leq" },
        "\u2271": { math: "\\not\\geq" },
        "\u2272": { math: "\\lessequivlnt" },
        "\u2273": { math: "\\greaterequivlnt" },
        "\u2276": { math: "\\lessgtr" },
        "\u2277": { math: "\\gtrless" },
        "\u2278": { math: "\\notlessgreater" },
        "\u2279": { math: "\\notgreaterless" },
        "\u227A": { math: "\\prec" },
        "\u227B": { math: "\\succ" },
        "\u227C": { math: "\\preccurlyeq" },
        "\u227D": { math: "\\succcurlyeq" },
        "\u227E": { math: "\\precapprox" },
        "\u227E\u0338": { math: "\\NotPrecedesTilde" },
        "\u227F": { math: "\\succapprox" },
        "\u227F\u0338": { math: "\\NotSucceedsTilde" },
        "\u2280": { math: "\\not\\prec" },
        "\u2281": { math: "\\not\\succ" },
        "\u2282": { math: "\\subset" },
        "\u2283": { math: "\\supset" },
        "\u2284": { math: "\\not\\subset" },
        "\u2285": { math: "\\not\\supset" },
        "\u2286": { math: "\\subseteq" },
        "\u2287": { math: "\\supseteq" },
        "\u2288": { math: "\\not\\subseteq" },
        "\u2289": { math: "\\not\\supseteq" },
        "\u228A": { math: "\\subsetneq" },
        "\u228A\uFE00": { math: "\\varsubsetneqq" },
        "\u228B": { math: "\\supsetneq" },
        "\u228B\uFE00": { math: "\\varsupsetneq" },
        "\u228C": { math: "\\cupleftarrow" },
        "\u228D": { math: "\\cupdot" },
        "\u228E": { math: "\\uplus" },
        "\u228F": { math: "\\sqsubset" },
        "\u228F\u0338": { math: "\\NotSquareSubset" },
        "\u2290": { math: "\\sqsupset" },
        "\u2290\u0338": { math: "\\NotSquareSuperset" },
        "\u2291": { math: "\\sqsubseteq" },
        "\u2292": { math: "\\sqsupseteq" },
        "\u2293": { math: "\\sqcap" },
        "\u2294": { math: "\\sqcup" },
        "\u2295": { math: "\\oplus" },
        "\u2296": { math: "\\ominus" },
        "\u2297": { math: "\\otimes" },
        "\u2298": { math: "\\oslash" },
        "\u2299": { math: "\\odot" },
        "\u229A": { math: "\\circledcirc" },
        "\u229B": { math: "\\circledast" },
        "\u229C": { math: "\\circledequal" },
        "\u229D": { math: "\\circleddash" },
        "\u229E": { math: "\\boxplus" },
        "\u229F": { math: "\\boxminus" },
        "\u22A0": { math: "\\boxtimes" },
        "\u22A1": { math: "\\boxdot" },
        "\u22A2": { math: "\\vdash" },
        "\u22A3": { math: "\\dashv" },
        "\u22A4": { math: "\\top" },
        "\u22A5": { math: "\\perp" },
        "\u22A6": { math: "\\assert" },
        "\u22A7": { math: "\\truestate" },
        "\u22A8": { math: "\\forcesextra" },
        "\u22A9": { math: "\\Vdash" },
        "\u22AA": { math: "\\Vvdash" },
        "\u22AB": { math: "\\VDash" },
        "\u22AC": { math: "\\nvdash" },
        "\u22AD": { math: "\\nvDash" },
        "\u22AE": { math: "\\nVdash" },
        "\u22AF": { math: "\\nVDash" },
        "\u22B0": { math: "\\prurel" },
        "\u22B1": { math: "\\scurel" },
        "\u22B2": { math: "\\vartriangleleft" },
        "\u22B3": { math: "\\vartriangleright" },
        "\u22B4": { math: "\\trianglelefteq" },
        "\u22B5": { math: "\\trianglerighteq" },
        "\u22B6": { math: "\\original" },
        "\u22B7": { math: "\\image" },
        "\u22B8": { math: "\\multimap" },
        "\u22B9": { math: "\\hermitconjmatrix" },
        "\u22BA": { math: "\\intercal" },
        "\u22BB": { math: "\\veebar" },
        "\u22BC": { math: "\\barwedge" },
        "\u22BD": { math: "\\barvee" },
        "\u22BE": { math: "\\rightanglearc" },
        "\u22BF": { math: "\\varlrtriangle" },
        "\u22C2": { math: "\\bigcap" },
        "\u22C3": { math: "\\bigcup" },
        "\u22C4": { math: "\\diamond" },
        "\u22C5": { math: "\\cdot" },
        "\u22C6": { math: "\\star" },
        "\u22C7": { math: "\\divideontimes" },
        "\u22C8": { math: "\\bowtie" },
        "\u22C9": { math: "\\ltimes" },
        "\u22CA": { math: "\\rtimes" },
        "\u22CB": { math: "\\leftthreetimes" },
        "\u22CC": { math: "\\rightthreetimes" },
        "\u22CD": { math: "\\backsimeq" },
        "\u22CE": { math: "\\curlyvee" },
        "\u22CF": { math: "\\curlywedge" },
        "\u22D0": { math: "\\Subset" },
        "\u22D1": { math: "\\Supset" },
        "\u22D2": { math: "\\Cap" },
        "\u22D3": { math: "\\Cup" },
        "\u22D4": { math: "\\pitchfork" },
        "\u22D5": { math: "\\hash" },
        "\u22D6": { math: "\\lessdot" },
        "\u22D7": { math: "\\gtrdot" },
        "\u22D8": { math: "\\verymuchless" },
        "\u22D9": { math: "\\verymuchgreater" },
        "\u22DA": { math: "\\lesseqgtr" },
        "\u22DB": { math: "\\gtreqless" },
        "\u22DC": { math: "\\eqless" },
        "\u22DD": { math: "\\eqgtr" },
        "\u22DE": { math: "\\curlyeqprec" },
        "\u22DF": { math: "\\curlyeqsucc" },
        "\u22E0": { math: "\\npreceq" },
        "\u22E1": { math: "\\nsucceq" },
        "\u22E2": { math: "\\not\\sqsubseteq" },
        "\u22E3": { math: "\\not\\sqsupseteq" },
        "\u22E4": { math: "\\sqsubsetneq" },
        "\u22E5": { math: "\\Elzsqspne" },
        "\u22E6": { math: "\\lnsim" },
        "\u22E7": { math: "\\gnsim" },
        "\u22E8": { math: "\\precedesnotsimilar" },
        "\u22E9": { math: "\\succnsim" },
        "\u22EA": { math: "\\ntriangleleft" },
        "\u22EB": { math: "\\ntriangleright" },
        "\u22EC": { math: "\\ntrianglelefteq" },
        "\u22ED": { math: "\\ntrianglerighteq" },
        "\u22EE": { math: "\\vdots" },
        "\u22EF": { math: "\\cdots" },
        "\u22F0": { math: "\\upslopeellipsis" },
        "\u22F1": { math: "\\downslopeellipsis" },
        "\u22F2": { math: "\\disin" },
        "\u22F3": { math: "\\varisins" },
        "\u22F4": { math: "\\isins" },
        "\u22F5": { math: "\\isindot" },
        "\u22F6": { math: "\\barin" },
        "\u22F7": { math: "\\isinobar" },
        "\u22F8": { math: "\\isinvb" },
        "\u22F9": { math: "\\isinE" },
        "\u22FA": { math: "\\nisd" },
        "\u22FB": { math: "\\varnis" },
        "\u22FC": { math: "\\nis" },
        "\u22FD": { math: "\\varniobar" },
        "\u22FE": { math: "\\niobar" },
        "\u22FF": { math: "\\bagmember" },
        "\u2300": { math: "\\diameter" },
        "\u2302": { math: "\\house" },
        "\u2305": { math: "\\varbarwedge", text: "\\barwedge", commandspacer: true },
        "\u2306": { math: "\\perspcorrespond" },
        "\u2308": { math: "\\lceil" },
        "\u2309": { math: "\\rceil" },
        "\u230A": { math: "\\lfloor" },
        "\u230B": { math: "\\rfloor" },
        "\u2310": { math: "\\invneg" },
        "\u2311": { math: "\\wasylozenge" },
        "\u2312": { math: "\\profline" },
        "\u2313": { math: "\\profsurf" },
        "\u2315": { math: "\\recorder" },
        "\u2316": { math: '{\\mathchar"2208}' },
        "\u2317": { math: "\\viewdata" },
        "\u2319": { math: "\\turnednot" },
        "\u231C": { math: "\\ulcorner" },
        "\u231D": { math: "\\urcorner" },
        "\u231E": { math: "\\llcorner" },
        "\u231F": { math: "\\lrcorner" },
        "\u2320": { math: "\\inttop" },
        "\u2321": { math: "\\intbottom" },
        "\u2322": { math: "\\frown" },
        "\u2323": { math: "\\smile" },
        "\u2329": { math: "\\langle" },
        "\u232A": { math: "\\rangle" },
        "\u232C": { math: "\\varhexagonlrbonds" },
        "\u2332": { math: "\\conictaper" },
        "\u2336": { math: "\\topbot" },
        "\u2339": { math: "\\APLinv" },
        "\u233F": { math: "\\notslash" },
        "\u2340": { math: "\\notbackslash" },
        "\u2347": { math: "\\APLleftarrowbox" },
        "\u2348": { math: "\\APLrightarrowbox" },
        "\u2349": { math: "\\invdiameter" },
        "\u2350": { math: "\\APLuparrowbox" },
        "\u2353": { math: "\\APLboxupcaret" },
        "\u2357": { math: "\\APLdownarrowbox" },
        "\u235D": { math: "\\APLcomment" },
        "\u235E": { math: "\\APLinput" },
        "\u235F": { math: "\\APLlog" },
        "\u2370": { math: "\\APLboxquestion" },
        "\u237C": { math: "\\rangledownzigzagarrow" },
        "\u2394": { math: "\\hexagon" },
        "\u239B": { math: "\\lparenuend" },
        "\u239C": { math: "\\lparenextender" },
        "\u239D": { math: "\\lparenlend" },
        "\u239E": { math: "\\rparenuend" },
        "\u239F": { math: "\\rparenextender" },
        "\u23A0": { math: "\\rparenlend" },
        "\u23A1": { math: "\\lbrackuend" },
        "\u23A2": { math: "\\lbrackextender" },
        "\u23A3": { math: "\\Elzdlcorn" },
        "\u23A4": { math: "\\rbrackuend" },
        "\u23A5": { math: "\\rbrackextender" },
        "\u23A6": { math: "\\rbracklend" },
        "\u23A7": { math: "\\lbraceuend" },
        "\u23A8": { math: "\\lbracemid" },
        "\u23A9": { math: "\\lbracelend" },
        "\u23AA": { math: "\\vbraceextender" },
        "\u23AB": { math: "\\rbraceuend" },
        "\u23AC": { math: "\\rbracemid" },
        "\u23AD": { math: "\\rbracelend" },
        "\u23AE": { math: "\\intextender" },
        "\u23AF": { math: "\\harrowextender" },
        "\u23B0": { math: "\\lmoustache" },
        "\u23B1": { math: "\\rmoustache" },
        "\u23B2": { math: "\\sumtop" },
        "\u23B3": { math: "\\sumbottom" },
        "\u23B4": { math: "\\overbracket" },
        "\u23B5": { math: "\\underbracket" },
        "\u23B6": { math: "\\bbrktbrk" },
        "\u23B7": { math: "\\sqrtbottom" },
        "\u23B8": { math: "\\lvboxline" },
        "\u23B9": { math: "\\rvboxline" },
        "\u23CE": { math: "\\varcarriagereturn" },
        "\u23DC": { math: "\\overparen" },
        "\u23DD": { math: "\\underparen" },
        "\u23DE": { math: "\\overbrace" },
        "\u23DF": { math: "\\underbrace" },
        "\u23E0": { math: "\\obrbrak" },
        "\u23E1": { math: "\\ubrbrak" },
        "\u23E2": { math: "\\trapezium" },
        "\u23E3": { math: "\\benzenr" },
        "\u23E4": { math: "\\strns" },
        "\u23E5": { math: "\\fltns" },
        "\u23E6": { math: "\\accurrent" },
        "\u23E7": { math: "\\elinters" },
        "\u2400": { text: "NUL" },
        "\u2401": { text: "SOH" },
        "\u2402": { text: "STX" },
        "\u2403": { text: "ETX" },
        "\u2404": { text: "EOT" },
        "\u2405": { text: "ENQ" },
        "\u2406": { text: "ACK" },
        "\u2407": { text: "BEL" },
        "\u2408": { text: "BS" },
        "\u2409": { text: "HT" },
        "\u240A": { text: "LF" },
        "\u240B": { text: "VT" },
        "\u240C": { text: "FF" },
        "\u240D": { text: "CR" },
        "\u240E": { text: "SO" },
        "\u240F": { text: "SI" },
        "\u2410": { text: "DLE" },
        "\u2411": { text: "DC1" },
        "\u2412": { text: "DC2" },
        "\u2413": { text: "DC3" },
        "\u2414": { text: "DC4" },
        "\u2415": { text: "NAK" },
        "\u2416": { text: "SYN" },
        "\u2417": { text: "ETB" },
        "\u2418": { text: "CAN" },
        "\u2419": { text: "EM" },
        "\u241A": { text: "SUB" },
        "\u241B": { text: "ESC" },
        "\u241C": { text: "FS" },
        "\u241D": { text: "GS" },
        "\u241E": { text: "RS" },
        "\u241F": { text: "US" },
        "\u2420": { text: "SP" },
        "\u2421": { text: "DEL" },
        "\u2423": { text: "\\textvisiblespace", commandspacer: true },
        "\u2424": { text: "NL" },
        "\u2425": { text: "///" },
        "\u2426": { text: "?" },
        "\u2460": { text: "\\ding{172}" },
        "\u2461": { text: "\\ding{173}" },
        "\u2462": { text: "\\ding{174}" },
        "\u2463": { text: "\\ding{175}" },
        "\u2464": { text: "\\ding{176}" },
        "\u2465": { text: "\\ding{177}" },
        "\u2466": { text: "\\ding{178}" },
        "\u2467": { text: "\\ding{179}" },
        "\u2468": { text: "\\ding{180}" },
        "\u2469": { text: "\\ding{181}" },
        "\u246A": { text: "(11)" },
        "\u246B": { text: "(12)" },
        "\u246C": { text: "(13)" },
        "\u246D": { text: "(14)" },
        "\u246E": { text: "(15)" },
        "\u246F": { text: "(16)" },
        "\u2470": { text: "(17)" },
        "\u2471": { text: "(18)" },
        "\u2472": { text: "(19)" },
        "\u2473": { text: "(20)" },
        "\u2474": { text: "(1)" },
        "\u2475": { text: "(2)" },
        "\u2476": { text: "(3)" },
        "\u2477": { text: "(4)" },
        "\u2478": { text: "(5)" },
        "\u2479": { text: "(6)" },
        "\u247A": { text: "(7)" },
        "\u247B": { text: "(8)" },
        "\u247C": { text: "(9)" },
        "\u247D": { text: "(10)" },
        "\u247E": { text: "(11)" },
        "\u247F": { text: "(12)" },
        "\u2480": { text: "(13)" },
        "\u2481": { text: "(14)" },
        "\u2482": { text: "(15)" },
        "\u2483": { text: "(16)" },
        "\u2484": { text: "(17)" },
        "\u2485": { text: "(18)" },
        "\u2486": { text: "(19)" },
        "\u2487": { text: "(20)" },
        "\u2488": { text: "1." },
        "\u2489": { text: "2." },
        "\u248A": { text: "3." },
        "\u248B": { text: "4." },
        "\u248C": { text: "5." },
        "\u248D": { text: "6." },
        "\u248E": { text: "7." },
        "\u248F": { text: "8." },
        "\u2490": { text: "9." },
        "\u2491": { text: "10." },
        "\u2492": { text: "11." },
        "\u2493": { text: "12." },
        "\u2494": { text: "13." },
        "\u2495": { text: "14." },
        "\u2496": { text: "15." },
        "\u2497": { text: "16." },
        "\u2498": { text: "17." },
        "\u2499": { text: "18." },
        "\u249A": { text: "19." },
        "\u249B": { text: "20." },
        "\u249C": { text: "(a)" },
        "\u249D": { text: "(b)" },
        "\u249E": { text: "(c)" },
        "\u249F": { text: "(d)" },
        "\u24A0": { text: "(e)" },
        "\u24A1": { text: "(f)" },
        "\u24A2": { text: "(g)" },
        "\u24A3": { text: "(h)" },
        "\u24A4": { text: "(i)" },
        "\u24A5": { text: "(j)" },
        "\u24A6": { text: "(k)" },
        "\u24A7": { text: "(l)" },
        "\u24A8": { text: "(m)" },
        "\u24A9": { text: "(n)" },
        "\u24AA": { text: "(o)" },
        "\u24AB": { text: "(p)" },
        "\u24AC": { text: "(q)" },
        "\u24AD": { text: "(r)" },
        "\u24AE": { text: "(s)" },
        "\u24AF": { text: "(t)" },
        "\u24B0": { text: "(u)" },
        "\u24B1": { text: "(v)" },
        "\u24B2": { text: "(w)" },
        "\u24B3": { text: "(x)" },
        "\u24B4": { text: "(y)" },
        "\u24B5": { text: "(z)" },
        "\u24B6": { text: "(A)" },
        "\u24B7": { text: "(B)" },
        "\u24B8": { text: "(C)" },
        "\u24B9": { text: "(D)" },
        "\u24BA": { text: "(E)" },
        "\u24BB": { text: "(F)" },
        "\u24BC": { text: "(G)" },
        "\u24BD": { text: "(H)" },
        "\u24BE": { text: "(I)" },
        "\u24BF": { text: "(J)" },
        "\u24C0": { text: "(K)" },
        "\u24C1": { text: "(L)" },
        "\u24C2": { text: "(M)" },
        "\u24C3": { text: "(N)" },
        "\u24C4": { text: "(O)" },
        "\u24C5": { text: "(P)" },
        "\u24C6": { text: "(Q)" },
        "\u24C7": { text: "(R)" },
        "\u24C8": { math: "\\circledS" },
        "\u24C9": { text: "(T)" },
        "\u24CA": { text: "(U)" },
        "\u24CB": { text: "(V)" },
        "\u24CC": { text: "(W)" },
        "\u24CD": { text: "(X)" },
        "\u24CE": { text: "(Y)" },
        "\u24CF": { text: "(Z)" },
        "\u24D0": { text: "(a)" },
        "\u24D1": { text: "(b)" },
        "\u24D2": { text: "(c)" },
        "\u24D3": { text: "(d)" },
        "\u24D4": { text: "(e)" },
        "\u24D5": { text: "(f)" },
        "\u24D6": { text: "(g)" },
        "\u24D7": { text: "(h)" },
        "\u24D8": { text: "(i)" },
        "\u24D9": { text: "(j)" },
        "\u24DA": { text: "(k)" },
        "\u24DB": { text: "(l)" },
        "\u24DC": { text: "(m)" },
        "\u24DD": { text: "(n)" },
        "\u24DE": { text: "(o)" },
        "\u24DF": { text: "(p)" },
        "\u24E0": { text: "(q)" },
        "\u24E1": { text: "(r)" },
        "\u24E2": { text: "(s)" },
        "\u24E3": { text: "(t)" },
        "\u24E4": { text: "(u)" },
        "\u24E5": { text: "(v)" },
        "\u24E6": { text: "(w)" },
        "\u24E7": { text: "(x)" },
        "\u24E8": { text: "(y)" },
        "\u24E9": { text: "(z)" },
        "\u24EA": { text: "(0)" },
        "\u2500": { text: "-" },
        "\u2501": { text: "=" },
        "\u2502": { text: "|" },
        "\u2503": { text: "|" },
        "\u2504": { text: "-" },
        "\u2505": { text: "=" },
        "\u2506": { math: "\\Elzdshfnc" },
        "\u2507": { text: "|" },
        "\u2508": { text: "-" },
        "\u2509": { text: "=" },
        "\u250A": { text: "|" },
        "\u250B": { text: "|" },
        "\u250C": { text: "+" },
        "\u250D": { text: "+" },
        "\u250E": { text: "+" },
        "\u250F": { text: "+" },
        "\u2510": { text: "+" },
        "\u2511": { text: "+" },
        "\u2512": { text: "+" },
        "\u2513": { text: "+" },
        "\u2514": { text: "+" },
        "\u2515": { text: "+" },
        "\u2516": { text: "+" },
        "\u2517": { text: "+" },
        "\u2518": { text: "+" },
        "\u2519": { math: "\\Elzsqfnw" },
        "\u251A": { text: "+" },
        "\u251B": { text: "+" },
        "\u251C": { text: "+" },
        "\u251D": { text: "+" },
        "\u251E": { text: "+" },
        "\u251F": { text: "+" },
        "\u2520": { text: "+" },
        "\u2521": { text: "+" },
        "\u2522": { text: "+" },
        "\u2523": { text: "+" },
        "\u2524": { text: "+" },
        "\u2525": { text: "+" },
        "\u2526": { text: "+" },
        "\u2527": { text: "+" },
        "\u2528": { text: "+" },
        "\u2529": { text: "+" },
        "\u252A": { text: "+" },
        "\u252B": { text: "+" },
        "\u252C": { text: "+" },
        "\u252D": { text: "+" },
        "\u252E": { text: "+" },
        "\u252F": { text: "+" },
        "\u2530": { text: "+" },
        "\u2531": { text: "+" },
        "\u2532": { text: "+" },
        "\u2533": { text: "+" },
        "\u2534": { text: "+" },
        "\u2535": { text: "+" },
        "\u2536": { text: "+" },
        "\u2537": { text: "+" },
        "\u2538": { text: "+" },
        "\u2539": { text: "+" },
        "\u253A": { text: "+" },
        "\u253B": { text: "+" },
        "\u253C": { text: "+" },
        "\u253D": { text: "+" },
        "\u253E": { text: "+" },
        "\u253F": { text: "+" },
        "\u2540": { text: "+" },
        "\u2541": { text: "+" },
        "\u2542": { text: "+" },
        "\u2543": { text: "+" },
        "\u2544": { text: "+" },
        "\u2545": { text: "+" },
        "\u2546": { text: "+" },
        "\u2547": { text: "+" },
        "\u2548": { text: "+" },
        "\u2549": { text: "+" },
        "\u254A": { text: "+" },
        "\u254B": { text: "+" },
        "\u254C": { text: "-" },
        "\u254D": { text: "=" },
        "\u254E": { text: "|" },
        "\u254F": { text: "|" },
        "\u2550": { text: "=" },
        "\u2551": { text: "|" },
        "\u2552": { text: "+" },
        "\u2553": { text: "+" },
        "\u2554": { text: "+" },
        "\u2555": { text: "+" },
        "\u2556": { text: "+" },
        "\u2557": { text: "+" },
        "\u2558": { text: "+" },
        "\u2559": { text: "+" },
        "\u255A": { text: "+" },
        "\u255B": { text: "+" },
        "\u255C": { text: "+" },
        "\u255D": { text: "+" },
        "\u255E": { text: "+" },
        "\u255F": { text: "+" },
        "\u2560": { text: "+" },
        "\u2561": { text: "+" },
        "\u2562": { text: "+" },
        "\u2563": { text: "+" },
        "\u2564": { text: "+" },
        "\u2565": { text: "+" },
        "\u2566": { text: "+" },
        "\u2567": { text: "+" },
        "\u2568": { text: "+" },
        "\u2569": { text: "+" },
        "\u256A": { text: "+" },
        "\u256B": { text: "+" },
        "\u256C": { text: "+" },
        "\u256D": { text: "+" },
        "\u256E": { text: "+" },
        "\u256F": { text: "+" },
        "\u2570": { text: "+" },
        "\u2571": { math: "\\diagup" },
        "\u2572": { text: "\\" },
        "\u2573": { text: "X" },
        "\u257C": { text: "-" },
        "\u257D": { text: "|" },
        "\u257E": { text: "-" },
        "\u257F": { text: "|" },
        "\u2580": { math: "\\blockuphalf" },
        "\u2584": { math: "\\blocklowhalf" },
        "\u2588": { math: "\\blockfull" },
        "\u258C": { math: "\\blocklefthalf" },
        "\u2590": { math: "\\blockrighthalf" },
        "\u2591": { math: "\\blockqtrshaded" },
        "\u2592": { math: "\\blockhalfshaded" },
        "\u2593": { math: "\\blockthreeqtrshaded" },
        "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
        "\u25A1": { math: "\\square" },
        "\u25A2": { math: "\\squoval" },
        "\u25A3": { math: "\\blackinwhitesquare" },
        "\u25A4": { math: "\\squarehfill" },
        "\u25A5": { math: "\\squarevfill" },
        "\u25A6": { math: "\\squarehvfill" },
        "\u25A7": { math: "\\squarenwsefill" },
        "\u25A8": { math: "\\squareneswfill" },
        "\u25A9": { math: "\\squarecrossfill" },
        "\u25AA": { math: "\\blacksquare" },
        "\u25AB": { math: "\\smwhtsquare" },
        "\u25AC": { math: "\\hrectangleblack" },
        "\u25AD": { math: "\\fbox{~~}" },
        "\u25AE": { math: "\\vrectangleblack" },
        "\u25AF": { math: "\\Elzvrecto" },
        "\u25B0": { math: "\\parallelogramblack" },
        "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
        "\u25B3": { math: "\\bigtriangleup" },
        "\u25B4": { math: "\\blacktriangle" },
        "\u25B5": { math: "\\vartriangle" },
        "\u25B6": { math: "\\RHD" },
        "\u25B7": { math: "\\rhd" },
        "\u25B8": { math: "\\blacktriangleright" },
        "\u25B9": { math: "\\triangleright" },
        "\u25BA": { math: "\\blackpointerright" },
        "\u25BB": { math: "\\whitepointerright" },
        "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
        "\u25BD": { math: "\\bigtriangledown" },
        "\u25BE": { math: "\\blacktriangledown" },
        "\u25BF": { math: "\\triangledown" },
        "\u25C0": { math: "\\LHD" },
        "\u25C1": { math: "\\lhd" },
        "\u25C2": { math: "\\blacktriangleleft" },
        "\u25C3": { math: "\\triangleleft" },
        "\u25C4": { math: "\\blackpointerleft" },
        "\u25C5": { math: "\\whitepointerleft" },
        "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
        "\u25C7": { math: "\\Diamond" },
        "\u25C8": { math: "\\blackinwhitediamond" },
        "\u25C9": { math: "\\fisheye" },
        "\u25CA": { math: "\\lozenge" },
        "\u25CB": { math: "\\bigcirc" },
        "\u25CC": { math: "\\dottedcircle" },
        "\u25CD": { math: "\\circlevertfill" },
        "\u25CE": { math: "\\bullseye" },
        "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
        "\u25D0": { math: "\\Elzcirfl" },
        "\u25D1": { math: "\\Elzcirfr" },
        "\u25D2": { math: "\\Elzcirfb" },
        "\u25D3": { math: "\\circletophalfblack" },
        "\u25D4": { math: "\\circleurquadblack" },
        "\u25D5": { math: "\\blackcircleulquadwhite" },
        "\u25D6": { math: "\\LEFTCIRCLE" },
        "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
        "\u25D8": { math: "\\Elzrvbull" },
        "\u25D9": { math: "\\inversewhitecircle" },
        "\u25DA": { math: "\\invwhiteupperhalfcircle" },
        "\u25DB": { math: "\\invwhitelowerhalfcircle" },
        "\u25DC": { math: "\\ularc" },
        "\u25DD": { math: "\\urarc" },
        "\u25DE": { math: "\\lrarc" },
        "\u25DF": { math: "\\llarc" },
        "\u25E0": { math: "\\topsemicircle" },
        "\u25E1": { math: "\\botsemicircle" },
        "\u25E2": { math: "\\lrblacktriangle" },
        "\u25E3": { math: "\\llblacktriangle" },
        "\u25E4": { math: "\\ulblacktriangle" },
        "\u25E5": { math: "\\urblacktriangle" },
        "\u25E6": { math: "\\smwhtcircle" },
        "\u25E7": { math: "\\Elzsqfl" },
        "\u25E8": { math: "\\Elzsqfr" },
        "\u25E9": { math: "\\squareulblack" },
        "\u25EA": { math: "\\Elzsqfse" },
        "\u25EB": { math: "\\boxbar" },
        "\u25EC": { math: "\\trianglecdot" },
        "\u25ED": { math: "\\triangleleftblack" },
        "\u25EE": { math: "\\trianglerightblack" },
        "\u25EF": { math: "\\bigcirc" },
        "\u25F0": { math: "\\squareulquad" },
        "\u25F1": { math: "\\squarellquad" },
        "\u25F2": { math: "\\squarelrquad" },
        "\u25F3": { math: "\\squareurquad" },
        "\u25F4": { math: "\\circleulquad" },
        "\u25F5": { math: "\\circlellquad" },
        "\u25F6": { math: "\\circlelrquad" },
        "\u25F7": { math: "\\circleurquad" },
        "\u25F8": { math: "\\ultriangle" },
        "\u25F9": { math: "\\urtriangle" },
        "\u25FA": { math: "\\lltriangle" },
        "\u25FB": { math: "\\square" },
        "\u25FC": { math: "\\blacksquare" },
        "\u25FD": { math: "\\mdsmwhtsquare" },
        "\u25FE": { math: "\\mdsmblksquare" },
        "\u25FF": { math: "\\lrtriangle" },
        "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
        "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
        "\u2609": { math: "\\Sun" },
        "\u260E": { text: "\\ding{37}" },
        "\u2610": { math: "\\Square" },
        "\u2611": { math: "\\CheckedBox" },
        "\u2612": { math: "\\XBox" },
        "\u2613": { text: "X" },
        "\u2615": { math: "\\steaming" },
        "\u261B": { text: "\\ding{42}" },
        "\u261E": { math: "\\pointright", text: "\\ding{43}" },
        "\u2620": { math: "\\skull" },
        "\u2621": { math: "\\danger" },
        "\u2622": { math: "\\radiation" },
        "\u2623": { math: "\\biohazard" },
        "\u262F": { math: "\\yinyang" },
        "\u2639": { math: "\\frownie" },
        "\u263A": { math: "\\smiley" },
        "\u263B": { math: "\\blacksmiley" },
        "\u263C": { math: "\\sun" },
        "\u263D": { text: "\\rightmoon", commandspacer: true, textpackages: ["wasysym"] },
        "\u263E": { text: "\\leftmoon", commandspacer: true, textpackages: ["wasysym"] },
        "\u263F": { math: "\\mercury", text: "\\mercury", commandspacer: true },
        "\u2640": { math: "\\female", text: "\\venus", commandspacer: true },
        "\u2641": { math: "\\earth" },
        "\u2642": { math: "\\male", text: "\\male", commandspacer: true },
        "\u2643": { math: "\\jupiter", text: "\\jupiter", commandspacer: true },
        "\u2644": { math: "\\saturn", text: "\\saturn", commandspacer: true },
        "\u2645": { math: "\\uranus", text: "\\uranus", commandspacer: true },
        "\u2646": { math: "\\neptune", text: "\\neptune", commandspacer: true },
        "\u2647": { math: "\\pluto", text: "\\pluto", commandspacer: true },
        "\u2648": { math: "\\aries", text: "\\aries", commandspacer: true },
        "\u2649": { math: "\\taurus", text: "\\taurus", commandspacer: true },
        "\u264A": { math: "\\gemini", text: "\\gemini", commandspacer: true },
        "\u264B": { math: "\\cancer", text: "\\cancer", commandspacer: true },
        "\u264C": { math: "\\leo", text: "\\leo", commandspacer: true },
        "\u264D": { math: "\\virgo", text: "\\virgo", commandspacer: true },
        "\u264E": { math: "\\libra", text: "\\libra", commandspacer: true },
        "\u264F": { math: "\\scorpio", text: "\\scorpio", commandspacer: true },
        "\u2650": { math: "\\sagittarius", text: "\\sagittarius", commandspacer: true },
        "\u2651": { math: "\\capricornus", text: "\\capricornus", commandspacer: true },
        "\u2652": { math: "\\aquarius", text: "\\aquarius", commandspacer: true },
        "\u2653": { math: "\\pisces", text: "\\pisces", commandspacer: true },
        "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
        "\u2661": { math: "\\heartsuit" },
        "\u2662": { math: "\\diamond" },
        "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
        "\u2664": { math: "\\varspadesuit" },
        "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
        "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
        "\u2667": { math: "\\varclubsuit" },
        "\u2669": { math: "\\quarternote", text: "\\quarternote", commandspacer: true },
        "\u266A": { math: "\\eighthnote", text: "\\eighthnote", commandspacer: true },
        "\u266B": { math: "\\twonotes" },
        "\u266C": { math: "\\sixteenthnote" },
        "\u266D": { math: "\\flat" },
        "\u266E": { math: "\\natural" },
        "\u266F": { math: "\\sharp" },
        "\u267B": { math: "\\recycle" },
        "\u267E": { math: "\\acidfree" },
        "\u2680": { math: "\\dicei" },
        "\u2681": { math: "\\diceii" },
        "\u2682": { math: "\\diceiii" },
        "\u2683": { math: "\\diceiv" },
        "\u2684": { math: "\\dicev" },
        "\u2685": { math: "\\dicevi" },
        "\u2686": { math: "\\circledrightdot" },
        "\u2687": { math: "\\circledtwodots" },
        "\u2688": { math: "\\blackcircledrightdot" },
        "\u2689": { math: "\\blackcircledtwodots" },
        "\u2693": { math: "\\anchor" },
        "\u2694": { math: "\\swords" },
        "\u26A0": { math: "\\warning" },
        "\u26A5": { math: "\\Hermaphrodite" },
        "\u26AA": { math: "\\medcirc" },
        "\u26AB": { math: "\\medbullet" },
        "\u26AC": { math: "\\mdsmwhtcircle" },
        "\u26B2": { math: "\\neuter" },
        "\u2701": { text: "\\ding{33}" },
        "\u2702": { text: "\\ding{34}" },
        "\u2703": { text: "\\ding{35}" },
        "\u2704": { text: "\\ding{36}" },
        "\u2706": { text: "\\ding{38}" },
        "\u2707": { text: "\\ding{39}" },
        "\u2708": { text: "\\ding{40}" },
        "\u2709": { text: "\\ding{41}" },
        "\u270C": { text: "\\ding{44}" },
        "\u270D": { text: "\\ding{45}" },
        "\u270E": { math: "\\pencil", text: "\\ding{46}" },
        "\u270F": { text: "\\ding{47}" },
        "\u2710": { text: "\\ding{48}" },
        "\u2711": { text: "\\ding{49}" },
        "\u2712": { text: "\\ding{50}" },
        "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
        "\u2714": { text: "\\ding{52}" },
        "\u2715": { text: "\\ding{53}" },
        "\u2716": { text: "\\ding{54}" },
        "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
        "\u2718": { text: "\\ding{56}" },
        "\u2719": { text: "\\ding{57}" },
        "\u271A": { text: "\\ding{58}" },
        "\u271B": { text: "\\ding{59}" },
        "\u271C": { text: "\\ding{60}" },
        "\u271D": { text: "\\ding{61}" },
        "\u271E": { text: "\\ding{62}" },
        "\u271F": { text: "\\ding{63}" },
        "\u2720": { math: "\\maltese", text: "\\ding{64}" },
        "\u2721": { text: "\\ding{65}" },
        "\u2722": { text: "\\ding{66}" },
        "\u2723": { text: "\\ding{67}" },
        "\u2724": { text: "\\ding{68}" },
        "\u2725": { text: "\\ding{69}" },
        "\u2726": { text: "\\ding{70}" },
        "\u2727": { text: "\\ding{71}" },
        "\u2729": { text: "\\ding{73}" },
        "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
        "\u272B": { text: "\\ding{75}" },
        "\u272C": { text: "\\ding{76}" },
        "\u272D": { text: "\\ding{77}" },
        "\u272E": { text: "\\ding{78}" },
        "\u272F": { text: "\\ding{79}" },
        "\u2730": { text: "\\ding{80}" },
        "\u2731": { text: "\\ding{81}" },
        "\u2732": { text: "\\ding{82}" },
        "\u2733": { text: "\\ding{83}" },
        "\u2734": { text: "\\ding{84}" },
        "\u2735": { text: "\\ding{85}" },
        "\u2736": { math: "\\varstar", text: "\\ding{86}" },
        "\u2737": { text: "\\ding{87}" },
        "\u2738": { text: "\\ding{88}" },
        "\u2739": { text: "\\ding{89}" },
        "\u273A": { text: "\\ding{90}" },
        "\u273B": { text: "\\ding{91}" },
        "\u273C": { text: "\\ding{92}" },
        "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
        "\u273E": { text: "\\ding{94}" },
        "\u273F": { text: "\\ding{95}" },
        "\u2740": { text: "\\ding{96}" },
        "\u2741": { text: "\\ding{97}" },
        "\u2742": { text: "\\ding{98}" },
        "\u2743": { text: "\\ding{99}" },
        "\u2744": { text: "\\ding{100}" },
        "\u2745": { text: "\\ding{101}" },
        "\u2746": { text: "\\ding{102}" },
        "\u2747": { text: "\\ding{103}" },
        "\u2748": { text: "\\ding{104}" },
        "\u2749": { text: "\\ding{105}" },
        "\u274A": { text: "\\ding{106}" },
        "\u274B": { text: "\\ding{107}" },
        "\u274D": { text: "\\ding{109}" },
        "\u274F": { text: "\\ding{111}" },
        "\u2750": { text: "\\ding{112}" },
        "\u2751": { text: "\\ding{113}" },
        "\u2752": { text: "\\ding{114}" },
        "\u2756": { text: "\\ding{118}" },
        "\u2758": { text: "\\ding{120}" },
        "\u2759": { text: "\\ding{121}" },
        "\u275A": { text: "\\ding{122}" },
        "\u275B": { text: "\\ding{123}" },
        "\u275C": { text: "\\ding{124}" },
        "\u275D": { text: "\\ding{125}" },
        "\u275E": { text: "\\ding{126}" },
        "\u2761": { text: "\\ding{161}" },
        "\u2762": { text: "\\ding{162}" },
        "\u2763": { text: "\\ding{163}" },
        "\u2764": { text: "\\ding{164}" },
        "\u2765": { text: "\\ding{165}" },
        "\u2766": { text: "\\ding{166}" },
        "\u2767": { text: "\\ding{167}" },
        "\u2772": { math: "\\lbrbrak" },
        "\u2773": { math: "\\rbrbrak" },
        "\u2776": { text: "\\ding{182}" },
        "\u2777": { text: "\\ding{183}" },
        "\u2778": { text: "\\ding{184}" },
        "\u2779": { text: "\\ding{185}" },
        "\u277A": { text: "\\ding{186}" },
        "\u277B": { text: "\\ding{187}" },
        "\u277C": { text: "\\ding{188}" },
        "\u277D": { text: "\\ding{189}" },
        "\u277E": { text: "\\ding{190}" },
        "\u277F": { text: "\\ding{191}" },
        "\u2780": { text: "\\ding{192}" },
        "\u2781": { text: "\\ding{193}" },
        "\u2782": { text: "\\ding{194}" },
        "\u2783": { text: "\\ding{195}" },
        "\u2784": { text: "\\ding{196}" },
        "\u2785": { text: "\\ding{197}" },
        "\u2786": { text: "\\ding{198}" },
        "\u2787": { text: "\\ding{199}" },
        "\u2788": { text: "\\ding{200}" },
        "\u2789": { text: "\\ding{201}" },
        "\u278A": { text: "\\ding{202}" },
        "\u278B": { text: "\\ding{203}" },
        "\u278C": { text: "\\ding{204}" },
        "\u278D": { text: "\\ding{205}" },
        "\u278E": { text: "\\ding{206}" },
        "\u278F": { text: "\\ding{207}" },
        "\u2790": { text: "\\ding{208}" },
        "\u2791": { text: "\\ding{209}" },
        "\u2792": { text: "\\ding{210}" },
        "\u2793": { text: "\\ding{211}" },
        "\u2794": { text: "\\ding{212}" },
        "\u2798": { text: "\\ding{216}" },
        "\u2799": { text: "\\ding{217}" },
        "\u279A": { text: "\\ding{218}" },
        "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
        "\u279C": { text: "\\ding{220}" },
        "\u279D": { text: "\\ding{221}" },
        "\u279E": { text: "\\ding{222}" },
        "\u279F": { text: "\\ding{223}" },
        "\u27A0": { text: "\\ding{224}" },
        "\u27A1": { text: "\\ding{225}" },
        "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
        "\u27A3": { text: "\\ding{227}" },
        "\u27A4": { text: "\\ding{228}" },
        "\u27A5": { text: "\\ding{229}" },
        "\u27A6": { text: "\\ding{230}" },
        "\u27A7": { text: "\\ding{231}" },
        "\u27A8": { text: "\\ding{232}" },
        "\u27A9": { text: "\\ding{233}" },
        "\u27AA": { text: "\\ding{234}" },
        "\u27AB": { text: "\\ding{235}" },
        "\u27AC": { text: "\\ding{236}" },
        "\u27AD": { text: "\\ding{237}" },
        "\u27AE": { text: "\\ding{238}" },
        "\u27AF": { text: "\\ding{239}" },
        "\u27B1": { text: "\\ding{241}" },
        "\u27B2": { text: "\\ding{242}" },
        "\u27B3": { text: "\\ding{243}" },
        "\u27B4": { text: "\\ding{244}" },
        "\u27B5": { text: "\\ding{245}" },
        "\u27B6": { text: "\\ding{246}" },
        "\u27B7": { text: "\\ding{247}" },
        "\u27B8": { text: "\\ding{248}" },
        "\u27B9": { text: "\\ding{249}" },
        "\u27BA": { text: "\\ding{250}" },
        "\u27BB": { text: "\\ding{251}" },
        "\u27BC": { text: "\\ding{252}" },
        "\u27BD": { text: "\\ding{253}" },
        "\u27BE": { text: "\\ding{254}" },
        "\u27C0": { math: "\\threedangle" },
        "\u27C1": { math: "\\whiteinwhitetriangle" },
        "\u27C2": { math: "\\perp" },
        "\u27C3": { math: "\\subsetcirc" },
        "\u27C4": { math: "\\supsetcirc" },
        "\u27C5": { math: "\\Lbag" },
        "\u27C6": { math: "\\Rbag" },
        "\u27C7": { math: "\\veedot" },
        "\u27C8": { math: "\\bsolhsub" },
        "\u27C9": { math: "\\suphsol" },
        "\u27CC": { math: "\\longdivision" },
        "\u27D0": { math: "\\Diamonddot" },
        "\u27D1": { math: "\\wedgedot" },
        "\u27D2": { math: "\\upin" },
        "\u27D3": { math: "\\pullback" },
        "\u27D4": { math: "\\pushout" },
        "\u27D5": { math: "\\leftouterjoin" },
        "\u27D6": { math: "\\rightouterjoin" },
        "\u27D7": { math: "\\fullouterjoin" },
        "\u27D8": { math: "\\bigbot" },
        "\u27D9": { math: "\\bigtop" },
        "\u27DA": { math: "\\DashVDash" },
        "\u27DB": { math: "\\dashVdash" },
        "\u27DC": { math: "\\multimapinv" },
        "\u27DD": { math: "\\vlongdash" },
        "\u27DE": { math: "\\longdashv" },
        "\u27DF": { math: "\\cirbot" },
        "\u27E0": { math: "\\lozengeminus" },
        "\u27E1": { math: "\\concavediamond" },
        "\u27E2": { math: "\\concavediamondtickleft" },
        "\u27E3": { math: "\\concavediamondtickright" },
        "\u27E4": { math: "\\whitesquaretickleft" },
        "\u27E5": { math: "\\whitesquaretickright" },
        "\u27E6": { math: "\\llbracket" },
        "\u27E7": { math: "\\rrbracket" },
        "\u27E8": { math: "\\langle" },
        "\u27E9": { math: "\\rangle" },
        "\u27EA": { math: "\\lang" },
        "\u27EB": { math: "\\rang" },
        "\u27EC": { math: "\\Lbrbrak" },
        "\u27ED": { math: "\\Rbrbrak" },
        "\u27EE": { math: "\\lgroup" },
        "\u27EF": { math: "\\rgroup" },
        "\u27F0": { math: "\\UUparrow" },
        "\u27F1": { math: "\\DDownarrow" },
        "\u27F2": { math: "\\acwgapcirclearrow" },
        "\u27F3": { math: "\\cwgapcirclearrow" },
        "\u27F4": { math: "\\rightarrowonoplus" },
        "\u27F5": { math: "\\longleftarrow" },
        "\u27F6": { math: "\\longrightarrow" },
        "\u27F7": { math: "\\longleftrightarrow" },
        "\u27F8": { math: "\\Longleftarrow" },
        "\u27F9": { math: "\\Longrightarrow" },
        "\u27FA": { math: "\\Longleftrightarrow" },
        "\u27FB": { math: "\\longmapsfrom" },
        "\u27FC": { math: "\\longmapsto" },
        "\u27FD": { math: "\\Longmapsfrom" },
        "\u27FE": { math: "\\Longmapsto" },
        "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
        "\u2900": { math: "\\psur" },
        "\u2901": { math: "\\nVtwoheadrightarrow" },
        "\u2902": { math: "\\nvLeftarrow" },
        "\u2903": { math: "\\nvRightarrow" },
        "\u2904": { math: "\\nvLeftrightarrow" },
        "\u2906": { math: "\\Mapsfrom" },
        "\u2907": { math: "\\Mapsto" },
        "\u2908": { math: "\\downarrowbarred" },
        "\u2909": { math: "\\uparrowbarred" },
        "\u290A": { math: "\\Uuparrow" },
        "\u290B": { math: "\\Ddownarrow" },
        "\u290C": { math: "\\leftbkarrow" },
        "\u290D": { math: "\\rightbkarrow" },
        "\u290E": { math: "\\leftdbkarrow" },
        "\u290F": { math: "\\dbkarow" },
        "\u2910": { math: "\\drbkarow" },
        "\u2911": { math: "\\rightdotarrow" },
        "\u2912": { math: "\\UpArrowBar" },
        "\u2913": { math: "\\DownArrowBar" },
        "\u2914": { math: "\\pinj" },
        "\u2915": { math: "\\finj" },
        "\u2916": { math: "\\bij" },
        "\u2917": { math: "\\nvtwoheadrightarrowtail" },
        "\u2918": { math: "\\nVtwoheadrightarrowtail" },
        "\u2919": { math: "\\lefttail" },
        "\u291A": { math: "\\righttail" },
        "\u291B": { math: "\\leftdbltail" },
        "\u291C": { math: "\\rightdbltail" },
        "\u291D": { math: "\\diamondleftarrow" },
        "\u291E": { math: "\\rightarrowdiamond" },
        "\u291F": { math: "\\diamondleftarrowbar" },
        "\u2920": { math: "\\barrightarrowdiamond" },
        "\u2921": { math: "\\nwsearrow" },
        "\u2922": { math: "\\neswarrow" },
        "\u292B": { math: "\\rdiagovfdiag" },
        "\u292C": { math: "\\fdiagovrdiag" },
        "\u292D": { math: "\\seovnearrow" },
        "\u292E": { math: "\\neovsearrow" },
        "\u292F": { math: "\\fdiagovnearrow" },
        "\u2930": { math: "\\rdiagovsearrow" },
        "\u2931": { math: "\\neovnwarrow" },
        "\u2932": { math: "\\nwovnearrow" },
        "\u2934": { math: "\\uprightcurvearrow" },
        "\u2935": { math: "\\downrightcurvedarrow" },
        "\u2938": { math: "\\cwrightarcarrow" },
        "\u2939": { math: "\\acwleftarcarrow" },
        "\u293A": { math: "\\acwoverarcarrow" },
        "\u293B": { math: "\\acwunderarcarrow" },
        "\u293C": { math: "\\curvearrowrightminus" },
        "\u293D": { math: "\\curvearrowleftplus" },
        "\u293E": { math: "\\cwundercurvearrow" },
        "\u293F": { math: "\\ccwundercurvearrow" },
        "\u2940": { math: "\\Elolarr" },
        "\u2941": { math: "\\Elorarr" },
        "\u2942": { math: "\\ElzRlarr" },
        "\u2943": { math: "\\leftarrowshortrightarrow" },
        "\u2944": { math: "\\ElzrLarr" },
        "\u2945": { math: "\\rightarrowplus" },
        "\u2946": { math: "\\leftarrowplus" },
        "\u2947": { math: "\\Elzrarrx" },
        "\u2948": { math: "\\leftrightarrowcircle" },
        "\u2949": { math: "\\twoheaduparrowcircle" },
        "\u294A": { math: "\\leftrightharpoon" },
        "\u294B": { math: "\\rightleftharpoon" },
        "\u294C": { math: "\\updownharpoonrightleft" },
        "\u294D": { math: "\\updownharpoonleftright" },
        "\u294E": { math: "\\LeftRightVector" },
        "\u294F": { math: "\\RightUpDownVector" },
        "\u2950": { math: "\\DownLeftRightVector" },
        "\u2951": { math: "\\LeftUpDownVector" },
        "\u2952": { math: "\\LeftVectorBar" },
        "\u2953": { math: "\\RightVectorBar" },
        "\u2954": { math: "\\RightUpVectorBar" },
        "\u2955": { math: "\\RightDownVectorBar" },
        "\u2956": { math: "\\DownLeftVectorBar" },
        "\u2957": { math: "\\DownRightVectorBar" },
        "\u2958": { math: "\\LeftUpVectorBar" },
        "\u2959": { math: "\\LeftDownVectorBar" },
        "\u295A": { math: "\\LeftTeeVector" },
        "\u295B": { math: "\\RightTeeVector" },
        "\u295C": { math: "\\RightUpTeeVector" },
        "\u295D": { math: "\\RightDownTeeVector" },
        "\u295E": { math: "\\DownLeftTeeVector" },
        "\u295F": { math: "\\DownRightTeeVector" },
        "\u2960": { math: "\\LeftUpTeeVector" },
        "\u2961": { math: "\\LeftDownTeeVector" },
        "\u2962": { math: "\\leftleftharpoons" },
        "\u2963": { math: "\\upupharpoons" },
        "\u2964": { math: "\\rightrightharpoons" },
        "\u2965": { math: "\\downdownharpoons" },
        "\u2966": { math: "\\leftrightharpoonsup" },
        "\u2967": { math: "\\leftrightharpoonsdown" },
        "\u2968": { math: "\\rightleftharpoonsup" },
        "\u2969": { math: "\\rightleftharpoonsdown" },
        "\u296A": { math: "\\leftbarharpoon" },
        "\u296B": { math: "\\barleftharpoon" },
        "\u296C": { math: "\\rightbarharpoon" },
        "\u296D": { math: "\\barrightharpoon" },
        "\u296E": { math: "\\UpEquilibrium" },
        "\u296F": { math: "\\ReverseUpEquilibrium" },
        "\u2970": { math: "\\RoundImplies" },
        "\u2971": { math: "\\equalrightarrow" },
        "\u2972": { math: "\\similarrightarrow" },
        "\u2973": { math: "\\leftarrowsimilar" },
        "\u2974": { math: "\\rightarrowsimilar" },
        "\u2975": { math: "\\rightarrowapprox" },
        "\u2976": { math: "\\ltlarr" },
        "\u2977": { math: "\\leftarrowless" },
        "\u2978": { math: "\\gtrarr" },
        "\u2979": { math: "\\subrarr" },
        "\u297A": { math: "\\leftarrowsubset" },
        "\u297B": { math: "\\suplarr" },
        "\u297E": { math: "\\upfishtail" },
        "\u297F": { math: "\\downfishtail" },
        "\u2980": { math: "\\Elztfnc" },
        "\u2981": { math: "\\spot" },
        "\u2982": { math: "\\typecolon" },
        "\u2983": { math: "\\lBrace" },
        "\u2984": { math: "\\rBrace" },
        "\u2986": { math: "\\Elroang" },
        "\u2987": { math: "\\limg" },
        "\u2988": { math: "\\rimg" },
        "\u2989": { math: "\\lblot" },
        "\u298A": { math: "\\rblot" },
        "\u298B": { math: "\\lbrackubar" },
        "\u298C": { math: "\\rbrackubar" },
        "\u298D": { math: "\\lbrackultick" },
        "\u298E": { math: "\\rbracklrtick" },
        "\u298F": { math: "\\lbracklltick" },
        "\u2990": { math: "\\rbrackurtick" },
        "\u2991": { math: "\\langledot" },
        "\u2992": { math: "\\rangledot" },
        "\u2993": { math: "<\\kern-0.58em(" },
        "\u2995": { math: "\\Lparengtr" },
        "\u2996": { math: "\\Rparenless" },
        "\u2997": { math: "\\lblkbrbrak" },
        "\u2998": { math: "\\rblkbrbrak" },
        "\u2999": { math: "\\Elzddfnc" },
        "\u299A": { math: "\\vzigzag" },
        "\u299B": { math: "\\measuredangleleft" },
        "\u299C": { math: "\\Angle" },
        "\u299D": { math: "\\rightanglemdot" },
        "\u299E": { math: "\\angles" },
        "\u299F": { math: "\\angdnr" },
        "\u29A0": { math: "\\Elzlpargt" },
        "\u29A1": { math: "\\sphericalangleup" },
        "\u29A2": { math: "\\turnangle" },
        "\u29A3": { math: "\\revangle" },
        "\u29A4": { math: "\\angleubar" },
        "\u29A5": { math: "\\revangleubar" },
        "\u29A6": { math: "\\wideangledown" },
        "\u29A7": { math: "\\wideangleup" },
        "\u29A8": { math: "\\measanglerutone" },
        "\u29A9": { math: "\\measanglelutonw" },
        "\u29AA": { math: "\\measanglerdtose" },
        "\u29AB": { math: "\\measangleldtosw" },
        "\u29AC": { math: "\\measangleurtone" },
        "\u29AD": { math: "\\measangleultonw" },
        "\u29AE": { math: "\\measangledrtose" },
        "\u29AF": { math: "\\measangledltosw" },
        "\u29B0": { math: "\\revemptyset" },
        "\u29B1": { math: "\\emptysetobar" },
        "\u29B2": { math: "\\emptysetocirc" },
        "\u29B3": { math: "\\emptysetoarr" },
        "\u29B4": { math: "\\emptysetoarrl" },
        "\u29B7": { math: "\\circledparallel" },
        "\u29B8": { math: "\\circledbslash" },
        "\u29B9": { math: "\\operp" },
        "\u29BA": { math: "\\obot" },
        "\u29BB": { math: "\\olcross" },
        "\u29BC": { math: "\\odotslashdot" },
        "\u29BD": { math: "\\uparrowoncircle" },
        "\u29BE": { math: "\\circledwhitebullet" },
        "\u29BF": { math: "\\circledbullet" },
        "\u29C0": { math: "\\circledless" },
        "\u29C1": { math: "\\circledgtr" },
        "\u29C2": { math: "\\cirscir" },
        "\u29C3": { math: "\\cirE" },
        "\u29C4": { math: "\\boxslash" },
        "\u29C5": { math: "\\boxbslash" },
        "\u29C6": { math: "\\boxast" },
        "\u29C7": { math: "\\boxcircle" },
        "\u29C8": { math: "\\boxbox" },
        "\u29C9": { math: "\\boxonbox" },
        "\u29CA": { math: "\\ElzLap" },
        "\u29CB": { math: "\\Elzdefas" },
        "\u29CC": { math: "\\triangles" },
        "\u29CD": { math: "\\triangleserifs" },
        "\u29CE": { math: "\\rtriltri" },
        "\u29CF": { math: "\\LeftTriangleBar" },
        "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
        "\u29D0": { math: "\\RightTriangleBar" },
        "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
        "\u29D1": { math: "\\lfbowtie" },
        "\u29D2": { math: "\\rfbowtie" },
        "\u29D3": { math: "\\fbowtie" },
        "\u29D4": { math: "\\lftimes" },
        "\u29D5": { math: "\\rftimes" },
        "\u29D6": { math: "\\hourglass" },
        "\u29D7": { math: "\\blackhourglass" },
        "\u29D8": { math: "\\lvzigzag" },
        "\u29D9": { math: "\\rvzigzag" },
        "\u29DA": { math: "\\Lvzigzag" },
        "\u29DB": { math: "\\Rvzigzag" },
        "\u29DD": { math: "\\tieinfty" },
        "\u29DE": { math: "\\nvinfty" },
        "\u29DF": { math: "\\multimapboth" },
        "\u29E0": { math: "\\laplac" },
        "\u29E1": { math: "\\lrtriangleeq" },
        "\u29E2": { math: "\\shuffle" },
        "\u29E3": { math: "\\eparsl" },
        "\u29E4": { math: "\\smeparsl" },
        "\u29E5": { math: "\\eqvparsl" },
        "\u29E6": { math: "\\gleichstark" },
        "\u29E7": { math: "\\thermod" },
        "\u29E8": { math: "\\downtriangleleftblack" },
        "\u29E9": { math: "\\downtrianglerightblack" },
        "\u29EA": { math: "\\blackdiamonddownarrow" },
        "\u29EB": { math: "\\blacklozenge" },
        "\u29EC": { math: "\\circledownarrow" },
        "\u29ED": { math: "\\blackcircledownarrow" },
        "\u29EE": { math: "\\errbarsquare" },
        "\u29EF": { math: "\\errbarblacksquare" },
        "\u29F0": { math: "\\errbardiamond" },
        "\u29F1": { math: "\\errbarblackdiamond" },
        "\u29F2": { math: "\\errbarcircle" },
        "\u29F3": { math: "\\errbarblackcircle" },
        "\u29F4": { math: "\\RuleDelayed" },
        "\u29F5": { math: "\\setminus" },
        "\u29F6": { math: "\\dsol" },
        "\u29F7": { math: "\\rsolbar" },
        "\u29F8": { math: "\\xsol" },
        "\u29F9": { math: "\\zhide" },
        "\u29FA": { math: "\\doubleplus" },
        "\u29FB": { math: "\\tripleplus" },
        "\u29FC": { math: "\\lcurvyangle" },
        "\u29FD": { math: "\\rcurvyangle" },
        "\u29FE": { math: "\\tplus" },
        "\u29FF": { math: "\\tminus" },
        "\u2A00": { math: "\\bigodot" },
        "\u2A01": { math: "\\bigoplus" },
        "\u2A02": { math: "\\bigotimes" },
        "\u2A03": { math: "\\bigcupdot" },
        "\u2A04": { math: "\\Elxuplus" },
        "\u2A05": { math: "\\ElzThr" },
        "\u2A06": { math: "\\Elxsqcup" },
        "\u2A07": { math: "\\ElzInf" },
        "\u2A08": { math: "\\ElzSup" },
        "\u2A09": { math: "\\varprod" },
        "\u2A0A": { math: "\\modtwosum" },
        "\u2A0B": { math: "\\sumint" },
        "\u2A0C": { math: "\\iiiint" },
        "\u2A0D": { math: "\\ElzCint" },
        "\u2A0E": { math: "\\intBar" },
        "\u2A0F": { math: "\\clockoint" },
        "\u2A11": { math: "\\awint" },
        "\u2A12": { math: "\\rppolint" },
        "\u2A13": { math: "\\scpolint" },
        "\u2A14": { math: "\\npolint" },
        "\u2A15": { math: "\\pointint" },
        "\u2A16": { math: "\\sqrint" },
        "\u2A17": { math: "\\intlarhk" },
        "\u2A18": { math: "\\intx" },
        "\u2A19": { math: "\\intcap" },
        "\u2A1A": { math: "\\intcup" },
        "\u2A1B": { math: "\\upint" },
        "\u2A1C": { math: "\\lowint" },
        "\u2A1D": { math: "\\Join" },
        "\u2A1E": { math: "\\bigtriangleleft" },
        "\u2A1F": { math: "\\zcmp" },
        "\u2A20": { math: "\\zpipe" },
        "\u2A21": { math: "\\zproject" },
        "\u2A22": { math: "\\ringplus" },
        "\u2A23": { math: "\\plushat" },
        "\u2A24": { math: "\\simplus" },
        "\u2A26": { math: "\\plussim" },
        "\u2A27": { math: "\\plussubtwo" },
        "\u2A28": { math: "\\plustrif" },
        "\u2A29": { math: "\\commaminus" },
        "\u2A2B": { math: "\\minusfdots" },
        "\u2A2C": { math: "\\minusrdots" },
        "\u2A2F": { math: "\\ElzTimes" },
        "\u2A30": { math: "\\dottimes" },
        "\u2A31": { math: "\\timesbar" },
        "\u2A32": { math: "\\btimes" },
        "\u2A33": { math: "\\smashtimes" },
        "\u2A36": { math: "\\otimeshat" },
        "\u2A37": { math: "\\Otimes" },
        "\u2A38": { math: "\\odiv" },
        "\u2A39": { math: "\\triangleplus" },
        "\u2A3A": { math: "\\triangleminus" },
        "\u2A3B": { math: "\\triangletimes" },
        "\u2A3D": { math: "\\intprodr" },
        "\u2A3E": { math: "\\fcmp" },
        "\u2A3F": { math: "\\amalg" },
        "\u2A40": { math: "\\capdot" },
        "\u2A41": { math: "\\uminus" },
        "\u2A42": { math: "\\barcup" },
        "\u2A43": { math: "\\barcap" },
        "\u2A44": { math: "\\capwedge" },
        "\u2A45": { math: "\\cupvee" },
        "\u2A46": { math: "\\cupovercap" },
        "\u2A47": { math: "\\capovercup" },
        "\u2A48": { math: "\\cupbarcap" },
        "\u2A49": { math: "\\capbarcup" },
        "\u2A4A": { math: "\\twocups" },
        "\u2A4B": { math: "\\twocaps" },
        "\u2A4C": { math: "\\closedvarcup" },
        "\u2A4D": { math: "\\closedvarcap" },
        "\u2A4E": { math: "\\Sqcap" },
        "\u2A4F": { math: "\\Sqcup" },
        "\u2A50": { math: "\\closedvarcupsmashprod" },
        "\u2A51": { math: "\\wedgeodot" },
        "\u2A52": { math: "\\veeodot" },
        "\u2A53": { math: "\\ElzAnd" },
        "\u2A54": { math: "\\ElzOr" },
        "\u2A56": { math: "\\ElOr" },
        "\u2A57": { math: "\\bigslopedvee" },
        "\u2A58": { math: "\\bigslopedwedge" },
        "\u2A59": { math: "\\veeonwedge" },
        "\u2A5A": { math: "\\wedgemidvert" },
        "\u2A5B": { math: "\\veemidvert" },
        "\u2A5C": { math: "\\midbarwedge" },
        "\u2A5D": { math: "\\midbarvee" },
        "\u2A5E": { math: "\\perspcorrespond" },
        "\u2A5F": { math: "\\Elzminhat" },
        "\u2A60": { math: "\\wedgedoublebar" },
        "\u2A61": { math: "\\varveebar" },
        "\u2A62": { math: "\\doublebarvee" },
        "\u2A64": { math: "\\dsub" },
        "\u2A65": { math: "\\rsub" },
        "\u2A66": { math: "\\eqdot" },
        "\u2A67": { math: "\\dotequiv" },
        "\u2A68": { math: "\\equivVert" },
        "\u2A69": { math: "\\equivVvert" },
        "\u2A6A": { math: "\\dotsim" },
        "\u2A6B": { math: "\\simrdots" },
        "\u2A6C": { math: "\\simminussim" },
        "\u2A6D": { math: "\\congdot" },
        "\u2A6E": { math: "\\stackrel{*}{=}" },
        "\u2A6F": { math: "\\hatapprox" },
        "\u2A70": { math: "\\approxeqq" },
        "\u2A71": { math: "\\eqqplus" },
        "\u2A72": { math: "\\pluseqq" },
        "\u2A73": { math: "\\eqqsim" },
        "\u2A74": { math: "\\Coloneqq" },
        "\u2A75": { math: "\\Equal" },
        "\u2A76": { math: "\\Same" },
        "\u2A77": { math: "\\ddotseq" },
        "\u2A78": { math: "\\equivDD" },
        "\u2A79": { math: "\\ltcir" },
        "\u2A7A": { math: "\\gtcir" },
        "\u2A7B": { math: "\\ltquest" },
        "\u2A7C": { math: "\\gtquest" },
        "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
        "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
        "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
        "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
        "\u2A7F": { math: "\\lesdot" },
        "\u2A80": { math: "\\gesdot" },
        "\u2A81": { math: "\\lesdoto" },
        "\u2A82": { math: "\\gesdoto" },
        "\u2A83": { math: "\\lesdotor" },
        "\u2A84": { math: "\\gesdotol" },
        "\u2A85": { math: "\\lessapprox" },
        "\u2A86": { math: "\\gtrapprox" },
        "\u2A87": { math: "\\lneq" },
        "\u2A88": { math: "\\gneq" },
        "\u2A89": { math: "\\lnapprox" },
        "\u2A8A": { math: "\\gnapprox" },
        "\u2A8B": { math: "\\lesseqqgtr" },
        "\u2A8C": { math: "\\gtreqqless" },
        "\u2A8D": { math: "\\lsime" },
        "\u2A8E": { math: "\\gsime" },
        "\u2A8F": { math: "\\lsimg" },
        "\u2A90": { math: "\\gsiml" },
        "\u2A91": { math: "\\lgE" },
        "\u2A92": { math: "\\glE" },
        "\u2A93": { math: "\\lesges" },
        "\u2A94": { math: "\\gesles" },
        "\u2A95": { math: "\\eqslantless" },
        "\u2A96": { math: "\\eqslantgtr" },
        "\u2A97": { math: "\\elsdot" },
        "\u2A98": { math: "\\egsdot" },
        "\u2A99": { math: "\\eqqless" },
        "\u2A9A": { math: "\\eqqgtr" },
        "\u2A9B": { math: "\\eqqslantless" },
        "\u2A9C": { math: "\\eqqslantgtr" },
        "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
        "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
        "\u2A9F": { math: "\\simlE" },
        "\u2AA0": { math: "\\simgE" },
        "\u2AA1": { math: "\\NestedLessLess" },
        "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
        "\u2AA2": { math: "\\NestedGreaterGreater" },
        "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
        "\u2AA3": { math: "\\partialmeetcontraction" },
        "\u2AA4": { math: "\\glj" },
        "\u2AA5": { math: "\\gla" },
        "\u2AA6": { math: "\\leftslice" },
        "\u2AA7": { math: "\\rightslice" },
        "\u2AA8": { math: "\\lescc" },
        "\u2AA9": { math: "\\gescc" },
        "\u2AAA": { math: "\\smt" },
        "\u2AAB": { math: "\\lat" },
        "\u2AAC": { math: "\\smte" },
        "\u2AAD": { math: "\\late" },
        "\u2AAE": { math: "\\bumpeqq" },
        "\u2AAF": { math: "\\preceq" },
        "\u2AAF\u0338": { math: "\\not\\preceq" },
        "\u2AB0": { math: "\\succeq" },
        "\u2AB0\u0338": { math: "\\not\\succeq" },
        "\u2AB1": { math: "\\precneq" },
        "\u2AB2": { math: "\\succneq" },
        "\u2AB3": { math: "\\preceqq" },
        "\u2AB4": { math: "\\succeqq" },
        "\u2AB5": { math: "\\precneqq" },
        "\u2AB6": { math: "\\succneqq" },
        "\u2AB7": { math: "\\precapprox" },
        "\u2AB8": { math: "\\succapprox" },
        "\u2AB9": { math: "\\precnapprox" },
        "\u2ABA": { math: "\\succnapprox" },
        "\u2ABB": { math: "\\llcurly" },
        "\u2ABC": { math: "\\ggcurly" },
        "\u2ABD": { math: "\\subsetdot" },
        "\u2ABE": { math: "\\supsetdot" },
        "\u2ABF": { math: "\\subsetplus" },
        "\u2AC0": { math: "\\supsetplus" },
        "\u2AC1": { math: "\\submult" },
        "\u2AC2": { math: "\\supmult" },
        "\u2AC3": { math: "\\subedot" },
        "\u2AC4": { math: "\\supedot" },
        "\u2AC5": { math: "\\subseteqq" },
        "\u2AC5\u0338": { math: "\\nsubseteqq" },
        "\u2AC6": { math: "\\supseteqq" },
        "\u2AC6\u0338": { math: "\\nsupseteqq" },
        "\u2AC7": { math: "\\subsim" },
        "\u2AC8": { math: "\\supsim" },
        "\u2AC9": { math: "\\subsetapprox" },
        "\u2ACA": { math: "\\supsetapprox" },
        "\u2ACB": { math: "\\subsetneqq" },
        "\u2ACC": { math: "\\supsetneqq" },
        "\u2ACD": { math: "\\lsqhook" },
        "\u2ACE": { math: "\\rsqhook" },
        "\u2ACF": { math: "\\csub" },
        "\u2AD0": { math: "\\csup" },
        "\u2AD1": { math: "\\csube" },
        "\u2AD2": { math: "\\csupe" },
        "\u2AD3": { math: "\\subsup" },
        "\u2AD4": { math: "\\supsub" },
        "\u2AD5": { math: "\\subsub" },
        "\u2AD6": { math: "\\supsup" },
        "\u2AD7": { math: "\\suphsub" },
        "\u2AD8": { math: "\\supdsub" },
        "\u2AD9": { math: "\\forkv" },
        "\u2ADA": { math: "\\topfork" },
        "\u2ADB": { math: "\\mlcp" },
        "\u2ADC": { math: "\\forks" },
        "\u2ADD": { math: "\\forksnot" },
        "\u2ADD\u0338": { math: "\\forks" },
        "\u2ADE": { math: "\\shortlefttack" },
        "\u2ADF": { math: "\\shortdowntack" },
        "\u2AE0": { math: "\\shortuptack" },
        "\u2AE1": { math: "\\perps" },
        "\u2AE2": { math: "\\vDdash" },
        "\u2AE3": { math: "\\dashV" },
        "\u2AE4": { math: "\\Dashv" },
        "\u2AE5": { math: "\\DashV" },
        "\u2AE6": { math: "\\varVdash" },
        "\u2AE7": { math: "\\Barv" },
        "\u2AE8": { math: "\\vBar" },
        "\u2AE9": { math: "\\vBarv" },
        "\u2AEA": { math: "\\Top" },
        "\u2AEC": { math: "\\Not" },
        "\u2AED": { math: "\\bNot" },
        "\u2AEE": { math: "\\revnmid" },
        "\u2AEF": { math: "\\cirmid" },
        "\u2AF0": { math: "\\midcir" },
        "\u2AF1": { math: "\\topcir" },
        "\u2AF2": { math: "\\nhpar" },
        "\u2AF3": { math: "\\parsim" },
        "\u2AF4": { math: "\\interleave" },
        "\u2AF5": { math: "\\nhVvert" },
        "\u2AF6": { math: "\\Elztdcol" },
        "\u2AF7": { math: "\\lllnest" },
        "\u2AF8": { math: "\\gggnest" },
        "\u2AF9": { math: "\\leqqslant" },
        "\u2AFA": { math: "\\geqqslant" },
        "\u2AFB": { math: "\\trslash" },
        "\u2AFC": { math: "\\biginterleave" },
        "\u2AFD": { math: "{{/}\\!\\!{/}}" },
        "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
        "\u2AFE": { math: "\\talloblong" },
        "\u2AFF": { math: "\\bigtalloblong" },
        "\u2B12": { math: "\\squaretopblack" },
        "\u2B13": { math: "\\squarebotblack" },
        "\u2B14": { math: "\\squareurblack" },
        "\u2B15": { math: "\\squarellblack" },
        "\u2B16": { math: "\\diamondleftblack" },
        "\u2B17": { math: "\\diamondrightblack" },
        "\u2B18": { math: "\\diamondtopblack" },
        "\u2B19": { math: "\\diamondbotblack" },
        "\u2B1A": { math: "\\dottedsquare" },
        "\u2B1B": { math: "\\blacksquare" },
        "\u2B1C": { math: "\\square" },
        "\u2B1D": { math: "\\vysmblksquare" },
        "\u2B1E": { math: "\\vysmwhtsquare" },
        "\u2B1F": { math: "\\pentagonblack" },
        "\u2B20": { math: "\\pentagon" },
        "\u2B21": { math: "\\varhexagon" },
        "\u2B22": { math: "\\varhexagonblack" },
        "\u2B23": { math: "\\hexagonblack" },
        "\u2B24": { math: "\\lgblkcircle" },
        "\u2B25": { math: "\\mdblkdiamond" },
        "\u2B26": { math: "\\mdwhtdiamond" },
        "\u2B27": { math: "\\mdblklozenge" },
        "\u2B28": { math: "\\mdwhtlozenge" },
        "\u2B29": { math: "\\smblkdiamond" },
        "\u2B2A": { math: "\\smblklozenge" },
        "\u2B2B": { math: "\\smwhtlozenge" },
        "\u2B2C": { math: "\\blkhorzoval" },
        "\u2B2D": { math: "\\whthorzoval" },
        "\u2B2E": { math: "\\blkvertoval" },
        "\u2B2F": { math: "\\whtvertoval" },
        "\u2B30": { math: "\\circleonleftarrow" },
        "\u2B31": { math: "\\leftthreearrows" },
        "\u2B32": { math: "\\leftarrowonoplus" },
        "\u2B33": { math: "\\longleftsquigarrow" },
        "\u2B34": { math: "\\nvtwoheadleftarrow" },
        "\u2B35": { math: "\\nVtwoheadleftarrow" },
        "\u2B36": { math: "\\twoheadmapsfrom" },
        "\u2B37": { math: "\\twoheadleftdbkarrow" },
        "\u2B38": { math: "\\leftdotarrow" },
        "\u2B39": { math: "\\nvleftarrowtail" },
        "\u2B3A": { math: "\\nVleftarrowtail" },
        "\u2B3B": { math: "\\twoheadleftarrowtail" },
        "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
        "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
        "\u2B3E": { math: "\\leftarrowx" },
        "\u2B3F": { math: "\\leftcurvedarrow" },
        "\u2B40": { math: "\\equalleftarrow" },
        "\u2B41": { math: "\\bsimilarleftarrow" },
        "\u2B42": { math: "\\leftarrowbackapprox" },
        "\u2B43": { math: "\\rightarrowgtr" },
        "\u2B44": { math: "\\rightarrowsupset" },
        "\u2B45": { math: "\\LLeftarrow" },
        "\u2B46": { math: "\\RRightarrow" },
        "\u2B47": { math: "\\bsimilarrightarrow" },
        "\u2B48": { math: "\\rightarrowbackapprox" },
        "\u2B49": { math: "\\similarleftarrow" },
        "\u2B4A": { math: "\\leftarrowapprox" },
        "\u2B4B": { math: "\\leftarrowbsimilar" },
        "\u2B4C": { math: "\\rightarrowbsimilar" },
        "\u2B50": { math: "\\medwhitestar" },
        "\u2B51": { math: "\\medblackstar" },
        "\u2B52": { math: "\\smwhitestar" },
        "\u2B53": { math: "\\rightpentagonblack" },
        "\u2B54": { math: "\\rightpentagon" },
        "\u3008": { math: "\\langle" },
        "\u3009": { math: "\\rangle" },
        "\u3012": { math: "\\postalmark" },
        "\u3014": { math: "\\lbrbrak" },
        "\u3015": { math: "\\rbrbrak" },
        "\u301A": { math: "\\openbracketleft" },
        "\u301B": { math: "\\openbracketright" },
        "\u3030": { math: "\\hzigzag" },
        \uFB00: { text: "ff" },
        \uFB01: { text: "fi" },
        \uFB02: { text: "fl" },
        \uFB03: { text: "ffi" },
        \uFB04: { text: "ffl" },
        \uFB05: { text: "st" },
        \uFB06: { text: "st" },
        "\uFFFD": { text: "\\dbend", commandspacer: true },
        "\u{1D400}": { math: "\\mathbf{A}" },
        "\u{1D401}": { math: "\\mathbf{B}" },
        "\u{1D402}": { math: "\\mathbf{C}" },
        "\u{1D403}": { math: "\\mathbf{D}" },
        "\u{1D404}": { math: "\\mathbf{E}" },
        "\u{1D405}": { math: "\\mathbf{F}" },
        "\u{1D406}": { math: "\\mathbf{G}" },
        "\u{1D407}": { math: "\\mathbf{H}" },
        "\u{1D408}": { math: "\\mathbf{I}" },
        "\u{1D409}": { math: "\\mathbf{J}" },
        "\u{1D40A}": { math: "\\mathbf{K}" },
        "\u{1D40B}": { math: "\\mathbf{L}" },
        "\u{1D40C}": { math: "\\mathbf{M}" },
        "\u{1D40D}": { math: "\\mathbf{N}" },
        "\u{1D40E}": { math: "\\mathbf{O}" },
        "\u{1D40F}": { math: "\\mathbf{P}" },
        "\u{1D410}": { math: "\\mathbf{Q}" },
        "\u{1D411}": { math: "\\mathbf{R}" },
        "\u{1D412}": { math: "\\mathbf{S}" },
        "\u{1D413}": { math: "\\mathbf{T}" },
        "\u{1D414}": { math: "\\mathbf{U}" },
        "\u{1D415}": { math: "\\mathbf{V}" },
        "\u{1D416}": { math: "\\mathbf{W}" },
        "\u{1D417}": { math: "\\mathbf{X}" },
        "\u{1D418}": { math: "\\mathbf{Y}" },
        "\u{1D419}": { math: "\\mathbf{Z}" },
        "\u{1D41A}": { math: "\\mathbf{a}" },
        "\u{1D41B}": { math: "\\mathbf{b}" },
        "\u{1D41C}": { math: "\\mathbf{c}" },
        "\u{1D41D}": { math: "\\mathbf{d}" },
        "\u{1D41E}": { math: "\\mathbf{e}" },
        "\u{1D41F}": { math: "\\mathbf{f}" },
        "\u{1D420}": { math: "\\mathbf{g}" },
        "\u{1D421}": { math: "\\mathbf{h}" },
        "\u{1D422}": { math: "\\mathbf{i}" },
        "\u{1D423}": { math: "\\mathbf{j}" },
        "\u{1D424}": { math: "\\mathbf{k}" },
        "\u{1D425}": { math: "\\mathbf{l}" },
        "\u{1D426}": { math: "\\mathbf{m}" },
        "\u{1D427}": { math: "\\mathbf{n}" },
        "\u{1D428}": { math: "\\mathbf{o}" },
        "\u{1D429}": { math: "\\mathbf{p}" },
        "\u{1D42A}": { math: "\\mathbf{q}" },
        "\u{1D42B}": { math: "\\mathbf{r}" },
        "\u{1D42C}": { math: "\\mathbf{s}" },
        "\u{1D42D}": { math: "\\mathbf{t}" },
        "\u{1D42E}": { math: "\\mathbf{u}" },
        "\u{1D42F}": { math: "\\mathbf{v}" },
        "\u{1D430}": { math: "\\mathbf{w}" },
        "\u{1D431}": { math: "\\mathbf{x}" },
        "\u{1D432}": { math: "\\mathbf{y}" },
        "\u{1D433}": { math: "\\mathbf{z}" },
        "\u{1D434}": { math: "\\mathsl{A}" },
        "\u{1D435}": { math: "\\mathsl{B}" },
        "\u{1D436}": { math: "\\mathsl{C}" },
        "\u{1D437}": { math: "\\mathsl{D}" },
        "\u{1D438}": { math: "\\mathsl{E}" },
        "\u{1D439}": { math: "\\mathsl{F}" },
        "\u{1D43A}": { math: "\\mathsl{G}" },
        "\u{1D43B}": { math: "\\mathsl{H}" },
        "\u{1D43C}": { math: "\\mathsl{I}" },
        "\u{1D43D}": { math: "\\mathsl{J}" },
        "\u{1D43E}": { math: "\\mathsl{K}" },
        "\u{1D43F}": { math: "\\mathsl{L}" },
        "\u{1D440}": { math: "\\mathsl{M}" },
        "\u{1D441}": { math: "\\mathsl{N}" },
        "\u{1D442}": { math: "\\mathsl{O}" },
        "\u{1D443}": { math: "\\mathsl{P}" },
        "\u{1D444}": { math: "\\mathsl{Q}" },
        "\u{1D445}": { math: "\\mathsl{R}" },
        "\u{1D446}": { math: "\\mathsl{S}" },
        "\u{1D447}": { math: "\\mathsl{T}" },
        "\u{1D448}": { math: "\\mathsl{U}" },
        "\u{1D449}": { math: "\\mathsl{V}" },
        "\u{1D44A}": { math: "\\mathsl{W}" },
        "\u{1D44B}": { math: "\\mathsl{X}" },
        "\u{1D44C}": { math: "\\mathsl{Y}" },
        "\u{1D44D}": { math: "\\mathsl{Z}" },
        "\u{1D44E}": { math: "\\mathsl{a}" },
        "\u{1D44F}": { math: "\\mathsl{b}" },
        "\u{1D450}": { math: "\\mathsl{c}" },
        "\u{1D451}": { math: "\\mathsl{d}" },
        "\u{1D452}": { math: "\\mathsl{e}" },
        "\u{1D453}": { math: "\\mathsl{f}" },
        "\u{1D454}": { math: "\\mathsl{g}" },
        "\u{1D456}": { math: "\\mathsl{i}" },
        "\u{1D457}": { math: "\\mathsl{j}" },
        "\u{1D458}": { math: "\\mathsl{k}" },
        "\u{1D459}": { math: "\\mathsl{l}" },
        "\u{1D45A}": { math: "\\mathsl{m}" },
        "\u{1D45B}": { math: "\\mathsl{n}" },
        "\u{1D45C}": { math: "\\mathsl{o}" },
        "\u{1D45D}": { math: "\\mathsl{p}" },
        "\u{1D45E}": { math: "\\mathsl{q}" },
        "\u{1D45F}": { math: "\\mathsl{r}" },
        "\u{1D460}": { math: "\\mathsl{s}" },
        "\u{1D461}": { math: "\\mathsl{t}" },
        "\u{1D462}": { math: "\\mathsl{u}" },
        "\u{1D463}": { math: "\\mathsl{v}" },
        "\u{1D464}": { math: "\\mathsl{w}" },
        "\u{1D465}": { math: "\\mathsl{x}" },
        "\u{1D466}": { math: "\\mathsl{y}" },
        "\u{1D467}": { math: "\\mathsl{z}" },
        "\u{1D468}": { math: "\\mathbit{A}" },
        "\u{1D469}": { math: "\\mathbit{B}" },
        "\u{1D46A}": { math: "\\mathbit{C}" },
        "\u{1D46B}": { math: "\\mathbit{D}" },
        "\u{1D46C}": { math: "\\mathbit{E}" },
        "\u{1D46D}": { math: "\\mathbit{F}" },
        "\u{1D46E}": { math: "\\mathbit{G}" },
        "\u{1D46F}": { math: "\\mathbit{H}" },
        "\u{1D470}": { math: "\\mathbit{I}" },
        "\u{1D471}": { math: "\\mathbit{J}" },
        "\u{1D472}": { math: "\\mathbit{K}" },
        "\u{1D473}": { math: "\\mathbit{L}" },
        "\u{1D474}": { math: "\\mathbit{M}" },
        "\u{1D475}": { math: "\\mathbit{N}" },
        "\u{1D476}": { math: "\\mathbit{O}" },
        "\u{1D477}": { math: "\\mathbit{P}" },
        "\u{1D478}": { math: "\\mathbit{Q}" },
        "\u{1D479}": { math: "\\mathbit{R}" },
        "\u{1D47A}": { math: "\\mathbit{S}" },
        "\u{1D47B}": { math: "\\mathbit{T}" },
        "\u{1D47C}": { math: "\\mathbit{U}" },
        "\u{1D47D}": { math: "\\mathbit{V}" },
        "\u{1D47E}": { math: "\\mathbit{W}" },
        "\u{1D47F}": { math: "\\mathbit{X}" },
        "\u{1D480}": { math: "\\mathbit{Y}" },
        "\u{1D481}": { math: "\\mathbit{Z}" },
        "\u{1D482}": { math: "\\mathbit{a}" },
        "\u{1D483}": { math: "\\mathbit{b}" },
        "\u{1D484}": { math: "\\mathbit{c}" },
        "\u{1D485}": { math: "\\mathbit{d}" },
        "\u{1D486}": { math: "\\mathbit{e}" },
        "\u{1D487}": { math: "\\mathbit{f}" },
        "\u{1D488}": { math: "\\mathbit{g}" },
        "\u{1D489}": { math: "\\mathbit{h}" },
        "\u{1D48A}": { math: "\\mathbit{i}" },
        "\u{1D48B}": { math: "\\mathbit{j}" },
        "\u{1D48C}": { math: "\\mathbit{k}" },
        "\u{1D48D}": { math: "\\mathbit{l}" },
        "\u{1D48E}": { math: "\\mathbit{m}" },
        "\u{1D48F}": { math: "\\mathbit{n}" },
        "\u{1D490}": { math: "\\mathbit{o}" },
        "\u{1D491}": { math: "\\mathbit{p}" },
        "\u{1D492}": { math: "\\mathbit{q}" },
        "\u{1D493}": { math: "\\mathbit{r}" },
        "\u{1D494}": { math: "\\mathbit{s}" },
        "\u{1D495}": { math: "\\mathbit{t}" },
        "\u{1D496}": { math: "\\mathbit{u}" },
        "\u{1D497}": { math: "\\mathbit{v}" },
        "\u{1D498}": { math: "\\mathbit{w}" },
        "\u{1D499}": { math: "\\mathbit{x}" },
        "\u{1D49A}": { math: "\\mathbit{y}" },
        "\u{1D49B}": { math: "\\mathbit{z}" },
        "\u{1D49C}": { math: "\\mathscr{A}" },
        "\u{1D49E}": { math: "\\mathscr{C}" },
        "\u{1D49F}": { math: "\\mathscr{D}" },
        "\u{1D4A2}": { math: "\\mathscr{G}" },
        "\u{1D4A5}": { math: "\\mathscr{J}" },
        "\u{1D4A6}": { math: "\\mathscr{K}" },
        "\u{1D4A9}": { math: "\\mathscr{N}" },
        "\u{1D4AA}": { math: "\\mathscr{O}" },
        "\u{1D4AB}": { math: "\\mathscr{P}" },
        "\u{1D4AC}": { math: "\\mathscr{Q}" },
        "\u{1D4AE}": { math: "\\mathscr{S}" },
        "\u{1D4AF}": { math: "\\mathscr{T}" },
        "\u{1D4B0}": { math: "\\mathscr{U}" },
        "\u{1D4B1}": { math: "\\mathscr{V}" },
        "\u{1D4B2}": { math: "\\mathscr{W}" },
        "\u{1D4B3}": { math: "\\mathscr{X}" },
        "\u{1D4B4}": { math: "\\mathscr{Y}" },
        "\u{1D4B5}": { math: "\\mathscr{Z}" },
        "\u{1D4B6}": { math: "\\mathscr{a}" },
        "\u{1D4B7}": { math: "\\mathscr{b}" },
        "\u{1D4B8}": { math: "\\mathscr{c}" },
        "\u{1D4B9}": { math: "\\mathscr{d}" },
        "\u{1D4BB}": { math: "\\mathscr{f}" },
        "\u{1D4BD}": { math: "\\mathscr{h}" },
        "\u{1D4BE}": { math: "\\mathscr{i}" },
        "\u{1D4BF}": { math: "\\mathscr{j}" },
        "\u{1D4C0}": { math: "\\mathscr{k}" },
        "\u{1D4C1}": { math: "\\mathscr{l}" },
        "\u{1D4C2}": { math: "\\mathscr{m}" },
        "\u{1D4C3}": { math: "\\mathscr{n}" },
        "\u{1D4C5}": { math: "\\mathscr{p}" },
        "\u{1D4C6}": { math: "\\mathscr{q}" },
        "\u{1D4C7}": { math: "\\mathscr{r}" },
        "\u{1D4C8}": { math: "\\mathscr{s}" },
        "\u{1D4C9}": { math: "\\mathscr{t}" },
        "\u{1D4CA}": { math: "\\mathscr{u}" },
        "\u{1D4CB}": { math: "\\mathscr{v}" },
        "\u{1D4CC}": { math: "\\mathscr{w}" },
        "\u{1D4CD}": { math: "\\mathscr{x}" },
        "\u{1D4CE}": { math: "\\mathscr{y}" },
        "\u{1D4CF}": { math: "\\mathscr{z}" },
        "\u{1D4D0}": { math: "\\mathmit{A}" },
        "\u{1D4D1}": { math: "\\mathmit{B}" },
        "\u{1D4D2}": { math: "\\mathmit{C}" },
        "\u{1D4D3}": { math: "\\mathmit{D}" },
        "\u{1D4D4}": { math: "\\mathmit{E}" },
        "\u{1D4D5}": { math: "\\mathmit{F}" },
        "\u{1D4D6}": { math: "\\mathmit{G}" },
        "\u{1D4D7}": { math: "\\mathmit{H}" },
        "\u{1D4D8}": { math: "\\mathmit{I}" },
        "\u{1D4D9}": { math: "\\mathmit{J}" },
        "\u{1D4DA}": { math: "\\mathmit{K}" },
        "\u{1D4DB}": { math: "\\mathmit{L}" },
        "\u{1D4DC}": { math: "\\mathmit{M}" },
        "\u{1D4DD}": { math: "\\mathmit{N}" },
        "\u{1D4DE}": { math: "\\mathmit{O}" },
        "\u{1D4DF}": { math: "\\mathmit{P}" },
        "\u{1D4E0}": { math: "\\mathmit{Q}" },
        "\u{1D4E1}": { math: "\\mathmit{R}" },
        "\u{1D4E2}": { math: "\\mathmit{S}" },
        "\u{1D4E3}": { math: "\\mathmit{T}" },
        "\u{1D4E4}": { math: "\\mathmit{U}" },
        "\u{1D4E5}": { math: "\\mathmit{V}" },
        "\u{1D4E6}": { math: "\\mathmit{W}" },
        "\u{1D4E7}": { math: "\\mathmit{X}" },
        "\u{1D4E8}": { math: "\\mathmit{Y}" },
        "\u{1D4E9}": { math: "\\mathmit{Z}" },
        "\u{1D4EA}": { math: "\\mathmit{a}" },
        "\u{1D4EB}": { math: "\\mathmit{b}" },
        "\u{1D4EC}": { math: "\\mathmit{c}" },
        "\u{1D4ED}": { math: "\\mathmit{d}" },
        "\u{1D4EE}": { math: "\\mathmit{e}" },
        "\u{1D4EF}": { math: "\\mathmit{f}" },
        "\u{1D4F0}": { math: "\\mathmit{g}" },
        "\u{1D4F1}": { math: "\\mathmit{h}" },
        "\u{1D4F2}": { math: "\\mathmit{i}" },
        "\u{1D4F3}": { math: "\\mathmit{j}" },
        "\u{1D4F4}": { math: "\\mathmit{k}" },
        "\u{1D4F5}": { math: "\\mathmit{l}" },
        "\u{1D4F6}": { math: "\\mathmit{m}" },
        "\u{1D4F7}": { math: "\\mathmit{n}" },
        "\u{1D4F8}": { math: "\\mathmit{o}" },
        "\u{1D4F9}": { math: "\\mathmit{p}" },
        "\u{1D4FA}": { math: "\\mathmit{q}" },
        "\u{1D4FB}": { math: "\\mathmit{r}" },
        "\u{1D4FC}": { math: "\\mathmit{s}" },
        "\u{1D4FD}": { math: "\\mathmit{t}" },
        "\u{1D4FE}": { math: "\\mathmit{u}" },
        "\u{1D4FF}": { math: "\\mathmit{v}" },
        "\u{1D500}": { math: "\\mathmit{w}" },
        "\u{1D501}": { math: "\\mathmit{x}" },
        "\u{1D502}": { math: "\\mathmit{y}" },
        "\u{1D503}": { math: "\\mathmit{z}" },
        "\u{1D504}": { math: "\\mathfrak{A}" },
        "\u{1D505}": { math: "\\mathfrak{B}" },
        "\u{1D507}": { math: "\\mathfrak{D}" },
        "\u{1D508}": { math: "\\mathfrak{E}" },
        "\u{1D509}": { math: "\\mathfrak{F}" },
        "\u{1D50A}": { math: "\\mathfrak{G}" },
        "\u{1D50D}": { math: "\\mathfrak{J}" },
        "\u{1D50E}": { math: "\\mathfrak{K}" },
        "\u{1D50F}": { math: "\\mathfrak{L}" },
        "\u{1D510}": { math: "\\mathfrak{M}" },
        "\u{1D511}": { math: "\\mathfrak{N}" },
        "\u{1D512}": { math: "\\mathfrak{O}" },
        "\u{1D513}": { math: "\\mathfrak{P}" },
        "\u{1D514}": { math: "\\mathfrak{Q}" },
        "\u{1D516}": { math: "\\mathfrak{S}" },
        "\u{1D517}": { math: "\\mathfrak{T}" },
        "\u{1D518}": { math: "\\mathfrak{U}" },
        "\u{1D519}": { math: "\\mathfrak{V}" },
        "\u{1D51A}": { math: "\\mathfrak{W}" },
        "\u{1D51B}": { math: "\\mathfrak{X}" },
        "\u{1D51C}": { math: "\\mathfrak{Y}" },
        "\u{1D51E}": { math: "\\mathfrak{a}" },
        "\u{1D51F}": { math: "\\mathfrak{b}" },
        "\u{1D520}": { math: "\\mathfrak{c}" },
        "\u{1D521}": { math: "\\mathfrak{d}" },
        "\u{1D522}": { math: "\\mathfrak{e}" },
        "\u{1D523}": { math: "\\mathfrak{f}" },
        "\u{1D524}": { math: "\\mathfrak{g}" },
        "\u{1D525}": { math: "\\mathfrak{h}" },
        "\u{1D526}": { math: "\\mathfrak{i}" },
        "\u{1D527}": { math: "\\mathfrak{j}" },
        "\u{1D528}": { math: "\\mathfrak{k}" },
        "\u{1D529}": { math: "\\mathfrak{l}" },
        "\u{1D52A}": { math: "\\mathfrak{m}" },
        "\u{1D52B}": { math: "\\mathfrak{n}" },
        "\u{1D52C}": { math: "\\mathfrak{o}" },
        "\u{1D52D}": { math: "\\mathfrak{p}" },
        "\u{1D52E}": { math: "\\mathfrak{q}" },
        "\u{1D52F}": { math: "\\mathfrak{r}" },
        "\u{1D530}": { math: "\\mathfrak{s}" },
        "\u{1D531}": { math: "\\mathfrak{t}" },
        "\u{1D532}": { math: "\\mathfrak{u}" },
        "\u{1D533}": { math: "\\mathfrak{v}" },
        "\u{1D534}": { math: "\\mathfrak{w}" },
        "\u{1D535}": { math: "\\mathfrak{x}" },
        "\u{1D536}": { math: "\\mathfrak{y}" },
        "\u{1D537}": { math: "\\mathfrak{z}" },
        "\u{1D538}": { math: "\\mathbb{A}" },
        "\u{1D539}": { math: "\\mathbb{B}" },
        "\u{1D53B}": { math: "\\mathbb{D}" },
        "\u{1D53C}": { math: "\\mathbb{E}" },
        "\u{1D53D}": { math: "\\mathbb{F}" },
        "\u{1D53E}": { math: "\\mathbb{G}" },
        "\u{1D540}": { math: "\\mathbb{I}" },
        "\u{1D541}": { math: "\\mathbb{J}" },
        "\u{1D542}": { math: "\\mathbb{K}" },
        "\u{1D543}": { math: "\\mathbb{L}" },
        "\u{1D544}": { math: "\\mathbb{M}" },
        "\u{1D546}": { math: "\\mathbb{O}" },
        "\u{1D54A}": { math: "\\mathbb{S}" },
        "\u{1D54B}": { math: "\\mathbb{T}" },
        "\u{1D54C}": { math: "\\mathbb{U}" },
        "\u{1D54D}": { math: "\\mathbb{V}" },
        "\u{1D54E}": { math: "\\mathbb{W}" },
        "\u{1D54F}": { math: "\\mathbb{X}" },
        "\u{1D550}": { math: "\\mathbb{Y}" },
        "\u{1D552}": { math: "\\mathbb{a}" },
        "\u{1D553}": { math: "\\mathbb{b}" },
        "\u{1D554}": { math: "\\mathbb{c}" },
        "\u{1D555}": { math: "\\mathbb{d}" },
        "\u{1D556}": { math: "\\mathbb{e}" },
        "\u{1D557}": { math: "\\mathbb{f}" },
        "\u{1D558}": { math: "\\mathbb{g}" },
        "\u{1D559}": { math: "\\mathbb{h}" },
        "\u{1D55A}": { math: "\\mathbb{i}" },
        "\u{1D55B}": { math: "\\mathbb{j}" },
        "\u{1D55C}": { math: "\\mathbb{k}" },
        "\u{1D55D}": { math: "\\mathbb{l}" },
        "\u{1D55E}": { math: "\\mathbb{m}" },
        "\u{1D55F}": { math: "\\mathbb{n}" },
        "\u{1D560}": { math: "\\mathbb{o}" },
        "\u{1D561}": { math: "\\mathbb{p}" },
        "\u{1D562}": { math: "\\mathbb{q}" },
        "\u{1D563}": { math: "\\mathbb{r}" },
        "\u{1D564}": { math: "\\mathbb{s}" },
        "\u{1D565}": { math: "\\mathbb{t}" },
        "\u{1D566}": { math: "\\mathbb{u}" },
        "\u{1D567}": { math: "\\mathbb{v}" },
        "\u{1D568}": { math: "\\mathbb{w}" },
        "\u{1D569}": { math: "\\mathbb{x}" },
        "\u{1D56A}": { math: "\\mathbb{y}" },
        "\u{1D56B}": { math: "\\mathbb{z}" },
        "\u{1D56C}": { math: "\\mathslbb{A}" },
        "\u{1D56D}": { math: "\\mathslbb{B}" },
        "\u{1D56E}": { math: "\\mathslbb{C}" },
        "\u{1D56F}": { math: "\\mathslbb{D}" },
        "\u{1D570}": { math: "\\mathslbb{E}" },
        "\u{1D571}": { math: "\\mathslbb{F}" },
        "\u{1D572}": { math: "\\mathslbb{G}" },
        "\u{1D573}": { math: "\\mathslbb{H}" },
        "\u{1D574}": { math: "\\mathslbb{I}" },
        "\u{1D575}": { math: "\\mathslbb{J}" },
        "\u{1D576}": { math: "\\mathslbb{K}" },
        "\u{1D577}": { math: "\\mathslbb{L}" },
        "\u{1D578}": { math: "\\mathslbb{M}" },
        "\u{1D579}": { math: "\\mathslbb{N}" },
        "\u{1D57A}": { math: "\\mathslbb{O}" },
        "\u{1D57B}": { math: "\\mathslbb{P}" },
        "\u{1D57C}": { math: "\\mathslbb{Q}" },
        "\u{1D57D}": { math: "\\mathslbb{R}" },
        "\u{1D57E}": { math: "\\mathslbb{S}" },
        "\u{1D57F}": { math: "\\mathslbb{T}" },
        "\u{1D580}": { math: "\\mathslbb{U}" },
        "\u{1D581}": { math: "\\mathslbb{V}" },
        "\u{1D582}": { math: "\\mathslbb{W}" },
        "\u{1D583}": { math: "\\mathslbb{X}" },
        "\u{1D584}": { math: "\\mathslbb{Y}" },
        "\u{1D585}": { math: "\\mathslbb{Z}" },
        "\u{1D586}": { math: "\\mathslbb{a}" },
        "\u{1D587}": { math: "\\mathslbb{b}" },
        "\u{1D588}": { math: "\\mathslbb{c}" },
        "\u{1D589}": { math: "\\mathslbb{d}" },
        "\u{1D58A}": { math: "\\mathslbb{e}" },
        "\u{1D58B}": { math: "\\mathslbb{f}" },
        "\u{1D58C}": { math: "\\mathslbb{g}" },
        "\u{1D58D}": { math: "\\mathslbb{h}" },
        "\u{1D58E}": { math: "\\mathslbb{i}" },
        "\u{1D58F}": { math: "\\mathslbb{j}" },
        "\u{1D590}": { math: "\\mathslbb{k}" },
        "\u{1D591}": { math: "\\mathslbb{l}" },
        "\u{1D592}": { math: "\\mathslbb{m}" },
        "\u{1D593}": { math: "\\mathslbb{n}" },
        "\u{1D594}": { math: "\\mathslbb{o}" },
        "\u{1D595}": { math: "\\mathslbb{p}" },
        "\u{1D596}": { math: "\\mathslbb{q}" },
        "\u{1D597}": { math: "\\mathslbb{r}" },
        "\u{1D598}": { math: "\\mathslbb{s}" },
        "\u{1D599}": { math: "\\mathslbb{t}" },
        "\u{1D59A}": { math: "\\mathslbb{u}" },
        "\u{1D59B}": { math: "\\mathslbb{v}" },
        "\u{1D59C}": { math: "\\mathslbb{w}" },
        "\u{1D59D}": { math: "\\mathslbb{x}" },
        "\u{1D59E}": { math: "\\mathslbb{y}" },
        "\u{1D59F}": { math: "\\mathslbb{z}" },
        "\u{1D5A0}": { math: "\\mathsf{A}" },
        "\u{1D5A1}": { math: "\\mathsf{B}" },
        "\u{1D5A2}": { math: "\\mathsf{C}" },
        "\u{1D5A3}": { math: "\\mathsf{D}" },
        "\u{1D5A4}": { math: "\\mathsf{E}" },
        "\u{1D5A5}": { math: "\\mathsf{F}" },
        "\u{1D5A6}": { math: "\\mathsf{G}" },
        "\u{1D5A7}": { math: "\\mathsf{H}" },
        "\u{1D5A8}": { math: "\\mathsf{I}" },
        "\u{1D5A9}": { math: "\\mathsf{J}" },
        "\u{1D5AA}": { math: "\\mathsf{K}" },
        "\u{1D5AB}": { math: "\\mathsf{L}" },
        "\u{1D5AC}": { math: "\\mathsf{M}" },
        "\u{1D5AD}": { math: "\\mathsf{N}" },
        "\u{1D5AE}": { math: "\\mathsf{O}" },
        "\u{1D5AF}": { math: "\\mathsf{P}" },
        "\u{1D5B0}": { math: "\\mathsf{Q}" },
        "\u{1D5B1}": { math: "\\mathsf{R}" },
        "\u{1D5B2}": { math: "\\mathsf{S}" },
        "\u{1D5B3}": { math: "\\mathsf{T}" },
        "\u{1D5B4}": { math: "\\mathsf{U}" },
        "\u{1D5B5}": { math: "\\mathsf{V}" },
        "\u{1D5B6}": { math: "\\mathsf{W}" },
        "\u{1D5B7}": { math: "\\mathsf{X}" },
        "\u{1D5B8}": { math: "\\mathsf{Y}" },
        "\u{1D5B9}": { math: "\\mathsf{Z}" },
        "\u{1D5BA}": { math: "\\mathsf{a}" },
        "\u{1D5BB}": { math: "\\mathsf{b}" },
        "\u{1D5BC}": { math: "\\mathsf{c}" },
        "\u{1D5BD}": { math: "\\mathsf{d}" },
        "\u{1D5BE}": { math: "\\mathsf{e}" },
        "\u{1D5BF}": { math: "\\mathsf{f}" },
        "\u{1D5C0}": { math: "\\mathsf{g}" },
        "\u{1D5C1}": { math: "\\mathsf{h}" },
        "\u{1D5C2}": { math: "\\mathsf{i}" },
        "\u{1D5C3}": { math: "\\mathsf{j}" },
        "\u{1D5C4}": { math: "\\mathsf{k}" },
        "\u{1D5C5}": { math: "\\mathsf{l}" },
        "\u{1D5C6}": { math: "\\mathsf{m}" },
        "\u{1D5C7}": { math: "\\mathsf{n}" },
        "\u{1D5C8}": { math: "\\mathsf{o}" },
        "\u{1D5C9}": { math: "\\mathsf{p}" },
        "\u{1D5CA}": { math: "\\mathsf{q}" },
        "\u{1D5CB}": { math: "\\mathsf{r}" },
        "\u{1D5CC}": { math: "\\mathsf{s}" },
        "\u{1D5CD}": { math: "\\mathsf{t}" },
        "\u{1D5CE}": { math: "\\mathsf{u}" },
        "\u{1D5CF}": { math: "\\mathsf{v}" },
        "\u{1D5D0}": { math: "\\mathsf{w}" },
        "\u{1D5D1}": { math: "\\mathsf{x}" },
        "\u{1D5D2}": { math: "\\mathsf{y}" },
        "\u{1D5D3}": { math: "\\mathsf{z}" },
        "\u{1D5D4}": { math: "\\mathsfbf{A}" },
        "\u{1D5D5}": { math: "\\mathsfbf{B}" },
        "\u{1D5D6}": { math: "\\mathsfbf{C}" },
        "\u{1D5D7}": { math: "\\mathsfbf{D}" },
        "\u{1D5D8}": { math: "\\mathsfbf{E}" },
        "\u{1D5D9}": { math: "\\mathsfbf{F}" },
        "\u{1D5DA}": { math: "\\mathsfbf{G}" },
        "\u{1D5DB}": { math: "\\mathsfbf{H}" },
        "\u{1D5DC}": { math: "\\mathsfbf{I}" },
        "\u{1D5DD}": { math: "\\mathsfbf{J}" },
        "\u{1D5DE}": { math: "\\mathsfbf{K}" },
        "\u{1D5DF}": { math: "\\mathsfbf{L}" },
        "\u{1D5E0}": { math: "\\mathsfbf{M}" },
        "\u{1D5E1}": { math: "\\mathsfbf{N}" },
        "\u{1D5E2}": { math: "\\mathsfbf{O}" },
        "\u{1D5E3}": { math: "\\mathsfbf{P}" },
        "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
        "\u{1D5E5}": { math: "\\mathsfbf{R}" },
        "\u{1D5E6}": { math: "\\mathsfbf{S}" },
        "\u{1D5E7}": { math: "\\mathsfbf{T}" },
        "\u{1D5E8}": { math: "\\mathsfbf{U}" },
        "\u{1D5E9}": { math: "\\mathsfbf{V}" },
        "\u{1D5EA}": { math: "\\mathsfbf{W}" },
        "\u{1D5EB}": { math: "\\mathsfbf{X}" },
        "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
        "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
        "\u{1D5EE}": { math: "\\mathsfbf{a}" },
        "\u{1D5EF}": { math: "\\mathsfbf{b}" },
        "\u{1D5F0}": { math: "\\mathsfbf{c}" },
        "\u{1D5F1}": { math: "\\mathsfbf{d}" },
        "\u{1D5F2}": { math: "\\mathsfbf{e}" },
        "\u{1D5F3}": { math: "\\mathsfbf{f}" },
        "\u{1D5F4}": { math: "\\mathsfbf{g}" },
        "\u{1D5F5}": { math: "\\mathsfbf{h}" },
        "\u{1D5F6}": { math: "\\mathsfbf{i}" },
        "\u{1D5F7}": { math: "\\mathsfbf{j}" },
        "\u{1D5F8}": { math: "\\mathsfbf{k}" },
        "\u{1D5F9}": { math: "\\mathsfbf{l}" },
        "\u{1D5FA}": { math: "\\mathsfbf{m}" },
        "\u{1D5FB}": { math: "\\mathsfbf{n}" },
        "\u{1D5FC}": { math: "\\mathsfbf{o}" },
        "\u{1D5FD}": { math: "\\mathsfbf{p}" },
        "\u{1D5FE}": { math: "\\mathsfbf{q}" },
        "\u{1D5FF}": { math: "\\mathsfbf{r}" },
        "\u{1D600}": { math: "\\mathsfbf{s}" },
        "\u{1D601}": { math: "\\mathsfbf{t}" },
        "\u{1D602}": { math: "\\mathsfbf{u}" },
        "\u{1D603}": { math: "\\mathsfbf{v}" },
        "\u{1D604}": { math: "\\mathsfbf{w}" },
        "\u{1D605}": { math: "\\mathsfbf{x}" },
        "\u{1D606}": { math: "\\mathsfbf{y}" },
        "\u{1D607}": { math: "\\mathsfbf{z}" },
        "\u{1D608}": { math: "\\mathsfsl{A}" },
        "\u{1D609}": { math: "\\mathsfsl{B}" },
        "\u{1D60A}": { math: "\\mathsfsl{C}" },
        "\u{1D60B}": { math: "\\mathsfsl{D}" },
        "\u{1D60C}": { math: "\\mathsfsl{E}" },
        "\u{1D60D}": { math: "\\mathsfsl{F}" },
        "\u{1D60E}": { math: "\\mathsfsl{G}" },
        "\u{1D60F}": { math: "\\mathsfsl{H}" },
        "\u{1D610}": { math: "\\mathsfsl{I}" },
        "\u{1D611}": { math: "\\mathsfsl{J}" },
        "\u{1D612}": { math: "\\mathsfsl{K}" },
        "\u{1D613}": { math: "\\mathsfsl{L}" },
        "\u{1D614}": { math: "\\mathsfsl{M}" },
        "\u{1D615}": { math: "\\mathsfsl{N}" },
        "\u{1D616}": { math: "\\mathsfsl{O}" },
        "\u{1D617}": { math: "\\mathsfsl{P}" },
        "\u{1D618}": { math: "\\mathsfsl{Q}" },
        "\u{1D619}": { math: "\\mathsfsl{R}" },
        "\u{1D61A}": { math: "\\mathsfsl{S}" },
        "\u{1D61B}": { math: "\\mathsfsl{T}" },
        "\u{1D61C}": { math: "\\mathsfsl{U}" },
        "\u{1D61D}": { math: "\\mathsfsl{V}" },
        "\u{1D61E}": { math: "\\mathsfsl{W}" },
        "\u{1D61F}": { math: "\\mathsfsl{X}" },
        "\u{1D620}": { math: "\\mathsfsl{Y}" },
        "\u{1D621}": { math: "\\mathsfsl{Z}" },
        "\u{1D622}": { math: "\\mathsfsl{a}" },
        "\u{1D623}": { math: "\\mathsfsl{b}" },
        "\u{1D624}": { math: "\\mathsfsl{c}" },
        "\u{1D625}": { math: "\\mathsfsl{d}" },
        "\u{1D626}": { math: "\\mathsfsl{e}" },
        "\u{1D627}": { math: "\\mathsfsl{f}" },
        "\u{1D628}": { math: "\\mathsfsl{g}" },
        "\u{1D629}": { math: "\\mathsfsl{h}" },
        "\u{1D62A}": { math: "\\mathsfsl{i}" },
        "\u{1D62B}": { math: "\\mathsfsl{j}" },
        "\u{1D62C}": { math: "\\mathsfsl{k}" },
        "\u{1D62D}": { math: "\\mathsfsl{l}" },
        "\u{1D62E}": { math: "\\mathsfsl{m}" },
        "\u{1D62F}": { math: "\\mathsfsl{n}" },
        "\u{1D630}": { math: "\\mathsfsl{o}" },
        "\u{1D631}": { math: "\\mathsfsl{p}" },
        "\u{1D632}": { math: "\\mathsfsl{q}" },
        "\u{1D633}": { math: "\\mathsfsl{r}" },
        "\u{1D634}": { math: "\\mathsfsl{s}" },
        "\u{1D635}": { math: "\\mathsfsl{t}" },
        "\u{1D636}": { math: "\\mathsfsl{u}" },
        "\u{1D637}": { math: "\\mathsfsl{v}" },
        "\u{1D638}": { math: "\\mathsfsl{w}" },
        "\u{1D639}": { math: "\\mathsfsl{x}" },
        "\u{1D63A}": { math: "\\mathsfsl{y}" },
        "\u{1D63B}": { math: "\\mathsfsl{z}" },
        "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
        "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
        "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
        "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
        "\u{1D640}": { math: "\\mathsfbfsl{E}" },
        "\u{1D641}": { math: "\\mathsfbfsl{F}" },
        "\u{1D642}": { math: "\\mathsfbfsl{G}" },
        "\u{1D643}": { math: "\\mathsfbfsl{H}" },
        "\u{1D644}": { math: "\\mathsfbfsl{I}" },
        "\u{1D645}": { math: "\\mathsfbfsl{J}" },
        "\u{1D646}": { math: "\\mathsfbfsl{K}" },
        "\u{1D647}": { math: "\\mathsfbfsl{L}" },
        "\u{1D648}": { math: "\\mathsfbfsl{M}" },
        "\u{1D649}": { math: "\\mathsfbfsl{N}" },
        "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
        "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
        "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
        "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
        "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
        "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
        "\u{1D650}": { math: "\\mathsfbfsl{U}" },
        "\u{1D651}": { math: "\\mathsfbfsl{V}" },
        "\u{1D652}": { math: "\\mathsfbfsl{W}" },
        "\u{1D653}": { math: "\\mathsfbfsl{X}" },
        "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
        "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D656}": { math: "\\mathsfbfsl{a}" },
        "\u{1D657}": { math: "\\mathsfbfsl{b}" },
        "\u{1D658}": { math: "\\mathsfbfsl{c}" },
        "\u{1D659}": { math: "\\mathsfbfsl{d}" },
        "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
        "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
        "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
        "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
        "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
        "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
        "\u{1D660}": { math: "\\mathsfbfsl{k}" },
        "\u{1D661}": { math: "\\mathsfbfsl{l}" },
        "\u{1D662}": { math: "\\mathsfbfsl{m}" },
        "\u{1D663}": { math: "\\mathsfbfsl{n}" },
        "\u{1D664}": { math: "\\mathsfbfsl{o}" },
        "\u{1D665}": { math: "\\mathsfbfsl{p}" },
        "\u{1D666}": { math: "\\mathsfbfsl{q}" },
        "\u{1D667}": { math: "\\mathsfbfsl{r}" },
        "\u{1D668}": { math: "\\mathsfbfsl{s}" },
        "\u{1D669}": { math: "\\mathsfbfsl{t}" },
        "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
        "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
        "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
        "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
        "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
        "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
        "\u{1D670}": { math: "\\mathtt{A}" },
        "\u{1D671}": { math: "\\mathtt{B}" },
        "\u{1D672}": { math: "\\mathtt{C}" },
        "\u{1D673}": { math: "\\mathtt{D}" },
        "\u{1D674}": { math: "\\mathtt{E}" },
        "\u{1D675}": { math: "\\mathtt{F}" },
        "\u{1D676}": { math: "\\mathtt{G}" },
        "\u{1D677}": { math: "\\mathtt{H}" },
        "\u{1D678}": { math: "\\mathtt{I}" },
        "\u{1D679}": { math: "\\mathtt{J}" },
        "\u{1D67A}": { math: "\\mathtt{K}" },
        "\u{1D67B}": { math: "\\mathtt{L}" },
        "\u{1D67C}": { math: "\\mathtt{M}" },
        "\u{1D67D}": { math: "\\mathtt{N}" },
        "\u{1D67E}": { math: "\\mathtt{O}" },
        "\u{1D67F}": { math: "\\mathtt{P}" },
        "\u{1D680}": { math: "\\mathtt{Q}" },
        "\u{1D681}": { math: "\\mathtt{R}" },
        "\u{1D682}": { math: "\\mathtt{S}" },
        "\u{1D683}": { math: "\\mathtt{T}" },
        "\u{1D684}": { math: "\\mathtt{U}" },
        "\u{1D685}": { math: "\\mathtt{V}" },
        "\u{1D686}": { math: "\\mathtt{W}" },
        "\u{1D687}": { math: "\\mathtt{X}" },
        "\u{1D688}": { math: "\\mathtt{Y}" },
        "\u{1D689}": { math: "\\mathtt{Z}" },
        "\u{1D68A}": { math: "\\mathtt{a}" },
        "\u{1D68B}": { math: "\\mathtt{b}" },
        "\u{1D68C}": { math: "\\mathtt{c}" },
        "\u{1D68D}": { math: "\\mathtt{d}" },
        "\u{1D68E}": { math: "\\mathtt{e}" },
        "\u{1D68F}": { math: "\\mathtt{f}" },
        "\u{1D690}": { math: "\\mathtt{g}" },
        "\u{1D691}": { math: "\\mathtt{h}" },
        "\u{1D692}": { math: "\\mathtt{i}" },
        "\u{1D693}": { math: "\\mathtt{j}" },
        "\u{1D694}": { math: "\\mathtt{k}" },
        "\u{1D695}": { math: "\\mathtt{l}" },
        "\u{1D696}": { math: "\\mathtt{m}" },
        "\u{1D697}": { math: "\\mathtt{n}" },
        "\u{1D698}": { math: "\\mathtt{o}" },
        "\u{1D699}": { math: "\\mathtt{p}" },
        "\u{1D69A}": { math: "\\mathtt{q}" },
        "\u{1D69B}": { math: "\\mathtt{r}" },
        "\u{1D69C}": { math: "\\mathtt{s}" },
        "\u{1D69D}": { math: "\\mathtt{t}" },
        "\u{1D69E}": { math: "\\mathtt{u}" },
        "\u{1D69F}": { math: "\\mathtt{v}" },
        "\u{1D6A0}": { math: "\\mathtt{w}" },
        "\u{1D6A1}": { math: "\\mathtt{x}" },
        "\u{1D6A2}": { math: "\\mathtt{y}" },
        "\u{1D6A3}": { math: "\\mathtt{z}" },
        "\u{1D6A4}": { math: "\\imath" },
        "\u{1D6A5}": { math: "\\jmath" },
        "\u{1D6A8}": { math: "\\mathbf{A}" },
        "\u{1D6A9}": { math: "\\mathbf{B}" },
        "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
        "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
        "\u{1D6AC}": { math: "\\mathbf{E}" },
        "\u{1D6AD}": { math: "\\mathbf{Z}" },
        "\u{1D6AE}": { math: "\\mathbf{H}" },
        "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
        "\u{1D6B0}": { math: "\\mathbf{I}" },
        "\u{1D6B1}": { math: "\\mathbf{K}" },
        "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
        "\u{1D6B3}": { math: "M" },
        "\u{1D6B4}": { math: "N" },
        "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
        "\u{1D6B6}": { math: "O" },
        "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
        "\u{1D6B8}": { math: "\\mathbf{P}" },
        "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
        "\u{1D6BB}": { math: "\\mathbf{T}" },
        "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
        "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
        "\u{1D6BE}": { math: "\\mathbf{X}" },
        "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
        "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
        "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
        "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
        "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
        "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
        "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
        "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
        "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
        "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
        "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
        "\u{1D6CA}": { math: "\\mathbf{I}" },
        "\u{1D6CB}": { math: "\\mathbf{K}" },
        "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
        "\u{1D6CD}": { math: "M" },
        "\u{1D6CE}": { math: "N" },
        "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
        "\u{1D6D0}": { math: "O" },
        "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
        "\u{1D6D2}": { math: "\\mathbf{P}" },
        "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
        "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
        "\u{1D6D5}": { math: "\\mathbf{T}" },
        "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
        "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
        "\u{1D6D8}": { math: "\\mathbf{X}" },
        "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
        "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
        "\u{1D6DB}": { math: "\\partial" },
        "\u{1D6DC}": { math: "\\in" },
        "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
        "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
        "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
        "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
        "\u{1D6E2}": { math: "\\mathsl{A}" },
        "\u{1D6E3}": { math: "\\mathsl{B}" },
        "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
        "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
        "\u{1D6E6}": { math: "\\mathsl{E}" },
        "\u{1D6E7}": { math: "\\mathsl{Z}" },
        "\u{1D6E8}": { math: "\\mathsl{H}" },
        "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6EA}": { math: "\\mathsl{I}" },
        "\u{1D6EB}": { math: "\\mathsl{K}" },
        "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
        "\u{1D6ED}": { math: "M" },
        "\u{1D6EE}": { math: "N" },
        "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
        "\u{1D6F0}": { math: "O" },
        "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
        "\u{1D6F2}": { math: "\\mathsl{P}" },
        "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
        "\u{1D6F5}": { math: "\\mathsl{T}" },
        "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
        "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
        "\u{1D6F8}": { math: "\\mathsl{X}" },
        "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
        "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
        "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
        "\u{1D6FC}": { math: "\\mathsl{A}" },
        "\u{1D6FD}": { math: "\\mathsl{B}" },
        "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
        "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
        "\u{1D700}": { math: "\\mathsl{E}" },
        "\u{1D701}": { math: "\\mathsl{Z}" },
        "\u{1D702}": { math: "\\mathsl{H}" },
        "\u{1D703}": { math: "\\mathsl{\\theta}" },
        "\u{1D704}": { math: "\\mathsl{I}" },
        "\u{1D705}": { math: "\\mathsl{K}" },
        "\u{1D706}": { math: "\\mathsl{\\lambda}" },
        "\u{1D707}": { math: "\\mu" },
        "\u{1D708}": { math: "\\nu" },
        "\u{1D709}": { math: "\\mathsl{\\xi}" },
        "\u{1D70A}": { math: "o" },
        "\u{1D70B}": { math: "\\mathsl{\\pi}" },
        "\u{1D70C}": { math: "\\mathsl{P}" },
        "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
        "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
        "\u{1D70F}": { math: "\\mathsl{T}" },
        "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
        "\u{1D711}": { math: "\\mathsl{\\varphi}" },
        "\u{1D712}": { math: "\\mathsl{X}" },
        "\u{1D713}": { math: "\\mathsl{\\psi}" },
        "\u{1D714}": { math: "\\mathsl{\\omega}" },
        "\u{1D715}": { math: "\\partial" },
        "\u{1D716}": { math: "\\in" },
        "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
        "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
        "\u{1D719}": { math: "\\mathsl{\\phi}" },
        "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
        "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
        "\u{1D71C}": { math: "\\mathbit{A}" },
        "\u{1D71D}": { math: "\\mathbit{B}" },
        "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
        "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
        "\u{1D720}": { math: "\\mathbit{E}" },
        "\u{1D721}": { math: "\\mathbit{Z}" },
        "\u{1D722}": { math: "\\mathbit{H}" },
        "\u{1D723}": { math: "\\mathbit{\\Theta}" },
        "\u{1D724}": { math: "\\mathbit{I}" },
        "\u{1D725}": { math: "\\mathbit{K}" },
        "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
        "\u{1D727}": { math: "M" },
        "\u{1D728}": { math: "N" },
        "\u{1D729}": { math: "\\mathbit{\\Xi}" },
        "\u{1D72A}": { math: "O" },
        "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
        "\u{1D72C}": { math: "\\mathbit{P}" },
        "\u{1D72D}": { math: "\\mathbit{O}" },
        "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
        "\u{1D72F}": { math: "\\mathbit{T}" },
        "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
        "\u{1D731}": { math: "\\mathbit{\\Phi}" },
        "\u{1D732}": { math: "\\mathbit{X}" },
        "\u{1D733}": { math: "\\mathbit{\\Psi}" },
        "\u{1D734}": { math: "\\mathbit{\\Omega}" },
        "\u{1D735}": { math: "\\mathbit{\\nabla}" },
        "\u{1D736}": { math: "\\mathbit{\\alpha}" },
        "\u{1D737}": { math: "\\mathbit{\\beta}" },
        "\u{1D738}": { math: "\\mathbit{\\gamma}" },
        "\u{1D739}": { math: "\\mathbit{\\delta}" },
        "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
        "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
        "\u{1D73C}": { math: "\\mathbit{\\eta}" },
        "\u{1D73D}": { math: "\\mathbit{\\theta}" },
        "\u{1D73E}": { math: "\\mathbit{\\imath}" },
        "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
        "\u{1D740}": { math: "\\mathbit{\\lambda}" },
        "\u{1D741}": { math: "\\mu" },
        "\u{1D742}": { math: "N" },
        "\u{1D743}": { math: "\\mathbit{\\xi}" },
        "\u{1D744}": { math: "O" },
        "\u{1D745}": { math: "\\mathbit{\\pi}" },
        "\u{1D746}": { math: "\\mathbit{\\rho}" },
        "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
        "\u{1D748}": { math: "\\mathbit{\\sigma}" },
        "\u{1D749}": { math: "\\mathbit{\\tau}" },
        "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
        "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
        "\u{1D74C}": { math: "\\mathbit{\\chi}" },
        "\u{1D74D}": { math: "\\mathbit{\\psi}" },
        "\u{1D74E}": { math: "\\mathbit{\\omega}" },
        "\u{1D74F}": { math: "\\partial" },
        "\u{1D750}": { math: "\\in" },
        "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
        "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
        "\u{1D753}": { math: "\\mathbit{\\phi}" },
        "\u{1D754}": { math: "\\mathbit{\\varrho}" },
        "\u{1D755}": { math: "\\mathbit{\\varpi}" },
        "\u{1D756}": { math: "\\mathsfbf{A}" },
        "\u{1D757}": { math: "\\mathsfbf{B}" },
        "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
        "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
        "\u{1D75A}": { math: "\\mathsfbf{E}" },
        "\u{1D75B}": { math: "\\mathsfbf{Z}" },
        "\u{1D75C}": { math: "\\mathsfbf{H}" },
        "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D75E}": { math: "\\mathsfbf{I}" },
        "\u{1D75F}": { math: "\\mathsfbf{K}" },
        "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
        "\u{1D761}": { math: "M" },
        "\u{1D762}": { math: "N" },
        "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
        "\u{1D764}": { math: "O" },
        "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
        "\u{1D766}": { math: "\\mathsfbf{P}" },
        "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
        "\u{1D769}": { math: "\\mathsfbf{T}" },
        "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
        "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
        "\u{1D76C}": { math: "\\mathsfbf{X}" },
        "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
        "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
        "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
        "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
        "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
        "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
        "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
        "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
        "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
        "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
        "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
        "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
        "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
        "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
        "\u{1D77B}": { math: "\\mu" },
        "\u{1D77C}": { math: "\\nu" },
        "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
        "\u{1D77E}": { math: "o" },
        "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
        "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
        "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
        "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
        "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
        "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
        "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
        "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
        "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
        "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
        "\u{1D789}": { math: "\\partial" },
        "\u{1D78A}": { math: "\\in" },
        "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
        "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
        "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
        "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
        "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
        "\u{1D790}": { math: "\\mathsfbfsl{A}" },
        "\u{1D791}": { math: "\\mathsfbfsl{B}" },
        "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
        "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
        "\u{1D794}": { math: "\\mathsfbfsl{E}" },
        "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D796}": { math: "\\mathsfbfsl{H}" },
        "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D798}": { math: "\\mathsfbfsl{I}" },
        "\u{1D799}": { math: "\\mathsfbfsl{K}" },
        "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
        "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
        "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
        "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
        "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
        "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
        "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
        "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
        "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
        "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
        "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
        "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
        "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
        "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
        "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
        "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
        "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
        "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
        "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
        "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
        "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
        "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
        "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
        "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
        "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
        "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
        "\u{1D7B5}": { math: "\\mu" },
        "\u{1D7B6}": { math: "\\nu" },
        "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
        "\u{1D7B8}": { math: "o" },
        "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
        "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
        "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
        "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
        "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
        "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
        "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
        "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
        "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
        "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
        "\u{1D7C3}": { math: "\\partial" },
        "\u{1D7C4}": { math: "\\in" },
        "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
        "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
        "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
        "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
        "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
        "\u{1D7CA}": { math: "\\mbfDigamma" },
        "\u{1D7CB}": { math: "\\mbfdigamma" },
        "\u{1D7CE}": { math: "\\mathbf{0}" },
        "\u{1D7CF}": { math: "\\mathbf{1}" },
        "\u{1D7D0}": { math: "\\mathbf{2}" },
        "\u{1D7D1}": { math: "\\mathbf{3}" },
        "\u{1D7D2}": { math: "\\mathbf{4}" },
        "\u{1D7D3}": { math: "\\mathbf{5}" },
        "\u{1D7D4}": { math: "\\mathbf{6}" },
        "\u{1D7D5}": { math: "\\mathbf{7}" },
        "\u{1D7D6}": { math: "\\mathbf{8}" },
        "\u{1D7D7}": { math: "\\mathbf{9}" },
        "\u{1D7D8}": { math: "\\mathbb{0}" },
        "\u{1D7D9}": { math: "\\mathbb{1}" },
        "\u{1D7DA}": { math: "\\mathbb{2}" },
        "\u{1D7DB}": { math: "\\mathbb{3}" },
        "\u{1D7DC}": { math: "\\mathbb{4}" },
        "\u{1D7DD}": { math: "\\mathbb{5}" },
        "\u{1D7DE}": { math: "\\mathbb{6}" },
        "\u{1D7DF}": { math: "\\mathbb{7}" },
        "\u{1D7E0}": { math: "\\mathbb{8}" },
        "\u{1D7E1}": { math: "\\mathbb{9}" },
        "\u{1D7E2}": { math: "\\mathsf{0}" },
        "\u{1D7E3}": { math: "\\mathsf{1}" },
        "\u{1D7E4}": { math: "\\mathsf{2}" },
        "\u{1D7E5}": { math: "\\mathsf{3}" },
        "\u{1D7E6}": { math: "\\mathsf{4}" },
        "\u{1D7E7}": { math: "\\mathsf{5}" },
        "\u{1D7E8}": { math: "\\mathsf{6}" },
        "\u{1D7E9}": { math: "\\mathsf{7}" },
        "\u{1D7EA}": { math: "\\mathsf{8}" },
        "\u{1D7EB}": { math: "\\mathsf{9}" },
        "\u{1D7EC}": { math: "\\mathsfbf{0}" },
        "\u{1D7ED}": { math: "\\mathsfbf{1}" },
        "\u{1D7EE}": { math: "\\mathsfbf{2}" },
        "\u{1D7EF}": { math: "\\mathsfbf{3}" },
        "\u{1D7F0}": { math: "\\mathsfbf{4}" },
        "\u{1D7F1}": { math: "\\mathsfbf{5}" },
        "\u{1D7F2}": { math: "\\mathsfbf{6}" },
        "\u{1D7F3}": { math: "\\mathsfbf{7}" },
        "\u{1D7F4}": { math: "\\mathsfbf{8}" },
        "\u{1D7F5}": { math: "\\mathsfbf{9}" },
        "\u{1D7F6}": { math: "\\mathtt{0}" },
        "\u{1D7F7}": { math: "\\mathtt{1}" },
        "\u{1D7F8}": { math: "\\mathtt{2}" },
        "\u{1D7F9}": { math: "\\mathtt{3}" },
        "\u{1D7FA}": { math: "\\mathtt{4}" },
        "\u{1D7FB}": { math: "\\mathtt{5}" },
        "\u{1D7FC}": { math: "\\mathtt{6}" },
        "\u{1D7FD}": { math: "\\mathtt{7}" },
        "\u{1D7FE}": { math: "\\mathtt{8}" },
        "\u{1D7FF}": { math: "\\mathtt{9}" }
      };
    }
  });

  // node_modules/unicode2latex/tables/ascii-bibtex-creator.json
  var require_ascii_bibtex_creator = __commonJS({
    "node_modules/unicode2latex/tables/ascii-bibtex-creator.json"(exports, module) {
      module.exports = {
        "#": { math: "\\#", text: "\\#" },
        $: { math: "\\$", text: "\\$" },
        "%": { math: "\\%", text: "\\%" },
        "&": { math: "\\&", text: "\\&" },
        "/\u200B": { text: "{\\slash}" },
        "<": { math: "<" },
        ">": { math: ">" },
        "\\": { math: "\\backslash", text: "{\\textbackslash}" },
        "^": { math: "\\sphat", text: "\\^" },
        _: { math: "\\_", text: "\\_" },
        i\uFE20a\uFE21: { text: "\\t{ia}" },
        "{": { math: "\\lbrace", text: "\\{" },
        "}": { math: "\\rbrace", text: "\\}" },
        "~": { math: "\\sptilde", text: "{\\textasciitilde}" },
        "\xA0": { math: "~", space: true, text: "~" },
        "\xA1": { text: "{\\textexclamdown}" },
        "\xA2": { math: "\\cent", text: "{\\textcent}", textpackages: ["textcomp"] },
        "\xA3": { math: "\\pounds", text: "{\\textsterling}", textpackages: ["textcomp"] },
        "\xA4": { text: "{\\textcurrency}", textpackages: ["textcomp"] },
        "\xA5": { math: "\\yen", text: "{\\textyen}", textpackages: ["textcomp"] },
        "\xA6": { text: "{\\textbrokenbar}", textpackages: ["textcomp"] },
        "\xA7": { text: "{\\textsection}", textpackages: ["textcomp"] },
        "\xA8": { math: "\\spddot", text: "{\\textasciidieresis}" },
        "\xA9": { text: "{\\textcopyright}", textpackages: ["textcomp"] },
        \u00AA: { text: "{\\textordfeminine}", textpackages: ["textcomp"] },
        "\xAB": { text: "{\\guillemotleft}" },
        "\xAC": { math: "\\lnot" },
        "\xAD": { math: "\\-", text: "\\-" },
        "\xAE": { math: "\\circledR", text: "{\\textregistered}", textpackages: ["textcomp"] },
        "\xAF": { text: "{\\textasciimacron}" },
        "\xB0": { math: "^\\circ", text: "{\\textdegree}", textpackages: ["textcomp"] },
        "\xB1": { math: "\\pm" },
        "\xB2": { math: "^{2}" },
        "\xB3": { math: "^{3}" },
        "\xB4": { text: "{\\textasciiacute}" },
        \u00B5: { text: "{\\textmu}" },
        "\xB6": { text: "{\\textparagraph}", textpackages: ["textcomp"] },
        "\xB7": { math: "\\cdot" },
        "\xB8": { text: "{\\c}" },
        "\xB9": { math: "^{1}" },
        \u00BA: { text: "{\\textordmasculine}", textpackages: ["textcomp"] },
        "\xBB": { text: "{\\guillemotright}" },
        "\xBC": { math: "\\frac{1}{4}" },
        "\xBD": { math: "\\frac{1}{2}" },
        "\xBE": { math: "\\frac{3}{4}" },
        "\xBF": { text: "{\\textquestiondown}" },
        \u00C0: { text: "{\\`A}" },
        \u00C1: { text: "{\\'A}" },
        \u00C2: { text: "{\\^A}" },
        \u00C3: { text: "{\\~A}" },
        \u00C4: { text: '{\\"A}' },
        \u00C5: { text: "{\\AA}" },
        \u00C6: { text: "{\\AE}" },
        \u00C7: { text: "{\\c C}" },
        \u00C8: { text: "{\\`E}" },
        \u00C9: { text: "{\\'E}" },
        \u00CA: { text: "{\\^E}" },
        \u00CB: { text: '{\\"E}' },
        \u00CC: { text: "{\\`I}" },
        \u00CD: { text: "{\\'I}" },
        \u00CE: { text: "{\\^I}" },
        \u00CF: { text: '{\\"I}' },
        \u00D0: { text: "{\\DH}" },
        \u00D1: { text: "{\\~N}" },
        \u00D2: { text: "{\\`O}" },
        \u00D3: { text: "{\\'O}" },
        \u00D4: { text: "{\\^O}" },
        \u00D5: { text: "{\\~O}" },
        \u00D6: { text: '{\\"O}' },
        "\xD7": { math: "\\times", text: "{\\texttimes}" },
        \u00D8: { text: "{\\O}" },
        \u00D9: { text: "{\\`U}" },
        \u00DA: { text: "{\\'U}" },
        \u00DB: { text: "{\\^U}" },
        \u00DC: { text: '{\\"U}' },
        \u00DD: { text: "{\\'Y}" },
        \u00DE: { text: "{\\TH}" },
        \u00DF: { text: "{\\ss}" },
        \u00E0: { text: "{\\`a}" },
        \u00E1: { text: "{\\'a}" },
        \u00E2: { text: "{\\^a}" },
        \u00E3: { text: "{\\~a}" },
        \u00E4: { text: '{\\"a}' },
        \u00E5: { text: "{\\aa}" },
        \u00E6: { text: "{\\ae}" },
        \u00E7: { text: "{\\c c}" },
        \u00E8: { text: "{\\`e}" },
        \u00E9: { text: "{\\'e}" },
        \u00EA: { text: "{\\^e}" },
        \u00EB: { text: '{\\"e}' },
        \u00EC: { text: "{\\`i}" },
        \u00ED: { text: "{\\'i}" },
        \u00EE: { text: "{\\^i}" },
        \u00EF: { text: '{\\"i}' },
        \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "{\\dh}" },
        \u00F1: { text: "{\\~n}" },
        \u00F2: { text: "{\\`o}" },
        \u00F3: { text: "{\\'o}" },
        \u00F4: { text: "{\\^o}" },
        \u00F5: { text: "{\\~o}" },
        \u00F6: { text: '{\\"o}' },
        "\xF7": { math: "\\div" },
        \u00F8: { text: "{\\o}" },
        \u00F9: { text: "{\\`u}" },
        \u00FA: { text: "{\\'u}" },
        \u00FB: { text: "{\\^u}" },
        \u00FC: { text: '{\\"u}' },
        \u00FD: { text: "{\\'y}" },
        \u00FE: { text: "{\\th}" },
        \u00FF: { text: '{\\"y}' },
        \u0100: { text: "{\\=A}" },
        \u0101: { text: "{\\=a}" },
        \u0102: { text: "{\\u A}" },
        \u0103: { text: "{\\u a}" },
        \u0104: { text: "{\\k{A}}" },
        \u0105: { text: "{\\k{a}}" },
        \u0106: { text: "{\\'C}" },
        \u0107: { text: "{\\'c}" },
        \u0108: { text: "{\\^C}" },
        \u0109: { text: "{\\^c}" },
        \u010A: { text: "{\\.C}" },
        \u010B: { text: "{\\.c}" },
        \u010C: { text: "{\\v C}" },
        \u010D: { text: "{\\v c}" },
        \u010E: { text: "{\\v D}" },
        \u010F: { text: "{\\v d}" },
        \u0110: { text: "{\\DJ}" },
        \u0111: { text: "{\\dj}" },
        \u0112: { text: "{\\=E}" },
        \u0113: { text: "{\\=e}" },
        \u0114: { text: "{\\u E}" },
        \u0115: { text: "{\\u e}" },
        \u0116: { text: "{\\.E}" },
        \u0117: { text: "{\\.e}" },
        \u0118: { text: "{\\k{E}}" },
        \u0119: { text: "{\\k{e}}" },
        \u011A: { text: "{\\v E}" },
        \u011B: { text: "{\\v e}" },
        \u011C: { text: "{\\^G}" },
        \u011D: { text: "{\\^g}" },
        \u011E: { text: "{\\u G}" },
        \u011F: { text: "{\\u g}" },
        \u0120: { text: "{\\.G}" },
        \u0121: { text: "{\\.g}" },
        \u0122: { text: "{\\c G}" },
        \u0123: { text: "{\\c g}" },
        \u0124: { text: "{\\^H}" },
        \u0125: { text: "{\\^h}" },
        \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
        \u0127: { math: "\\Elzxh" },
        \u0128: { text: "{\\~I}" },
        \u0129: { text: "{\\~i}" },
        \u012A: { text: "{\\=I}" },
        \u012B: { text: "{\\=i}" },
        \u012C: { text: "{\\u I}" },
        \u012D: { text: "{\\u \\i}" },
        \u012E: { text: "{\\k{I}}" },
        \u012F: { text: "{\\k{i}}" },
        \u0130: { text: "{\\.I}" },
        \u0131: { math: "\\imath", text: "{\\i}" },
        \u0132: { text: "IJ" },
        \u0133: { text: "ij" },
        \u0134: { text: "{\\^J}" },
        \u0135: { text: "{\\^\\j}" },
        \u0136: { text: "{\\c K}" },
        \u0137: { text: "{\\c k}" },
        \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
        \u0139: { text: "{\\'L}" },
        \u013A: { text: "{\\'l}" },
        \u013B: { text: "{\\c L}" },
        \u013C: { text: "{\\c l}" },
        \u013D: { text: "{\\v L}" },
        \u013E: { text: "{\\v l}" },
        \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
        \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
        \u0141: { text: "{\\L}" },
        \u0142: { text: "{\\l}" },
        \u0143: { text: "{\\'N}" },
        \u0144: { text: "{\\'n}" },
        \u0145: { text: "{\\c N}" },
        \u0146: { text: "{\\c n}" },
        \u0147: { text: "{\\v N}" },
        \u0148: { text: "{\\v n}" },
        \u0149: { text: "'n" },
        \u014A: { text: "{\\NG}" },
        \u014B: { text: "{\\ng}" },
        \u014C: { text: "{\\=O}" },
        \u014D: { text: "{\\=o}" },
        \u014E: { text: "{\\u O}" },
        \u014F: { text: "{\\u o}" },
        \u0150: { text: "{\\H O}" },
        \u0151: { text: "{\\H o}" },
        \u0152: { text: "{\\OE}" },
        \u0153: { text: "{\\oe}" },
        \u0154: { text: "{\\'R}" },
        \u0155: { text: "{\\'r}" },
        \u0156: { text: "{\\c R}" },
        \u0157: { text: "{\\c r}" },
        \u0158: { text: "{\\v R}" },
        \u0159: { text: "{\\v r}" },
        \u015A: { text: "{\\'S}" },
        \u015B: { text: "{\\'s}" },
        \u015C: { text: "{\\^S}" },
        \u015D: { text: "{\\^s}" },
        \u015E: { text: "{\\c S}" },
        \u015F: { text: "{\\c s}" },
        \u0160: { text: "{\\v S}" },
        \u0161: { text: "{\\v s}" },
        \u0162: { text: "{\\c T}" },
        \u0163: { text: "{\\c t}" },
        \u0164: { text: "{\\v T}" },
        \u0165: { text: "{\\v t}" },
        \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
        \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
        \u0168: { text: "{\\~U}" },
        \u0169: { text: "{\\~u}" },
        \u016A: { text: "{\\=U}" },
        \u016B: { text: "{\\=u}" },
        \u016C: { text: "{\\u U}" },
        \u016D: { text: "{\\u u}" },
        \u016E: { text: "{\\r{U}}" },
        \u016F: { text: "{\\r{u}}" },
        \u0170: { text: "{\\H U}" },
        \u0171: { text: "{\\H u}" },
        \u0172: { text: "{\\k{U}}" },
        \u0173: { text: "{\\k{u}}" },
        \u0174: { text: "{\\^W}" },
        \u0175: { text: "{\\^w}" },
        \u0176: { text: "{\\^Y}" },
        \u0177: { text: "{\\^y}" },
        \u0178: { text: '{\\"Y}' },
        \u0179: { text: "{\\'Z}" },
        \u017A: { text: "{\\'z}" },
        \u017B: { text: "{\\.Z}" },
        \u017C: { text: "{\\.z}" },
        \u017D: { text: "{\\v Z}" },
        \u017E: { text: "{\\v z}" },
        \u017F: { text: "s" },
        \u0192: { math: "f" },
        \u0195: { text: "{\\texthvlig}" },
        \u019E: { text: "{\\textnrleg}" },
        \u01AA: { text: "{\\textesh}" },
        \u01B5: { math: "\\Zbar" },
        \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
        \u01C2: { text: "{\\textdoublepipe}" },
        \u01CD: { text: "{\\v A}" },
        \u01CE: { text: "{\\v a}" },
        \u01CF: { text: "{\\v I}" },
        \u01D0: { text: "{\\v i}" },
        \u01D1: { text: "{\\v O}" },
        \u01D2: { text: "{\\v o}" },
        \u01D3: { text: "{\\v U}" },
        \u01D4: { text: "{\\v u}" },
        \u01E6: { text: "{\\v G}" },
        \u01E7: { text: "{\\v g}" },
        \u01E8: { text: "{\\v K}" },
        \u01E9: { text: "{\\v k}" },
        \u01EA: { text: "{\\k{O}}" },
        \u01EB: { text: "{\\k{o}}" },
        \u01F0: { text: "{\\v j}" },
        \u01F4: { text: "{\\'G}" },
        \u01F5: { text: "{\\'g}" },
        \u0228: { text: "{\\c E}" },
        \u0229: { text: "{\\c e}" },
        "\u0237": { math: "\\jmath" },
        \u0250: { math: "\\Elztrna" },
        \u0252: { math: "\\Elztrnsa" },
        \u0254: { math: "\\Elzopeno" },
        \u0256: { math: "\\Elzrtld" },
        \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
        \u0259: { math: "\\Elzschwa" },
        \u025B: { math: "\\varepsilon" },
        \u0261: { text: "g" },
        \u0263: { math: "\\Elzpgamma" },
        \u0264: { math: "\\Elzpbgam" },
        \u0265: { math: "\\Elztrnh" },
        \u026C: { math: "\\Elzbtdl" },
        \u026D: { math: "\\Elzrtll" },
        \u026F: { math: "\\Elztrnm" },
        \u0270: { math: "\\Elztrnmlr" },
        \u0271: { math: "\\Elzltlmr" },
        \u0272: { text: "{\\Elzltln}" },
        \u0273: { math: "\\Elzrtln" },
        \u0277: { math: "\\Elzclomeg" },
        \u0278: { text: "{\\textphi}" },
        \u0279: { math: "\\Elztrnr" },
        \u027A: { math: "\\Elztrnrl" },
        \u027B: { math: "\\Elzrttrnr" },
        \u027C: { math: "\\Elzrl" },
        \u027D: { math: "\\Elzrtlr" },
        \u027E: { math: "\\Elzfhr" },
        \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
        \u0282: { math: "\\Elzrtls" },
        \u0283: { math: "\\Elzesh" },
        \u0287: { math: "\\Elztrnt" },
        \u0288: { math: "\\Elzrtlt" },
        \u028A: { math: "\\Elzpupsil" },
        \u028B: { math: "\\Elzpscrv" },
        \u028C: { math: "\\Elzinvv" },
        \u028D: { math: "\\Elzinvw" },
        \u028E: { math: "\\Elztrny" },
        \u0290: { math: "\\Elzrtlz" },
        \u0292: { math: "\\Elzyogh" },
        \u0294: { math: "\\Elzglst" },
        \u0295: { math: "\\Elzreglst" },
        \u0296: { math: "\\Elzinglst" },
        \u029E: { text: "{\\textturnk}" },
        \u02A4: { math: "\\Elzdyogh" },
        \u02A7: { math: "\\Elztesh" },
        \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
        \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
        \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
        \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
        \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
        "\u02B9": { text: "'" },
        \u02BB: { text: "'" },
        \u02BC: { text: "'" },
        \u02BD: { text: "'" },
        \u02BF: { text: "{\\lasp}", textpackages: ["mathscinet"] },
        "\u02C6": { text: "{\\textasciicircum}" },
        "\u02C7": { text: "{\\textasciicaron}" },
        "\u02C8": { math: "\\Elzverts" },
        "\u02C9": { text: "-" },
        "\u02CC": { math: "\\Elzverti" },
        \u02D0: { math: "\\Elzlmrk" },
        \u02D1: { math: "\\Elzhlmrk" },
        "\u02D2": { math: "\\Elzsbrhr" },
        "\u02D3": { math: "\\Elzsblhr" },
        "\u02D4": { math: "\\Elzrais" },
        "\u02D5": { math: "\\Elzlow" },
        "\u02D8": { text: "{\\textasciibreve}" },
        "\u02D9": { text: "{\\textperiodcentered}", textpackages: ["textcomp"] },
        "\u02DA": { text: "{\\r{}}" },
        "\u02DB": { text: "{\\k{}}" },
        "\u02DC": { text: "{\\texttildelow}" },
        "\u02DD": { text: "{\\H{}}" },
        \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
        \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
        \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
        "\u02E5": { text: "\\tone{55}" },
        "\u02E6": { text: "\\tone{44}" },
        "\u02E7": { text: "\\tone{33}" },
        "\u02E8": { text: "\\tone{22}" },
        "\u02E9": { text: "\\tone{11}" },
        "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
        "\u0300\u0304": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0300": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0300\u0307": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0300": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
        "\u0301\u0304": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0301": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u030C": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030C\u0301": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
        "\u0302\u0307": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0302": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
        "\u0303\u0307": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0303": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
        "\u0305": { math: "\\overline", combiningdiacritic: true },
        "\u0306": { math: "\\breve", combiningdiacritic: true, text: "{\\u}" },
        "\u0306\u0304": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u0306": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
        "\u0307\u0301": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0301\u0307": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0307\u0306": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0306\u0307": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
        "\u0309": { math: "\\ovhook" },
        "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "{\\r}" },
        "\u030A\u0304": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0304\u030A": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030B": { text: "{\\H}", combiningdiacritic: true },
        "\u030C": { math: "\\check", text: "{\\v}", combiningdiacritic: true },
        "\u030D": { text: "{\\textvbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030E": { text: "{\\textdoublevbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u030F": { text: "{\\textdoublegrave}", combiningdiacritic: true },
        "\u0310": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
        "\u0312": { math: "\\oturnedcomma" },
        "\u0315": { math: "\\ocommatopright" },
        "\u0316": { text: "{\\textsubgrave}", combiningdiacritic: true },
        "\u0318": { text: "{\\textadvancing}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0319": { text: "{\\textretracting}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031A": { math: "\\droang", text: "{\\textcorner}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031C": { text: "{\\textsublhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031D": { text: "{\\textraising}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031E": { text: "{\\textlowering}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u031F": { text: "{\\textsubplus}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0321": { math: "\\Elzpalh" },
        "\u0322": { text: "{\\Elzrh}" },
        "\u0323": { text: "{\\d}", combiningdiacritic: true },
        "\u0324": { text: "{\\textsubumlaut}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0325": { text: "{\\textsubring}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0327": { text: "{\\c}", combiningdiacritic: true },
        "\u0328": { text: "{\\k}", combiningdiacritic: true },
        "\u0329": { text: "{\\textsyllabic}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032A": { math: "\\Elzsbbrg", text: "{\\textsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
        "\u032C": { text: "{\\textsubwedge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u032F": { text: "{\\textsubarch}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0330": { math: "\\utilde", text: "{\\textsubtilde}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "{\\textsubbar}", textpackages: ["tipa"] },
        "\u0332": { math: "\\underline" },
        "\u0334": { text: "{\\textsuperimposetilde}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0335": { text: "{\\Elzxl}" },
        "\u0336": { text: "{\\Elzbar}" },
        "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
        "\u0338": { math: "\\not" },
        "\u0339": { text: "{\\textsubrhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033A": { text: "{\\textinvsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033B": { text: "{\\textsubsquare}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033C": { text: "{\\textseagull}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u033D": { text: "{\\textovercross}", combiningdiacritic: true, textpackages: ["tipa"] },
        "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
        "\u0374": { text: "'" },
        "\u0375": { text: "," },
        "\u037E": { text: ";" },
        \u0386: { text: "{\\'A}" },
        \u0388: { text: "{\\'E}" },
        \u0389: { text: "{\\'H}" },
        \u038A: { text: "{\\'{}I}" },
        \u038C: { text: "{\\'{}O}" },
        \u038E: { math: "\\mathrm{'Y}" },
        \u038F: { math: "\\mathrm{'\\Omega}" },
        \u0390: { math: "\\acute{\\ddot{\\iota}}" },
        \u0391: { math: "A" },
        \u0392: { math: "B" },
        \u0393: { math: "\\Gamma" },
        \u0394: { math: "\\Delta" },
        \u0395: { math: "E" },
        \u0396: { math: "Z" },
        \u0397: { math: "H" },
        \u0398: { math: "\\Theta" },
        \u0399: { math: "I" },
        \u039A: { math: "K" },
        \u039B: { math: "\\Lambda" },
        \u039C: { math: "M" },
        \u039D: { math: "N" },
        \u039E: { math: "\\Xi" },
        \u039F: { math: "O" },
        \u03A0: { math: "\\Pi" },
        \u03A1: { math: "P" },
        \u03A3: { math: "\\Sigma" },
        \u03A4: { math: "T" },
        \u03A5: { math: "\\Upsilon" },
        \u03A6: { math: "\\Phi" },
        \u03A7: { math: "X" },
        \u03A8: { math: "\\Psi" },
        \u03A9: { math: "\\Omega" },
        \u03AA: { math: "\\mathrm{\\ddot{I}}" },
        \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
        \u03AC: { text: "{\\'$\\alpha$}" },
        \u03AD: { math: "\\acute{\\epsilon}" },
        \u03AE: { math: "\\acute{\\eta}" },
        \u03AF: { math: "\\acute{\\iota}" },
        \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
        \u03B1: { math: "\\alpha" },
        \u03B2: { math: "\\beta" },
        \u03B3: { math: "\\gamma" },
        \u03B4: { math: "\\delta" },
        \u03B5: { math: "\\epsilon" },
        \u03B6: { math: "\\zeta" },
        \u03B7: { math: "\\eta" },
        \u03B8: { math: "\\theta", text: "{\\texttheta}" },
        \u03B9: { math: "\\iota" },
        \u03BA: { math: "\\kappa" },
        \u03BB: { math: "\\lambda" },
        \u03BC: { math: "\\mu" },
        \u03BD: { math: "\\nu" },
        \u03BE: { math: "\\xi" },
        \u03BF: { math: "o" },
        \u03C0: { math: "\\pi" },
        \u03C1: { math: "\\rho" },
        \u03C2: { math: "\\varsigma" },
        \u03C3: { math: "\\sigma" },
        \u03C4: { math: "\\tau" },
        \u03C5: { math: "\\upsilon" },
        \u03C6: { math: "\\varphi" },
        \u03C7: { math: "\\chi" },
        \u03C8: { math: "\\psi" },
        \u03C9: { math: "\\omega" },
        \u03CA: { math: "\\ddot{\\iota}" },
        \u03CB: { math: "\\ddot{\\upsilon}" },
        \u03CC: { text: "{\\'o}" },
        \u03CD: { math: "\\acute{\\upsilon}" },
        \u03CE: { math: "\\acute{\\omega}" },
        \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
        \u03D1: { math: "\\vartheta", text: "{\\textvartheta}" },
        \u03D2: { math: "\\Upsilon" },
        \u03D5: { math: "\\phi" },
        \u03D6: { math: "\\varpi" },
        "\u03D8": { math: "\\Qoppa" },
        "\u03D9": { math: "\\qoppa" },
        \u03DA: { math: "\\Stigma" },
        \u03DB: { math: "\\stigma" },
        \u03DC: { math: "\\Digamma" },
        \u03DD: { math: "\\digamma" },
        \u03DE: { math: "\\Koppa" },
        \u03DF: { math: "\\koppa" },
        \u03E0: { math: "\\Sampi" },
        \u03E1: { math: "\\sampi" },
        \u03F0: { math: "\\varkappa" },
        \u03F1: { math: "\\varrho" },
        "\u03F4": { math: "\\upvarTheta", text: "{\\textTheta}" },
        "\u03F5": { math: "\\epsilon" },
        "\u03F6": { math: "\\backepsilon" },
        \u0401: { text: "{\\cyrchar\\CYRYO}" },
        \u0402: { text: "{\\cyrchar\\CYRDJE}" },
        \u0403: { text: "{\\cyrchar{\\'\\CYRG}}" },
        \u0404: { text: "{\\cyrchar\\CYRIE}" },
        \u0405: { text: "{\\cyrchar\\CYRDZE}" },
        \u0406: { text: "{\\cyrchar\\CYRII}" },
        \u0407: { text: "{\\cyrchar\\CYRYI}" },
        \u0408: { text: "{\\cyrchar\\CYRJE}" },
        \u0409: { text: "{\\cyrchar\\CYRLJE}" },
        \u040A: { text: "{\\cyrchar\\CYRNJE}" },
        \u040B: { text: "{\\cyrchar\\CYRTSHE}" },
        \u040C: { text: "{\\cyrchar{\\'\\CYRK}}" },
        \u040E: { text: "{\\cyrchar\\CYRUSHRT}" },
        \u040F: { text: "{\\cyrchar\\CYRDZHE}" },
        \u0410: { text: "{\\cyrchar\\CYRA}" },
        \u0411: { text: "{\\cyrchar\\CYRB}" },
        \u0412: { text: "{\\cyrchar\\CYRV}" },
        \u0413: { text: "{\\cyrchar\\CYRG}" },
        \u0414: { text: "{\\cyrchar\\CYRD}" },
        \u0415: { text: "{\\cyrchar\\CYRE}" },
        \u0416: { text: "{\\cyrchar\\CYRZH}" },
        \u0417: { text: "{\\cyrchar\\CYRZ}" },
        \u0418: { text: "{\\cyrchar\\CYRI}" },
        \u0419: { text: "{\\cyrchar\\CYRISHRT}" },
        \u041A: { text: "{\\cyrchar\\CYRK}" },
        \u041B: { text: "{\\cyrchar\\CYRL}" },
        \u041C: { text: "{\\cyrchar\\CYRM}" },
        \u041D: { text: "{\\cyrchar\\CYRN}" },
        \u041E: { text: "{\\cyrchar\\CYRO}" },
        \u041F: { text: "{\\cyrchar\\CYRP}" },
        \u0420: { text: "{\\cyrchar\\CYRR}" },
        \u0421: { text: "{\\cyrchar\\CYRS}" },
        \u0422: { text: "{\\cyrchar\\CYRT}" },
        \u0423: { text: "{\\cyrchar\\CYRU}" },
        \u0424: { text: "{\\cyrchar\\CYRF}" },
        \u0425: { text: "{\\cyrchar\\CYRH}" },
        \u0426: { text: "{\\cyrchar\\CYRC}" },
        \u0427: { text: "{\\cyrchar\\CYRCH}" },
        \u0428: { text: "{\\cyrchar\\CYRSH}" },
        \u0429: { text: "{\\cyrchar\\CYRSHCH}" },
        \u042A: { text: "{\\cyrchar\\CYRHRDSN}" },
        \u042B: { text: "{\\cyrchar\\CYRERY}" },
        \u042C: { text: "{\\cyrchar\\CYRSFTSN}" },
        \u042D: { text: "{\\cyrchar\\CYREREV}" },
        \u042E: { text: "{\\cyrchar\\CYRYU}" },
        \u042F: { text: "{\\cyrchar\\CYRYA}" },
        \u0430: { text: "{\\cyrchar\\cyra}" },
        \u0431: { text: "{\\cyrchar\\cyrb}" },
        \u0432: { text: "{\\cyrchar\\cyrv}" },
        \u0433: { text: "{\\cyrchar\\cyrg}" },
        \u0434: { text: "{\\cyrchar\\cyrd}" },
        \u0435: { text: "{\\cyrchar\\cyre}" },
        \u0436: { text: "{\\cyrchar\\cyrzh}" },
        \u0437: { text: "{\\cyrchar\\cyrz}" },
        \u0438: { text: "{\\cyrchar\\cyri}" },
        \u0439: { text: "{\\cyrchar\\cyrishrt}" },
        \u043A: { text: "{\\cyrchar\\cyrk}" },
        \u043B: { text: "{\\cyrchar\\cyrl}" },
        \u043C: { text: "{\\cyrchar\\cyrm}" },
        \u043D: { text: "{\\cyrchar\\cyrn}" },
        \u043E: { text: "{\\cyrchar\\cyro}" },
        \u043F: { text: "{\\cyrchar\\cyrp}" },
        \u0440: { text: "{\\cyrchar\\cyrr}" },
        \u0441: { text: "{\\cyrchar\\cyrs}" },
        \u0442: { text: "{\\cyrchar\\cyrt}" },
        \u0443: { text: "{\\cyrchar\\cyru}" },
        \u0444: { text: "{\\cyrchar\\cyrf}" },
        \u0445: { text: "{\\cyrchar\\cyrh}" },
        \u0446: { text: "{\\cyrchar\\cyrc}" },
        \u0447: { text: "{\\cyrchar\\cyrch}" },
        \u0448: { text: "{\\cyrchar\\cyrsh}" },
        \u0449: { text: "{\\cyrchar\\cyrshch}" },
        \u044A: { text: "{\\cyrchar\\cyrhrdsn}" },
        \u044B: { text: "{\\cyrchar\\cyrery}" },
        \u044C: { text: "{\\cyrchar\\cyrsftsn}" },
        \u044D: { text: "{\\cyrchar\\cyrerev}" },
        \u044E: { text: "{\\cyrchar\\cyryu}" },
        \u044F: { text: "{\\cyrchar\\cyrya}" },
        \u0451: { text: "{\\cyrchar\\cyryo}" },
        \u0452: { text: "{\\cyrchar\\cyrdje}" },
        \u0453: { text: "{\\cyrchar{\\'\\cyrg}}" },
        \u0454: { text: "{\\cyrchar\\cyrie}" },
        \u0455: { text: "{\\cyrchar\\cyrdze}" },
        \u0456: { text: "{\\cyrchar\\cyrii}" },
        \u0457: { text: "{\\cyrchar\\cyryi}" },
        \u0458: { text: "{\\cyrchar\\cyrje}" },
        \u0459: { text: "{\\cyrchar\\cyrlje}" },
        \u045A: { text: "{\\cyrchar\\cyrnje}" },
        \u045B: { text: "{\\cyrchar\\cyrtshe}" },
        \u045C: { text: "{\\cyrchar{\\'\\cyrk}}" },
        \u045E: { text: "{\\cyrchar\\cyrushrt}" },
        \u045F: { text: "{\\cyrchar\\cyrdzhe}" },
        \u0460: { text: "{\\cyrchar\\CYROMEGA}" },
        \u0461: { text: "{\\cyrchar\\cyromega}" },
        \u0462: { text: "{\\cyrchar\\CYRYAT}" },
        \u0464: { text: "{\\cyrchar\\CYRIOTE}" },
        \u0465: { text: "{\\cyrchar\\cyriote}" },
        \u0466: { text: "{\\cyrchar\\CYRLYUS}" },
        \u0467: { text: "{\\cyrchar\\cyrlyus}" },
        \u0468: { text: "{\\cyrchar\\CYRIOTLYUS}" },
        \u0469: { text: "{\\cyrchar\\cyriotlyus}" },
        \u046A: { text: "{\\cyrchar\\CYRBYUS}" },
        \u046C: { text: "{\\cyrchar\\CYRIOTBYUS}" },
        \u046D: { text: "{\\cyrchar\\cyriotbyus}" },
        \u046E: { text: "{\\cyrchar\\CYRKSI}" },
        \u046F: { text: "{\\cyrchar\\cyrksi}" },
        \u0470: { text: "{\\cyrchar\\CYRPSI}" },
        \u0471: { text: "{\\cyrchar\\cyrpsi}" },
        \u0472: { text: "{\\cyrchar\\CYRFITA}" },
        \u0474: { text: "{\\cyrchar\\CYRIZH}" },
        \u0478: { text: "{\\cyrchar\\CYRUK}" },
        \u0479: { text: "{\\cyrchar\\cyruk}" },
        \u047A: { text: "{\\cyrchar\\CYROMEGARND}" },
        \u047B: { text: "{\\cyrchar\\cyromegarnd}" },
        \u047C: { text: "{\\cyrchar\\CYROMEGATITLO}" },
        \u047D: { text: "{\\cyrchar\\cyromegatitlo}" },
        \u047E: { text: "{\\cyrchar\\CYROT}" },
        \u047F: { text: "{\\cyrchar\\cyrot}" },
        \u0480: { text: "{\\cyrchar\\CYRKOPPA}" },
        \u0481: { text: "{\\cyrchar\\cyrkoppa}" },
        "\u0482": { text: "{\\cyrchar\\cyrthousands}" },
        "\u0488": { text: "{\\cyrchar\\cyrhundredthousands}" },
        "\u0489": { text: "{\\cyrchar\\cyrmillions}" },
        \u048C: { text: "{\\cyrchar\\CYRSEMISFTSN}" },
        \u048D: { text: "{\\cyrchar\\cyrsemisftsn}" },
        \u048E: { text: "{\\cyrchar\\CYRRTICK}" },
        \u048F: { text: "{\\cyrchar\\cyrrtick}" },
        \u0490: { text: "{\\cyrchar\\CYRGUP}" },
        \u0491: { text: "{\\cyrchar\\cyrgup}" },
        \u0492: { text: "{\\cyrchar\\CYRGHCRS}" },
        \u0493: { text: "{\\cyrchar\\cyrghcrs}" },
        \u0494: { text: "{\\cyrchar\\CYRGHK}" },
        \u0495: { text: "{\\cyrchar\\cyrghk}" },
        \u0496: { text: "{\\cyrchar\\CYRZHDSC}" },
        \u0497: { text: "{\\cyrchar\\cyrzhdsc}" },
        \u0498: { text: "{\\cyrchar\\CYRZDSC}" },
        \u0499: { text: "{\\cyrchar\\cyrzdsc}" },
        \u049A: { text: "{\\cyrchar\\CYRKDSC}" },
        \u049B: { text: "{\\cyrchar\\cyrkdsc}" },
        \u049C: { text: "{\\cyrchar\\CYRKVCRS}" },
        \u049D: { text: "{\\cyrchar\\cyrkvcrs}" },
        \u049E: { text: "{\\cyrchar\\CYRKHCRS}" },
        \u049F: { text: "{\\cyrchar\\cyrkhcrs}" },
        \u04A0: { text: "{\\cyrchar\\CYRKBEAK}" },
        \u04A1: { text: "{\\cyrchar\\cyrkbeak}" },
        \u04A2: { text: "{\\cyrchar\\CYRNDSC}" },
        \u04A3: { text: "{\\cyrchar\\cyrndsc}" },
        \u04A4: { text: "{\\cyrchar\\CYRNG}" },
        \u04A5: { text: "{\\cyrchar\\cyrng}" },
        \u04A6: { text: "{\\cyrchar\\CYRPHK}" },
        \u04A7: { text: "{\\cyrchar\\cyrphk}" },
        \u04A8: { text: "{\\cyrchar\\CYRABHHA}" },
        \u04A9: { text: "{\\cyrchar\\cyrabhha}" },
        \u04AA: { text: "{\\cyrchar\\CYRSDSC}" },
        \u04AB: { text: "{\\cyrchar\\cyrsdsc}" },
        \u04AC: { text: "{\\cyrchar\\CYRTDSC}" },
        \u04AD: { text: "{\\cyrchar\\cyrtdsc}" },
        \u04AE: { text: "{\\cyrchar\\CYRY}" },
        \u04AF: { text: "{\\cyrchar\\cyry}" },
        \u04B0: { text: "{\\cyrchar\\CYRYHCRS}" },
        \u04B1: { text: "{\\cyrchar\\cyryhcrs}" },
        \u04B2: { text: "{\\cyrchar\\CYRHDSC}" },
        \u04B3: { text: "{\\cyrchar\\cyrhdsc}" },
        \u04B4: { text: "{\\cyrchar\\CYRTETSE}" },
        \u04B5: { text: "{\\cyrchar\\cyrtetse}" },
        \u04B6: { text: "{\\cyrchar\\CYRCHRDSC}" },
        \u04B7: { text: "{\\cyrchar\\cyrchrdsc}" },
        \u04B8: { text: "{\\cyrchar\\CYRCHVCRS}" },
        \u04B9: { text: "{\\cyrchar\\cyrchvcrs}" },
        \u04BA: { text: "{\\cyrchar\\CYRSHHA}" },
        \u04BB: { text: "{\\cyrchar\\cyrshha}" },
        \u04BC: { text: "{\\cyrchar\\CYRABHCH}" },
        \u04BD: { text: "{\\cyrchar\\cyrabhch}" },
        \u04BE: { text: "{\\cyrchar\\CYRABHCHDSC}" },
        \u04BF: { text: "{\\cyrchar\\cyrabhchdsc}" },
        \u04C0: { text: "{\\cyrchar\\CYRpalochka}" },
        \u04C3: { text: "{\\cyrchar\\CYRKHK}" },
        \u04C4: { text: "{\\cyrchar\\cyrkhk}" },
        \u04C7: { text: "{\\cyrchar\\CYRNHK}" },
        \u04C8: { text: "{\\cyrchar\\cyrnhk}" },
        \u04CB: { text: "{\\cyrchar\\CYRCHLDSC}" },
        \u04CC: { text: "{\\cyrchar\\cyrchldsc}" },
        \u04D4: { text: "{\\cyrchar\\CYRAE}" },
        \u04D5: { text: "{\\cyrchar\\cyrae}" },
        \u04D8: { text: "{\\cyrchar\\CYRSCHWA}" },
        \u04D9: { text: "{\\cyrchar\\cyrschwa}" },
        \u04E0: { text: "{\\cyrchar\\CYRABHDZE}" },
        \u04E1: { text: "{\\cyrchar\\cyrabhdze}" },
        \u04E8: { text: "{\\cyrchar\\CYROTLD}" },
        \u04E9: { text: "{\\cyrchar\\cyrotld}" },
        "\u0871": { math: "\\\\backslash" },
        "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
        "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
        "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
        "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
        "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
        "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
        "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
        "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
        "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
        "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
        "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
        "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
        "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
        "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
        "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
        \u1E02: { text: "{\\.B}" },
        \u1E03: { text: "{\\.b}" },
        \u1E04: { text: "{\\d B}" },
        \u1E05: { text: "{\\d b}" },
        \u1E06: { text: "{\\b B}" },
        \u1E07: { text: "{\\b b}" },
        \u1E0A: { text: "{\\.D}" },
        \u1E0B: { text: "{\\.d}" },
        \u1E0C: { text: "{\\d D}" },
        \u1E0D: { text: "{\\d d}" },
        \u1E0E: { text: "{\\b D}" },
        \u1E0F: { text: "{\\b d}" },
        \u1E10: { text: "{\\c D}" },
        \u1E11: { text: "{\\c d}" },
        \u1E1C: { text: "{\\c{\\u{E}}}" },
        \u1E1D: { text: "{\\c{\\u{e}}}" },
        \u1E1E: { text: "{\\.F}" },
        \u1E1F: { text: "{\\.f}" },
        \u1E20: { text: "{\\=G}" },
        \u1E21: { text: "{\\=g}" },
        \u1E22: { text: "{\\.H}" },
        \u1E23: { text: "{\\.h}" },
        \u1E24: { text: "{\\d H}" },
        \u1E25: { text: "{\\d h}" },
        \u1E26: { text: '{\\"H}' },
        \u1E27: { text: '{\\"h}' },
        \u1E28: { text: "{\\c H}" },
        \u1E29: { text: "{\\c h}" },
        \u1E30: { text: "{\\'K}" },
        \u1E31: { text: "{\\'k}" },
        \u1E32: { text: "{\\d K}" },
        \u1E33: { text: "{\\d k}" },
        \u1E34: { text: "{\\b K}" },
        \u1E35: { text: "{\\b k}" },
        \u1E36: { text: "{\\d L}" },
        \u1E37: { text: "{\\d l}" },
        \u1E3A: { text: "{\\b L}" },
        \u1E3B: { text: "{\\b l}" },
        \u1E3E: { text: "{\\'M}" },
        \u1E3F: { text: "{\\'m}" },
        \u1E40: { text: "{\\.M}" },
        \u1E41: { text: "{\\.m}" },
        \u1E42: { text: "{\\d M}" },
        \u1E43: { text: "{\\d m}" },
        \u1E44: { text: "{\\.N}" },
        \u1E45: { text: "{\\.n}" },
        \u1E46: { text: "{\\d N}" },
        \u1E47: { text: "{\\d n}" },
        \u1E48: { text: "{\\b N}" },
        \u1E49: { text: "{\\b n}" },
        \u1E54: { text: "{\\'P}" },
        \u1E55: { text: "{\\'p}" },
        \u1E56: { text: "{\\.P}" },
        \u1E57: { text: "{\\.p}" },
        \u1E58: { text: "{\\.R}" },
        \u1E59: { text: "{\\.r}" },
        \u1E5A: { text: "{\\d R}" },
        \u1E5B: { text: "{\\d r}" },
        \u1E5E: { text: "{\\b R}" },
        \u1E5F: { text: "{\\b r}" },
        \u1E60: { text: "{\\.S}" },
        \u1E61: { text: "{\\.s}" },
        \u1E62: { text: "{\\d S}" },
        \u1E63: { text: "{\\d s}" },
        \u1E6A: { text: "{\\.T}" },
        \u1E6B: { text: "{\\.t}" },
        \u1E6C: { text: "{\\d T}" },
        \u1E6D: { text: "{\\d t}" },
        \u1E6E: { text: "{\\b T}" },
        \u1E6F: { text: "{\\b t}" },
        \u1E7C: { text: "{\\~V}" },
        \u1E7D: { text: "{\\~v}" },
        \u1E7E: { text: "{\\d V}" },
        \u1E7F: { text: "{\\d v}" },
        \u1E80: { text: "{\\`W}" },
        \u1E81: { text: "{\\`w}" },
        \u1E82: { text: "{\\'W}" },
        \u1E83: { text: "{\\'w}" },
        \u1E84: { text: '{\\"W}' },
        \u1E85: { text: '{\\"w}' },
        \u1E86: { text: "{\\.W}" },
        \u1E87: { text: "{\\.w}" },
        \u1E88: { text: "{\\d W}" },
        \u1E89: { text: "{\\d w}" },
        \u1E8A: { text: "{\\.X}" },
        \u1E8B: { text: "{\\.x}" },
        \u1E8C: { text: '{\\"X}' },
        \u1E8D: { text: '{\\"x}' },
        \u1E8E: { text: "{\\.Y}" },
        \u1E8F: { text: "{\\.y}" },
        \u1E90: { text: "{\\^Z}" },
        \u1E91: { text: "{\\^z}" },
        \u1E92: { text: "{\\d Z}" },
        \u1E93: { text: "{\\d z}" },
        \u1E94: { text: "{\\b Z}" },
        \u1E95: { text: "{\\b z}" },
        \u1E96: { text: "{\\b h}" },
        \u1E97: { text: '{\\"t}' },
        \u1E98: { text: "{\\r{w}}" },
        \u1E99: { text: "{\\r{y}}" },
        \u1EA0: { text: "{\\d A}" },
        \u1EA1: { text: "{\\d a}" },
        \u1EB8: { text: "{\\d E}" },
        \u1EB9: { text: "{\\d e}" },
        \u1EBC: { text: "{\\~E}" },
        \u1EBD: { text: "{\\~e}" },
        \u1ECA: { text: "{\\d I}" },
        \u1ECB: { text: "{\\d i}" },
        \u1ECC: { text: "{\\d O}" },
        \u1ECD: { text: "{\\d o}" },
        \u1EE4: { text: "{\\d U}" },
        \u1EE5: { text: "{\\d u}" },
        \u1EF2: { text: "{\\`Y}" },
        \u1EF3: { text: "{\\`y}" },
        \u1EF4: { text: "{\\d Y}" },
        \u1EF5: { text: "{\\d y}" },
        \u1EF8: { text: "{\\~Y}" },
        \u1EF9: { text: "{\\~y}" },
        "\u2000": { text: " ", space: true },
        "\u2001": { math: "\\quad", space: true },
        "\u2002": { text: "\\hspace{0.6em}", space: true },
        "\u2003": { math: "\\quad", space: true, text: "\\hspace{1em}" },
        "\u2004": { text: "\\;", space: true },
        "\u2005": { text: "\\hspace{0.25em}", space: true },
        "\u2006": { text: "\\hspace{0.166em}", space: true },
        "\u2007": { text: "\\hphantom{0}", space: true },
        "\u2008": { text: "\\hphantom{,}", space: true },
        "\u2009": { text: "\\,", space: true },
        "\u200A": { math: "\\mkern1mu", space: true },
        "\u200B": { text: "\\hspace{0pt}", space: true },
        "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
        "\u2010": { text: "-" },
        "\u2011": { text: "-" },
        "\u2012": { text: "-" },
        "\u2013": { text: "{\\textendash}" },
        "\u2014": { text: "{\\textemdash}" },
        "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
        "\u2016": { math: "\\Vert" },
        "\u2017": { math: "\\twolowline" },
        "\u2018": { text: "`" },
        "\u2019": { text: "'" },
        "\u201A": { text: "," },
        "\u201B": { math: "\\Elzreapos" },
        "\u201C": { text: "``" },
        "\u201D": { text: "''" },
        "\u201E": { text: ",," },
        "\u201F": { text: "{\\quotedblbase}" },
        "\u2020": { math: "\\dagger", text: "{\\textdagger}", textpackages: ["textcomp"] },
        "\u2021": { math: "\\ddagger", text: "{\\textdaggerdbl}", textpackages: ["textcomp"] },
        "\u2022": { math: "\\bullet", text: "{\\textbullet}", textpackages: ["textcomp"] },
        "\u2023": { text: ">" },
        "\u2024": { text: "." },
        "\u2025": { math: "\\enleadertwodots", text: ".." },
        "\u2026": { math: "\\ldots", text: "{\\ldots}" },
        "\u2027": { text: "-" },
        "\u202F": { text: " ", space: true },
        "\u2030": { text: "{\\textperthousand}", textpackages: ["textcomp"] },
        "\u2031": { text: "{\\textpertenthousand}", textpackages: ["textcomp"] },
        "\u2032": { math: "{'}" },
        "\u2033": { math: "{''}" },
        "\u2034": { math: "{'''}" },
        "\u2035": { math: "\\backprime" },
        "\u2036": { math: "\\backdprime" },
        "\u2037": { math: "\\backtrprime" },
        "\u2038": { math: "\\caretinsert" },
        "\u2039": { text: "{\\guilsinglleft}" },
        "\u203A": { text: "{\\guilsinglright}" },
        "\u203C": { math: "\\Exclam" },
        "\u203E": { text: "-" },
        "\u2043": { math: "\\hyphenbullet" },
        "\u2044": { math: "\\fracslash" },
        "\u2047": { math: "\\Question" },
        "\u2048": { text: "?!" },
        "\u2049": { text: "!?" },
        "\u204A": { text: "7" },
        "\u2050": { math: "\\closure" },
        "\u2057": { math: "''''" },
        "\u205F": { math: "\\:", space: true, text: "\\:" },
        "\u2060": { text: "{\\nolinebreak}" },
        "\u2070": { math: "^{0}" },
        "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
        "\u2074": { math: "^{4}" },
        "\u2075": { math: "^{5}" },
        "\u2076": { math: "^{6}" },
        "\u2077": { math: "^{7}" },
        "\u2078": { math: "^{8}" },
        "\u2079": { math: "^{9}" },
        "\u207A": { math: "^{+}" },
        "\u207B": { math: "^{-}" },
        "\u207C": { math: "^{=}" },
        "\u207D": { math: "^{(}" },
        "\u207E": { math: "^{)}" },
        \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
        "\u2080": { math: "_{0}" },
        "\u2081": { math: "_{1}" },
        "\u2082": { math: "_{2}" },
        "\u2083": { math: "_{3}" },
        "\u2084": { math: "_{4}" },
        "\u2085": { math: "_{5}" },
        "\u2086": { math: "_{6}" },
        "\u2087": { math: "_{7}" },
        "\u2088": { math: "_{8}" },
        "\u2089": { math: "_{9}" },
        "\u208A": { math: "_{+}" },
        "\u208B": { math: "_{-}" },
        "\u208C": { math: "_{=}" },
        "\u208D": { math: "_{(}" },
        "\u208E": { math: "_{)}" },
        "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
        "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
        "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
        "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
        "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
        "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
        "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
        "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
        "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
        "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
        "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
        "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
        "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
        "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
        "\u20AC": { math: "\\euro", text: "{\\texteuro}" },
        "\u20D0": { math: "\\lvec" },
        "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u20D2": { math: "\\vertoverlay" },
        "\u20D6": { math: "\\LVec" },
        "\u20D7": { math: "\\vec" },
        "\u20DB": { math: "\\dddot" },
        "\u20DC": { math: "\\ddddot" },
        "\u20DD": { math: "\\enclosecircle" },
        "\u20DE": { math: "\\enclosesquare" },
        "\u20DF": { math: "\\enclosediamond" },
        "\u20E1": { math: "\\overleftrightarrow" },
        "\u20E4": { math: "\\enclosetriangle" },
        "\u20E7": { math: "\\annuity" },
        "\u20E8": { math: "\\threeunderdot" },
        "\u20E9": { math: "\\widebridgeabove" },
        "\u20EC": { math: "\\underrightharpoondown" },
        "\u20ED": { math: "\\underleftharpoondown" },
        "\u20EE": { math: "\\underleftarrow" },
        "\u20EF": { math: "\\underrightarrow" },
        "\u20F0": { math: "\\asteraccent" },
        "\u2100": { text: "a/c" },
        "\u2101": { text: "a/s" },
        \u2102: { math: "\\mathbb{C}" },
        "\u2103": { text: "{\\textcelsius}" },
        "\u2105": { text: "c/o" },
        "\u2106": { text: "c/u" },
        \u2107: { math: "\\Euler" },
        "\u2109": { text: "F" },
        \u210A: { math: "\\mathscr{g}" },
        \u210B: { math: "\\mathscr{H}" },
        \u210C: { math: "\\mathfrak{H}" },
        \u210D: { math: "\\mathbb{H}" },
        \u210E: { math: "\\Planckconst" },
        \u210F: { math: "\\hslash" },
        \u2110: { math: "\\mathscr{I}" },
        \u2111: { math: "\\mathfrak{I}" },
        \u2112: { math: "\\mathscr{L}" },
        \u2113: { math: "\\mathscr{l}" },
        \u2115: { math: "\\mathbb{N}" },
        "\u2116": { text: "{\\cyrchar\\textnumero}" },
        "\u2117": { text: "{\\textcircledP}" },
        "\u2118": { math: "\\wp" },
        \u2119: { math: "\\mathbb{P}" },
        \u211A: { math: "\\mathbb{Q}" },
        \u211B: { math: "\\mathscr{R}" },
        \u211C: { math: "\\mathfrak{R}" },
        \u211D: { math: "\\mathbb{R}" },
        "\u211E": { math: "\\Elzxrat" },
        "\u2120": { text: "{\\textservicemark}" },
        "\u2121": { text: "TEL" },
        "\u2122": { text: "{\\texttrademark}", textpackages: ["textcomp"] },
        \u2124: { math: "\\mathbb{Z}" },
        \u2126: { math: "\\Omega" },
        "\u2127": { math: "\\mho" },
        \u2128: { math: "\\mathfrak{Z}" },
        "\u2129": { text: "{\\textriota}" },
        \u212A: { text: "K" },
        \u212B: { math: "\\Angstroem", text: "{\\AA}" },
        \u212C: { math: "\\mathscr{B}" },
        \u212D: { math: "\\mathfrak{C}" },
        "\u212E": { text: "{\\textestimated}" },
        \u212F: { math: "\\mathscr{e}" },
        \u2130: { math: "\\mathscr{E}" },
        \u2131: { math: "\\mathscr{F}" },
        "\u2132": { math: "\\Finv" },
        \u2133: { math: "\\mathscr{M}" },
        \u2134: { math: "\\mathscr{o}" },
        \u2135: { math: "\\aleph" },
        \u2136: { math: "\\beth" },
        \u2137: { math: "\\gimel" },
        \u2138: { math: "\\daleth" },
        "\u213C": { math: "\\mathbb{\\pi}" },
        "\u213D": { math: "\\mathbb{\\gamma}" },
        "\u213E": { math: "\\mathbb{\\Gamma}" },
        "\u213F": { math: "\\mathbb{\\Pi}" },
        "\u2140": { math: "\\mathbb{\\Sigma}" },
        "\u2141": { math: "\\Game" },
        "\u2142": { math: "\\sansLturned" },
        "\u2143": { math: "\\sansLmirrored" },
        "\u2144": { math: "\\Yup" },
        "\u2145": { math: "\\CapitalDifferentialD" },
        "\u2146": { math: "\\DifferentialD" },
        "\u2147": { math: "\\ExponetialE" },
        "\u2148": { math: "\\ComplexI" },
        "\u2149": { math: "\\ComplexJ" },
        "\u214A": { math: "\\PropertyLine" },
        "\u214B": { math: "\\invamp" },
        "\u2150": { math: "\\frac{1}{7}" },
        "\u2151": { math: "\\frac{1}{9}" },
        "\u2152": { math: "\\frac{1}{10}" },
        "\u2153": { math: "\\frac{1}{3}" },
        "\u2154": { math: "\\frac{2}{3}" },
        "\u2155": { math: "\\frac{1}{5}" },
        "\u2156": { math: "\\frac{2}{5}" },
        "\u2157": { math: "\\frac{3}{5}" },
        "\u2158": { math: "\\frac{4}{5}" },
        "\u2159": { math: "\\frac{1}{6}" },
        "\u215A": { math: "\\frac{5}{6}" },
        "\u215B": { math: "\\frac{1}{8}" },
        "\u215C": { math: "\\frac{3}{8}" },
        "\u215D": { math: "\\frac{5}{8}" },
        "\u215E": { math: "\\frac{7}{8}" },
        "\u215F": { math: "\\frac{1}" },
        "\u2160": { text: "I" },
        "\u2161": { text: "II" },
        "\u2162": { text: "III" },
        "\u2163": { text: "IV" },
        "\u2164": { text: "V" },
        "\u2165": { text: "VI" },
        "\u2166": { text: "VII" },
        "\u2167": { text: "VIII" },
        "\u2168": { text: "IX" },
        "\u2169": { text: "X" },
        "\u216A": { text: "XI" },
        "\u216B": { text: "XII" },
        "\u216C": { text: "L" },
        "\u216D": { text: "C" },
        "\u216E": { text: "D" },
        "\u216F": { text: "M" },
        "\u2170": { text: "i" },
        "\u2171": { text: "ii" },
        "\u2172": { text: "iii" },
        "\u2173": { text: "iv" },
        "\u2174": { text: "v" },
        "\u2175": { text: "vi" },
        "\u2176": { text: "vii" },
        "\u2177": { text: "viii" },
        "\u2178": { text: "ix" },
        "\u2179": { text: "x" },
        "\u217A": { text: "xi" },
        "\u217B": { text: "xii" },
        "\u217C": { text: "l" },
        "\u217D": { text: "c" },
        "\u217E": { text: "d" },
        "\u217F": { text: "m" },
        "\u2189": { math: "\\frac{0}{3}" },
        "\u2190": { math: "\\leftarrow" },
        "\u2191": { math: "\\uparrow" },
        "\u2192": { math: "\\rightarrow", text: "{\\textrightarrow}", textpackages: ["textcomp"] },
        "\u2193": { math: "\\downarrow" },
        "\u2194": { math: "\\leftrightarrow" },
        "\u2195": { math: "\\updownarrow" },
        "\u2196": { math: "\\nwarrow" },
        "\u2197": { math: "\\nearrow" },
        "\u2198": { math: "\\searrow" },
        "\u2199": { math: "\\swarrow" },
        "\u219A": { math: "\\nleftarrow" },
        "\u219B": { math: "\\nrightarrow" },
        "\u219C": { math: "\\arrowwaveleft" },
        "\u219D": { math: "\\arrowwaveright" },
        "\u219E": { math: "\\twoheadleftarrow" },
        "\u219F": { math: "\\twoheaduparrow" },
        "\u21A0": { math: "\\twoheadrightarrow" },
        "\u21A1": { math: "\\twoheaddownarrow" },
        "\u21A2": { math: "\\leftarrowtail" },
        "\u21A3": { math: "\\rightarrowtail" },
        "\u21A4": { math: "\\mapsfrom" },
        "\u21A5": { math: "\\MapsUp" },
        "\u21A6": { math: "\\mapsto" },
        "\u21A7": { math: "\\MapsDown" },
        "\u21A8": { math: "\\updownarrowbar" },
        "\u21A9": { math: "\\hookleftarrow" },
        "\u21AA": { math: "\\hookrightarrow" },
        "\u21AB": { math: "\\looparrowleft" },
        "\u21AC": { math: "\\looparrowright" },
        "\u21AD": { math: "\\leftrightsquigarrow" },
        "\u21AE": { math: "\\nleftrightarrow" },
        "\u21AF": { math: "\\lightning" },
        "\u21B0": { math: "\\Lsh" },
        "\u21B1": { math: "\\Rsh" },
        "\u21B2": { math: "\\dlsh" },
        "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
        "\u21B4": { math: "\\linefeed" },
        "\u21B5": { math: "\\carriagereturn" },
        "\u21B6": { math: "\\curvearrowleft" },
        "\u21B7": { math: "\\curvearrowright" },
        "\u21B8": { math: "\\barovernorthwestarrow" },
        "\u21B9": { math: "\\barleftarrowrightarrowba" },
        "\u21BA": { math: "\\circlearrowleft" },
        "\u21BB": { math: "\\circlearrowright" },
        "\u21BC": { math: "\\leftharpoonup" },
        "\u21BD": { math: "\\leftharpoondown" },
        "\u21BE": { math: "\\upharpoonright" },
        "\u21BF": { math: "\\upharpoonleft" },
        "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
        "\u21C1": { math: "\\rightharpoondown" },
        "\u21C2": { math: "\\downharpoonright" },
        "\u21C3": { math: "\\downharpoonleft" },
        "\u21C4": { math: "\\rightleftarrows" },
        "\u21C5": { math: "\\dblarrowupdown" },
        "\u21C6": { math: "\\leftrightarrows" },
        "\u21C7": { math: "\\leftleftarrows" },
        "\u21C8": { math: "\\upuparrows" },
        "\u21C9": { math: "\\rightrightarrows" },
        "\u21CA": { math: "\\downdownarrows" },
        "\u21CB": { math: "\\leftrightharpoons" },
        "\u21CC": { math: "\\rightleftharpoons" },
        "\u21CD": { math: "\\nLeftarrow" },
        "\u21CE": { math: "\\nLeftrightarrow" },
        "\u21CF": { math: "\\nRightarrow" },
        "\u21D0": { math: "\\Leftarrow" },
        "\u21D1": { math: "\\Uparrow" },
        "\u21D2": { math: "\\Rightarrow" },
        "\u21D3": { math: "\\Downarrow" },
        "\u21D4": { math: "\\Leftrightarrow" },
        "\u21D5": { math: "\\Updownarrow" },
        "\u21D6": { math: "\\Nwarrow" },
        "\u21D7": { math: "\\Nearrow" },
        "\u21D8": { math: "\\Searrow" },
        "\u21D9": { math: "\\Swarrow" },
        "\u21DA": { math: "\\Lleftarrow" },
        "\u21DB": { math: "\\Rrightarrow" },
        "\u21DC": { math: "\\leftsquigarrow" },
        "\u21DD": { math: "\\rightsquigarrow" },
        "\u21DE": { math: "\\nHuparrow" },
        "\u21DF": { math: "\\nHdownarrow" },
        "\u21E0": { math: "\\dashleftarrow" },
        "\u21E1": { math: "\\updasharrow" },
        "\u21E2": { math: "\\dashrightarrow" },
        "\u21E3": { math: "\\downdasharrow" },
        "\u21E4": { math: "\\LeftArrowBar" },
        "\u21E5": { math: "\\RightArrowBar" },
        "\u21E6": { math: "\\leftwhitearrow" },
        "\u21E7": { math: "\\upwhitearrow" },
        "\u21E8": { math: "\\rightwhitearrow" },
        "\u21E9": { math: "\\downwhitearrow" },
        "\u21EA": { math: "\\whitearrowupfrombar" },
        "\u21F4": { math: "\\circleonrightarrow" },
        "\u21F5": { math: "\\DownArrowUpArrow" },
        "\u21F6": { math: "\\rightthreearrows" },
        "\u21F7": { math: "\\nvleftarrow" },
        "\u21F8": { math: "\\pfun" },
        "\u21F9": { math: "\\nvleftrightarrow" },
        "\u21FA": { math: "\\nVleftarrow" },
        "\u21FB": { math: "\\ffun" },
        "\u21FC": { math: "\\nVleftrightarrow" },
        "\u21FD": { math: "\\leftarrowtriangle" },
        "\u21FE": { math: "\\rightarrowtriangle" },
        "\u21FF": { math: "\\leftrightarrowtriangle" },
        "\u2200": { math: "\\forall" },
        "\u2201": { math: "\\complement" },
        "\u2202": { math: "\\partial" },
        "\u2203": { math: "\\exists" },
        "\u2204": { math: "\\nexists" },
        "\u2205": { math: "\\varnothing" },
        "\u2206": { math: "\\increment" },
        "\u2207": { math: "\\nabla" },
        "\u2208": { math: "\\in" },
        "\u2209": { math: "\\not\\in" },
        "\u220A": { math: "\\smallin" },
        "\u220B": { math: "\\ni" },
        "\u220C": { math: "\\not\\ni" },
        "\u220D": { math: "\\smallni" },
        "\u220E": { math: "\\QED" },
        "\u220F": { math: "\\prod" },
        "\u2210": { math: "\\coprod" },
        "\u2211": { math: "\\sum" },
        "\u2212": { math: "-", text: "-" },
        "\u2213": { math: "\\mp" },
        "\u2214": { math: "\\dotplus" },
        "\u2215": { text: "/" },
        "\u2216": { math: "\\setminus" },
        "\u2217": { math: "{_\\ast}" },
        "\u2218": { math: "\\circ" },
        "\u2219": { math: "\\bullet" },
        "\u221A": { math: "\\surd" },
        "\u221B": { math: "\\sqrt[3]" },
        "\u221C": { math: "\\sqrt[4]" },
        "\u221D": { math: "\\propto" },
        "\u221E": { math: "\\infty" },
        "\u221F": { math: "\\rightangle" },
        "\u2220": { math: "\\angle" },
        "\u2221": { math: "\\measuredangle" },
        "\u2222": { math: "\\sphericalangle" },
        "\u2223": { math: "\\mid" },
        "\u2224": { math: "\\nmid" },
        "\u2225": { math: "\\parallel" },
        "\u2226": { math: "\\nparallel" },
        "\u2227": { math: "\\wedge" },
        "\u2228": { math: "\\vee" },
        "\u2229": { math: "\\cap" },
        "\u222A": { math: "\\cup" },
        "\u222B": { math: "\\int" },
        "\u222C": { math: "{\\int\\!\\int}" },
        "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
        "\u222E": { math: "\\oint" },
        "\u222F": { math: "\\surfintegral" },
        "\u2230": { math: "\\volintegral" },
        "\u2231": { math: "\\clwintegral" },
        "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
        "\u2234": { math: "\\therefore" },
        "\u2235": { math: "\\because" },
        "\u2236": { math: ":" },
        "\u2237": { math: "\\Colon" },
        "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
        "\u2239": { math: "\\eqcolon" },
        "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
        "\u223B": { math: "\\homothetic" },
        "\u223C": { math: "\\sim" },
        "\u223D": { math: "\\backsim" },
        "\u223E": { math: "\\lazysinv" },
        "\u223F": { math: "\\AC" },
        "\u2240": { math: "\\wr" },
        "\u2241": { math: "\\not\\sim" },
        "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
        "\u2242\u0338": { math: "\\NotEqualTilde" },
        "\u2243": { math: "\\simeq" },
        "\u2244": { math: "\\not\\simeq" },
        "\u2245": { math: "\\cong" },
        "\u2246": { math: "\\approxnotequal" },
        "\u2247": { math: "\\not\\cong" },
        "\u2248": { math: "\\approx" },
        "\u2249": { math: "\\not\\approx" },
        "\u224A": { math: "\\approxeq" },
        "\u224B": { math: "\\tildetrpl" },
        "\u224B\u0338": { math: "\\not\\apid" },
        "\u224C": { math: "\\allequal" },
        "\u224D": { math: "\\asymp" },
        "\u224E": { math: "\\Bumpeq" },
        "\u224E\u0338": { math: "\\NotHumpDownHump" },
        "\u224F": { math: "\\bumpeq" },
        "\u224F\u0338": { math: "\\NotHumpEqual" },
        "\u2250": { math: "\\doteq" },
        "\u2250\u0338": { math: "\\not\\doteq" },
        "\u2251": { math: "\\doteqdot" },
        "\u2252": { math: "\\fallingdotseq" },
        "\u2253": { math: "\\risingdotseq" },
        "\u2254": { math: "\\coloneq", text: ":=" },
        "\u2255": { math: "=:" },
        "\u2256": { math: "\\eqcirc" },
        "\u2257": { math: "\\circeq" },
        "\u2258": { math: "\\arceq" },
        "\u2259": { math: "\\estimates" },
        "\u225B": { math: "\\starequal" },
        "\u225C": { math: "\\triangleq" },
        "\u225D": { math: "\\eqdef" },
        "\u225E": { math: "\\measeq" },
        "\u2260": { math: "\\neq" },
        "\u2261": { math: "\\equiv" },
        "\u2262": { math: "\\not\\equiv" },
        "\u2263": { math: "\\Equiv" },
        "\u2264": { math: "\\leq" },
        "\u2265": { math: "\\geq" },
        "\u2266": { math: "\\leqq" },
        "\u2267": { math: "\\geqq" },
        "\u2268": { math: "\\lneqq" },
        "\u2268\uFE00": { math: "\\lvertneqq" },
        "\u2269": { math: "\\gneqq" },
        "\u2269\uFE00": { math: "\\gvertneqq" },
        "\u226A": { math: "\\ll" },
        "\u226A\u0338": { math: "\\NotLessLess" },
        "\u226B": { math: "\\gg" },
        "\u226B\u0338": { math: "\\NotGreaterGreater" },
        "\u226C": { math: "\\between" },
        "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
        "\u226E": { math: "\\not<" },
        "\u226F": { math: "\\not>" },
        "\u2270": { math: "\\not\\leq" },
        "\u2271": { math: "\\not\\geq" },
        "\u2272": { math: "\\lessequivlnt" },
        "\u2273": { math: "\\greaterequivlnt" },
        "\u2276": { math: "\\lessgtr" },
        "\u2277": { math: "\\gtrless" },
        "\u2278": { math: "\\notlessgreater" },
        "\u2279": { math: "\\notgreaterless" },
        "\u227A": { math: "\\prec" },
        "\u227B": { math: "\\succ" },
        "\u227C": { math: "\\preccurlyeq" },
        "\u227D": { math: "\\succcurlyeq" },
        "\u227E": { math: "\\precapprox" },
        "\u227E\u0338": { math: "\\NotPrecedesTilde" },
        "\u227F": { math: "\\succapprox" },
        "\u227F\u0338": { math: "\\NotSucceedsTilde" },
        "\u2280": { math: "\\not\\prec" },
        "\u2281": { math: "\\not\\succ" },
        "\u2282": { math: "\\subset" },
        "\u2283": { math: "\\supset" },
        "\u2284": { math: "\\not\\subset" },
        "\u2285": { math: "\\not\\supset" },
        "\u2286": { math: "\\subseteq" },
        "\u2287": { math: "\\supseteq" },
        "\u2288": { math: "\\not\\subseteq" },
        "\u2289": { math: "\\not\\supseteq" },
        "\u228A": { math: "\\subsetneq" },
        "\u228A\uFE00": { math: "\\varsubsetneqq" },
        "\u228B": { math: "\\supsetneq" },
        "\u228B\uFE00": { math: "\\varsupsetneq" },
        "\u228C": { math: "\\cupleftarrow" },
        "\u228D": { math: "\\cupdot" },
        "\u228E": { math: "\\uplus" },
        "\u228F": { math: "\\sqsubset" },
        "\u228F\u0338": { math: "\\NotSquareSubset" },
        "\u2290": { math: "\\sqsupset" },
        "\u2290\u0338": { math: "\\NotSquareSuperset" },
        "\u2291": { math: "\\sqsubseteq" },
        "\u2292": { math: "\\sqsupseteq" },
        "\u2293": { math: "\\sqcap" },
        "\u2294": { math: "\\sqcup" },
        "\u2295": { math: "\\oplus" },
        "\u2296": { math: "\\ominus" },
        "\u2297": { math: "\\otimes" },
        "\u2298": { math: "\\oslash" },
        "\u2299": { math: "\\odot" },
        "\u229A": { math: "\\circledcirc" },
        "\u229B": { math: "\\circledast" },
        "\u229C": { math: "\\circledequal" },
        "\u229D": { math: "\\circleddash" },
        "\u229E": { math: "\\boxplus" },
        "\u229F": { math: "\\boxminus" },
        "\u22A0": { math: "\\boxtimes" },
        "\u22A1": { math: "\\boxdot" },
        "\u22A2": { math: "\\vdash" },
        "\u22A3": { math: "\\dashv" },
        "\u22A4": { math: "\\top" },
        "\u22A5": { math: "\\perp" },
        "\u22A6": { math: "\\assert" },
        "\u22A7": { math: "\\truestate" },
        "\u22A8": { math: "\\forcesextra" },
        "\u22A9": { math: "\\Vdash" },
        "\u22AA": { math: "\\Vvdash" },
        "\u22AB": { math: "\\VDash" },
        "\u22AC": { math: "\\nvdash" },
        "\u22AD": { math: "\\nvDash" },
        "\u22AE": { math: "\\nVdash" },
        "\u22AF": { math: "\\nVDash" },
        "\u22B0": { math: "\\prurel" },
        "\u22B1": { math: "\\scurel" },
        "\u22B2": { math: "\\vartriangleleft" },
        "\u22B3": { math: "\\vartriangleright" },
        "\u22B4": { math: "\\trianglelefteq" },
        "\u22B5": { math: "\\trianglerighteq" },
        "\u22B6": { math: "\\original" },
        "\u22B7": { math: "\\image" },
        "\u22B8": { math: "\\multimap" },
        "\u22B9": { math: "\\hermitconjmatrix" },
        "\u22BA": { math: "\\intercal" },
        "\u22BB": { math: "\\veebar" },
        "\u22BC": { math: "\\barwedge" },
        "\u22BD": { math: "\\barvee" },
        "\u22BE": { math: "\\rightanglearc" },
        "\u22BF": { math: "\\varlrtriangle" },
        "\u22C2": { math: "\\bigcap" },
        "\u22C3": { math: "\\bigcup" },
        "\u22C4": { math: "\\diamond" },
        "\u22C5": { math: "\\cdot" },
        "\u22C6": { math: "\\star" },
        "\u22C7": { math: "\\divideontimes" },
        "\u22C8": { math: "\\bowtie" },
        "\u22C9": { math: "\\ltimes" },
        "\u22CA": { math: "\\rtimes" },
        "\u22CB": { math: "\\leftthreetimes" },
        "\u22CC": { math: "\\rightthreetimes" },
        "\u22CD": { math: "\\backsimeq" },
        "\u22CE": { math: "\\curlyvee" },
        "\u22CF": { math: "\\curlywedge" },
        "\u22D0": { math: "\\Subset" },
        "\u22D1": { math: "\\Supset" },
        "\u22D2": { math: "\\Cap" },
        "\u22D3": { math: "\\Cup" },
        "\u22D4": { math: "\\pitchfork" },
        "\u22D5": { math: "\\hash" },
        "\u22D6": { math: "\\lessdot" },
        "\u22D7": { math: "\\gtrdot" },
        "\u22D8": { math: "\\verymuchless" },
        "\u22D9": { math: "\\verymuchgreater" },
        "\u22DA": { math: "\\lesseqgtr" },
        "\u22DB": { math: "\\gtreqless" },
        "\u22DC": { math: "\\eqless" },
        "\u22DD": { math: "\\eqgtr" },
        "\u22DE": { math: "\\curlyeqprec" },
        "\u22DF": { math: "\\curlyeqsucc" },
        "\u22E0": { math: "\\npreceq" },
        "\u22E1": { math: "\\nsucceq" },
        "\u22E2": { math: "\\not\\sqsubseteq" },
        "\u22E3": { math: "\\not\\sqsupseteq" },
        "\u22E4": { math: "\\sqsubsetneq" },
        "\u22E5": { math: "\\Elzsqspne" },
        "\u22E6": { math: "\\lnsim" },
        "\u22E7": { math: "\\gnsim" },
        "\u22E8": { math: "\\precedesnotsimilar" },
        "\u22E9": { math: "\\succnsim" },
        "\u22EA": { math: "\\ntriangleleft" },
        "\u22EB": { math: "\\ntriangleright" },
        "\u22EC": { math: "\\ntrianglelefteq" },
        "\u22ED": { math: "\\ntrianglerighteq" },
        "\u22EE": { math: "\\vdots" },
        "\u22EF": { math: "\\cdots" },
        "\u22F0": { math: "\\upslopeellipsis" },
        "\u22F1": { math: "\\downslopeellipsis" },
        "\u22F2": { math: "\\disin" },
        "\u22F3": { math: "\\varisins" },
        "\u22F4": { math: "\\isins" },
        "\u22F5": { math: "\\isindot" },
        "\u22F6": { math: "\\barin" },
        "\u22F7": { math: "\\isinobar" },
        "\u22F8": { math: "\\isinvb" },
        "\u22F9": { math: "\\isinE" },
        "\u22FA": { math: "\\nisd" },
        "\u22FB": { math: "\\varnis" },
        "\u22FC": { math: "\\nis" },
        "\u22FD": { math: "\\varniobar" },
        "\u22FE": { math: "\\niobar" },
        "\u22FF": { math: "\\bagmember" },
        "\u2300": { math: "\\diameter" },
        "\u2302": { math: "\\house" },
        "\u2305": { math: "\\varbarwedge", text: "{\\barwedge}" },
        "\u2306": { math: "\\perspcorrespond" },
        "\u2308": { math: "\\lceil" },
        "\u2309": { math: "\\rceil" },
        "\u230A": { math: "\\lfloor" },
        "\u230B": { math: "\\rfloor" },
        "\u2310": { math: "\\invneg" },
        "\u2311": { math: "\\wasylozenge" },
        "\u2312": { math: "\\profline" },
        "\u2313": { math: "\\profsurf" },
        "\u2315": { math: "\\recorder" },
        "\u2316": { math: '{\\mathchar"2208}' },
        "\u2317": { math: "\\viewdata" },
        "\u2319": { math: "\\turnednot" },
        "\u231C": { math: "\\ulcorner" },
        "\u231D": { math: "\\urcorner" },
        "\u231E": { math: "\\llcorner" },
        "\u231F": { math: "\\lrcorner" },
        "\u2320": { math: "\\inttop" },
        "\u2321": { math: "\\intbottom" },
        "\u2322": { math: "\\frown" },
        "\u2323": { math: "\\smile" },
        "\u2329": { math: "\\langle" },
        "\u232A": { math: "\\rangle" },
        "\u232C": { math: "\\varhexagonlrbonds" },
        "\u2332": { math: "\\conictaper" },
        "\u2336": { math: "\\topbot" },
        "\u2339": { math: "\\APLinv" },
        "\u233F": { math: "\\notslash" },
        "\u2340": { math: "\\notbackslash" },
        "\u2347": { math: "\\APLleftarrowbox" },
        "\u2348": { math: "\\APLrightarrowbox" },
        "\u2349": { math: "\\invdiameter" },
        "\u2350": { math: "\\APLuparrowbox" },
        "\u2353": { math: "\\APLboxupcaret" },
        "\u2357": { math: "\\APLdownarrowbox" },
        "\u235D": { math: "\\APLcomment" },
        "\u235E": { math: "\\APLinput" },
        "\u235F": { math: "\\APLlog" },
        "\u2370": { math: "\\APLboxquestion" },
        "\u237C": { math: "\\rangledownzigzagarrow" },
        "\u2394": { math: "\\hexagon" },
        "\u239B": { math: "\\lparenuend" },
        "\u239C": { math: "\\lparenextender" },
        "\u239D": { math: "\\lparenlend" },
        "\u239E": { math: "\\rparenuend" },
        "\u239F": { math: "\\rparenextender" },
        "\u23A0": { math: "\\rparenlend" },
        "\u23A1": { math: "\\lbrackuend" },
        "\u23A2": { math: "\\lbrackextender" },
        "\u23A3": { math: "\\Elzdlcorn" },
        "\u23A4": { math: "\\rbrackuend" },
        "\u23A5": { math: "\\rbrackextender" },
        "\u23A6": { math: "\\rbracklend" },
        "\u23A7": { math: "\\lbraceuend" },
        "\u23A8": { math: "\\lbracemid" },
        "\u23A9": { math: "\\lbracelend" },
        "\u23AA": { math: "\\vbraceextender" },
        "\u23AB": { math: "\\rbraceuend" },
        "\u23AC": { math: "\\rbracemid" },
        "\u23AD": { math: "\\rbracelend" },
        "\u23AE": { math: "\\intextender" },
        "\u23AF": { math: "\\harrowextender" },
        "\u23B0": { math: "\\lmoustache" },
        "\u23B1": { math: "\\rmoustache" },
        "\u23B2": { math: "\\sumtop" },
        "\u23B3": { math: "\\sumbottom" },
        "\u23B4": { math: "\\overbracket" },
        "\u23B5": { math: "\\underbracket" },
        "\u23B6": { math: "\\bbrktbrk" },
        "\u23B7": { math: "\\sqrtbottom" },
        "\u23B8": { math: "\\lvboxline" },
        "\u23B9": { math: "\\rvboxline" },
        "\u23CE": { math: "\\varcarriagereturn" },
        "\u23DC": { math: "\\overparen" },
        "\u23DD": { math: "\\underparen" },
        "\u23DE": { math: "\\overbrace" },
        "\u23DF": { math: "\\underbrace" },
        "\u23E0": { math: "\\obrbrak" },
        "\u23E1": { math: "\\ubrbrak" },
        "\u23E2": { math: "\\trapezium" },
        "\u23E3": { math: "\\benzenr" },
        "\u23E4": { math: "\\strns" },
        "\u23E5": { math: "\\fltns" },
        "\u23E6": { math: "\\accurrent" },
        "\u23E7": { math: "\\elinters" },
        "\u2400": { text: "NUL" },
        "\u2401": { text: "SOH" },
        "\u2402": { text: "STX" },
        "\u2403": { text: "ETX" },
        "\u2404": { text: "EOT" },
        "\u2405": { text: "ENQ" },
        "\u2406": { text: "ACK" },
        "\u2407": { text: "BEL" },
        "\u2408": { text: "BS" },
        "\u2409": { text: "HT" },
        "\u240A": { text: "LF" },
        "\u240B": { text: "VT" },
        "\u240C": { text: "FF" },
        "\u240D": { text: "CR" },
        "\u240E": { text: "SO" },
        "\u240F": { text: "SI" },
        "\u2410": { text: "DLE" },
        "\u2411": { text: "DC1" },
        "\u2412": { text: "DC2" },
        "\u2413": { text: "DC3" },
        "\u2414": { text: "DC4" },
        "\u2415": { text: "NAK" },
        "\u2416": { text: "SYN" },
        "\u2417": { text: "ETB" },
        "\u2418": { text: "CAN" },
        "\u2419": { text: "EM" },
        "\u241A": { text: "SUB" },
        "\u241B": { text: "ESC" },
        "\u241C": { text: "FS" },
        "\u241D": { text: "GS" },
        "\u241E": { text: "RS" },
        "\u241F": { text: "US" },
        "\u2420": { text: "SP" },
        "\u2421": { text: "DEL" },
        "\u2423": { text: "{\\textvisiblespace}" },
        "\u2424": { text: "NL" },
        "\u2425": { text: "///" },
        "\u2426": { text: "?" },
        "\u2460": { text: "\\ding{172}" },
        "\u2461": { text: "\\ding{173}" },
        "\u2462": { text: "\\ding{174}" },
        "\u2463": { text: "\\ding{175}" },
        "\u2464": { text: "\\ding{176}" },
        "\u2465": { text: "\\ding{177}" },
        "\u2466": { text: "\\ding{178}" },
        "\u2467": { text: "\\ding{179}" },
        "\u2468": { text: "\\ding{180}" },
        "\u2469": { text: "\\ding{181}" },
        "\u246A": { text: "(11)" },
        "\u246B": { text: "(12)" },
        "\u246C": { text: "(13)" },
        "\u246D": { text: "(14)" },
        "\u246E": { text: "(15)" },
        "\u246F": { text: "(16)" },
        "\u2470": { text: "(17)" },
        "\u2471": { text: "(18)" },
        "\u2472": { text: "(19)" },
        "\u2473": { text: "(20)" },
        "\u2474": { text: "(1)" },
        "\u2475": { text: "(2)" },
        "\u2476": { text: "(3)" },
        "\u2477": { text: "(4)" },
        "\u2478": { text: "(5)" },
        "\u2479": { text: "(6)" },
        "\u247A": { text: "(7)" },
        "\u247B": { text: "(8)" },
        "\u247C": { text: "(9)" },
        "\u247D": { text: "(10)" },
        "\u247E": { text: "(11)" },
        "\u247F": { text: "(12)" },
        "\u2480": { text: "(13)" },
        "\u2481": { text: "(14)" },
        "\u2482": { text: "(15)" },
        "\u2483": { text: "(16)" },
        "\u2484": { text: "(17)" },
        "\u2485": { text: "(18)" },
        "\u2486": { text: "(19)" },
        "\u2487": { text: "(20)" },
        "\u2488": { text: "1." },
        "\u2489": { text: "2." },
        "\u248A": { text: "3." },
        "\u248B": { text: "4." },
        "\u248C": { text: "5." },
        "\u248D": { text: "6." },
        "\u248E": { text: "7." },
        "\u248F": { text: "8." },
        "\u2490": { text: "9." },
        "\u2491": { text: "10." },
        "\u2492": { text: "11." },
        "\u2493": { text: "12." },
        "\u2494": { text: "13." },
        "\u2495": { text: "14." },
        "\u2496": { text: "15." },
        "\u2497": { text: "16." },
        "\u2498": { text: "17." },
        "\u2499": { text: "18." },
        "\u249A": { text: "19." },
        "\u249B": { text: "20." },
        "\u249C": { text: "(a)" },
        "\u249D": { text: "(b)" },
        "\u249E": { text: "(c)" },
        "\u249F": { text: "(d)" },
        "\u24A0": { text: "(e)" },
        "\u24A1": { text: "(f)" },
        "\u24A2": { text: "(g)" },
        "\u24A3": { text: "(h)" },
        "\u24A4": { text: "(i)" },
        "\u24A5": { text: "(j)" },
        "\u24A6": { text: "(k)" },
        "\u24A7": { text: "(l)" },
        "\u24A8": { text: "(m)" },
        "\u24A9": { text: "(n)" },
        "\u24AA": { text: "(o)" },
        "\u24AB": { text: "(p)" },
        "\u24AC": { text: "(q)" },
        "\u24AD": { text: "(r)" },
        "\u24AE": { text: "(s)" },
        "\u24AF": { text: "(t)" },
        "\u24B0": { text: "(u)" },
        "\u24B1": { text: "(v)" },
        "\u24B2": { text: "(w)" },
        "\u24B3": { text: "(x)" },
        "\u24B4": { text: "(y)" },
        "\u24B5": { text: "(z)" },
        "\u24B6": { text: "(A)" },
        "\u24B7": { text: "(B)" },
        "\u24B8": { text: "(C)" },
        "\u24B9": { text: "(D)" },
        "\u24BA": { text: "(E)" },
        "\u24BB": { text: "(F)" },
        "\u24BC": { text: "(G)" },
        "\u24BD": { text: "(H)" },
        "\u24BE": { text: "(I)" },
        "\u24BF": { text: "(J)" },
        "\u24C0": { text: "(K)" },
        "\u24C1": { text: "(L)" },
        "\u24C2": { text: "(M)" },
        "\u24C3": { text: "(N)" },
        "\u24C4": { text: "(O)" },
        "\u24C5": { text: "(P)" },
        "\u24C6": { text: "(Q)" },
        "\u24C7": { text: "(R)" },
        "\u24C8": { math: "\\circledS" },
        "\u24C9": { text: "(T)" },
        "\u24CA": { text: "(U)" },
        "\u24CB": { text: "(V)" },
        "\u24CC": { text: "(W)" },
        "\u24CD": { text: "(X)" },
        "\u24CE": { text: "(Y)" },
        "\u24CF": { text: "(Z)" },
        "\u24D0": { text: "(a)" },
        "\u24D1": { text: "(b)" },
        "\u24D2": { text: "(c)" },
        "\u24D3": { text: "(d)" },
        "\u24D4": { text: "(e)" },
        "\u24D5": { text: "(f)" },
        "\u24D6": { text: "(g)" },
        "\u24D7": { text: "(h)" },
        "\u24D8": { text: "(i)" },
        "\u24D9": { text: "(j)" },
        "\u24DA": { text: "(k)" },
        "\u24DB": { text: "(l)" },
        "\u24DC": { text: "(m)" },
        "\u24DD": { text: "(n)" },
        "\u24DE": { text: "(o)" },
        "\u24DF": { text: "(p)" },
        "\u24E0": { text: "(q)" },
        "\u24E1": { text: "(r)" },
        "\u24E2": { text: "(s)" },
        "\u24E3": { text: "(t)" },
        "\u24E4": { text: "(u)" },
        "\u24E5": { text: "(v)" },
        "\u24E6": { text: "(w)" },
        "\u24E7": { text: "(x)" },
        "\u24E8": { text: "(y)" },
        "\u24E9": { text: "(z)" },
        "\u24EA": { text: "(0)" },
        "\u2500": { text: "-" },
        "\u2501": { text: "=" },
        "\u2502": { text: "|" },
        "\u2503": { text: "|" },
        "\u2504": { text: "-" },
        "\u2505": { text: "=" },
        "\u2506": { math: "\\Elzdshfnc" },
        "\u2507": { text: "|" },
        "\u2508": { text: "-" },
        "\u2509": { text: "=" },
        "\u250A": { text: "|" },
        "\u250B": { text: "|" },
        "\u250C": { text: "+" },
        "\u250D": { text: "+" },
        "\u250E": { text: "+" },
        "\u250F": { text: "+" },
        "\u2510": { text: "+" },
        "\u2511": { text: "+" },
        "\u2512": { text: "+" },
        "\u2513": { text: "+" },
        "\u2514": { text: "+" },
        "\u2515": { text: "+" },
        "\u2516": { text: "+" },
        "\u2517": { text: "+" },
        "\u2518": { text: "+" },
        "\u2519": { math: "\\Elzsqfnw" },
        "\u251A": { text: "+" },
        "\u251B": { text: "+" },
        "\u251C": { text: "+" },
        "\u251D": { text: "+" },
        "\u251E": { text: "+" },
        "\u251F": { text: "+" },
        "\u2520": { text: "+" },
        "\u2521": { text: "+" },
        "\u2522": { text: "+" },
        "\u2523": { text: "+" },
        "\u2524": { text: "+" },
        "\u2525": { text: "+" },
        "\u2526": { text: "+" },
        "\u2527": { text: "+" },
        "\u2528": { text: "+" },
        "\u2529": { text: "+" },
        "\u252A": { text: "+" },
        "\u252B": { text: "+" },
        "\u252C": { text: "+" },
        "\u252D": { text: "+" },
        "\u252E": { text: "+" },
        "\u252F": { text: "+" },
        "\u2530": { text: "+" },
        "\u2531": { text: "+" },
        "\u2532": { text: "+" },
        "\u2533": { text: "+" },
        "\u2534": { text: "+" },
        "\u2535": { text: "+" },
        "\u2536": { text: "+" },
        "\u2537": { text: "+" },
        "\u2538": { text: "+" },
        "\u2539": { text: "+" },
        "\u253A": { text: "+" },
        "\u253B": { text: "+" },
        "\u253C": { text: "+" },
        "\u253D": { text: "+" },
        "\u253E": { text: "+" },
        "\u253F": { text: "+" },
        "\u2540": { text: "+" },
        "\u2541": { text: "+" },
        "\u2542": { text: "+" },
        "\u2543": { text: "+" },
        "\u2544": { text: "+" },
        "\u2545": { text: "+" },
        "\u2546": { text: "+" },
        "\u2547": { text: "+" },
        "\u2548": { text: "+" },
        "\u2549": { text: "+" },
        "\u254A": { text: "+" },
        "\u254B": { text: "+" },
        "\u254C": { text: "-" },
        "\u254D": { text: "=" },
        "\u254E": { text: "|" },
        "\u254F": { text: "|" },
        "\u2550": { text: "=" },
        "\u2551": { text: "|" },
        "\u2552": { text: "+" },
        "\u2553": { text: "+" },
        "\u2554": { text: "+" },
        "\u2555": { text: "+" },
        "\u2556": { text: "+" },
        "\u2557": { text: "+" },
        "\u2558": { text: "+" },
        "\u2559": { text: "+" },
        "\u255A": { text: "+" },
        "\u255B": { text: "+" },
        "\u255C": { text: "+" },
        "\u255D": { text: "+" },
        "\u255E": { text: "+" },
        "\u255F": { text: "+" },
        "\u2560": { text: "+" },
        "\u2561": { text: "+" },
        "\u2562": { text: "+" },
        "\u2563": { text: "+" },
        "\u2564": { text: "+" },
        "\u2565": { text: "+" },
        "\u2566": { text: "+" },
        "\u2567": { text: "+" },
        "\u2568": { text: "+" },
        "\u2569": { text: "+" },
        "\u256A": { text: "+" },
        "\u256B": { text: "+" },
        "\u256C": { text: "+" },
        "\u256D": { text: "+" },
        "\u256E": { text: "+" },
        "\u256F": { text: "+" },
        "\u2570": { text: "+" },
        "\u2571": { math: "\\diagup" },
        "\u2572": { text: "\\" },
        "\u2573": { text: "X" },
        "\u257C": { text: "-" },
        "\u257D": { text: "|" },
        "\u257E": { text: "-" },
        "\u257F": { text: "|" },
        "\u2580": { math: "\\blockuphalf" },
        "\u2584": { math: "\\blocklowhalf" },
        "\u2588": { math: "\\blockfull" },
        "\u258C": { math: "\\blocklefthalf" },
        "\u2590": { math: "\\blockrighthalf" },
        "\u2591": { math: "\\blockqtrshaded" },
        "\u2592": { math: "\\blockhalfshaded" },
        "\u2593": { math: "\\blockthreeqtrshaded" },
        "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
        "\u25A1": { math: "\\square" },
        "\u25A2": { math: "\\squoval" },
        "\u25A3": { math: "\\blackinwhitesquare" },
        "\u25A4": { math: "\\squarehfill" },
        "\u25A5": { math: "\\squarevfill" },
        "\u25A6": { math: "\\squarehvfill" },
        "\u25A7": { math: "\\squarenwsefill" },
        "\u25A8": { math: "\\squareneswfill" },
        "\u25A9": { math: "\\squarecrossfill" },
        "\u25AA": { math: "\\blacksquare" },
        "\u25AB": { math: "\\smwhtsquare" },
        "\u25AC": { math: "\\hrectangleblack" },
        "\u25AD": { math: "\\fbox{~~}" },
        "\u25AE": { math: "\\vrectangleblack" },
        "\u25AF": { math: "\\Elzvrecto" },
        "\u25B0": { math: "\\parallelogramblack" },
        "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
        "\u25B3": { math: "\\bigtriangleup" },
        "\u25B4": { math: "\\blacktriangle" },
        "\u25B5": { math: "\\vartriangle" },
        "\u25B6": { math: "\\RHD" },
        "\u25B7": { math: "\\rhd" },
        "\u25B8": { math: "\\blacktriangleright" },
        "\u25B9": { math: "\\triangleright" },
        "\u25BA": { math: "\\blackpointerright" },
        "\u25BB": { math: "\\whitepointerright" },
        "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
        "\u25BD": { math: "\\bigtriangledown" },
        "\u25BE": { math: "\\blacktriangledown" },
        "\u25BF": { math: "\\triangledown" },
        "\u25C0": { math: "\\LHD" },
        "\u25C1": { math: "\\lhd" },
        "\u25C2": { math: "\\blacktriangleleft" },
        "\u25C3": { math: "\\triangleleft" },
        "\u25C4": { math: "\\blackpointerleft" },
        "\u25C5": { math: "\\whitepointerleft" },
        "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
        "\u25C7": { math: "\\Diamond" },
        "\u25C8": { math: "\\blackinwhitediamond" },
        "\u25C9": { math: "\\fisheye" },
        "\u25CA": { math: "\\lozenge" },
        "\u25CB": { math: "\\bigcirc" },
        "\u25CC": { math: "\\dottedcircle" },
        "\u25CD": { math: "\\circlevertfill" },
        "\u25CE": { math: "\\bullseye" },
        "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
        "\u25D0": { math: "\\Elzcirfl" },
        "\u25D1": { math: "\\Elzcirfr" },
        "\u25D2": { math: "\\Elzcirfb" },
        "\u25D3": { math: "\\circletophalfblack" },
        "\u25D4": { math: "\\circleurquadblack" },
        "\u25D5": { math: "\\blackcircleulquadwhite" },
        "\u25D6": { math: "\\LEFTCIRCLE" },
        "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
        "\u25D8": { math: "\\Elzrvbull" },
        "\u25D9": { math: "\\inversewhitecircle" },
        "\u25DA": { math: "\\invwhiteupperhalfcircle" },
        "\u25DB": { math: "\\invwhitelowerhalfcircle" },
        "\u25DC": { math: "\\ularc" },
        "\u25DD": { math: "\\urarc" },
        "\u25DE": { math: "\\lrarc" },
        "\u25DF": { math: "\\llarc" },
        "\u25E0": { math: "\\topsemicircle" },
        "\u25E1": { math: "\\botsemicircle" },
        "\u25E2": { math: "\\lrblacktriangle" },
        "\u25E3": { math: "\\llblacktriangle" },
        "\u25E4": { math: "\\ulblacktriangle" },
        "\u25E5": { math: "\\urblacktriangle" },
        "\u25E6": { math: "\\smwhtcircle" },
        "\u25E7": { math: "\\Elzsqfl" },
        "\u25E8": { math: "\\Elzsqfr" },
        "\u25E9": { math: "\\squareulblack" },
        "\u25EA": { math: "\\Elzsqfse" },
        "\u25EB": { math: "\\boxbar" },
        "\u25EC": { math: "\\trianglecdot" },
        "\u25ED": { math: "\\triangleleftblack" },
        "\u25EE": { math: "\\trianglerightblack" },
        "\u25EF": { math: "\\bigcirc" },
        "\u25F0": { math: "\\squareulquad" },
        "\u25F1": { math: "\\squarellquad" },
        "\u25F2": { math: "\\squarelrquad" },
        "\u25F3": { math: "\\squareurquad" },
        "\u25F4": { math: "\\circleulquad" },
        "\u25F5": { math: "\\circlellquad" },
        "\u25F6": { math: "\\circlelrquad" },
        "\u25F7": { math: "\\circleurquad" },
        "\u25F8": { math: "\\ultriangle" },
        "\u25F9": { math: "\\urtriangle" },
        "\u25FA": { math: "\\lltriangle" },
        "\u25FB": { math: "\\square" },
        "\u25FC": { math: "\\blacksquare" },
        "\u25FD": { math: "\\mdsmwhtsquare" },
        "\u25FE": { math: "\\mdsmblksquare" },
        "\u25FF": { math: "\\lrtriangle" },
        "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
        "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
        "\u2609": { math: "\\Sun" },
        "\u260E": { text: "\\ding{37}" },
        "\u2610": { math: "\\Square" },
        "\u2611": { math: "\\CheckedBox" },
        "\u2612": { math: "\\XBox" },
        "\u2613": { text: "X" },
        "\u2615": { math: "\\steaming" },
        "\u261B": { text: "\\ding{42}" },
        "\u261E": { math: "\\pointright", text: "\\ding{43}" },
        "\u2620": { math: "\\skull" },
        "\u2621": { math: "\\danger" },
        "\u2622": { math: "\\radiation" },
        "\u2623": { math: "\\biohazard" },
        "\u262F": { math: "\\yinyang" },
        "\u2639": { math: "\\frownie" },
        "\u263A": { math: "\\smiley" },
        "\u263B": { math: "\\blacksmiley" },
        "\u263C": { math: "\\sun" },
        "\u263D": { text: "{\\rightmoon}", textpackages: ["wasysym"] },
        "\u263E": { text: "{\\leftmoon}", textpackages: ["wasysym"] },
        "\u263F": { math: "\\mercury", text: "{\\mercury}" },
        "\u2640": { math: "\\female", text: "{\\venus}" },
        "\u2641": { math: "\\earth" },
        "\u2642": { math: "\\male", text: "{\\male}" },
        "\u2643": { math: "\\jupiter", text: "{\\jupiter}" },
        "\u2644": { math: "\\saturn", text: "{\\saturn}" },
        "\u2645": { math: "\\uranus", text: "{\\uranus}" },
        "\u2646": { math: "\\neptune", text: "{\\neptune}" },
        "\u2647": { math: "\\pluto", text: "{\\pluto}" },
        "\u2648": { math: "\\aries", text: "{\\aries}" },
        "\u2649": { math: "\\taurus", text: "{\\taurus}" },
        "\u264A": { math: "\\gemini", text: "{\\gemini}" },
        "\u264B": { math: "\\cancer", text: "{\\cancer}" },
        "\u264C": { math: "\\leo", text: "{\\leo}" },
        "\u264D": { math: "\\virgo", text: "{\\virgo}" },
        "\u264E": { math: "\\libra", text: "{\\libra}" },
        "\u264F": { math: "\\scorpio", text: "{\\scorpio}" },
        "\u2650": { math: "\\sagittarius", text: "{\\sagittarius}" },
        "\u2651": { math: "\\capricornus", text: "{\\capricornus}" },
        "\u2652": { math: "\\aquarius", text: "{\\aquarius}" },
        "\u2653": { math: "\\pisces", text: "{\\pisces}" },
        "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
        "\u2661": { math: "\\heartsuit" },
        "\u2662": { math: "\\diamond" },
        "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
        "\u2664": { math: "\\varspadesuit" },
        "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
        "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
        "\u2667": { math: "\\varclubsuit" },
        "\u2669": { math: "\\quarternote", text: "{\\quarternote}" },
        "\u266A": { math: "\\eighthnote", text: "{\\eighthnote}" },
        "\u266B": { math: "\\twonotes" },
        "\u266C": { math: "\\sixteenthnote" },
        "\u266D": { math: "\\flat" },
        "\u266E": { math: "\\natural" },
        "\u266F": { math: "\\sharp" },
        "\u267B": { math: "\\recycle" },
        "\u267E": { math: "\\acidfree" },
        "\u2680": { math: "\\dicei" },
        "\u2681": { math: "\\diceii" },
        "\u2682": { math: "\\diceiii" },
        "\u2683": { math: "\\diceiv" },
        "\u2684": { math: "\\dicev" },
        "\u2685": { math: "\\dicevi" },
        "\u2686": { math: "\\circledrightdot" },
        "\u2687": { math: "\\circledtwodots" },
        "\u2688": { math: "\\blackcircledrightdot" },
        "\u2689": { math: "\\blackcircledtwodots" },
        "\u2693": { math: "\\anchor" },
        "\u2694": { math: "\\swords" },
        "\u26A0": { math: "\\warning" },
        "\u26A5": { math: "\\Hermaphrodite" },
        "\u26AA": { math: "\\medcirc" },
        "\u26AB": { math: "\\medbullet" },
        "\u26AC": { math: "\\mdsmwhtcircle" },
        "\u26B2": { math: "\\neuter" },
        "\u2701": { text: "\\ding{33}" },
        "\u2702": { text: "\\ding{34}" },
        "\u2703": { text: "\\ding{35}" },
        "\u2704": { text: "\\ding{36}" },
        "\u2706": { text: "\\ding{38}" },
        "\u2707": { text: "\\ding{39}" },
        "\u2708": { text: "\\ding{40}" },
        "\u2709": { text: "\\ding{41}" },
        "\u270C": { text: "\\ding{44}" },
        "\u270D": { text: "\\ding{45}" },
        "\u270E": { math: "\\pencil", text: "\\ding{46}" },
        "\u270F": { text: "\\ding{47}" },
        "\u2710": { text: "\\ding{48}" },
        "\u2711": { text: "\\ding{49}" },
        "\u2712": { text: "\\ding{50}" },
        "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
        "\u2714": { text: "\\ding{52}" },
        "\u2715": { text: "\\ding{53}" },
        "\u2716": { text: "\\ding{54}" },
        "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
        "\u2718": { text: "\\ding{56}" },
        "\u2719": { text: "\\ding{57}" },
        "\u271A": { text: "\\ding{58}" },
        "\u271B": { text: "\\ding{59}" },
        "\u271C": { text: "\\ding{60}" },
        "\u271D": { text: "\\ding{61}" },
        "\u271E": { text: "\\ding{62}" },
        "\u271F": { text: "\\ding{63}" },
        "\u2720": { math: "\\maltese", text: "\\ding{64}" },
        "\u2721": { text: "\\ding{65}" },
        "\u2722": { text: "\\ding{66}" },
        "\u2723": { text: "\\ding{67}" },
        "\u2724": { text: "\\ding{68}" },
        "\u2725": { text: "\\ding{69}" },
        "\u2726": { text: "\\ding{70}" },
        "\u2727": { text: "\\ding{71}" },
        "\u2729": { text: "\\ding{73}" },
        "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
        "\u272B": { text: "\\ding{75}" },
        "\u272C": { text: "\\ding{76}" },
        "\u272D": { text: "\\ding{77}" },
        "\u272E": { text: "\\ding{78}" },
        "\u272F": { text: "\\ding{79}" },
        "\u2730": { text: "\\ding{80}" },
        "\u2731": { text: "\\ding{81}" },
        "\u2732": { text: "\\ding{82}" },
        "\u2733": { text: "\\ding{83}" },
        "\u2734": { text: "\\ding{84}" },
        "\u2735": { text: "\\ding{85}" },
        "\u2736": { math: "\\varstar", text: "\\ding{86}" },
        "\u2737": { text: "\\ding{87}" },
        "\u2738": { text: "\\ding{88}" },
        "\u2739": { text: "\\ding{89}" },
        "\u273A": { text: "\\ding{90}" },
        "\u273B": { text: "\\ding{91}" },
        "\u273C": { text: "\\ding{92}" },
        "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
        "\u273E": { text: "\\ding{94}" },
        "\u273F": { text: "\\ding{95}" },
        "\u2740": { text: "\\ding{96}" },
        "\u2741": { text: "\\ding{97}" },
        "\u2742": { text: "\\ding{98}" },
        "\u2743": { text: "\\ding{99}" },
        "\u2744": { text: "\\ding{100}" },
        "\u2745": { text: "\\ding{101}" },
        "\u2746": { text: "\\ding{102}" },
        "\u2747": { text: "\\ding{103}" },
        "\u2748": { text: "\\ding{104}" },
        "\u2749": { text: "\\ding{105}" },
        "\u274A": { text: "\\ding{106}" },
        "\u274B": { text: "\\ding{107}" },
        "\u274D": { text: "\\ding{109}" },
        "\u274F": { text: "\\ding{111}" },
        "\u2750": { text: "\\ding{112}" },
        "\u2751": { text: "\\ding{113}" },
        "\u2752": { text: "\\ding{114}" },
        "\u2756": { text: "\\ding{118}" },
        "\u2758": { text: "\\ding{120}" },
        "\u2759": { text: "\\ding{121}" },
        "\u275A": { text: "\\ding{122}" },
        "\u275B": { text: "\\ding{123}" },
        "\u275C": { text: "\\ding{124}" },
        "\u275D": { text: "\\ding{125}" },
        "\u275E": { text: "\\ding{126}" },
        "\u2761": { text: "\\ding{161}" },
        "\u2762": { text: "\\ding{162}" },
        "\u2763": { text: "\\ding{163}" },
        "\u2764": { text: "\\ding{164}" },
        "\u2765": { text: "\\ding{165}" },
        "\u2766": { text: "\\ding{166}" },
        "\u2767": { text: "\\ding{167}" },
        "\u2772": { math: "\\lbrbrak" },
        "\u2773": { math: "\\rbrbrak" },
        "\u2776": { text: "\\ding{182}" },
        "\u2777": { text: "\\ding{183}" },
        "\u2778": { text: "\\ding{184}" },
        "\u2779": { text: "\\ding{185}" },
        "\u277A": { text: "\\ding{186}" },
        "\u277B": { text: "\\ding{187}" },
        "\u277C": { text: "\\ding{188}" },
        "\u277D": { text: "\\ding{189}" },
        "\u277E": { text: "\\ding{190}" },
        "\u277F": { text: "\\ding{191}" },
        "\u2780": { text: "\\ding{192}" },
        "\u2781": { text: "\\ding{193}" },
        "\u2782": { text: "\\ding{194}" },
        "\u2783": { text: "\\ding{195}" },
        "\u2784": { text: "\\ding{196}" },
        "\u2785": { text: "\\ding{197}" },
        "\u2786": { text: "\\ding{198}" },
        "\u2787": { text: "\\ding{199}" },
        "\u2788": { text: "\\ding{200}" },
        "\u2789": { text: "\\ding{201}" },
        "\u278A": { text: "\\ding{202}" },
        "\u278B": { text: "\\ding{203}" },
        "\u278C": { text: "\\ding{204}" },
        "\u278D": { text: "\\ding{205}" },
        "\u278E": { text: "\\ding{206}" },
        "\u278F": { text: "\\ding{207}" },
        "\u2790": { text: "\\ding{208}" },
        "\u2791": { text: "\\ding{209}" },
        "\u2792": { text: "\\ding{210}" },
        "\u2793": { text: "\\ding{211}" },
        "\u2794": { text: "\\ding{212}" },
        "\u2798": { text: "\\ding{216}" },
        "\u2799": { text: "\\ding{217}" },
        "\u279A": { text: "\\ding{218}" },
        "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
        "\u279C": { text: "\\ding{220}" },
        "\u279D": { text: "\\ding{221}" },
        "\u279E": { text: "\\ding{222}" },
        "\u279F": { text: "\\ding{223}" },
        "\u27A0": { text: "\\ding{224}" },
        "\u27A1": { text: "\\ding{225}" },
        "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
        "\u27A3": { text: "\\ding{227}" },
        "\u27A4": { text: "\\ding{228}" },
        "\u27A5": { text: "\\ding{229}" },
        "\u27A6": { text: "\\ding{230}" },
        "\u27A7": { text: "\\ding{231}" },
        "\u27A8": { text: "\\ding{232}" },
        "\u27A9": { text: "\\ding{233}" },
        "\u27AA": { text: "\\ding{234}" },
        "\u27AB": { text: "\\ding{235}" },
        "\u27AC": { text: "\\ding{236}" },
        "\u27AD": { text: "\\ding{237}" },
        "\u27AE": { text: "\\ding{238}" },
        "\u27AF": { text: "\\ding{239}" },
        "\u27B1": { text: "\\ding{241}" },
        "\u27B2": { text: "\\ding{242}" },
        "\u27B3": { text: "\\ding{243}" },
        "\u27B4": { text: "\\ding{244}" },
        "\u27B5": { text: "\\ding{245}" },
        "\u27B6": { text: "\\ding{246}" },
        "\u27B7": { text: "\\ding{247}" },
        "\u27B8": { text: "\\ding{248}" },
        "\u27B9": { text: "\\ding{249}" },
        "\u27BA": { text: "\\ding{250}" },
        "\u27BB": { text: "\\ding{251}" },
        "\u27BC": { text: "\\ding{252}" },
        "\u27BD": { text: "\\ding{253}" },
        "\u27BE": { text: "\\ding{254}" },
        "\u27C0": { math: "\\threedangle" },
        "\u27C1": { math: "\\whiteinwhitetriangle" },
        "\u27C2": { math: "\\perp" },
        "\u27C3": { math: "\\subsetcirc" },
        "\u27C4": { math: "\\supsetcirc" },
        "\u27C5": { math: "\\Lbag" },
        "\u27C6": { math: "\\Rbag" },
        "\u27C7": { math: "\\veedot" },
        "\u27C8": { math: "\\bsolhsub" },
        "\u27C9": { math: "\\suphsol" },
        "\u27CC": { math: "\\longdivision" },
        "\u27D0": { math: "\\Diamonddot" },
        "\u27D1": { math: "\\wedgedot" },
        "\u27D2": { math: "\\upin" },
        "\u27D3": { math: "\\pullback" },
        "\u27D4": { math: "\\pushout" },
        "\u27D5": { math: "\\leftouterjoin" },
        "\u27D6": { math: "\\rightouterjoin" },
        "\u27D7": { math: "\\fullouterjoin" },
        "\u27D8": { math: "\\bigbot" },
        "\u27D9": { math: "\\bigtop" },
        "\u27DA": { math: "\\DashVDash" },
        "\u27DB": { math: "\\dashVdash" },
        "\u27DC": { math: "\\multimapinv" },
        "\u27DD": { math: "\\vlongdash" },
        "\u27DE": { math: "\\longdashv" },
        "\u27DF": { math: "\\cirbot" },
        "\u27E0": { math: "\\lozengeminus" },
        "\u27E1": { math: "\\concavediamond" },
        "\u27E2": { math: "\\concavediamondtickleft" },
        "\u27E3": { math: "\\concavediamondtickright" },
        "\u27E4": { math: "\\whitesquaretickleft" },
        "\u27E5": { math: "\\whitesquaretickright" },
        "\u27E6": { math: "\\llbracket" },
        "\u27E7": { math: "\\rrbracket" },
        "\u27E8": { math: "\\langle" },
        "\u27E9": { math: "\\rangle" },
        "\u27EA": { math: "\\lang" },
        "\u27EB": { math: "\\rang" },
        "\u27EC": { math: "\\Lbrbrak" },
        "\u27ED": { math: "\\Rbrbrak" },
        "\u27EE": { math: "\\lgroup" },
        "\u27EF": { math: "\\rgroup" },
        "\u27F0": { math: "\\UUparrow" },
        "\u27F1": { math: "\\DDownarrow" },
        "\u27F2": { math: "\\acwgapcirclearrow" },
        "\u27F3": { math: "\\cwgapcirclearrow" },
        "\u27F4": { math: "\\rightarrowonoplus" },
        "\u27F5": { math: "\\longleftarrow" },
        "\u27F6": { math: "\\longrightarrow" },
        "\u27F7": { math: "\\longleftrightarrow" },
        "\u27F8": { math: "\\Longleftarrow" },
        "\u27F9": { math: "\\Longrightarrow" },
        "\u27FA": { math: "\\Longleftrightarrow" },
        "\u27FB": { math: "\\longmapsfrom" },
        "\u27FC": { math: "\\longmapsto" },
        "\u27FD": { math: "\\Longmapsfrom" },
        "\u27FE": { math: "\\Longmapsto" },
        "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
        "\u2900": { math: "\\psur" },
        "\u2901": { math: "\\nVtwoheadrightarrow" },
        "\u2902": { math: "\\nvLeftarrow" },
        "\u2903": { math: "\\nvRightarrow" },
        "\u2904": { math: "\\nvLeftrightarrow" },
        "\u2906": { math: "\\Mapsfrom" },
        "\u2907": { math: "\\Mapsto" },
        "\u2908": { math: "\\downarrowbarred" },
        "\u2909": { math: "\\uparrowbarred" },
        "\u290A": { math: "\\Uuparrow" },
        "\u290B": { math: "\\Ddownarrow" },
        "\u290C": { math: "\\leftbkarrow" },
        "\u290D": { math: "\\rightbkarrow" },
        "\u290E": { math: "\\leftdbkarrow" },
        "\u290F": { math: "\\dbkarow" },
        "\u2910": { math: "\\drbkarow" },
        "\u2911": { math: "\\rightdotarrow" },
        "\u2912": { math: "\\UpArrowBar" },
        "\u2913": { math: "\\DownArrowBar" },
        "\u2914": { math: "\\pinj" },
        "\u2915": { math: "\\finj" },
        "\u2916": { math: "\\bij" },
        "\u2917": { math: "\\nvtwoheadrightarrowtail" },
        "\u2918": { math: "\\nVtwoheadrightarrowtail" },
        "\u2919": { math: "\\lefttail" },
        "\u291A": { math: "\\righttail" },
        "\u291B": { math: "\\leftdbltail" },
        "\u291C": { math: "\\rightdbltail" },
        "\u291D": { math: "\\diamondleftarrow" },
        "\u291E": { math: "\\rightarrowdiamond" },
        "\u291F": { math: "\\diamondleftarrowbar" },
        "\u2920": { math: "\\barrightarrowdiamond" },
        "\u2921": { math: "\\nwsearrow" },
        "\u2922": { math: "\\neswarrow" },
        "\u292B": { math: "\\rdiagovfdiag" },
        "\u292C": { math: "\\fdiagovrdiag" },
        "\u292D": { math: "\\seovnearrow" },
        "\u292E": { math: "\\neovsearrow" },
        "\u292F": { math: "\\fdiagovnearrow" },
        "\u2930": { math: "\\rdiagovsearrow" },
        "\u2931": { math: "\\neovnwarrow" },
        "\u2932": { math: "\\nwovnearrow" },
        "\u2934": { math: "\\uprightcurvearrow" },
        "\u2935": { math: "\\downrightcurvedarrow" },
        "\u2938": { math: "\\cwrightarcarrow" },
        "\u2939": { math: "\\acwleftarcarrow" },
        "\u293A": { math: "\\acwoverarcarrow" },
        "\u293B": { math: "\\acwunderarcarrow" },
        "\u293C": { math: "\\curvearrowrightminus" },
        "\u293D": { math: "\\curvearrowleftplus" },
        "\u293E": { math: "\\cwundercurvearrow" },
        "\u293F": { math: "\\ccwundercurvearrow" },
        "\u2940": { math: "\\Elolarr" },
        "\u2941": { math: "\\Elorarr" },
        "\u2942": { math: "\\ElzRlarr" },
        "\u2943": { math: "\\leftarrowshortrightarrow" },
        "\u2944": { math: "\\ElzrLarr" },
        "\u2945": { math: "\\rightarrowplus" },
        "\u2946": { math: "\\leftarrowplus" },
        "\u2947": { math: "\\Elzrarrx" },
        "\u2948": { math: "\\leftrightarrowcircle" },
        "\u2949": { math: "\\twoheaduparrowcircle" },
        "\u294A": { math: "\\leftrightharpoon" },
        "\u294B": { math: "\\rightleftharpoon" },
        "\u294C": { math: "\\updownharpoonrightleft" },
        "\u294D": { math: "\\updownharpoonleftright" },
        "\u294E": { math: "\\LeftRightVector" },
        "\u294F": { math: "\\RightUpDownVector" },
        "\u2950": { math: "\\DownLeftRightVector" },
        "\u2951": { math: "\\LeftUpDownVector" },
        "\u2952": { math: "\\LeftVectorBar" },
        "\u2953": { math: "\\RightVectorBar" },
        "\u2954": { math: "\\RightUpVectorBar" },
        "\u2955": { math: "\\RightDownVectorBar" },
        "\u2956": { math: "\\DownLeftVectorBar" },
        "\u2957": { math: "\\DownRightVectorBar" },
        "\u2958": { math: "\\LeftUpVectorBar" },
        "\u2959": { math: "\\LeftDownVectorBar" },
        "\u295A": { math: "\\LeftTeeVector" },
        "\u295B": { math: "\\RightTeeVector" },
        "\u295C": { math: "\\RightUpTeeVector" },
        "\u295D": { math: "\\RightDownTeeVector" },
        "\u295E": { math: "\\DownLeftTeeVector" },
        "\u295F": { math: "\\DownRightTeeVector" },
        "\u2960": { math: "\\LeftUpTeeVector" },
        "\u2961": { math: "\\LeftDownTeeVector" },
        "\u2962": { math: "\\leftleftharpoons" },
        "\u2963": { math: "\\upupharpoons" },
        "\u2964": { math: "\\rightrightharpoons" },
        "\u2965": { math: "\\downdownharpoons" },
        "\u2966": { math: "\\leftrightharpoonsup" },
        "\u2967": { math: "\\leftrightharpoonsdown" },
        "\u2968": { math: "\\rightleftharpoonsup" },
        "\u2969": { math: "\\rightleftharpoonsdown" },
        "\u296A": { math: "\\leftbarharpoon" },
        "\u296B": { math: "\\barleftharpoon" },
        "\u296C": { math: "\\rightbarharpoon" },
        "\u296D": { math: "\\barrightharpoon" },
        "\u296E": { math: "\\UpEquilibrium" },
        "\u296F": { math: "\\ReverseUpEquilibrium" },
        "\u2970": { math: "\\RoundImplies" },
        "\u2971": { math: "\\equalrightarrow" },
        "\u2972": { math: "\\similarrightarrow" },
        "\u2973": { math: "\\leftarrowsimilar" },
        "\u2974": { math: "\\rightarrowsimilar" },
        "\u2975": { math: "\\rightarrowapprox" },
        "\u2976": { math: "\\ltlarr" },
        "\u2977": { math: "\\leftarrowless" },
        "\u2978": { math: "\\gtrarr" },
        "\u2979": { math: "\\subrarr" },
        "\u297A": { math: "\\leftarrowsubset" },
        "\u297B": { math: "\\suplarr" },
        "\u297E": { math: "\\upfishtail" },
        "\u297F": { math: "\\downfishtail" },
        "\u2980": { math: "\\Elztfnc" },
        "\u2981": { math: "\\spot" },
        "\u2982": { math: "\\typecolon" },
        "\u2983": { math: "\\lBrace" },
        "\u2984": { math: "\\rBrace" },
        "\u2986": { math: "\\Elroang" },
        "\u2987": { math: "\\limg" },
        "\u2988": { math: "\\rimg" },
        "\u2989": { math: "\\lblot" },
        "\u298A": { math: "\\rblot" },
        "\u298B": { math: "\\lbrackubar" },
        "\u298C": { math: "\\rbrackubar" },
        "\u298D": { math: "\\lbrackultick" },
        "\u298E": { math: "\\rbracklrtick" },
        "\u298F": { math: "\\lbracklltick" },
        "\u2990": { math: "\\rbrackurtick" },
        "\u2991": { math: "\\langledot" },
        "\u2992": { math: "\\rangledot" },
        "\u2993": { math: "<\\kern-0.58em(" },
        "\u2995": { math: "\\Lparengtr" },
        "\u2996": { math: "\\Rparenless" },
        "\u2997": { math: "\\lblkbrbrak" },
        "\u2998": { math: "\\rblkbrbrak" },
        "\u2999": { math: "\\Elzddfnc" },
        "\u299A": { math: "\\vzigzag" },
        "\u299B": { math: "\\measuredangleleft" },
        "\u299C": { math: "\\Angle" },
        "\u299D": { math: "\\rightanglemdot" },
        "\u299E": { math: "\\angles" },
        "\u299F": { math: "\\angdnr" },
        "\u29A0": { math: "\\Elzlpargt" },
        "\u29A1": { math: "\\sphericalangleup" },
        "\u29A2": { math: "\\turnangle" },
        "\u29A3": { math: "\\revangle" },
        "\u29A4": { math: "\\angleubar" },
        "\u29A5": { math: "\\revangleubar" },
        "\u29A6": { math: "\\wideangledown" },
        "\u29A7": { math: "\\wideangleup" },
        "\u29A8": { math: "\\measanglerutone" },
        "\u29A9": { math: "\\measanglelutonw" },
        "\u29AA": { math: "\\measanglerdtose" },
        "\u29AB": { math: "\\measangleldtosw" },
        "\u29AC": { math: "\\measangleurtone" },
        "\u29AD": { math: "\\measangleultonw" },
        "\u29AE": { math: "\\measangledrtose" },
        "\u29AF": { math: "\\measangledltosw" },
        "\u29B0": { math: "\\revemptyset" },
        "\u29B1": { math: "\\emptysetobar" },
        "\u29B2": { math: "\\emptysetocirc" },
        "\u29B3": { math: "\\emptysetoarr" },
        "\u29B4": { math: "\\emptysetoarrl" },
        "\u29B7": { math: "\\circledparallel" },
        "\u29B8": { math: "\\circledbslash" },
        "\u29B9": { math: "\\operp" },
        "\u29BA": { math: "\\obot" },
        "\u29BB": { math: "\\olcross" },
        "\u29BC": { math: "\\odotslashdot" },
        "\u29BD": { math: "\\uparrowoncircle" },
        "\u29BE": { math: "\\circledwhitebullet" },
        "\u29BF": { math: "\\circledbullet" },
        "\u29C0": { math: "\\circledless" },
        "\u29C1": { math: "\\circledgtr" },
        "\u29C2": { math: "\\cirscir" },
        "\u29C3": { math: "\\cirE" },
        "\u29C4": { math: "\\boxslash" },
        "\u29C5": { math: "\\boxbslash" },
        "\u29C6": { math: "\\boxast" },
        "\u29C7": { math: "\\boxcircle" },
        "\u29C8": { math: "\\boxbox" },
        "\u29C9": { math: "\\boxonbox" },
        "\u29CA": { math: "\\ElzLap" },
        "\u29CB": { math: "\\Elzdefas" },
        "\u29CC": { math: "\\triangles" },
        "\u29CD": { math: "\\triangleserifs" },
        "\u29CE": { math: "\\rtriltri" },
        "\u29CF": { math: "\\LeftTriangleBar" },
        "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
        "\u29D0": { math: "\\RightTriangleBar" },
        "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
        "\u29D1": { math: "\\lfbowtie" },
        "\u29D2": { math: "\\rfbowtie" },
        "\u29D3": { math: "\\fbowtie" },
        "\u29D4": { math: "\\lftimes" },
        "\u29D5": { math: "\\rftimes" },
        "\u29D6": { math: "\\hourglass" },
        "\u29D7": { math: "\\blackhourglass" },
        "\u29D8": { math: "\\lvzigzag" },
        "\u29D9": { math: "\\rvzigzag" },
        "\u29DA": { math: "\\Lvzigzag" },
        "\u29DB": { math: "\\Rvzigzag" },
        "\u29DD": { math: "\\tieinfty" },
        "\u29DE": { math: "\\nvinfty" },
        "\u29DF": { math: "\\multimapboth" },
        "\u29E0": { math: "\\laplac" },
        "\u29E1": { math: "\\lrtriangleeq" },
        "\u29E2": { math: "\\shuffle" },
        "\u29E3": { math: "\\eparsl" },
        "\u29E4": { math: "\\smeparsl" },
        "\u29E5": { math: "\\eqvparsl" },
        "\u29E6": { math: "\\gleichstark" },
        "\u29E7": { math: "\\thermod" },
        "\u29E8": { math: "\\downtriangleleftblack" },
        "\u29E9": { math: "\\downtrianglerightblack" },
        "\u29EA": { math: "\\blackdiamonddownarrow" },
        "\u29EB": { math: "\\blacklozenge" },
        "\u29EC": { math: "\\circledownarrow" },
        "\u29ED": { math: "\\blackcircledownarrow" },
        "\u29EE": { math: "\\errbarsquare" },
        "\u29EF": { math: "\\errbarblacksquare" },
        "\u29F0": { math: "\\errbardiamond" },
        "\u29F1": { math: "\\errbarblackdiamond" },
        "\u29F2": { math: "\\errbarcircle" },
        "\u29F3": { math: "\\errbarblackcircle" },
        "\u29F4": { math: "\\RuleDelayed" },
        "\u29F5": { math: "\\setminus" },
        "\u29F6": { math: "\\dsol" },
        "\u29F7": { math: "\\rsolbar" },
        "\u29F8": { math: "\\xsol" },
        "\u29F9": { math: "\\zhide" },
        "\u29FA": { math: "\\doubleplus" },
        "\u29FB": { math: "\\tripleplus" },
        "\u29FC": { math: "\\lcurvyangle" },
        "\u29FD": { math: "\\rcurvyangle" },
        "\u29FE": { math: "\\tplus" },
        "\u29FF": { math: "\\tminus" },
        "\u2A00": { math: "\\bigodot" },
        "\u2A01": { math: "\\bigoplus" },
        "\u2A02": { math: "\\bigotimes" },
        "\u2A03": { math: "\\bigcupdot" },
        "\u2A04": { math: "\\Elxuplus" },
        "\u2A05": { math: "\\ElzThr" },
        "\u2A06": { math: "\\Elxsqcup" },
        "\u2A07": { math: "\\ElzInf" },
        "\u2A08": { math: "\\ElzSup" },
        "\u2A09": { math: "\\varprod" },
        "\u2A0A": { math: "\\modtwosum" },
        "\u2A0B": { math: "\\sumint" },
        "\u2A0C": { math: "\\iiiint" },
        "\u2A0D": { math: "\\ElzCint" },
        "\u2A0E": { math: "\\intBar" },
        "\u2A0F": { math: "\\clockoint" },
        "\u2A11": { math: "\\awint" },
        "\u2A12": { math: "\\rppolint" },
        "\u2A13": { math: "\\scpolint" },
        "\u2A14": { math: "\\npolint" },
        "\u2A15": { math: "\\pointint" },
        "\u2A16": { math: "\\sqrint" },
        "\u2A17": { math: "\\intlarhk" },
        "\u2A18": { math: "\\intx" },
        "\u2A19": { math: "\\intcap" },
        "\u2A1A": { math: "\\intcup" },
        "\u2A1B": { math: "\\upint" },
        "\u2A1C": { math: "\\lowint" },
        "\u2A1D": { math: "\\Join" },
        "\u2A1E": { math: "\\bigtriangleleft" },
        "\u2A1F": { math: "\\zcmp" },
        "\u2A20": { math: "\\zpipe" },
        "\u2A21": { math: "\\zproject" },
        "\u2A22": { math: "\\ringplus" },
        "\u2A23": { math: "\\plushat" },
        "\u2A24": { math: "\\simplus" },
        "\u2A26": { math: "\\plussim" },
        "\u2A27": { math: "\\plussubtwo" },
        "\u2A28": { math: "\\plustrif" },
        "\u2A29": { math: "\\commaminus" },
        "\u2A2B": { math: "\\minusfdots" },
        "\u2A2C": { math: "\\minusrdots" },
        "\u2A2F": { math: "\\ElzTimes" },
        "\u2A30": { math: "\\dottimes" },
        "\u2A31": { math: "\\timesbar" },
        "\u2A32": { math: "\\btimes" },
        "\u2A33": { math: "\\smashtimes" },
        "\u2A36": { math: "\\otimeshat" },
        "\u2A37": { math: "\\Otimes" },
        "\u2A38": { math: "\\odiv" },
        "\u2A39": { math: "\\triangleplus" },
        "\u2A3A": { math: "\\triangleminus" },
        "\u2A3B": { math: "\\triangletimes" },
        "\u2A3D": { math: "\\intprodr" },
        "\u2A3E": { math: "\\fcmp" },
        "\u2A3F": { math: "\\amalg" },
        "\u2A40": { math: "\\capdot" },
        "\u2A41": { math: "\\uminus" },
        "\u2A42": { math: "\\barcup" },
        "\u2A43": { math: "\\barcap" },
        "\u2A44": { math: "\\capwedge" },
        "\u2A45": { math: "\\cupvee" },
        "\u2A46": { math: "\\cupovercap" },
        "\u2A47": { math: "\\capovercup" },
        "\u2A48": { math: "\\cupbarcap" },
        "\u2A49": { math: "\\capbarcup" },
        "\u2A4A": { math: "\\twocups" },
        "\u2A4B": { math: "\\twocaps" },
        "\u2A4C": { math: "\\closedvarcup" },
        "\u2A4D": { math: "\\closedvarcap" },
        "\u2A4E": { math: "\\Sqcap" },
        "\u2A4F": { math: "\\Sqcup" },
        "\u2A50": { math: "\\closedvarcupsmashprod" },
        "\u2A51": { math: "\\wedgeodot" },
        "\u2A52": { math: "\\veeodot" },
        "\u2A53": { math: "\\ElzAnd" },
        "\u2A54": { math: "\\ElzOr" },
        "\u2A56": { math: "\\ElOr" },
        "\u2A57": { math: "\\bigslopedvee" },
        "\u2A58": { math: "\\bigslopedwedge" },
        "\u2A59": { math: "\\veeonwedge" },
        "\u2A5A": { math: "\\wedgemidvert" },
        "\u2A5B": { math: "\\veemidvert" },
        "\u2A5C": { math: "\\midbarwedge" },
        "\u2A5D": { math: "\\midbarvee" },
        "\u2A5E": { math: "\\perspcorrespond" },
        "\u2A5F": { math: "\\Elzminhat" },
        "\u2A60": { math: "\\wedgedoublebar" },
        "\u2A61": { math: "\\varveebar" },
        "\u2A62": { math: "\\doublebarvee" },
        "\u2A64": { math: "\\dsub" },
        "\u2A65": { math: "\\rsub" },
        "\u2A66": { math: "\\eqdot" },
        "\u2A67": { math: "\\dotequiv" },
        "\u2A68": { math: "\\equivVert" },
        "\u2A69": { math: "\\equivVvert" },
        "\u2A6A": { math: "\\dotsim" },
        "\u2A6B": { math: "\\simrdots" },
        "\u2A6C": { math: "\\simminussim" },
        "\u2A6D": { math: "\\congdot" },
        "\u2A6E": { math: "\\stackrel{*}{=}" },
        "\u2A6F": { math: "\\hatapprox" },
        "\u2A70": { math: "\\approxeqq" },
        "\u2A71": { math: "\\eqqplus" },
        "\u2A72": { math: "\\pluseqq" },
        "\u2A73": { math: "\\eqqsim" },
        "\u2A74": { math: "\\Coloneqq" },
        "\u2A75": { math: "\\Equal" },
        "\u2A76": { math: "\\Same" },
        "\u2A77": { math: "\\ddotseq" },
        "\u2A78": { math: "\\equivDD" },
        "\u2A79": { math: "\\ltcir" },
        "\u2A7A": { math: "\\gtcir" },
        "\u2A7B": { math: "\\ltquest" },
        "\u2A7C": { math: "\\gtquest" },
        "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
        "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
        "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
        "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
        "\u2A7F": { math: "\\lesdot" },
        "\u2A80": { math: "\\gesdot" },
        "\u2A81": { math: "\\lesdoto" },
        "\u2A82": { math: "\\gesdoto" },
        "\u2A83": { math: "\\lesdotor" },
        "\u2A84": { math: "\\gesdotol" },
        "\u2A85": { math: "\\lessapprox" },
        "\u2A86": { math: "\\gtrapprox" },
        "\u2A87": { math: "\\lneq" },
        "\u2A88": { math: "\\gneq" },
        "\u2A89": { math: "\\lnapprox" },
        "\u2A8A": { math: "\\gnapprox" },
        "\u2A8B": { math: "\\lesseqqgtr" },
        "\u2A8C": { math: "\\gtreqqless" },
        "\u2A8D": { math: "\\lsime" },
        "\u2A8E": { math: "\\gsime" },
        "\u2A8F": { math: "\\lsimg" },
        "\u2A90": { math: "\\gsiml" },
        "\u2A91": { math: "\\lgE" },
        "\u2A92": { math: "\\glE" },
        "\u2A93": { math: "\\lesges" },
        "\u2A94": { math: "\\gesles" },
        "\u2A95": { math: "\\eqslantless" },
        "\u2A96": { math: "\\eqslantgtr" },
        "\u2A97": { math: "\\elsdot" },
        "\u2A98": { math: "\\egsdot" },
        "\u2A99": { math: "\\eqqless" },
        "\u2A9A": { math: "\\eqqgtr" },
        "\u2A9B": { math: "\\eqqslantless" },
        "\u2A9C": { math: "\\eqqslantgtr" },
        "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
        "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
        "\u2A9F": { math: "\\simlE" },
        "\u2AA0": { math: "\\simgE" },
        "\u2AA1": { math: "\\NestedLessLess" },
        "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
        "\u2AA2": { math: "\\NestedGreaterGreater" },
        "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
        "\u2AA3": { math: "\\partialmeetcontraction" },
        "\u2AA4": { math: "\\glj" },
        "\u2AA5": { math: "\\gla" },
        "\u2AA6": { math: "\\leftslice" },
        "\u2AA7": { math: "\\rightslice" },
        "\u2AA8": { math: "\\lescc" },
        "\u2AA9": { math: "\\gescc" },
        "\u2AAA": { math: "\\smt" },
        "\u2AAB": { math: "\\lat" },
        "\u2AAC": { math: "\\smte" },
        "\u2AAD": { math: "\\late" },
        "\u2AAE": { math: "\\bumpeqq" },
        "\u2AAF": { math: "\\preceq" },
        "\u2AAF\u0338": { math: "\\not\\preceq" },
        "\u2AB0": { math: "\\succeq" },
        "\u2AB0\u0338": { math: "\\not\\succeq" },
        "\u2AB1": { math: "\\precneq" },
        "\u2AB2": { math: "\\succneq" },
        "\u2AB3": { math: "\\preceqq" },
        "\u2AB4": { math: "\\succeqq" },
        "\u2AB5": { math: "\\precneqq" },
        "\u2AB6": { math: "\\succneqq" },
        "\u2AB7": { math: "\\precapprox" },
        "\u2AB8": { math: "\\succapprox" },
        "\u2AB9": { math: "\\precnapprox" },
        "\u2ABA": { math: "\\succnapprox" },
        "\u2ABB": { math: "\\llcurly" },
        "\u2ABC": { math: "\\ggcurly" },
        "\u2ABD": { math: "\\subsetdot" },
        "\u2ABE": { math: "\\supsetdot" },
        "\u2ABF": { math: "\\subsetplus" },
        "\u2AC0": { math: "\\supsetplus" },
        "\u2AC1": { math: "\\submult" },
        "\u2AC2": { math: "\\supmult" },
        "\u2AC3": { math: "\\subedot" },
        "\u2AC4": { math: "\\supedot" },
        "\u2AC5": { math: "\\subseteqq" },
        "\u2AC5\u0338": { math: "\\nsubseteqq" },
        "\u2AC6": { math: "\\supseteqq" },
        "\u2AC6\u0338": { math: "\\nsupseteqq" },
        "\u2AC7": { math: "\\subsim" },
        "\u2AC8": { math: "\\supsim" },
        "\u2AC9": { math: "\\subsetapprox" },
        "\u2ACA": { math: "\\supsetapprox" },
        "\u2ACB": { math: "\\subsetneqq" },
        "\u2ACC": { math: "\\supsetneqq" },
        "\u2ACD": { math: "\\lsqhook" },
        "\u2ACE": { math: "\\rsqhook" },
        "\u2ACF": { math: "\\csub" },
        "\u2AD0": { math: "\\csup" },
        "\u2AD1": { math: "\\csube" },
        "\u2AD2": { math: "\\csupe" },
        "\u2AD3": { math: "\\subsup" },
        "\u2AD4": { math: "\\supsub" },
        "\u2AD5": { math: "\\subsub" },
        "\u2AD6": { math: "\\supsup" },
        "\u2AD7": { math: "\\suphsub" },
        "\u2AD8": { math: "\\supdsub" },
        "\u2AD9": { math: "\\forkv" },
        "\u2ADA": { math: "\\topfork" },
        "\u2ADB": { math: "\\mlcp" },
        "\u2ADC": { math: "\\forks" },
        "\u2ADD": { math: "\\forksnot" },
        "\u2ADD\u0338": { math: "\\forks" },
        "\u2ADE": { math: "\\shortlefttack" },
        "\u2ADF": { math: "\\shortdowntack" },
        "\u2AE0": { math: "\\shortuptack" },
        "\u2AE1": { math: "\\perps" },
        "\u2AE2": { math: "\\vDdash" },
        "\u2AE3": { math: "\\dashV" },
        "\u2AE4": { math: "\\Dashv" },
        "\u2AE5": { math: "\\DashV" },
        "\u2AE6": { math: "\\varVdash" },
        "\u2AE7": { math: "\\Barv" },
        "\u2AE8": { math: "\\vBar" },
        "\u2AE9": { math: "\\vBarv" },
        "\u2AEA": { math: "\\Top" },
        "\u2AEC": { math: "\\Not" },
        "\u2AED": { math: "\\bNot" },
        "\u2AEE": { math: "\\revnmid" },
        "\u2AEF": { math: "\\cirmid" },
        "\u2AF0": { math: "\\midcir" },
        "\u2AF1": { math: "\\topcir" },
        "\u2AF2": { math: "\\nhpar" },
        "\u2AF3": { math: "\\parsim" },
        "\u2AF4": { math: "\\interleave" },
        "\u2AF5": { math: "\\nhVvert" },
        "\u2AF6": { math: "\\Elztdcol" },
        "\u2AF7": { math: "\\lllnest" },
        "\u2AF8": { math: "\\gggnest" },
        "\u2AF9": { math: "\\leqqslant" },
        "\u2AFA": { math: "\\geqqslant" },
        "\u2AFB": { math: "\\trslash" },
        "\u2AFC": { math: "\\biginterleave" },
        "\u2AFD": { math: "{{/}\\!\\!{/}}" },
        "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
        "\u2AFE": { math: "\\talloblong" },
        "\u2AFF": { math: "\\bigtalloblong" },
        "\u2B12": { math: "\\squaretopblack" },
        "\u2B13": { math: "\\squarebotblack" },
        "\u2B14": { math: "\\squareurblack" },
        "\u2B15": { math: "\\squarellblack" },
        "\u2B16": { math: "\\diamondleftblack" },
        "\u2B17": { math: "\\diamondrightblack" },
        "\u2B18": { math: "\\diamondtopblack" },
        "\u2B19": { math: "\\diamondbotblack" },
        "\u2B1A": { math: "\\dottedsquare" },
        "\u2B1B": { math: "\\blacksquare" },
        "\u2B1C": { math: "\\square" },
        "\u2B1D": { math: "\\vysmblksquare" },
        "\u2B1E": { math: "\\vysmwhtsquare" },
        "\u2B1F": { math: "\\pentagonblack" },
        "\u2B20": { math: "\\pentagon" },
        "\u2B21": { math: "\\varhexagon" },
        "\u2B22": { math: "\\varhexagonblack" },
        "\u2B23": { math: "\\hexagonblack" },
        "\u2B24": { math: "\\lgblkcircle" },
        "\u2B25": { math: "\\mdblkdiamond" },
        "\u2B26": { math: "\\mdwhtdiamond" },
        "\u2B27": { math: "\\mdblklozenge" },
        "\u2B28": { math: "\\mdwhtlozenge" },
        "\u2B29": { math: "\\smblkdiamond" },
        "\u2B2A": { math: "\\smblklozenge" },
        "\u2B2B": { math: "\\smwhtlozenge" },
        "\u2B2C": { math: "\\blkhorzoval" },
        "\u2B2D": { math: "\\whthorzoval" },
        "\u2B2E": { math: "\\blkvertoval" },
        "\u2B2F": { math: "\\whtvertoval" },
        "\u2B30": { math: "\\circleonleftarrow" },
        "\u2B31": { math: "\\leftthreearrows" },
        "\u2B32": { math: "\\leftarrowonoplus" },
        "\u2B33": { math: "\\longleftsquigarrow" },
        "\u2B34": { math: "\\nvtwoheadleftarrow" },
        "\u2B35": { math: "\\nVtwoheadleftarrow" },
        "\u2B36": { math: "\\twoheadmapsfrom" },
        "\u2B37": { math: "\\twoheadleftdbkarrow" },
        "\u2B38": { math: "\\leftdotarrow" },
        "\u2B39": { math: "\\nvleftarrowtail" },
        "\u2B3A": { math: "\\nVleftarrowtail" },
        "\u2B3B": { math: "\\twoheadleftarrowtail" },
        "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
        "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
        "\u2B3E": { math: "\\leftarrowx" },
        "\u2B3F": { math: "\\leftcurvedarrow" },
        "\u2B40": { math: "\\equalleftarrow" },
        "\u2B41": { math: "\\bsimilarleftarrow" },
        "\u2B42": { math: "\\leftarrowbackapprox" },
        "\u2B43": { math: "\\rightarrowgtr" },
        "\u2B44": { math: "\\rightarrowsupset" },
        "\u2B45": { math: "\\LLeftarrow" },
        "\u2B46": { math: "\\RRightarrow" },
        "\u2B47": { math: "\\bsimilarrightarrow" },
        "\u2B48": { math: "\\rightarrowbackapprox" },
        "\u2B49": { math: "\\similarleftarrow" },
        "\u2B4A": { math: "\\leftarrowapprox" },
        "\u2B4B": { math: "\\leftarrowbsimilar" },
        "\u2B4C": { math: "\\rightarrowbsimilar" },
        "\u2B50": { math: "\\medwhitestar" },
        "\u2B51": { math: "\\medblackstar" },
        "\u2B52": { math: "\\smwhitestar" },
        "\u2B53": { math: "\\rightpentagonblack" },
        "\u2B54": { math: "\\rightpentagon" },
        "\u3008": { math: "\\langle" },
        "\u3009": { math: "\\rangle" },
        "\u3012": { math: "\\postalmark" },
        "\u3014": { math: "\\lbrbrak" },
        "\u3015": { math: "\\rbrbrak" },
        "\u301A": { math: "\\openbracketleft" },
        "\u301B": { math: "\\openbracketright" },
        "\u3030": { math: "\\hzigzag" },
        \uFB00: { text: "ff" },
        \uFB01: { text: "fi" },
        \uFB02: { text: "fl" },
        \uFB03: { text: "ffi" },
        \uFB04: { text: "ffl" },
        \uFB05: { text: "st" },
        \uFB06: { text: "st" },
        "\uFFFD": { text: "{\\dbend}" },
        "\u{1D400}": { math: "\\mathbf{A}" },
        "\u{1D401}": { math: "\\mathbf{B}" },
        "\u{1D402}": { math: "\\mathbf{C}" },
        "\u{1D403}": { math: "\\mathbf{D}" },
        "\u{1D404}": { math: "\\mathbf{E}" },
        "\u{1D405}": { math: "\\mathbf{F}" },
        "\u{1D406}": { math: "\\mathbf{G}" },
        "\u{1D407}": { math: "\\mathbf{H}" },
        "\u{1D408}": { math: "\\mathbf{I}" },
        "\u{1D409}": { math: "\\mathbf{J}" },
        "\u{1D40A}": { math: "\\mathbf{K}" },
        "\u{1D40B}": { math: "\\mathbf{L}" },
        "\u{1D40C}": { math: "\\mathbf{M}" },
        "\u{1D40D}": { math: "\\mathbf{N}" },
        "\u{1D40E}": { math: "\\mathbf{O}" },
        "\u{1D40F}": { math: "\\mathbf{P}" },
        "\u{1D410}": { math: "\\mathbf{Q}" },
        "\u{1D411}": { math: "\\mathbf{R}" },
        "\u{1D412}": { math: "\\mathbf{S}" },
        "\u{1D413}": { math: "\\mathbf{T}" },
        "\u{1D414}": { math: "\\mathbf{U}" },
        "\u{1D415}": { math: "\\mathbf{V}" },
        "\u{1D416}": { math: "\\mathbf{W}" },
        "\u{1D417}": { math: "\\mathbf{X}" },
        "\u{1D418}": { math: "\\mathbf{Y}" },
        "\u{1D419}": { math: "\\mathbf{Z}" },
        "\u{1D41A}": { math: "\\mathbf{a}" },
        "\u{1D41B}": { math: "\\mathbf{b}" },
        "\u{1D41C}": { math: "\\mathbf{c}" },
        "\u{1D41D}": { math: "\\mathbf{d}" },
        "\u{1D41E}": { math: "\\mathbf{e}" },
        "\u{1D41F}": { math: "\\mathbf{f}" },
        "\u{1D420}": { math: "\\mathbf{g}" },
        "\u{1D421}": { math: "\\mathbf{h}" },
        "\u{1D422}": { math: "\\mathbf{i}" },
        "\u{1D423}": { math: "\\mathbf{j}" },
        "\u{1D424}": { math: "\\mathbf{k}" },
        "\u{1D425}": { math: "\\mathbf{l}" },
        "\u{1D426}": { math: "\\mathbf{m}" },
        "\u{1D427}": { math: "\\mathbf{n}" },
        "\u{1D428}": { math: "\\mathbf{o}" },
        "\u{1D429}": { math: "\\mathbf{p}" },
        "\u{1D42A}": { math: "\\mathbf{q}" },
        "\u{1D42B}": { math: "\\mathbf{r}" },
        "\u{1D42C}": { math: "\\mathbf{s}" },
        "\u{1D42D}": { math: "\\mathbf{t}" },
        "\u{1D42E}": { math: "\\mathbf{u}" },
        "\u{1D42F}": { math: "\\mathbf{v}" },
        "\u{1D430}": { math: "\\mathbf{w}" },
        "\u{1D431}": { math: "\\mathbf{x}" },
        "\u{1D432}": { math: "\\mathbf{y}" },
        "\u{1D433}": { math: "\\mathbf{z}" },
        "\u{1D434}": { math: "\\mathsl{A}" },
        "\u{1D435}": { math: "\\mathsl{B}" },
        "\u{1D436}": { math: "\\mathsl{C}" },
        "\u{1D437}": { math: "\\mathsl{D}" },
        "\u{1D438}": { math: "\\mathsl{E}" },
        "\u{1D439}": { math: "\\mathsl{F}" },
        "\u{1D43A}": { math: "\\mathsl{G}" },
        "\u{1D43B}": { math: "\\mathsl{H}" },
        "\u{1D43C}": { math: "\\mathsl{I}" },
        "\u{1D43D}": { math: "\\mathsl{J}" },
        "\u{1D43E}": { math: "\\mathsl{K}" },
        "\u{1D43F}": { math: "\\mathsl{L}" },
        "\u{1D440}": { math: "\\mathsl{M}" },
        "\u{1D441}": { math: "\\mathsl{N}" },
        "\u{1D442}": { math: "\\mathsl{O}" },
        "\u{1D443}": { math: "\\mathsl{P}" },
        "\u{1D444}": { math: "\\mathsl{Q}" },
        "\u{1D445}": { math: "\\mathsl{R}" },
        "\u{1D446}": { math: "\\mathsl{S}" },
        "\u{1D447}": { math: "\\mathsl{T}" },
        "\u{1D448}": { math: "\\mathsl{U}" },
        "\u{1D449}": { math: "\\mathsl{V}" },
        "\u{1D44A}": { math: "\\mathsl{W}" },
        "\u{1D44B}": { math: "\\mathsl{X}" },
        "\u{1D44C}": { math: "\\mathsl{Y}" },
        "\u{1D44D}": { math: "\\mathsl{Z}" },
        "\u{1D44E}": { math: "\\mathsl{a}" },
        "\u{1D44F}": { math: "\\mathsl{b}" },
        "\u{1D450}": { math: "\\mathsl{c}" },
        "\u{1D451}": { math: "\\mathsl{d}" },
        "\u{1D452}": { math: "\\mathsl{e}" },
        "\u{1D453}": { math: "\\mathsl{f}" },
        "\u{1D454}": { math: "\\mathsl{g}" },
        "\u{1D456}": { math: "\\mathsl{i}" },
        "\u{1D457}": { math: "\\mathsl{j}" },
        "\u{1D458}": { math: "\\mathsl{k}" },
        "\u{1D459}": { math: "\\mathsl{l}" },
        "\u{1D45A}": { math: "\\mathsl{m}" },
        "\u{1D45B}": { math: "\\mathsl{n}" },
        "\u{1D45C}": { math: "\\mathsl{o}" },
        "\u{1D45D}": { math: "\\mathsl{p}" },
        "\u{1D45E}": { math: "\\mathsl{q}" },
        "\u{1D45F}": { math: "\\mathsl{r}" },
        "\u{1D460}": { math: "\\mathsl{s}" },
        "\u{1D461}": { math: "\\mathsl{t}" },
        "\u{1D462}": { math: "\\mathsl{u}" },
        "\u{1D463}": { math: "\\mathsl{v}" },
        "\u{1D464}": { math: "\\mathsl{w}" },
        "\u{1D465}": { math: "\\mathsl{x}" },
        "\u{1D466}": { math: "\\mathsl{y}" },
        "\u{1D467}": { math: "\\mathsl{z}" },
        "\u{1D468}": { math: "\\mathbit{A}" },
        "\u{1D469}": { math: "\\mathbit{B}" },
        "\u{1D46A}": { math: "\\mathbit{C}" },
        "\u{1D46B}": { math: "\\mathbit{D}" },
        "\u{1D46C}": { math: "\\mathbit{E}" },
        "\u{1D46D}": { math: "\\mathbit{F}" },
        "\u{1D46E}": { math: "\\mathbit{G}" },
        "\u{1D46F}": { math: "\\mathbit{H}" },
        "\u{1D470}": { math: "\\mathbit{I}" },
        "\u{1D471}": { math: "\\mathbit{J}" },
        "\u{1D472}": { math: "\\mathbit{K}" },
        "\u{1D473}": { math: "\\mathbit{L}" },
        "\u{1D474}": { math: "\\mathbit{M}" },
        "\u{1D475}": { math: "\\mathbit{N}" },
        "\u{1D476}": { math: "\\mathbit{O}" },
        "\u{1D477}": { math: "\\mathbit{P}" },
        "\u{1D478}": { math: "\\mathbit{Q}" },
        "\u{1D479}": { math: "\\mathbit{R}" },
        "\u{1D47A}": { math: "\\mathbit{S}" },
        "\u{1D47B}": { math: "\\mathbit{T}" },
        "\u{1D47C}": { math: "\\mathbit{U}" },
        "\u{1D47D}": { math: "\\mathbit{V}" },
        "\u{1D47E}": { math: "\\mathbit{W}" },
        "\u{1D47F}": { math: "\\mathbit{X}" },
        "\u{1D480}": { math: "\\mathbit{Y}" },
        "\u{1D481}": { math: "\\mathbit{Z}" },
        "\u{1D482}": { math: "\\mathbit{a}" },
        "\u{1D483}": { math: "\\mathbit{b}" },
        "\u{1D484}": { math: "\\mathbit{c}" },
        "\u{1D485}": { math: "\\mathbit{d}" },
        "\u{1D486}": { math: "\\mathbit{e}" },
        "\u{1D487}": { math: "\\mathbit{f}" },
        "\u{1D488}": { math: "\\mathbit{g}" },
        "\u{1D489}": { math: "\\mathbit{h}" },
        "\u{1D48A}": { math: "\\mathbit{i}" },
        "\u{1D48B}": { math: "\\mathbit{j}" },
        "\u{1D48C}": { math: "\\mathbit{k}" },
        "\u{1D48D}": { math: "\\mathbit{l}" },
        "\u{1D48E}": { math: "\\mathbit{m}" },
        "\u{1D48F}": { math: "\\mathbit{n}" },
        "\u{1D490}": { math: "\\mathbit{o}" },
        "\u{1D491}": { math: "\\mathbit{p}" },
        "\u{1D492}": { math: "\\mathbit{q}" },
        "\u{1D493}": { math: "\\mathbit{r}" },
        "\u{1D494}": { math: "\\mathbit{s}" },
        "\u{1D495}": { math: "\\mathbit{t}" },
        "\u{1D496}": { math: "\\mathbit{u}" },
        "\u{1D497}": { math: "\\mathbit{v}" },
        "\u{1D498}": { math: "\\mathbit{w}" },
        "\u{1D499}": { math: "\\mathbit{x}" },
        "\u{1D49A}": { math: "\\mathbit{y}" },
        "\u{1D49B}": { math: "\\mathbit{z}" },
        "\u{1D49C}": { math: "\\mathscr{A}" },
        "\u{1D49E}": { math: "\\mathscr{C}" },
        "\u{1D49F}": { math: "\\mathscr{D}" },
        "\u{1D4A2}": { math: "\\mathscr{G}" },
        "\u{1D4A5}": { math: "\\mathscr{J}" },
        "\u{1D4A6}": { math: "\\mathscr{K}" },
        "\u{1D4A9}": { math: "\\mathscr{N}" },
        "\u{1D4AA}": { math: "\\mathscr{O}" },
        "\u{1D4AB}": { math: "\\mathscr{P}" },
        "\u{1D4AC}": { math: "\\mathscr{Q}" },
        "\u{1D4AE}": { math: "\\mathscr{S}" },
        "\u{1D4AF}": { math: "\\mathscr{T}" },
        "\u{1D4B0}": { math: "\\mathscr{U}" },
        "\u{1D4B1}": { math: "\\mathscr{V}" },
        "\u{1D4B2}": { math: "\\mathscr{W}" },
        "\u{1D4B3}": { math: "\\mathscr{X}" },
        "\u{1D4B4}": { math: "\\mathscr{Y}" },
        "\u{1D4B5}": { math: "\\mathscr{Z}" },
        "\u{1D4B6}": { math: "\\mathscr{a}" },
        "\u{1D4B7}": { math: "\\mathscr{b}" },
        "\u{1D4B8}": { math: "\\mathscr{c}" },
        "\u{1D4B9}": { math: "\\mathscr{d}" },
        "\u{1D4BB}": { math: "\\mathscr{f}" },
        "\u{1D4BD}": { math: "\\mathscr{h}" },
        "\u{1D4BE}": { math: "\\mathscr{i}" },
        "\u{1D4BF}": { math: "\\mathscr{j}" },
        "\u{1D4C0}": { math: "\\mathscr{k}" },
        "\u{1D4C1}": { math: "\\mathscr{l}" },
        "\u{1D4C2}": { math: "\\mathscr{m}" },
        "\u{1D4C3}": { math: "\\mathscr{n}" },
        "\u{1D4C5}": { math: "\\mathscr{p}" },
        "\u{1D4C6}": { math: "\\mathscr{q}" },
        "\u{1D4C7}": { math: "\\mathscr{r}" },
        "\u{1D4C8}": { math: "\\mathscr{s}" },
        "\u{1D4C9}": { math: "\\mathscr{t}" },
        "\u{1D4CA}": { math: "\\mathscr{u}" },
        "\u{1D4CB}": { math: "\\mathscr{v}" },
        "\u{1D4CC}": { math: "\\mathscr{w}" },
        "\u{1D4CD}": { math: "\\mathscr{x}" },
        "\u{1D4CE}": { math: "\\mathscr{y}" },
        "\u{1D4CF}": { math: "\\mathscr{z}" },
        "\u{1D4D0}": { math: "\\mathmit{A}" },
        "\u{1D4D1}": { math: "\\mathmit{B}" },
        "\u{1D4D2}": { math: "\\mathmit{C}" },
        "\u{1D4D3}": { math: "\\mathmit{D}" },
        "\u{1D4D4}": { math: "\\mathmit{E}" },
        "\u{1D4D5}": { math: "\\mathmit{F}" },
        "\u{1D4D6}": { math: "\\mathmit{G}" },
        "\u{1D4D7}": { math: "\\mathmit{H}" },
        "\u{1D4D8}": { math: "\\mathmit{I}" },
        "\u{1D4D9}": { math: "\\mathmit{J}" },
        "\u{1D4DA}": { math: "\\mathmit{K}" },
        "\u{1D4DB}": { math: "\\mathmit{L}" },
        "\u{1D4DC}": { math: "\\mathmit{M}" },
        "\u{1D4DD}": { math: "\\mathmit{N}" },
        "\u{1D4DE}": { math: "\\mathmit{O}" },
        "\u{1D4DF}": { math: "\\mathmit{P}" },
        "\u{1D4E0}": { math: "\\mathmit{Q}" },
        "\u{1D4E1}": { math: "\\mathmit{R}" },
        "\u{1D4E2}": { math: "\\mathmit{S}" },
        "\u{1D4E3}": { math: "\\mathmit{T}" },
        "\u{1D4E4}": { math: "\\mathmit{U}" },
        "\u{1D4E5}": { math: "\\mathmit{V}" },
        "\u{1D4E6}": { math: "\\mathmit{W}" },
        "\u{1D4E7}": { math: "\\mathmit{X}" },
        "\u{1D4E8}": { math: "\\mathmit{Y}" },
        "\u{1D4E9}": { math: "\\mathmit{Z}" },
        "\u{1D4EA}": { math: "\\mathmit{a}" },
        "\u{1D4EB}": { math: "\\mathmit{b}" },
        "\u{1D4EC}": { math: "\\mathmit{c}" },
        "\u{1D4ED}": { math: "\\mathmit{d}" },
        "\u{1D4EE}": { math: "\\mathmit{e}" },
        "\u{1D4EF}": { math: "\\mathmit{f}" },
        "\u{1D4F0}": { math: "\\mathmit{g}" },
        "\u{1D4F1}": { math: "\\mathmit{h}" },
        "\u{1D4F2}": { math: "\\mathmit{i}" },
        "\u{1D4F3}": { math: "\\mathmit{j}" },
        "\u{1D4F4}": { math: "\\mathmit{k}" },
        "\u{1D4F5}": { math: "\\mathmit{l}" },
        "\u{1D4F6}": { math: "\\mathmit{m}" },
        "\u{1D4F7}": { math: "\\mathmit{n}" },
        "\u{1D4F8}": { math: "\\mathmit{o}" },
        "\u{1D4F9}": { math: "\\mathmit{p}" },
        "\u{1D4FA}": { math: "\\mathmit{q}" },
        "\u{1D4FB}": { math: "\\mathmit{r}" },
        "\u{1D4FC}": { math: "\\mathmit{s}" },
        "\u{1D4FD}": { math: "\\mathmit{t}" },
        "\u{1D4FE}": { math: "\\mathmit{u}" },
        "\u{1D4FF}": { math: "\\mathmit{v}" },
        "\u{1D500}": { math: "\\mathmit{w}" },
        "\u{1D501}": { math: "\\mathmit{x}" },
        "\u{1D502}": { math: "\\mathmit{y}" },
        "\u{1D503}": { math: "\\mathmit{z}" },
        "\u{1D504}": { math: "\\mathfrak{A}" },
        "\u{1D505}": { math: "\\mathfrak{B}" },
        "\u{1D507}": { math: "\\mathfrak{D}" },
        "\u{1D508}": { math: "\\mathfrak{E}" },
        "\u{1D509}": { math: "\\mathfrak{F}" },
        "\u{1D50A}": { math: "\\mathfrak{G}" },
        "\u{1D50D}": { math: "\\mathfrak{J}" },
        "\u{1D50E}": { math: "\\mathfrak{K}" },
        "\u{1D50F}": { math: "\\mathfrak{L}" },
        "\u{1D510}": { math: "\\mathfrak{M}" },
        "\u{1D511}": { math: "\\mathfrak{N}" },
        "\u{1D512}": { math: "\\mathfrak{O}" },
        "\u{1D513}": { math: "\\mathfrak{P}" },
        "\u{1D514}": { math: "\\mathfrak{Q}" },
        "\u{1D516}": { math: "\\mathfrak{S}" },
        "\u{1D517}": { math: "\\mathfrak{T}" },
        "\u{1D518}": { math: "\\mathfrak{U}" },
        "\u{1D519}": { math: "\\mathfrak{V}" },
        "\u{1D51A}": { math: "\\mathfrak{W}" },
        "\u{1D51B}": { math: "\\mathfrak{X}" },
        "\u{1D51C}": { math: "\\mathfrak{Y}" },
        "\u{1D51E}": { math: "\\mathfrak{a}" },
        "\u{1D51F}": { math: "\\mathfrak{b}" },
        "\u{1D520}": { math: "\\mathfrak{c}" },
        "\u{1D521}": { math: "\\mathfrak{d}" },
        "\u{1D522}": { math: "\\mathfrak{e}" },
        "\u{1D523}": { math: "\\mathfrak{f}" },
        "\u{1D524}": { math: "\\mathfrak{g}" },
        "\u{1D525}": { math: "\\mathfrak{h}" },
        "\u{1D526}": { math: "\\mathfrak{i}" },
        "\u{1D527}": { math: "\\mathfrak{j}" },
        "\u{1D528}": { math: "\\mathfrak{k}" },
        "\u{1D529}": { math: "\\mathfrak{l}" },
        "\u{1D52A}": { math: "\\mathfrak{m}" },
        "\u{1D52B}": { math: "\\mathfrak{n}" },
        "\u{1D52C}": { math: "\\mathfrak{o}" },
        "\u{1D52D}": { math: "\\mathfrak{p}" },
        "\u{1D52E}": { math: "\\mathfrak{q}" },
        "\u{1D52F}": { math: "\\mathfrak{r}" },
        "\u{1D530}": { math: "\\mathfrak{s}" },
        "\u{1D531}": { math: "\\mathfrak{t}" },
        "\u{1D532}": { math: "\\mathfrak{u}" },
        "\u{1D533}": { math: "\\mathfrak{v}" },
        "\u{1D534}": { math: "\\mathfrak{w}" },
        "\u{1D535}": { math: "\\mathfrak{x}" },
        "\u{1D536}": { math: "\\mathfrak{y}" },
        "\u{1D537}": { math: "\\mathfrak{z}" },
        "\u{1D538}": { math: "\\mathbb{A}" },
        "\u{1D539}": { math: "\\mathbb{B}" },
        "\u{1D53B}": { math: "\\mathbb{D}" },
        "\u{1D53C}": { math: "\\mathbb{E}" },
        "\u{1D53D}": { math: "\\mathbb{F}" },
        "\u{1D53E}": { math: "\\mathbb{G}" },
        "\u{1D540}": { math: "\\mathbb{I}" },
        "\u{1D541}": { math: "\\mathbb{J}" },
        "\u{1D542}": { math: "\\mathbb{K}" },
        "\u{1D543}": { math: "\\mathbb{L}" },
        "\u{1D544}": { math: "\\mathbb{M}" },
        "\u{1D546}": { math: "\\mathbb{O}" },
        "\u{1D54A}": { math: "\\mathbb{S}" },
        "\u{1D54B}": { math: "\\mathbb{T}" },
        "\u{1D54C}": { math: "\\mathbb{U}" },
        "\u{1D54D}": { math: "\\mathbb{V}" },
        "\u{1D54E}": { math: "\\mathbb{W}" },
        "\u{1D54F}": { math: "\\mathbb{X}" },
        "\u{1D550}": { math: "\\mathbb{Y}" },
        "\u{1D552}": { math: "\\mathbb{a}" },
        "\u{1D553}": { math: "\\mathbb{b}" },
        "\u{1D554}": { math: "\\mathbb{c}" },
        "\u{1D555}": { math: "\\mathbb{d}" },
        "\u{1D556}": { math: "\\mathbb{e}" },
        "\u{1D557}": { math: "\\mathbb{f}" },
        "\u{1D558}": { math: "\\mathbb{g}" },
        "\u{1D559}": { math: "\\mathbb{h}" },
        "\u{1D55A}": { math: "\\mathbb{i}" },
        "\u{1D55B}": { math: "\\mathbb{j}" },
        "\u{1D55C}": { math: "\\mathbb{k}" },
        "\u{1D55D}": { math: "\\mathbb{l}" },
        "\u{1D55E}": { math: "\\mathbb{m}" },
        "\u{1D55F}": { math: "\\mathbb{n}" },
        "\u{1D560}": { math: "\\mathbb{o}" },
        "\u{1D561}": { math: "\\mathbb{p}" },
        "\u{1D562}": { math: "\\mathbb{q}" },
        "\u{1D563}": { math: "\\mathbb{r}" },
        "\u{1D564}": { math: "\\mathbb{s}" },
        "\u{1D565}": { math: "\\mathbb{t}" },
        "\u{1D566}": { math: "\\mathbb{u}" },
        "\u{1D567}": { math: "\\mathbb{v}" },
        "\u{1D568}": { math: "\\mathbb{w}" },
        "\u{1D569}": { math: "\\mathbb{x}" },
        "\u{1D56A}": { math: "\\mathbb{y}" },
        "\u{1D56B}": { math: "\\mathbb{z}" },
        "\u{1D56C}": { math: "\\mathslbb{A}" },
        "\u{1D56D}": { math: "\\mathslbb{B}" },
        "\u{1D56E}": { math: "\\mathslbb{C}" },
        "\u{1D56F}": { math: "\\mathslbb{D}" },
        "\u{1D570}": { math: "\\mathslbb{E}" },
        "\u{1D571}": { math: "\\mathslbb{F}" },
        "\u{1D572}": { math: "\\mathslbb{G}" },
        "\u{1D573}": { math: "\\mathslbb{H}" },
        "\u{1D574}": { math: "\\mathslbb{I}" },
        "\u{1D575}": { math: "\\mathslbb{J}" },
        "\u{1D576}": { math: "\\mathslbb{K}" },
        "\u{1D577}": { math: "\\mathslbb{L}" },
        "\u{1D578}": { math: "\\mathslbb{M}" },
        "\u{1D579}": { math: "\\mathslbb{N}" },
        "\u{1D57A}": { math: "\\mathslbb{O}" },
        "\u{1D57B}": { math: "\\mathslbb{P}" },
        "\u{1D57C}": { math: "\\mathslbb{Q}" },
        "\u{1D57D}": { math: "\\mathslbb{R}" },
        "\u{1D57E}": { math: "\\mathslbb{S}" },
        "\u{1D57F}": { math: "\\mathslbb{T}" },
        "\u{1D580}": { math: "\\mathslbb{U}" },
        "\u{1D581}": { math: "\\mathslbb{V}" },
        "\u{1D582}": { math: "\\mathslbb{W}" },
        "\u{1D583}": { math: "\\mathslbb{X}" },
        "\u{1D584}": { math: "\\mathslbb{Y}" },
        "\u{1D585}": { math: "\\mathslbb{Z}" },
        "\u{1D586}": { math: "\\mathslbb{a}" },
        "\u{1D587}": { math: "\\mathslbb{b}" },
        "\u{1D588}": { math: "\\mathslbb{c}" },
        "\u{1D589}": { math: "\\mathslbb{d}" },
        "\u{1D58A}": { math: "\\mathslbb{e}" },
        "\u{1D58B}": { math: "\\mathslbb{f}" },
        "\u{1D58C}": { math: "\\mathslbb{g}" },
        "\u{1D58D}": { math: "\\mathslbb{h}" },
        "\u{1D58E}": { math: "\\mathslbb{i}" },
        "\u{1D58F}": { math: "\\mathslbb{j}" },
        "\u{1D590}": { math: "\\mathslbb{k}" },
        "\u{1D591}": { math: "\\mathslbb{l}" },
        "\u{1D592}": { math: "\\mathslbb{m}" },
        "\u{1D593}": { math: "\\mathslbb{n}" },
        "\u{1D594}": { math: "\\mathslbb{o}" },
        "\u{1D595}": { math: "\\mathslbb{p}" },
        "\u{1D596}": { math: "\\mathslbb{q}" },
        "\u{1D597}": { math: "\\mathslbb{r}" },
        "\u{1D598}": { math: "\\mathslbb{s}" },
        "\u{1D599}": { math: "\\mathslbb{t}" },
        "\u{1D59A}": { math: "\\mathslbb{u}" },
        "\u{1D59B}": { math: "\\mathslbb{v}" },
        "\u{1D59C}": { math: "\\mathslbb{w}" },
        "\u{1D59D}": { math: "\\mathslbb{x}" },
        "\u{1D59E}": { math: "\\mathslbb{y}" },
        "\u{1D59F}": { math: "\\mathslbb{z}" },
        "\u{1D5A0}": { math: "\\mathsf{A}" },
        "\u{1D5A1}": { math: "\\mathsf{B}" },
        "\u{1D5A2}": { math: "\\mathsf{C}" },
        "\u{1D5A3}": { math: "\\mathsf{D}" },
        "\u{1D5A4}": { math: "\\mathsf{E}" },
        "\u{1D5A5}": { math: "\\mathsf{F}" },
        "\u{1D5A6}": { math: "\\mathsf{G}" },
        "\u{1D5A7}": { math: "\\mathsf{H}" },
        "\u{1D5A8}": { math: "\\mathsf{I}" },
        "\u{1D5A9}": { math: "\\mathsf{J}" },
        "\u{1D5AA}": { math: "\\mathsf{K}" },
        "\u{1D5AB}": { math: "\\mathsf{L}" },
        "\u{1D5AC}": { math: "\\mathsf{M}" },
        "\u{1D5AD}": { math: "\\mathsf{N}" },
        "\u{1D5AE}": { math: "\\mathsf{O}" },
        "\u{1D5AF}": { math: "\\mathsf{P}" },
        "\u{1D5B0}": { math: "\\mathsf{Q}" },
        "\u{1D5B1}": { math: "\\mathsf{R}" },
        "\u{1D5B2}": { math: "\\mathsf{S}" },
        "\u{1D5B3}": { math: "\\mathsf{T}" },
        "\u{1D5B4}": { math: "\\mathsf{U}" },
        "\u{1D5B5}": { math: "\\mathsf{V}" },
        "\u{1D5B6}": { math: "\\mathsf{W}" },
        "\u{1D5B7}": { math: "\\mathsf{X}" },
        "\u{1D5B8}": { math: "\\mathsf{Y}" },
        "\u{1D5B9}": { math: "\\mathsf{Z}" },
        "\u{1D5BA}": { math: "\\mathsf{a}" },
        "\u{1D5BB}": { math: "\\mathsf{b}" },
        "\u{1D5BC}": { math: "\\mathsf{c}" },
        "\u{1D5BD}": { math: "\\mathsf{d}" },
        "\u{1D5BE}": { math: "\\mathsf{e}" },
        "\u{1D5BF}": { math: "\\mathsf{f}" },
        "\u{1D5C0}": { math: "\\mathsf{g}" },
        "\u{1D5C1}": { math: "\\mathsf{h}" },
        "\u{1D5C2}": { math: "\\mathsf{i}" },
        "\u{1D5C3}": { math: "\\mathsf{j}" },
        "\u{1D5C4}": { math: "\\mathsf{k}" },
        "\u{1D5C5}": { math: "\\mathsf{l}" },
        "\u{1D5C6}": { math: "\\mathsf{m}" },
        "\u{1D5C7}": { math: "\\mathsf{n}" },
        "\u{1D5C8}": { math: "\\mathsf{o}" },
        "\u{1D5C9}": { math: "\\mathsf{p}" },
        "\u{1D5CA}": { math: "\\mathsf{q}" },
        "\u{1D5CB}": { math: "\\mathsf{r}" },
        "\u{1D5CC}": { math: "\\mathsf{s}" },
        "\u{1D5CD}": { math: "\\mathsf{t}" },
        "\u{1D5CE}": { math: "\\mathsf{u}" },
        "\u{1D5CF}": { math: "\\mathsf{v}" },
        "\u{1D5D0}": { math: "\\mathsf{w}" },
        "\u{1D5D1}": { math: "\\mathsf{x}" },
        "\u{1D5D2}": { math: "\\mathsf{y}" },
        "\u{1D5D3}": { math: "\\mathsf{z}" },
        "\u{1D5D4}": { math: "\\mathsfbf{A}" },
        "\u{1D5D5}": { math: "\\mathsfbf{B}" },
        "\u{1D5D6}": { math: "\\mathsfbf{C}" },
        "\u{1D5D7}": { math: "\\mathsfbf{D}" },
        "\u{1D5D8}": { math: "\\mathsfbf{E}" },
        "\u{1D5D9}": { math: "\\mathsfbf{F}" },
        "\u{1D5DA}": { math: "\\mathsfbf{G}" },
        "\u{1D5DB}": { math: "\\mathsfbf{H}" },
        "\u{1D5DC}": { math: "\\mathsfbf{I}" },
        "\u{1D5DD}": { math: "\\mathsfbf{J}" },
        "\u{1D5DE}": { math: "\\mathsfbf{K}" },
        "\u{1D5DF}": { math: "\\mathsfbf{L}" },
        "\u{1D5E0}": { math: "\\mathsfbf{M}" },
        "\u{1D5E1}": { math: "\\mathsfbf{N}" },
        "\u{1D5E2}": { math: "\\mathsfbf{O}" },
        "\u{1D5E3}": { math: "\\mathsfbf{P}" },
        "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
        "\u{1D5E5}": { math: "\\mathsfbf{R}" },
        "\u{1D5E6}": { math: "\\mathsfbf{S}" },
        "\u{1D5E7}": { math: "\\mathsfbf{T}" },
        "\u{1D5E8}": { math: "\\mathsfbf{U}" },
        "\u{1D5E9}": { math: "\\mathsfbf{V}" },
        "\u{1D5EA}": { math: "\\mathsfbf{W}" },
        "\u{1D5EB}": { math: "\\mathsfbf{X}" },
        "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
        "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
        "\u{1D5EE}": { math: "\\mathsfbf{a}" },
        "\u{1D5EF}": { math: "\\mathsfbf{b}" },
        "\u{1D5F0}": { math: "\\mathsfbf{c}" },
        "\u{1D5F1}": { math: "\\mathsfbf{d}" },
        "\u{1D5F2}": { math: "\\mathsfbf{e}" },
        "\u{1D5F3}": { math: "\\mathsfbf{f}" },
        "\u{1D5F4}": { math: "\\mathsfbf{g}" },
        "\u{1D5F5}": { math: "\\mathsfbf{h}" },
        "\u{1D5F6}": { math: "\\mathsfbf{i}" },
        "\u{1D5F7}": { math: "\\mathsfbf{j}" },
        "\u{1D5F8}": { math: "\\mathsfbf{k}" },
        "\u{1D5F9}": { math: "\\mathsfbf{l}" },
        "\u{1D5FA}": { math: "\\mathsfbf{m}" },
        "\u{1D5FB}": { math: "\\mathsfbf{n}" },
        "\u{1D5FC}": { math: "\\mathsfbf{o}" },
        "\u{1D5FD}": { math: "\\mathsfbf{p}" },
        "\u{1D5FE}": { math: "\\mathsfbf{q}" },
        "\u{1D5FF}": { math: "\\mathsfbf{r}" },
        "\u{1D600}": { math: "\\mathsfbf{s}" },
        "\u{1D601}": { math: "\\mathsfbf{t}" },
        "\u{1D602}": { math: "\\mathsfbf{u}" },
        "\u{1D603}": { math: "\\mathsfbf{v}" },
        "\u{1D604}": { math: "\\mathsfbf{w}" },
        "\u{1D605}": { math: "\\mathsfbf{x}" },
        "\u{1D606}": { math: "\\mathsfbf{y}" },
        "\u{1D607}": { math: "\\mathsfbf{z}" },
        "\u{1D608}": { math: "\\mathsfsl{A}" },
        "\u{1D609}": { math: "\\mathsfsl{B}" },
        "\u{1D60A}": { math: "\\mathsfsl{C}" },
        "\u{1D60B}": { math: "\\mathsfsl{D}" },
        "\u{1D60C}": { math: "\\mathsfsl{E}" },
        "\u{1D60D}": { math: "\\mathsfsl{F}" },
        "\u{1D60E}": { math: "\\mathsfsl{G}" },
        "\u{1D60F}": { math: "\\mathsfsl{H}" },
        "\u{1D610}": { math: "\\mathsfsl{I}" },
        "\u{1D611}": { math: "\\mathsfsl{J}" },
        "\u{1D612}": { math: "\\mathsfsl{K}" },
        "\u{1D613}": { math: "\\mathsfsl{L}" },
        "\u{1D614}": { math: "\\mathsfsl{M}" },
        "\u{1D615}": { math: "\\mathsfsl{N}" },
        "\u{1D616}": { math: "\\mathsfsl{O}" },
        "\u{1D617}": { math: "\\mathsfsl{P}" },
        "\u{1D618}": { math: "\\mathsfsl{Q}" },
        "\u{1D619}": { math: "\\mathsfsl{R}" },
        "\u{1D61A}": { math: "\\mathsfsl{S}" },
        "\u{1D61B}": { math: "\\mathsfsl{T}" },
        "\u{1D61C}": { math: "\\mathsfsl{U}" },
        "\u{1D61D}": { math: "\\mathsfsl{V}" },
        "\u{1D61E}": { math: "\\mathsfsl{W}" },
        "\u{1D61F}": { math: "\\mathsfsl{X}" },
        "\u{1D620}": { math: "\\mathsfsl{Y}" },
        "\u{1D621}": { math: "\\mathsfsl{Z}" },
        "\u{1D622}": { math: "\\mathsfsl{a}" },
        "\u{1D623}": { math: "\\mathsfsl{b}" },
        "\u{1D624}": { math: "\\mathsfsl{c}" },
        "\u{1D625}": { math: "\\mathsfsl{d}" },
        "\u{1D626}": { math: "\\mathsfsl{e}" },
        "\u{1D627}": { math: "\\mathsfsl{f}" },
        "\u{1D628}": { math: "\\mathsfsl{g}" },
        "\u{1D629}": { math: "\\mathsfsl{h}" },
        "\u{1D62A}": { math: "\\mathsfsl{i}" },
        "\u{1D62B}": { math: "\\mathsfsl{j}" },
        "\u{1D62C}": { math: "\\mathsfsl{k}" },
        "\u{1D62D}": { math: "\\mathsfsl{l}" },
        "\u{1D62E}": { math: "\\mathsfsl{m}" },
        "\u{1D62F}": { math: "\\mathsfsl{n}" },
        "\u{1D630}": { math: "\\mathsfsl{o}" },
        "\u{1D631}": { math: "\\mathsfsl{p}" },
        "\u{1D632}": { math: "\\mathsfsl{q}" },
        "\u{1D633}": { math: "\\mathsfsl{r}" },
        "\u{1D634}": { math: "\\mathsfsl{s}" },
        "\u{1D635}": { math: "\\mathsfsl{t}" },
        "\u{1D636}": { math: "\\mathsfsl{u}" },
        "\u{1D637}": { math: "\\mathsfsl{v}" },
        "\u{1D638}": { math: "\\mathsfsl{w}" },
        "\u{1D639}": { math: "\\mathsfsl{x}" },
        "\u{1D63A}": { math: "\\mathsfsl{y}" },
        "\u{1D63B}": { math: "\\mathsfsl{z}" },
        "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
        "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
        "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
        "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
        "\u{1D640}": { math: "\\mathsfbfsl{E}" },
        "\u{1D641}": { math: "\\mathsfbfsl{F}" },
        "\u{1D642}": { math: "\\mathsfbfsl{G}" },
        "\u{1D643}": { math: "\\mathsfbfsl{H}" },
        "\u{1D644}": { math: "\\mathsfbfsl{I}" },
        "\u{1D645}": { math: "\\mathsfbfsl{J}" },
        "\u{1D646}": { math: "\\mathsfbfsl{K}" },
        "\u{1D647}": { math: "\\mathsfbfsl{L}" },
        "\u{1D648}": { math: "\\mathsfbfsl{M}" },
        "\u{1D649}": { math: "\\mathsfbfsl{N}" },
        "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
        "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
        "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
        "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
        "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
        "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
        "\u{1D650}": { math: "\\mathsfbfsl{U}" },
        "\u{1D651}": { math: "\\mathsfbfsl{V}" },
        "\u{1D652}": { math: "\\mathsfbfsl{W}" },
        "\u{1D653}": { math: "\\mathsfbfsl{X}" },
        "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
        "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D656}": { math: "\\mathsfbfsl{a}" },
        "\u{1D657}": { math: "\\mathsfbfsl{b}" },
        "\u{1D658}": { math: "\\mathsfbfsl{c}" },
        "\u{1D659}": { math: "\\mathsfbfsl{d}" },
        "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
        "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
        "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
        "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
        "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
        "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
        "\u{1D660}": { math: "\\mathsfbfsl{k}" },
        "\u{1D661}": { math: "\\mathsfbfsl{l}" },
        "\u{1D662}": { math: "\\mathsfbfsl{m}" },
        "\u{1D663}": { math: "\\mathsfbfsl{n}" },
        "\u{1D664}": { math: "\\mathsfbfsl{o}" },
        "\u{1D665}": { math: "\\mathsfbfsl{p}" },
        "\u{1D666}": { math: "\\mathsfbfsl{q}" },
        "\u{1D667}": { math: "\\mathsfbfsl{r}" },
        "\u{1D668}": { math: "\\mathsfbfsl{s}" },
        "\u{1D669}": { math: "\\mathsfbfsl{t}" },
        "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
        "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
        "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
        "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
        "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
        "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
        "\u{1D670}": { math: "\\mathtt{A}" },
        "\u{1D671}": { math: "\\mathtt{B}" },
        "\u{1D672}": { math: "\\mathtt{C}" },
        "\u{1D673}": { math: "\\mathtt{D}" },
        "\u{1D674}": { math: "\\mathtt{E}" },
        "\u{1D675}": { math: "\\mathtt{F}" },
        "\u{1D676}": { math: "\\mathtt{G}" },
        "\u{1D677}": { math: "\\mathtt{H}" },
        "\u{1D678}": { math: "\\mathtt{I}" },
        "\u{1D679}": { math: "\\mathtt{J}" },
        "\u{1D67A}": { math: "\\mathtt{K}" },
        "\u{1D67B}": { math: "\\mathtt{L}" },
        "\u{1D67C}": { math: "\\mathtt{M}" },
        "\u{1D67D}": { math: "\\mathtt{N}" },
        "\u{1D67E}": { math: "\\mathtt{O}" },
        "\u{1D67F}": { math: "\\mathtt{P}" },
        "\u{1D680}": { math: "\\mathtt{Q}" },
        "\u{1D681}": { math: "\\mathtt{R}" },
        "\u{1D682}": { math: "\\mathtt{S}" },
        "\u{1D683}": { math: "\\mathtt{T}" },
        "\u{1D684}": { math: "\\mathtt{U}" },
        "\u{1D685}": { math: "\\mathtt{V}" },
        "\u{1D686}": { math: "\\mathtt{W}" },
        "\u{1D687}": { math: "\\mathtt{X}" },
        "\u{1D688}": { math: "\\mathtt{Y}" },
        "\u{1D689}": { math: "\\mathtt{Z}" },
        "\u{1D68A}": { math: "\\mathtt{a}" },
        "\u{1D68B}": { math: "\\mathtt{b}" },
        "\u{1D68C}": { math: "\\mathtt{c}" },
        "\u{1D68D}": { math: "\\mathtt{d}" },
        "\u{1D68E}": { math: "\\mathtt{e}" },
        "\u{1D68F}": { math: "\\mathtt{f}" },
        "\u{1D690}": { math: "\\mathtt{g}" },
        "\u{1D691}": { math: "\\mathtt{h}" },
        "\u{1D692}": { math: "\\mathtt{i}" },
        "\u{1D693}": { math: "\\mathtt{j}" },
        "\u{1D694}": { math: "\\mathtt{k}" },
        "\u{1D695}": { math: "\\mathtt{l}" },
        "\u{1D696}": { math: "\\mathtt{m}" },
        "\u{1D697}": { math: "\\mathtt{n}" },
        "\u{1D698}": { math: "\\mathtt{o}" },
        "\u{1D699}": { math: "\\mathtt{p}" },
        "\u{1D69A}": { math: "\\mathtt{q}" },
        "\u{1D69B}": { math: "\\mathtt{r}" },
        "\u{1D69C}": { math: "\\mathtt{s}" },
        "\u{1D69D}": { math: "\\mathtt{t}" },
        "\u{1D69E}": { math: "\\mathtt{u}" },
        "\u{1D69F}": { math: "\\mathtt{v}" },
        "\u{1D6A0}": { math: "\\mathtt{w}" },
        "\u{1D6A1}": { math: "\\mathtt{x}" },
        "\u{1D6A2}": { math: "\\mathtt{y}" },
        "\u{1D6A3}": { math: "\\mathtt{z}" },
        "\u{1D6A4}": { math: "\\imath" },
        "\u{1D6A5}": { math: "\\jmath" },
        "\u{1D6A8}": { math: "\\mathbf{A}" },
        "\u{1D6A9}": { math: "\\mathbf{B}" },
        "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
        "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
        "\u{1D6AC}": { math: "\\mathbf{E}" },
        "\u{1D6AD}": { math: "\\mathbf{Z}" },
        "\u{1D6AE}": { math: "\\mathbf{H}" },
        "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
        "\u{1D6B0}": { math: "\\mathbf{I}" },
        "\u{1D6B1}": { math: "\\mathbf{K}" },
        "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
        "\u{1D6B3}": { math: "M" },
        "\u{1D6B4}": { math: "N" },
        "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
        "\u{1D6B6}": { math: "O" },
        "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
        "\u{1D6B8}": { math: "\\mathbf{P}" },
        "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
        "\u{1D6BB}": { math: "\\mathbf{T}" },
        "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
        "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
        "\u{1D6BE}": { math: "\\mathbf{X}" },
        "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
        "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
        "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
        "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
        "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
        "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
        "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
        "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
        "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
        "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
        "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
        "\u{1D6CA}": { math: "\\mathbf{I}" },
        "\u{1D6CB}": { math: "\\mathbf{K}" },
        "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
        "\u{1D6CD}": { math: "M" },
        "\u{1D6CE}": { math: "N" },
        "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
        "\u{1D6D0}": { math: "O" },
        "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
        "\u{1D6D2}": { math: "\\mathbf{P}" },
        "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
        "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
        "\u{1D6D5}": { math: "\\mathbf{T}" },
        "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
        "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
        "\u{1D6D8}": { math: "\\mathbf{X}" },
        "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
        "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
        "\u{1D6DB}": { math: "\\partial" },
        "\u{1D6DC}": { math: "\\in" },
        "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
        "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
        "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
        "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
        "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
        "\u{1D6E2}": { math: "\\mathsl{A}" },
        "\u{1D6E3}": { math: "\\mathsl{B}" },
        "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
        "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
        "\u{1D6E6}": { math: "\\mathsl{E}" },
        "\u{1D6E7}": { math: "\\mathsl{Z}" },
        "\u{1D6E8}": { math: "\\mathsl{H}" },
        "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6EA}": { math: "\\mathsl{I}" },
        "\u{1D6EB}": { math: "\\mathsl{K}" },
        "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
        "\u{1D6ED}": { math: "M" },
        "\u{1D6EE}": { math: "N" },
        "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
        "\u{1D6F0}": { math: "O" },
        "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
        "\u{1D6F2}": { math: "\\mathsl{P}" },
        "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
        "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
        "\u{1D6F5}": { math: "\\mathsl{T}" },
        "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
        "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
        "\u{1D6F8}": { math: "\\mathsl{X}" },
        "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
        "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
        "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
        "\u{1D6FC}": { math: "\\mathsl{A}" },
        "\u{1D6FD}": { math: "\\mathsl{B}" },
        "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
        "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
        "\u{1D700}": { math: "\\mathsl{E}" },
        "\u{1D701}": { math: "\\mathsl{Z}" },
        "\u{1D702}": { math: "\\mathsl{H}" },
        "\u{1D703}": { math: "\\mathsl{\\theta}" },
        "\u{1D704}": { math: "\\mathsl{I}" },
        "\u{1D705}": { math: "\\mathsl{K}" },
        "\u{1D706}": { math: "\\mathsl{\\lambda}" },
        "\u{1D707}": { math: "\\mu" },
        "\u{1D708}": { math: "\\nu" },
        "\u{1D709}": { math: "\\mathsl{\\xi}" },
        "\u{1D70A}": { math: "o" },
        "\u{1D70B}": { math: "\\mathsl{\\pi}" },
        "\u{1D70C}": { math: "\\mathsl{P}" },
        "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
        "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
        "\u{1D70F}": { math: "\\mathsl{T}" },
        "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
        "\u{1D711}": { math: "\\mathsl{\\varphi}" },
        "\u{1D712}": { math: "\\mathsl{X}" },
        "\u{1D713}": { math: "\\mathsl{\\psi}" },
        "\u{1D714}": { math: "\\mathsl{\\omega}" },
        "\u{1D715}": { math: "\\partial" },
        "\u{1D716}": { math: "\\in" },
        "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
        "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
        "\u{1D719}": { math: "\\mathsl{\\phi}" },
        "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
        "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
        "\u{1D71C}": { math: "\\mathbit{A}" },
        "\u{1D71D}": { math: "\\mathbit{B}" },
        "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
        "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
        "\u{1D720}": { math: "\\mathbit{E}" },
        "\u{1D721}": { math: "\\mathbit{Z}" },
        "\u{1D722}": { math: "\\mathbit{H}" },
        "\u{1D723}": { math: "\\mathbit{\\Theta}" },
        "\u{1D724}": { math: "\\mathbit{I}" },
        "\u{1D725}": { math: "\\mathbit{K}" },
        "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
        "\u{1D727}": { math: "M" },
        "\u{1D728}": { math: "N" },
        "\u{1D729}": { math: "\\mathbit{\\Xi}" },
        "\u{1D72A}": { math: "O" },
        "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
        "\u{1D72C}": { math: "\\mathbit{P}" },
        "\u{1D72D}": { math: "\\mathbit{O}" },
        "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
        "\u{1D72F}": { math: "\\mathbit{T}" },
        "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
        "\u{1D731}": { math: "\\mathbit{\\Phi}" },
        "\u{1D732}": { math: "\\mathbit{X}" },
        "\u{1D733}": { math: "\\mathbit{\\Psi}" },
        "\u{1D734}": { math: "\\mathbit{\\Omega}" },
        "\u{1D735}": { math: "\\mathbit{\\nabla}" },
        "\u{1D736}": { math: "\\mathbit{\\alpha}" },
        "\u{1D737}": { math: "\\mathbit{\\beta}" },
        "\u{1D738}": { math: "\\mathbit{\\gamma}" },
        "\u{1D739}": { math: "\\mathbit{\\delta}" },
        "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
        "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
        "\u{1D73C}": { math: "\\mathbit{\\eta}" },
        "\u{1D73D}": { math: "\\mathbit{\\theta}" },
        "\u{1D73E}": { math: "\\mathbit{\\imath}" },
        "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
        "\u{1D740}": { math: "\\mathbit{\\lambda}" },
        "\u{1D741}": { math: "\\mu" },
        "\u{1D742}": { math: "N" },
        "\u{1D743}": { math: "\\mathbit{\\xi}" },
        "\u{1D744}": { math: "O" },
        "\u{1D745}": { math: "\\mathbit{\\pi}" },
        "\u{1D746}": { math: "\\mathbit{\\rho}" },
        "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
        "\u{1D748}": { math: "\\mathbit{\\sigma}" },
        "\u{1D749}": { math: "\\mathbit{\\tau}" },
        "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
        "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
        "\u{1D74C}": { math: "\\mathbit{\\chi}" },
        "\u{1D74D}": { math: "\\mathbit{\\psi}" },
        "\u{1D74E}": { math: "\\mathbit{\\omega}" },
        "\u{1D74F}": { math: "\\partial" },
        "\u{1D750}": { math: "\\in" },
        "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
        "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
        "\u{1D753}": { math: "\\mathbit{\\phi}" },
        "\u{1D754}": { math: "\\mathbit{\\varrho}" },
        "\u{1D755}": { math: "\\mathbit{\\varpi}" },
        "\u{1D756}": { math: "\\mathsfbf{A}" },
        "\u{1D757}": { math: "\\mathsfbf{B}" },
        "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
        "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
        "\u{1D75A}": { math: "\\mathsfbf{E}" },
        "\u{1D75B}": { math: "\\mathsfbf{Z}" },
        "\u{1D75C}": { math: "\\mathsfbf{H}" },
        "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D75E}": { math: "\\mathsfbf{I}" },
        "\u{1D75F}": { math: "\\mathsfbf{K}" },
        "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
        "\u{1D761}": { math: "M" },
        "\u{1D762}": { math: "N" },
        "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
        "\u{1D764}": { math: "O" },
        "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
        "\u{1D766}": { math: "\\mathsfbf{P}" },
        "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
        "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
        "\u{1D769}": { math: "\\mathsfbf{T}" },
        "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
        "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
        "\u{1D76C}": { math: "\\mathsfbf{X}" },
        "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
        "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
        "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
        "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
        "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
        "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
        "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
        "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
        "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
        "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
        "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
        "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
        "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
        "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
        "\u{1D77B}": { math: "\\mu" },
        "\u{1D77C}": { math: "\\nu" },
        "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
        "\u{1D77E}": { math: "o" },
        "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
        "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
        "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
        "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
        "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
        "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
        "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
        "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
        "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
        "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
        "\u{1D789}": { math: "\\partial" },
        "\u{1D78A}": { math: "\\in" },
        "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
        "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
        "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
        "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
        "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
        "\u{1D790}": { math: "\\mathsfbfsl{A}" },
        "\u{1D791}": { math: "\\mathsfbfsl{B}" },
        "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
        "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
        "\u{1D794}": { math: "\\mathsfbfsl{E}" },
        "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
        "\u{1D796}": { math: "\\mathsfbfsl{H}" },
        "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D798}": { math: "\\mathsfbfsl{I}" },
        "\u{1D799}": { math: "\\mathsfbfsl{K}" },
        "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
        "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
        "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
        "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
        "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
        "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
        "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
        "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
        "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
        "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
        "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
        "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
        "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
        "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
        "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
        "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
        "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
        "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
        "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
        "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
        "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
        "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
        "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
        "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
        "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
        "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
        "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
        "\u{1D7B5}": { math: "\\mu" },
        "\u{1D7B6}": { math: "\\nu" },
        "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
        "\u{1D7B8}": { math: "o" },
        "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
        "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
        "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
        "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
        "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
        "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
        "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
        "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
        "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
        "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
        "\u{1D7C3}": { math: "\\partial" },
        "\u{1D7C4}": { math: "\\in" },
        "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
        "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
        "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
        "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
        "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
        "\u{1D7CA}": { math: "\\mbfDigamma" },
        "\u{1D7CB}": { math: "\\mbfdigamma" },
        "\u{1D7CE}": { math: "\\mathbf{0}" },
        "\u{1D7CF}": { math: "\\mathbf{1}" },
        "\u{1D7D0}": { math: "\\mathbf{2}" },
        "\u{1D7D1}": { math: "\\mathbf{3}" },
        "\u{1D7D2}": { math: "\\mathbf{4}" },
        "\u{1D7D3}": { math: "\\mathbf{5}" },
        "\u{1D7D4}": { math: "\\mathbf{6}" },
        "\u{1D7D5}": { math: "\\mathbf{7}" },
        "\u{1D7D6}": { math: "\\mathbf{8}" },
        "\u{1D7D7}": { math: "\\mathbf{9}" },
        "\u{1D7D8}": { math: "\\mathbb{0}" },
        "\u{1D7D9}": { math: "\\mathbb{1}" },
        "\u{1D7DA}": { math: "\\mathbb{2}" },
        "\u{1D7DB}": { math: "\\mathbb{3}" },
        "\u{1D7DC}": { math: "\\mathbb{4}" },
        "\u{1D7DD}": { math: "\\mathbb{5}" },
        "\u{1D7DE}": { math: "\\mathbb{6}" },
        "\u{1D7DF}": { math: "\\mathbb{7}" },
        "\u{1D7E0}": { math: "\\mathbb{8}" },
        "\u{1D7E1}": { math: "\\mathbb{9}" },
        "\u{1D7E2}": { math: "\\mathsf{0}" },
        "\u{1D7E3}": { math: "\\mathsf{1}" },
        "\u{1D7E4}": { math: "\\mathsf{2}" },
        "\u{1D7E5}": { math: "\\mathsf{3}" },
        "\u{1D7E6}": { math: "\\mathsf{4}" },
        "\u{1D7E7}": { math: "\\mathsf{5}" },
        "\u{1D7E8}": { math: "\\mathsf{6}" },
        "\u{1D7E9}": { math: "\\mathsf{7}" },
        "\u{1D7EA}": { math: "\\mathsf{8}" },
        "\u{1D7EB}": { math: "\\mathsf{9}" },
        "\u{1D7EC}": { math: "\\mathsfbf{0}" },
        "\u{1D7ED}": { math: "\\mathsfbf{1}" },
        "\u{1D7EE}": { math: "\\mathsfbf{2}" },
        "\u{1D7EF}": { math: "\\mathsfbf{3}" },
        "\u{1D7F0}": { math: "\\mathsfbf{4}" },
        "\u{1D7F1}": { math: "\\mathsfbf{5}" },
        "\u{1D7F2}": { math: "\\mathsfbf{6}" },
        "\u{1D7F3}": { math: "\\mathsfbf{7}" },
        "\u{1D7F4}": { math: "\\mathsfbf{8}" },
        "\u{1D7F5}": { math: "\\mathsfbf{9}" },
        "\u{1D7F6}": { math: "\\mathtt{0}" },
        "\u{1D7F7}": { math: "\\mathtt{1}" },
        "\u{1D7F8}": { math: "\\mathtt{2}" },
        "\u{1D7F9}": { math: "\\mathtt{3}" },
        "\u{1D7FA}": { math: "\\mathtt{4}" },
        "\u{1D7FB}": { math: "\\mathtt{5}" },
        "\u{1D7FC}": { math: "\\mathtt{6}" },
        "\u{1D7FD}": { math: "\\mathtt{7}" },
        "\u{1D7FE}": { math: "\\mathtt{8}" },
        "\u{1D7FF}": { math: "\\mathtt{9}" }
      };
    }
  });

  // node_modules/unicode2latex/tables/unicode.json
  var require_unicode = __commonJS({
    "node_modules/unicode2latex/tables/unicode.json"(exports, module) {
      module.exports = {
        "#": { math: "\\#", text: "\\#" },
        $: { math: "\\$", text: "\\$" },
        "%": { math: "\\%", text: "\\%" },
        "&": { math: "\\&", text: "\\&" },
        "/\u200B": { text: "\\slash", commandspacer: true },
        "<": { math: "<" },
        ">": { math: ">" },
        "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
        "^": { math: "\\sphat", text: "\\^" },
        _: { math: "\\_", text: "\\_" },
        "{": { math: "\\lbrace", text: "\\{" },
        "}": { math: "\\rbrace", text: "\\}" },
        "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
        "\xA0": { math: "~", space: true, text: "~" },
        "\u2000": { text: " ", space: true },
        "\u2001": { math: "\\quad", space: true },
        "\u2002": { text: "\\hspace{0.6em}", space: true },
        "\u2003": { math: "\\quad", space: true, text: "\\hspace{1em}" },
        "\u2004": { text: "\\;", space: true },
        "\u2005": { text: "\\hspace{0.25em}", space: true },
        "\u2006": { text: "\\hspace{0.166em}", space: true },
        "\u2007": { text: "\\hphantom{0}", space: true },
        "\u2008": { text: "\\hphantom{,}", space: true },
        "\u2009": { text: "\\,", space: true },
        "\u200A": { math: "\\mkern1mu", space: true },
        "\u200B": { text: "\\hspace{0pt}", space: true },
        "\u202F": { text: " ", space: true },
        "\u205F": { math: "\\:", space: true, text: "\\:" }
      };
    }
  });

  // node_modules/unicode2latex/tables/latex.json
  var require_latex = __commonJS({
    "node_modules/unicode2latex/tables/latex.json"(exports, module) {
      module.exports = {
        "\\#": "#",
        "\\$": "$",
        "\\%": "%",
        "\\&": "&",
        "\\slash": "/\u200B",
        "\\textless": "<",
        "\\textgreater": ">",
        "\\LaTeX": "LaTeX",
        "\\textbackslash": "\\",
        "\\backslash": "\\",
        "\\": "\\",
        "\\^": "^",
        "\\sphat": "^",
        "\\_": "_",
        "\\t{ia}": "i\uFE20a\uFE21",
        "{\\~ w}": "w\u0303",
        "\\{": "{",
        "\\lbrace": "{",
        "\\textbar": "|",
        "\\}": "}",
        "\\rbrace": "}",
        "\\textasciitilde": "~",
        "\\sptilde": "~",
        "\\textexclamdown": "\xA1",
        "\\textcent": "\xA2",
        "\\cent": "\xA2",
        "\\textsterling": "\xA3",
        "\\pounds": "\xA3",
        "\\textcurrency": "\xA4",
        "\\textyen": "\xA5",
        "\\yen": "\xA5",
        "\\textbrokenbar": "\xA6",
        "\\textsection": "\xA7",
        "\\textasciidieresis": "\xA8",
        "\\spddot": "\xA8",
        "\\textcopyright": "\xA9",
        "\\textordfeminine": "\xAA",
        "\\guillemotleft": "\xAB",
        "\\lnot": "\xAC",
        "\\neg": "\xAC",
        "\\-": "\xAD",
        "\\textregistered": "\xAE",
        "\\circledR": "\xAE",
        "\\textasciimacron": "\xAF",
        "\\textdegree": "\xB0",
        "^\\circ": "\xB0",
        "\\pm": "\xB1",
        "^{2}": "\xB2",
        "^{3}": "\xB3",
        "\\textasciiacute": "\xB4",
        "\\textmu": "\xB5",
        "\\textparagraph": "\xB6",
        "^{1}": "\xB9",
        "\\textordmasculine": "\xBA",
        "\\guillemotright": "\xBB",
        "\\frac{1}{4}": "\xBC",
        "\\textonequarter": "\xBC",
        "\\frac{1}{2}": "\xBD",
        "\\textonehalf": "\xBD",
        "\\frac{3}{4}": "\xBE",
        "\\textthreequarters": "\xBE",
        "\\textquestiondown": "\xBF",
        "\\`A": "\xC0",
        "\\'A": "\xC1",
        "\\^A": "\xC2",
        "\\~A": "\xC3",
        '\\"A': "\xC4",
        "\\AA": "\xC5",
        "\\r{A}": "\xC5",
        "{\\r A}": "\xC5",
        "\\AE": "\xC6",
        "\\c{C}": "\xC7",
        "\\`E": "\xC8",
        "\\'E": "\xC9",
        "\\^E": "\xCA",
        '\\"E': "\xCB",
        "\\`I": "\xCC",
        "\\'I": "\xCD",
        "\\^I": "\xCE",
        '\\"I': "\xCF",
        "\\DH": "\xD0",
        "\\~N": "\xD1",
        "\\`O": "\xD2",
        "\\'O": "\xD3",
        "\\^O": "\xD4",
        "\\~O": "\xD5",
        '\\"O': "\xD6",
        "\\texttimes": "\xD7",
        "\\times": "\xD7",
        "\\O": "\xD8",
        "\\`U": "\xD9",
        "\\'U": "\xDA",
        "\\^U": "\xDB",
        '\\"U': "\xDC",
        "\\'Y": "\xDD",
        "\\TH": "\xDE",
        "\\ss": "\xDF",
        "\\`a": "\xE0",
        "\\'a": "\xE1",
        "\\^a": "\xE2",
        "\\~a": "\xE3",
        '\\"a': "\xE4",
        "\\aa": "\xE5",
        "\\r{a}": "\xE5",
        "{\\r a}": "\xE5",
        "\\ae": "\xE6",
        "\\c{c}": "\xE7",
        "\\`e": "\xE8",
        "\\'e": "\xE9",
        "\\^e": "\xEA",
        '\\"e': "\xEB",
        "\\`i": "\xEC",
        "\\`\\i": "\xEC",
        "\\'i": "\xED",
        "\\'\\i": "\xED",
        "\\^i": "\xEE",
        "\\^\\i": "\xEE",
        '\\"i': "\xEF",
        '\\"\\i': "\xEF",
        "\\dh": "\xF0",
        "\\eth": "\xF0",
        "\\~n": "\xF1",
        "\\`o": "\xF2",
        "\\'o": "\xF3",
        "\\^o": "\xF4",
        "\\~o": "\xF5",
        '\\"o': "\xF6",
        "\\div": "\xF7",
        "\\o": "\xF8",
        "\\`u": "\xF9",
        "\\'u": "\xFA",
        "\\^u": "\xFB",
        '\\"u': "\xFC",
        "\\'y": "\xFD",
        "\\th": "\xFE",
        '\\"y': "\xFF",
        "\\=A": "\u0100",
        "\\=a": "\u0101",
        "\\u{A}": "\u0102",
        "\\u{a}": "\u0103",
        "\\k{A}": "\u0104",
        "\\k{a}": "\u0105",
        "\\'C": "\u0106",
        "\\'c": "\u0107",
        "\\^C": "\u0108",
        "\\^c": "\u0109",
        "\\.C": "\u010A",
        "\\.c": "\u010B",
        "\\v{C}": "\u010C",
        "\\v{c}": "\u010D",
        "\\v{D}": "\u010E",
        "\\v{d}": "\u010F",
        "\\DJ": "\u0110",
        "\\dj": "\u0111",
        "\\=E": "\u0112",
        "\\=e": "\u0113",
        "\\u{E}": "\u0114",
        "\\u{e}": "\u0115",
        "\\.E": "\u0116",
        "\\.e": "\u0117",
        "\\k{E}": "\u0118",
        "\\k{e}": "\u0119",
        "\\v{E}": "\u011A",
        "\\v{e}": "\u011B",
        "\\^G": "\u011C",
        "\\^g": "\u011D",
        "\\u{G}": "\u011E",
        "\\u{g}": "\u011F",
        "\\.G": "\u0120",
        "\\.g": "\u0121",
        "\\c{G}": "\u0122",
        "\\c{g}": "\u0123",
        "\\^H": "\u0124",
        "\\^h": "\u0125",
        "{\\fontencoding{LELA}\\selectfont\\char40}": "\u0126",
        "\\Elzxh": "\u0127",
        "\\~I": "\u0128",
        "\\~i": "\u0129",
        "\\=I": "\u012A",
        "\\=i": "\u012B",
        "\\u{I}": "\u012C",
        "{\\u \\i}": "\u012D",
        "\\k{I}": "\u012E",
        "\\k{i}": "\u012F",
        "\\.I": "\u0130",
        "\\i": "\u0131",
        "\\imath": "\u0131",
        "\\^J": "\u0134",
        "\\^\\j": "\u0135",
        "\\c{K}": "\u0136",
        "\\c{k}": "\u0137",
        "{\\fontencoding{LELA}\\selectfont\\char91}": "\u0138",
        "\\'L": "\u0139",
        "\\'l": "\u013A",
        "\\c{L}": "\u013B",
        "\\c{l}": "\u013C",
        "\\v{L}": "\u013D",
        "\\v{l}": "\u013E",
        "{\\fontencoding{LELA}\\selectfont\\char201}": "\u013F",
        "{\\fontencoding{LELA}\\selectfont\\char202}": "\u0140",
        "\\L": "\u0141",
        "\\l": "\u0142",
        "\\'N": "\u0143",
        "\\'n": "\u0144",
        "\\c{N}": "\u0145",
        "\\c{n}": "\u0146",
        "\\v{N}": "\u0147",
        "\\v{n}": "\u0148",
        "\\NG": "\u014A",
        "\\ng": "\u014B",
        "\\=O": "\u014C",
        "\\=o": "\u014D",
        "\\u{O}": "\u014E",
        "\\u{o}": "\u014F",
        "\\H{O}": "\u0150",
        "\\H{o}": "\u0151",
        "\\OE": "\u0152",
        "\\oe": "\u0153",
        "\\'R": "\u0154",
        "\\'r": "\u0155",
        "\\c{R}": "\u0156",
        "\\c{r}": "\u0157",
        "\\v{R}": "\u0158",
        "\\v{r}": "\u0159",
        "\\'S": "\u015A",
        "\\'s": "\u015B",
        "\\^S": "\u015C",
        "\\^s": "\u015D",
        "\\c{S}": "\u015E",
        "\\c{s}": "\u015F",
        "\\v{S}": "\u0160",
        "\\v{s}": "\u0161",
        "\\c{T}": "\u0162",
        "\\c{t}": "\u0163",
        "\\v{T}": "\u0164",
        "\\v{t}": "\u0165",
        "{\\fontencoding{LELA}\\selectfont\\char47}": "\u0166",
        "{\\fontencoding{LELA}\\selectfont\\char63}": "\u0167",
        "\\~U": "\u0168",
        "\\~u": "\u0169",
        "\\=U": "\u016A",
        "\\=u": "\u016B",
        "\\u{U}": "\u016C",
        "\\u{u}": "\u016D",
        "\\r{U}": "\u016E",
        "{\\r U}": "\u016E",
        "\\r{u}": "\u016F",
        "\\ocirc{u}": "\u016F",
        "{\\r u}": "\u016F",
        "\\H{U}": "\u0170",
        "\\H{u}": "\u0171",
        "\\k{U}": "\u0172",
        "\\k{u}": "\u0173",
        "\\^W": "\u0174",
        "\\^w": "\u0175",
        "\\^Y": "\u0176",
        "\\^y": "\u0177",
        '\\"Y': "\u0178",
        "\\'Z": "\u0179",
        "\\'z": "\u017A",
        "\\.Z": "\u017B",
        "\\.z": "\u017C",
        "\\v{Z}": "\u017D",
        "\\v{z}": "\u017E",
        "\\texthvlig": "\u0195",
        "\\textnrleg": "\u019E",
        "\\textesh": "\u01AA",
        "\\Zbar": "\u01B5",
        "{\\fontencoding{LELA}\\selectfont\\char195}": "\u01BA",
        "\\textdoublepipe": "\u01C2",
        "\\v{A}": "\u01CD",
        "\\v{a}": "\u01CE",
        "\\v{I}": "\u01CF",
        "\\v{i}": "\u01D0",
        "\\v{O}": "\u01D1",
        "\\v{o}": "\u01D2",
        "\\v{U}": "\u01D3",
        "\\v{u}": "\u01D4",
        "\\v{G}": "\u01E6",
        "\\v{g}": "\u01E7",
        "\\v{K}": "\u01E8",
        "\\v{k}": "\u01E9",
        "\\k{O}": "\u01EA",
        "\\k{o}": "\u01EB",
        "\\v{j}": "\u01F0",
        "\\'G": "\u01F4",
        "\\'g": "\u01F5",
        "\\c{E}": "\u0228",
        "\\c{e}": "\u0229",
        "\\jmath": "\u0237",
        "\\Elztrna": "\u0250",
        "\\Elztrnsa": "\u0252",
        "\\Elzopeno": "\u0254",
        "\\Elzrtld": "\u0256",
        "{\\fontencoding{LEIP}\\selectfont\\char61}": "\u0258",
        "\\Elzschwa": "\u0259",
        "\\varepsilon": "\u025B",
        "\\Elzpgamma": "\u0263",
        "\\Elzpbgam": "\u0264",
        "\\Elztrnh": "\u0265",
        "\\Elzbtdl": "\u026C",
        "\\Elzrtll": "\u026D",
        "\\Elztrnm": "\u026F",
        "\\Elztrnmlr": "\u0270",
        "\\Elzltlmr": "\u0271",
        "\\Elzltln": "\u0272",
        "\\Elzrtln": "\u0273",
        "\\Elzclomeg": "\u0277",
        "\\textphi": "\u0278",
        "\\Elztrnr": "\u0279",
        "\\Elztrnrl": "\u027A",
        "\\Elzrttrnr": "\u027B",
        "\\Elzrl": "\u027C",
        "\\Elzrtlr": "\u027D",
        "\\Elzfhr": "\u027E",
        "{\\fontencoding{LEIP}\\selectfont\\char202}": "\u027F",
        "\\Elzrtls": "\u0282",
        "\\Elzesh": "\u0283",
        "\\Elztrnt": "\u0287",
        "\\Elzrtlt": "\u0288",
        "\\Elzpupsil": "\u028A",
        "\\Elzpscrv": "\u028B",
        "\\Elzinvv": "\u028C",
        "\\Elzinvw": "\u028D",
        "\\Elztrny": "\u028E",
        "\\Elzrtlz": "\u0290",
        "\\Elzyogh": "\u0292",
        "\\Elzglst": "\u0294",
        "\\Elzreglst": "\u0295",
        "\\Elzinglst": "\u0296",
        "\\textturnk": "\u029E",
        "\\Elzdyogh": "\u02A4",
        "\\Elztesh": "\u02A7",
        "\\textsuperscript{h}": "\u02B0",
        "^{h}": "\u02B0",
        "\\textsuperscript{j}": "\u02B2",
        "^{j}": "\u02B2",
        "\\textsuperscript{r}": "\u02B3",
        "^{r}": "\u02B3",
        "\\textsuperscript{w}": "\u02B7",
        "^{w}": "\u02B7",
        "\\textsuperscript{y}": "\u02B8",
        "^{y}": "\u02B8",
        "\\lasp": "\u02BF",
        "\\textasciicircum": "\u02C6",
        "\\textasciicaron": "\u02C7",
        "\\Elzverts": "\u02C8",
        "\\Elzverti": "\u02CC",
        "\\Elzlmrk": "\u02D0",
        "\\Elzhlmrk": "\u02D1",
        "\\Elzsbrhr": "\u02D2",
        "\\Elzsblhr": "\u02D3",
        "\\Elzrais": "\u02D4",
        "\\Elzlow": "\u02D5",
        "\\textasciibreve": "\u02D8",
        "\\textperiodcentered": "\u02D9",
        "\\texttildelow": "\u02DC",
        "\\textsuperscript{l}": "\u02E1",
        "^{l}": "\u02E1",
        "\\textsuperscript{s}": "\u02E2",
        "^{s}": "\u02E2",
        "\\textsuperscript{x}": "\u02E3",
        "^{x}": "\u02E3",
        "\\tone{55}": "\u02E5",
        "\\tone{44}": "\u02E6",
        "\\tone{33}": "\u02E7",
        "\\tone{22}": "\u02E8",
        "\\tone{11}": "\u02E9",
        "\\`": "\u0300",
        "\\grave": "\u0300",
        "\\textgravemacron": "\u0300\u0304",
        "\\textgravedot": "\u0300\u0307",
        "\\'": "\u0301",
        "\\acute": "\u0301",
        "\\textacutemacron": "\u0301\u0304",
        "\\textacutewedge": "\u0301\u030C",
        "\\hat": "\u0302",
        "\\textcircumdot": "\u0302\u0307",
        "\\~": "\u0303",
        "\\tilde": "\u0303",
        "\\texttildedot": "\u0303\u0307",
        "\\=": "\u0304",
        "\\bar": "\u0304",
        "\\overline": "\u0305",
        "\\u": "\u0306",
        "\\breve": "\u0306",
        "\\textbrevemacron": "\u0306\u0304",
        "\\.": "\u0307",
        "\\dot": "\u0307",
        "\\textdotacute": "\u0307\u0301",
        '\\"': "\u0308",
        "\\ddot": "\u0308",
        "\\ovhook": "\u0309",
        "\\r": "\u030A",
        "\\mathring": "\u030A",
        "\\textringmacron": "\u030A\u0304",
        "\\H": "\u030B",
        "\\check": "\u030C",
        "\\v": "\u030C",
        "\\textvbaraccent": "\u030D",
        "\\textdoublevbaraccent": "\u030E",
        "\\textdoublegrave": "\u030F",
        "\\textdotbreve": "\u0310",
        "{\\fontencoding{LECO}\\selectfont\\char177}": "\u0311",
        "\\oturnedcomma": "\u0312",
        "\\ocommatopright": "\u0315",
        "\\textsubgrave": "\u0316",
        "\\textadvancing": "\u0318",
        "\\textretracting": "\u0319",
        "\\droang": "\u031A",
        "\\textcorner": "\u031A",
        "\\textsublhalfring": "\u031C",
        "\\textraising": "\u031D",
        "\\textlowering": "\u031E",
        "\\textsubplus": "\u031F",
        "\\Elzpalh": "\u0321",
        "\\Elzrh": "\u0322",
        "\\d": "\u0323",
        "\\textsubumlaut": "\u0324",
        "\\textsubring": "\u0325",
        "\\c": "\u0327",
        "\\k": "\u0328",
        "\\textsyllabic": "\u0329",
        "\\Elzsbbrg": "\u032A",
        "\\textsubbridge": "\u032A",
        "{\\fontencoding{LECO}\\selectfont\\char203}": "\u032B",
        "\\textsubwedge": "\u032C",
        "\\textsubarch": "\u032F",
        "\\utilde": "\u0330",
        "\\textsubtilde": "\u0330",
        "\\textsubbar": "\u0331",
        "\\underbar": "\u0331",
        "\\underline": "\u0332",
        "\\textsuperimposetilde": "\u0334",
        "\\Elzxl": "\u0335",
        "\\Elzbar": "\u0336",
        "{\\fontencoding{LECO}\\selectfont\\char215}": "\u0337",
        "\\not": "\u0338",
        "\\textsubrhalfring": "\u0339",
        "\\textinvsubbridge": "\u033A",
        "\\textsubsquare": "\u033B",
        "\\textseagull": "\u033C",
        "\\textovercross": "\u033D",
        "{\\fontencoding{LECO}\\selectfont\\char225}": "\u0361",
        "\\'H": "\u0389",
        "{\\'{}I}": "\u038A",
        "{\\'{}O}": "\u038C",
        "\\mathrm{'Y}": "\u038E",
        "\\mathrm{'\\Omega}": "\u038F",
        "\\acute{\\ddot{\\iota}}": "\u0390",
        "\\Gamma": "\u0393",
        "\\varGamma": "\u0393",
        "\\Delta": "\u0394",
        "\\Theta": "\u0398",
        "\\Lambda": "\u039B",
        "\\Xi": "\u039E",
        "\\Pi": "\u03A0",
        "\\Sigma": "\u03A3",
        "\\Upsilon": "\u03A5",
        "\\Phi": "\u03A6",
        "\\Psi": "\u03A8",
        "\\Omega": "\u03A9",
        "\\mathrm{\\ddot{I}}": "\u03AA",
        "\\mathrm{\\ddot{Y}}": "\u03AB",
        "{\\'$\\alpha$}": "\u03AC",
        "\\acute{\\epsilon}": "\u03AD",
        "\\acute{\\eta}": "\u03AE",
        "\\acute{\\iota}": "\u03AF",
        "\\acute{\\ddot{\\upsilon}}": "\u03B0",
        "\\alpha": "\u03B1",
        "\\beta": "\u03B2",
        "\\gamma": "\u03B3",
        "\\delta": "\u03B4",
        "\\zeta": "\u03B6",
        "\\eta": "\u03B7",
        "\\texttheta": "\u03B8",
        "\\theta": "\u03B8",
        "\\iota": "\u03B9",
        "\\kappa": "\u03BA",
        "\\lambda": "\u03BB",
        "\\nu": "\u03BD",
        "\\xi": "\u03BE",
        "\\pi": "\u03C0",
        "\\rho": "\u03C1",
        "\\varsigma": "\u03C2",
        "\\sigma": "\u03C3",
        "\\tau": "\u03C4",
        "\\upsilon": "\u03C5",
        "\\varphi": "\u03C6",
        "\\chi": "\u03C7",
        "\\psi": "\u03C8",
        "\\omega": "\u03C9",
        "\\ddot{\\iota}": "\u03CA",
        "\\ddot{\\upsilon}": "\u03CB",
        "\\acute{\\upsilon}": "\u03CD",
        "\\acute{\\omega}": "\u03CE",
        "\\Pisymbol{ppi022}{87}": "\u03D0",
        "\\varbeta": "\u03D0",
        "\\textvartheta": "\u03D1",
        "\\vartheta": "\u03D1",
        "\\phi": "\u03D5",
        "\\varpi": "\u03D6",
        "\\Qoppa": "\u03D8",
        "\\qoppa": "\u03D9",
        "\\Stigma": "\u03DA",
        "\\stigma": "\u03DB",
        "\\Digamma": "\u03DC",
        "\\digamma": "\u03DD",
        "\\Koppa": "\u03DE",
        "\\koppa": "\u03DF",
        "\\Sampi": "\u03E0",
        "\\sampi": "\u03E1",
        "\\varkappa": "\u03F0",
        "\\varrho": "\u03F1",
        "\\textTheta": "\u03F4",
        "\\upvarTheta": "\u03F4",
        "\\epsilon": "\u03F5",
        "\\backepsilon": "\u03F6",
        "\\cyrchar\\CYRYO": "\u0401",
        "\\cyrchar\\CYRDJE": "\u0402",
        "\\cyrchar{\\'\\CYRG}": "\u0403",
        "\\cyrchar\\CYRIE": "\u0404",
        "\\cyrchar\\CYRDZE": "\u0405",
        "\\cyrchar\\CYRII": "\u0406",
        "\\cyrchar\\CYRYI": "\u0407",
        "\\cyrchar\\CYRJE": "\u0408",
        "\\cyrchar\\CYRLJE": "\u0409",
        "\\cyrchar\\CYRNJE": "\u040A",
        "\\cyrchar\\CYRTSHE": "\u040B",
        "\\cyrchar{\\'\\CYRK}": "\u040C",
        "\\cyrchar\\CYRUSHRT": "\u040E",
        "\\cyrchar\\CYRDZHE": "\u040F",
        "\\cyrchar\\CYRA": "\u0410",
        "\\cyrchar\\CYRB": "\u0411",
        "\\cyrchar\\CYRV": "\u0412",
        "\\cyrchar\\CYRG": "\u0413",
        "\\cyrchar\\CYRD": "\u0414",
        "\\cyrchar\\CYRE": "\u0415",
        "\\cyrchar\\CYRZH": "\u0416",
        "\\cyrchar\\CYRZ": "\u0417",
        "\\cyrchar\\CYRI": "\u0418",
        "\\cyrchar\\CYRISHRT": "\u0419",
        "\\cyrchar\\CYRK": "\u041A",
        "\\cyrchar\\CYRL": "\u041B",
        "\\cyrchar\\CYRM": "\u041C",
        "\\cyrchar\\CYRN": "\u041D",
        "\\cyrchar\\CYRO": "\u041E",
        "\\cyrchar\\CYRP": "\u041F",
        "\\cyrchar\\CYRR": "\u0420",
        "\\cyrchar\\CYRS": "\u0421",
        "\\cyrchar\\CYRT": "\u0422",
        "\\cyrchar\\CYRU": "\u0423",
        "\\cyrchar\\CYRF": "\u0424",
        "\\cyrchar\\CYRH": "\u0425",
        "\\cyrchar\\CYRC": "\u0426",
        "\\cyrchar\\CYRCH": "\u0427",
        "\\cyrchar\\CYRSH": "\u0428",
        "\\cyrchar\\CYRSHCH": "\u0429",
        "\\cyrchar\\CYRHRDSN": "\u042A",
        "\\bud": "\u042A",
        "\\cdprime": "\u042A",
        "\\cyrchar\\CYRERY": "\u042B",
        "\\cyrchar\\CYRSFTSN": "\u042C",
        "\\cprime": "\u042C",
        "\\cyrchar\\CYREREV": "\u042D",
        "\\cyrchar\\CYRYU": "\u042E",
        "\\cyrchar\\CYRYA": "\u042F",
        "\\cyrchar\\cyra": "\u0430",
        "\\cyrchar\\cyrb": "\u0431",
        "\\cyrchar\\cyrv": "\u0432",
        "\\cyrchar\\cyrg": "\u0433",
        "\\cyrchar\\cyrd": "\u0434",
        "\\cyrchar\\cyre": "\u0435",
        "\\cyrchar\\cyrzh": "\u0436",
        "\\cyrchar\\cyrz": "\u0437",
        "\\cyrchar\\cyri": "\u0438",
        "\\cyrchar\\cyrishrt": "\u0439",
        "\\cyrchar\\cyrk": "\u043A",
        "\\cyrchar\\cyrl": "\u043B",
        "\\cyrchar\\cyrm": "\u043C",
        "\\cyrchar\\cyrn": "\u043D",
        "\\cyrchar\\cyro": "\u043E",
        "\\cyrchar\\cyrp": "\u043F",
        "\\cyrchar\\cyrr": "\u0440",
        "\\cyrchar\\cyrs": "\u0441",
        "\\cyrchar\\cyrt": "\u0442",
        "\\cyrchar\\cyru": "\u0443",
        "\\cyrchar\\cyrf": "\u0444",
        "\\cyrchar\\cyrh": "\u0445",
        "\\cyrchar\\cyrc": "\u0446",
        "\\cyrchar\\cyrch": "\u0447",
        "\\cyrchar\\cyrsh": "\u0448",
        "\\cyrchar\\cyrshch": "\u0449",
        "\\cyrchar\\cyrhrdsn": "\u044A",
        "\\cyrchar\\cyrery": "\u044B",
        "\\cyrchar\\cyrsftsn": "\u044C",
        "\\cyrchar\\cyrerev": "\u044D",
        "\\cyrchar\\cyryu": "\u044E",
        "\\cyrchar\\cyrya": "\u044F",
        "\\cyrchar\\cyryo": "\u0451",
        "\\cyrchar\\cyrdje": "\u0452",
        "\\cyrchar{\\'\\cyrg}": "\u0453",
        "\\cyrchar\\cyrie": "\u0454",
        "\\cyrchar\\cyrdze": "\u0455",
        "\\cyrchar\\cyrii": "\u0456",
        "\\cyrchar\\cyryi": "\u0457",
        "\\cyrchar\\cyrje": "\u0458",
        "\\cyrchar\\cyrlje": "\u0459",
        "\\cyrchar\\cyrnje": "\u045A",
        "\\cyrchar\\cyrtshe": "\u045B",
        "\\cyrchar{\\'\\cyrk}": "\u045C",
        "\\cyrchar\\cyrushrt": "\u045E",
        "\\cyrchar\\cyrdzhe": "\u045F",
        "\\cyrchar\\CYROMEGA": "\u0460",
        "\\cyrchar\\cyromega": "\u0461",
        "\\cyrchar\\CYRYAT": "\u0462",
        "\\cyrchar\\CYRIOTE": "\u0464",
        "\\cyrchar\\cyriote": "\u0465",
        "\\cyrchar\\CYRLYUS": "\u0466",
        "\\cyrchar\\cyrlyus": "\u0467",
        "\\cyrchar\\CYRIOTLYUS": "\u0468",
        "\\cyrchar\\cyriotlyus": "\u0469",
        "\\cyrchar\\CYRBYUS": "\u046A",
        "\\cyrchar\\CYRIOTBYUS": "\u046C",
        "\\cyrchar\\cyriotbyus": "\u046D",
        "\\cyrchar\\CYRKSI": "\u046E",
        "\\cyrchar\\cyrksi": "\u046F",
        "\\cyrchar\\CYRPSI": "\u0470",
        "\\cyrchar\\cyrpsi": "\u0471",
        "\\cyrchar\\CYRFITA": "\u0472",
        "\\cyrchar\\CYRIZH": "\u0474",
        "\\cyrchar\\CYRUK": "\u0478",
        "\\cyrchar\\cyruk": "\u0479",
        "\\cyrchar\\CYROMEGARND": "\u047A",
        "\\cyrchar\\cyromegarnd": "\u047B",
        "\\cyrchar\\CYROMEGATITLO": "\u047C",
        "\\cyrchar\\cyromegatitlo": "\u047D",
        "\\cyrchar\\CYROT": "\u047E",
        "\\cyrchar\\cyrot": "\u047F",
        "\\cyrchar\\CYRKOPPA": "\u0480",
        "\\cyrchar\\cyrkoppa": "\u0481",
        "\\cyrchar\\cyrthousands": "\u0482",
        "\\cyrchar\\cyrhundredthousands": "\u0488",
        "\\cyrchar\\cyrmillions": "\u0489",
        "\\cyrchar\\CYRSEMISFTSN": "\u048C",
        "\\cyrchar\\cyrsemisftsn": "\u048D",
        "\\cyrchar\\CYRRTICK": "\u048E",
        "\\cyrchar\\cyrrtick": "\u048F",
        "\\cyrchar\\CYRGUP": "\u0490",
        "\\cyrchar\\cyrgup": "\u0491",
        "\\cyrchar\\CYRGHCRS": "\u0492",
        "\\cyrchar\\cyrghcrs": "\u0493",
        "\\cyrchar\\CYRGHK": "\u0494",
        "\\cyrchar\\cyrghk": "\u0495",
        "\\cyrchar\\CYRZHDSC": "\u0496",
        "\\cyrchar\\cyrzhdsc": "\u0497",
        "\\cyrchar\\CYRZDSC": "\u0498",
        "\\cyrchar\\cyrzdsc": "\u0499",
        "\\cyrchar\\CYRKDSC": "\u049A",
        "\\cyrchar\\cyrkdsc": "\u049B",
        "\\cyrchar\\CYRKVCRS": "\u049C",
        "\\cyrchar\\cyrkvcrs": "\u049D",
        "\\cyrchar\\CYRKHCRS": "\u049E",
        "\\cyrchar\\cyrkhcrs": "\u049F",
        "\\cyrchar\\CYRKBEAK": "\u04A0",
        "\\cyrchar\\cyrkbeak": "\u04A1",
        "\\cyrchar\\CYRNDSC": "\u04A2",
        "\\cyrchar\\cyrndsc": "\u04A3",
        "\\cyrchar\\CYRNG": "\u04A4",
        "\\cyrchar\\cyrng": "\u04A5",
        "\\cyrchar\\CYRPHK": "\u04A6",
        "\\cyrchar\\cyrphk": "\u04A7",
        "\\cyrchar\\CYRABHHA": "\u04A8",
        "\\cyrchar\\cyrabhha": "\u04A9",
        "\\cyrchar\\CYRSDSC": "\u04AA",
        "\\cyrchar\\cyrsdsc": "\u04AB",
        "\\cyrchar\\CYRTDSC": "\u04AC",
        "\\cyrchar\\cyrtdsc": "\u04AD",
        "\\cyrchar\\CYRY": "\u04AE",
        "\\cyrchar\\cyry": "\u04AF",
        "\\cyrchar\\CYRYHCRS": "\u04B0",
        "\\cyrchar\\cyryhcrs": "\u04B1",
        "\\cyrchar\\CYRHDSC": "\u04B2",
        "\\cyrchar\\cyrhdsc": "\u04B3",
        "\\cyrchar\\CYRTETSE": "\u04B4",
        "\\cyrchar\\cyrtetse": "\u04B5",
        "\\cyrchar\\CYRCHRDSC": "\u04B6",
        "\\cyrchar\\cyrchrdsc": "\u04B7",
        "\\cyrchar\\CYRCHVCRS": "\u04B8",
        "\\cyrchar\\cyrchvcrs": "\u04B9",
        "\\cyrchar\\CYRSHHA": "\u04BA",
        "\\cyrchar\\cyrshha": "\u04BB",
        "\\cyrchar\\CYRABHCH": "\u04BC",
        "\\cyrchar\\cyrabhch": "\u04BD",
        "\\cyrchar\\CYRABHCHDSC": "\u04BE",
        "\\cyrchar\\cyrabhchdsc": "\u04BF",
        "\\cyrchar\\CYRpalochka": "\u04C0",
        "\\cyrchar\\CYRKHK": "\u04C3",
        "\\cyrchar\\cyrkhk": "\u04C4",
        "\\cyrchar\\CYRNHK": "\u04C7",
        "\\cyrchar\\cyrnhk": "\u04C8",
        "\\cyrchar\\CYRCHLDSC": "\u04CB",
        "\\cyrchar\\cyrchldsc": "\u04CC",
        "\\cyrchar\\CYRAE": "\u04D4",
        "\\cyrchar\\cyrae": "\u04D5",
        "\\cyrchar\\CYRSCHWA": "\u04D8",
        "\\cyrchar\\cyrschwa": "\u04D9",
        "\\cyrchar\\CYRABHDZE": "\u04E0",
        "\\cyrchar\\cyrabhdze": "\u04E1",
        "\\cyrchar\\CYROTLD": "\u04E8",
        "\\cyrchar\\cyrotld": "\u04E9",
        "\\\\backslash": "\u0871",
        "\\textsuperscript{a}": "\u1D43",
        "^{a}": "\u1D43",
        "\\textsuperscript{b}": "\u1D47",
        "^{b}": "\u1D47",
        "\\textsuperscript{d}": "\u1D48",
        "^{d}": "\u1D48",
        "\\textsuperscript{e}": "\u1D49",
        "^{e}": "\u1D49",
        "\\textsuperscript{g}": "\u1D4D",
        "^{g}": "\u1D4D",
        "\\textsuperscript{k}": "\u1D4F",
        "^{k}": "\u1D4F",
        "\\textsuperscript{m}": "\u1D50",
        "^{m}": "\u1D50",
        "\\textsuperscript{o}": "\u1D52",
        "^{o}": "\u1D52",
        "\\textsuperscript{p}": "\u1D56",
        "^{p}": "\u1D56",
        "\\textsuperscript{t}": "\u1D57",
        "^{t}": "\u1D57",
        "\\textsuperscript{u}": "\u1D58",
        "^{u}": "\u1D58",
        "\\textsuperscript{v}": "\u1D5B",
        "^{v}": "\u1D5B",
        "\\textsuperscript{c}": "\u1D9C",
        "^{c}": "\u1D9C",
        "\\textsuperscript{f}": "\u1DA0",
        "^{f}": "\u1DA0",
        "\\textsuperscript{z}": "\u1DBB",
        "^{z}": "\u1DBB",
        "\\.B": "\u1E02",
        "\\.b": "\u1E03",
        "\\d{B}": "\u1E04",
        "\\d{b}": "\u1E05",
        "\\b{B}": "\u1E06",
        "\\b{b}": "\u1E07",
        "\\.D": "\u1E0A",
        "\\.d": "\u1E0B",
        "\\d{D}": "\u1E0C",
        "\\d{d}": "\u1E0D",
        "\\b{D}": "\u1E0E",
        "\\b{d}": "\u1E0F",
        "\\c{D}": "\u1E10",
        "\\c{d}": "\u1E11",
        "\\c{\\u{E}}": "\u1E1C",
        "\\c{\\u{e}}": "\u1E1D",
        "\\.F": "\u1E1E",
        "\\.f": "\u1E1F",
        "\\=G": "\u1E20",
        "\\=g": "\u1E21",
        "\\.H": "\u1E22",
        "\\.h": "\u1E23",
        "\\d{H}": "\u1E24",
        "\\d{h}": "\u1E25",
        '\\"H': "\u1E26",
        '\\"h': "\u1E27",
        "\\c{H}": "\u1E28",
        "\\c{h}": "\u1E29",
        "\\'K": "\u1E30",
        "\\'k": "\u1E31",
        "\\d{K}": "\u1E32",
        "\\d{k}": "\u1E33",
        "\\b{K}": "\u1E34",
        "\\b{k}": "\u1E35",
        "\\d{L}": "\u1E36",
        "\\d{l}": "\u1E37",
        "\\b{L}": "\u1E3A",
        "\\b{l}": "\u1E3B",
        "\\'M": "\u1E3E",
        "\\'m": "\u1E3F",
        "\\.M": "\u1E40",
        "\\.m": "\u1E41",
        "\\d{M}": "\u1E42",
        "\\d{m}": "\u1E43",
        "\\.N": "\u1E44",
        "\\.n": "\u1E45",
        "\\d{N}": "\u1E46",
        "\\d{n}": "\u1E47",
        "\\b{N}": "\u1E48",
        "\\b{n}": "\u1E49",
        "\\'P": "\u1E54",
        "\\'p": "\u1E55",
        "\\.P": "\u1E56",
        "\\.p": "\u1E57",
        "\\.R": "\u1E58",
        "\\.r": "\u1E59",
        "\\d{R}": "\u1E5A",
        "\\d{r}": "\u1E5B",
        "\\b{R}": "\u1E5E",
        "\\b{r}": "\u1E5F",
        "\\.S": "\u1E60",
        "\\.s": "\u1E61",
        "\\d{S}": "\u1E62",
        "\\d{s}": "\u1E63",
        "\\.T": "\u1E6A",
        "\\.t": "\u1E6B",
        "\\d{T}": "\u1E6C",
        "\\d{t}": "\u1E6D",
        "\\b{T}": "\u1E6E",
        "\\b{t}": "\u1E6F",
        "\\~V": "\u1E7C",
        "\\~v": "\u1E7D",
        "\\d{V}": "\u1E7E",
        "\\d{v}": "\u1E7F",
        "\\`W": "\u1E80",
        "\\`w": "\u1E81",
        "\\'W": "\u1E82",
        "\\'w": "\u1E83",
        '\\"W': "\u1E84",
        '\\"w': "\u1E85",
        "\\.W": "\u1E86",
        "\\.w": "\u1E87",
        "\\d{W}": "\u1E88",
        "\\d{w}": "\u1E89",
        "\\.X": "\u1E8A",
        "\\.x": "\u1E8B",
        '\\"X': "\u1E8C",
        '\\"x': "\u1E8D",
        "\\.Y": "\u1E8E",
        "\\.y": "\u1E8F",
        "\\^Z": "\u1E90",
        "\\^z": "\u1E91",
        "\\d{Z}": "\u1E92",
        "\\d{z}": "\u1E93",
        "\\b{Z}": "\u1E94",
        "\\b{z}": "\u1E95",
        "\\b{h}": "\u1E96",
        '\\"t': "\u1E97",
        "\\r{w}": "\u1E98",
        "\\r{y}": "\u1E99",
        "\\d{A}": "\u1EA0",
        "\\d{a}": "\u1EA1",
        "\\d{E}": "\u1EB8",
        "\\d{e}": "\u1EB9",
        "\\~E": "\u1EBC",
        "\\~e": "\u1EBD",
        "\\d{I}": "\u1ECA",
        "\\d{i}": "\u1ECB",
        "\\d{O}": "\u1ECC",
        "\\d{o}": "\u1ECD",
        "\\d{U}": "\u1EE4",
        "\\d{u}": "\u1EE5",
        "\\`Y": "\u1EF2",
        "\\`y": "\u1EF3",
        "\\d{Y}": "\u1EF4",
        "\\d{y}": "\u1EF5",
        "\\~Y": "\u1EF8",
        "\\~y": "\u1EF9",
        "\\hspace{0.6em}": "\u2002",
        "\\hspace{1em}": "\u2003",
        "\\quad": "\u2003",
        "\\;": "\u2004",
        "\\hspace{0.25em}": "\u2005",
        "\\hspace{0.166em}": "\u2006",
        "\\hphantom{0}": "\u2007",
        "\\hphantom{,}": "\u2008",
        "\\,": "\u2009",
        "\\mkern1mu": "\u200A",
        "\\hspace{0pt}": "\u200B",
        "{\\aftergroup\\ignorespaces}": "\u200C",
        "\\textendash": "\u2013",
        "\\textemdash": "\u2014",
        "\\rule{1em}{1pt}": "\u2015",
        "\\horizbar": "\u2015",
        "\\Vert": "\u2016",
        "\\twolowline": "\u2017",
        "\\textquoteleft": "\u2018",
        "\\textquoteright": "\u2019",
        "\\Elzreapos": "\u201B",
        "\\textquotedblleft": "\u201C",
        "\\textquotedblright": "\u201D",
        "\\quotedblbase": "\u201F",
        "\\textdagger": "\u2020",
        "\\dagger": "\u2020",
        "\\textdaggerdbl": "\u2021",
        "\\ddagger": "\u2021",
        "\\textbullet": "\u2022",
        "\\enleadertwodots": "\u2025",
        "\\ldots": "\u2026",
        "\\textperthousand": "\u2030",
        "\\textpertenthousand": "\u2031",
        "{'}": "\u2032",
        "{''}": "\u2033",
        "{'''}": "\u2034",
        "\\backprime": "\u2035",
        "\\backdprime": "\u2036",
        "\\backtrprime": "\u2037",
        "\\caretinsert": "\u2038",
        "\\guilsinglleft": "\u2039",
        "\\guilsinglright": "\u203A",
        "\\Exclam": "\u203C",
        "\\hyphenbullet": "\u2043",
        "\\fracslash": "\u2044",
        "\\Question": "\u2047",
        "\\closure": "\u2050",
        "\\:": "\u205F",
        "\\nolinebreak": "\u2060",
        "^{0}": "\u2070",
        "\\textsuperscript{i}": "\u2071",
        "^{i}": "\u2071",
        "^{4}": "\u2074",
        "^{5}": "\u2075",
        "^{6}": "\u2076",
        "^{7}": "\u2077",
        "^{8}": "\u2078",
        "^{9}": "\u2079",
        "^{+}": "\u207A",
        "^{-}": "\u207B",
        "^{=}": "\u207C",
        "^{(}": "\u207D",
        "^{)}": "\u207E",
        "\\textsuperscript{n}": "\u207F",
        "^{n}": "\u207F",
        "_{0}": "\u2080",
        "_{1}": "\u2081",
        "_{2}": "\u2082",
        "_{3}": "\u2083",
        "_{4}": "\u2084",
        "_{5}": "\u2085",
        "_{6}": "\u2086",
        "_{7}": "\u2087",
        "_{8}": "\u2088",
        "_{9}": "\u2089",
        "_{+}": "\u208A",
        "_{-}": "\u208B",
        "_{=}": "\u208C",
        "_{(}": "\u208D",
        "_{)}": "\u208E",
        "\\textsubscript{a}": "\u2090",
        "_{a}": "\u2090",
        "\\textsubscript{e}": "\u2091",
        "_{e}": "\u2091",
        "\\textsubscript{o}": "\u2092",
        "_{o}": "\u2092",
        "\\textsubscript{x}": "\u2093",
        "_{x}": "\u2093",
        "\\textsubscript{\\textschwa}": "\u2094",
        "\\textsubscript{h}": "\u2095",
        "_{h}": "\u2095",
        "\\textsubscript{k}": "\u2096",
        "_{k}": "\u2096",
        "\\textsubscript{l}": "\u2097",
        "_{l}": "\u2097",
        "\\textsubscript{m}": "\u2098",
        "_{m}": "\u2098",
        "\\textsubscript{n}": "\u2099",
        "_{n}": "\u2099",
        "\\textsubscript{p}": "\u209A",
        "_{p}": "\u209A",
        "\\textsubscript{s}": "\u209B",
        "_{s}": "\u209B",
        "\\textsubscript{t}": "\u209C",
        "_{t}": "\u209C",
        "\\ensuremath{\\Elzpes}": "\u20A7",
        "\\texteuro": "\u20AC",
        "\\euro": "\u20AC",
        "\\lvec": "\u20D0",
        "\\vertoverlay": "\u20D2",
        "\\LVec": "\u20D6",
        "\\vec": "\u20D7",
        "\\dddot": "\u20DB",
        "\\ddddot": "\u20DC",
        "\\enclosecircle": "\u20DD",
        "\\enclosesquare": "\u20DE",
        "\\enclosediamond": "\u20DF",
        "\\overleftrightarrow": "\u20E1",
        "\\enclosetriangle": "\u20E4",
        "\\annuity": "\u20E7",
        "\\threeunderdot": "\u20E8",
        "\\widebridgeabove": "\u20E9",
        "\\underrightharpoondown": "\u20EC",
        "\\underleftharpoondown": "\u20ED",
        "\\underleftarrow": "\u20EE",
        "\\underrightarrow": "\u20EF",
        "\\asteraccent": "\u20F0",
        "\\mathbb{C}": "\u2102",
        "\\textcelsius": "\u2103",
        "\\Euler": "\u2107",
        "\\mathscr{g}": "\u210A",
        "\\mathscr{H}": "\u210B",
        "\\mathfrak{H}": "\u210C",
        "\\mathbb{H}": "\u210D",
        "\\Planckconst": "\u210E",
        "\\hslash": "\u210F",
        "\\mathscr{I}": "\u2110",
        "\\mathfrak{I}": "\u2111",
        "\\mathscr{L}": "\u2112",
        "\\mathscr{l}": "\u2113",
        "\\mathbb{N}": "\u2115",
        "\\cyrchar\\textnumero": "\u2116",
        "\\textcircledP": "\u2117",
        "\\wp": "\u2118",
        "\\mathbb{P}": "\u2119",
        "\\mathbb{Q}": "\u211A",
        "\\mathscr{R}": "\u211B",
        "\\mathfrak{R}": "\u211C",
        "\\mathbb{R}": "\u211D",
        "\\Elzxrat": "\u211E",
        "\\textservicemark": "\u2120",
        "\\texttrademark": "\u2122",
        "\\mathbb{Z}": "\u2124",
        "\\mho": "\u2127",
        "\\mathfrak{Z}": "\u2128",
        "\\textriota": "\u2129",
        "\\Angstroem": "\u212B",
        "\\mathscr{B}": "\u212C",
        "\\mathfrak{C}": "\u212D",
        "\\textestimated": "\u212E",
        "\\mathscr{e}": "\u212F",
        "\\mathscr{E}": "\u2130",
        "\\mathscr{F}": "\u2131",
        "\\Finv": "\u2132",
        "\\mathscr{M}": "\u2133",
        "\\mathscr{o}": "\u2134",
        "\\aleph": "\u2135",
        "\\beth": "\u2136",
        "\\gimel": "\u2137",
        "\\daleth": "\u2138",
        "\\mathbb{\\pi}": "\u213C",
        "\\mathbb{\\gamma}": "\u213D",
        "\\mathbb{\\Gamma}": "\u213E",
        "\\mathbb{\\Pi}": "\u213F",
        "\\mathbb{\\Sigma}": "\u2140",
        "\\Game": "\u2141",
        "\\sansLturned": "\u2142",
        "\\sansLmirrored": "\u2143",
        "\\Yup": "\u2144",
        "\\CapitalDifferentialD": "\u2145",
        "\\DifferentialD": "\u2146",
        "\\ExponetialE": "\u2147",
        "\\ComplexI": "\u2148",
        "\\ComplexJ": "\u2149",
        "\\PropertyLine": "\u214A",
        "\\invamp": "\u214B",
        "\\frac{1}{7}": "\u2150",
        "\\textfrac{1}{7}": "\u2150",
        "\\frac{1}{9}": "\u2151",
        "\\textfrac{1}{9}": "\u2151",
        "\\frac{1}{10}": "\u2152",
        "\\textfrac{1}{10}": "\u2152",
        "\\frac{1}{3}": "\u2153",
        "\\textfrac{1}{3}": "\u2153",
        "\\frac{2}{3}": "\u2154",
        "\\textfrac{2}{3}": "\u2154",
        "\\frac{1}{5}": "\u2155",
        "\\textfrac{1}{5}": "\u2155",
        "\\frac{2}{5}": "\u2156",
        "\\textfrac{2}{5}": "\u2156",
        "\\frac{3}{5}": "\u2157",
        "\\textfrac{3}{5}": "\u2157",
        "\\frac{4}{5}": "\u2158",
        "\\textfrac{4}{5}": "\u2158",
        "\\frac{1}{6}": "\u2159",
        "\\textfrac{1}{6}": "\u2159",
        "\\frac{5}{6}": "\u215A",
        "\\textfrac{5}{6}": "\u215A",
        "\\frac{1}{8}": "\u215B",
        "\\textfrac{1}{8}": "\u215B",
        "\\frac{3}{8}": "\u215C",
        "\\textfrac{3}{8}": "\u215C",
        "\\frac{5}{8}": "\u215D",
        "\\textfrac{5}{8}": "\u215D",
        "\\frac{7}{8}": "\u215E",
        "\\textfrac{7}{8}": "\u215E",
        "\\frac{1}": "\u215F",
        "\\textfrac{1}": "\u215F",
        "\\frac{0}{3}": "\u2189",
        "\\textfrac{0}{3}": "\u2189",
        "\\leftarrow": "\u2190",
        "\\uparrow": "\u2191",
        "\\textrightarrow": "\u2192",
        "\\rightarrow": "\u2192",
        "\\to": "\u2192",
        "\\downarrow": "\u2193",
        "\\leftrightarrow": "\u2194",
        "\\updownarrow": "\u2195",
        "\\nwarrow": "\u2196",
        "\\nearrow": "\u2197",
        "\\searrow": "\u2198",
        "\\swarrow": "\u2199",
        "\\nleftarrow": "\u219A",
        "\\nrightarrow": "\u219B",
        "\\arrowwaveleft": "\u219C",
        "\\arrowwaveright": "\u219D",
        "\\twoheadleftarrow": "\u219E",
        "\\twoheaduparrow": "\u219F",
        "\\twoheadrightarrow": "\u21A0",
        "\\twoheaddownarrow": "\u21A1",
        "\\leftarrowtail": "\u21A2",
        "\\rightarrowtail": "\u21A3",
        "\\mapsfrom": "\u21A4",
        "\\MapsUp": "\u21A5",
        "\\mapsto": "\u21A6",
        "\\MapsDown": "\u21A7",
        "\\updownarrowbar": "\u21A8",
        "\\hookleftarrow": "\u21A9",
        "\\hookrightarrow": "\u21AA",
        "\\looparrowleft": "\u21AB",
        "\\looparrowright": "\u21AC",
        "\\leftrightsquigarrow": "\u21AD",
        "\\nleftrightarrow": "\u21AE",
        "\\lightning": "\u21AF",
        "\\Lsh": "\u21B0",
        "\\Rsh": "\u21B1",
        "\\dlsh": "\u21B2",
        "\\reflectbox{\\carriagereturn}": "\u21B3",
        "\\linefeed": "\u21B4",
        "\\carriagereturn": "\u21B5",
        "\\curvearrowleft": "\u21B6",
        "\\curvearrowright": "\u21B7",
        "\\barovernorthwestarrow": "\u21B8",
        "\\barleftarrowrightarrowba": "\u21B9",
        "\\circlearrowleft": "\u21BA",
        "\\circlearrowright": "\u21BB",
        "\\leftharpoonup": "\u21BC",
        "\\leftharpoondown": "\u21BD",
        "\\upharpoonright": "\u21BE",
        "\\upharpoonleft": "\u21BF",
        "\\rightharpoonup": "\u21C0",
        "\\rightharpoondown": "\u21C1",
        "\\downharpoonright": "\u21C2",
        "\\downharpoonleft": "\u21C3",
        "\\rightleftarrows": "\u21C4",
        "\\dblarrowupdown": "\u21C5",
        "\\leftrightarrows": "\u21C6",
        "\\leftleftarrows": "\u21C7",
        "\\upuparrows": "\u21C8",
        "\\rightrightarrows": "\u21C9",
        "\\downdownarrows": "\u21CA",
        "\\leftrightharpoons": "\u21CB",
        "\\rightleftharpoons": "\u21CC",
        "\\nLeftarrow": "\u21CD",
        "\\nLeftrightarrow": "\u21CE",
        "\\nRightarrow": "\u21CF",
        "\\Leftarrow": "\u21D0",
        "\\Uparrow": "\u21D1",
        "\\Rightarrow": "\u21D2",
        "\\Downarrow": "\u21D3",
        "\\Leftrightarrow": "\u21D4",
        "\\Updownarrow": "\u21D5",
        "\\Nwarrow": "\u21D6",
        "\\Nearrow": "\u21D7",
        "\\Searrow": "\u21D8",
        "\\Swarrow": "\u21D9",
        "\\Lleftarrow": "\u21DA",
        "\\Rrightarrow": "\u21DB",
        "\\leftsquigarrow": "\u21DC",
        "\\rightsquigarrow": "\u21DD",
        "\\nHuparrow": "\u21DE",
        "\\nHdownarrow": "\u21DF",
        "\\dashleftarrow": "\u21E0",
        "\\updasharrow": "\u21E1",
        "\\dashrightarrow": "\u21E2",
        "\\downdasharrow": "\u21E3",
        "\\LeftArrowBar": "\u21E4",
        "\\RightArrowBar": "\u21E5",
        "\\leftwhitearrow": "\u21E6",
        "\\upwhitearrow": "\u21E7",
        "\\rightwhitearrow": "\u21E8",
        "\\downwhitearrow": "\u21E9",
        "\\whitearrowupfrombar": "\u21EA",
        "\\circleonrightarrow": "\u21F4",
        "\\DownArrowUpArrow": "\u21F5",
        "\\rightthreearrows": "\u21F6",
        "\\nvleftarrow": "\u21F7",
        "\\pfun": "\u21F8",
        "\\nvleftrightarrow": "\u21F9",
        "\\nVleftarrow": "\u21FA",
        "\\ffun": "\u21FB",
        "\\nVleftrightarrow": "\u21FC",
        "\\leftarrowtriangle": "\u21FD",
        "\\rightarrowtriangle": "\u21FE",
        "\\leftrightarrowtriangle": "\u21FF",
        "\\forall": "\u2200",
        "\\complement": "\u2201",
        "\\partial": "\u2202",
        "\\exists": "\u2203",
        "\\nexists": "\u2204",
        "\\varnothing": "\u2205",
        "\\increment": "\u2206",
        "\\nabla": "\u2207",
        "\\in": "\u2208",
        "\\not\\in": "\u2209",
        "\\smallin": "\u220A",
        "\\ni": "\u220B",
        "\\not\\ni": "\u220C",
        "\\smallni": "\u220D",
        "\\QED": "\u220E",
        "\\prod": "\u220F",
        "\\coprod": "\u2210",
        "\\sum": "\u2211",
        "\\mp": "\u2213",
        "\\dotplus": "\u2214",
        "\\setminus": "\u2216",
        "{_\\ast}": "\u2217",
        "\\circ": "\u2218",
        "\\bullet": "\u2219",
        "\\surd": "\u221A",
        "\\sqrt[3]": "\u221B",
        "\\sqrt[4]": "\u221C",
        "\\propto": "\u221D",
        "\\infty": "\u221E",
        "\\rightangle": "\u221F",
        "\\angle": "\u2220",
        "\\measuredangle": "\u2221",
        "\\sphericalangle": "\u2222",
        "\\mid": "\u2223",
        "\\nmid": "\u2224",
        "\\parallel": "\u2225",
        "\\nparallel": "\u2226",
        "\\wedge": "\u2227",
        "\\vee": "\u2228",
        "\\cap": "\u2229",
        "\\cup": "\u222A",
        "\\int": "\u222B",
        "{\\int\\!\\int}": "\u222C",
        "{\\int\\!\\int\\!\\int}": "\u222D",
        "\\oint": "\u222E",
        "\\surfintegral": "\u222F",
        "\\volintegral": "\u2230",
        "\\clwintegral": "\u2231",
        "\\lcirclerightint": "\u2232",
        "\\rcirclerightint": "\u2233",
        "\\therefore": "\u2234",
        "\\because": "\u2235",
        "\\Colon": "\u2237",
        "\\dotdiv": "\u2238",
        "\\eqcolon": "\u2239",
        "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}": "\u223A",
        "\\homothetic": "\u223B",
        "\\sim": "\u223C",
        "\\backsim": "\u223D",
        "\\lazysinv": "\u223E",
        "\\AC": "\u223F",
        "\\wr": "\u2240",
        "\\not\\sim": "\u2241",
        "\\texteqsim": "\u2242",
        "\\NotEqualTilde": "\u2242\u0338",
        "\\simeq": "\u2243",
        "\\not\\simeq": "\u2244",
        "\\cong": "\u2245",
        "\\approxnotequal": "\u2246",
        "\\not\\cong": "\u2247",
        "\\approx": "\u2248",
        "\\not\\approx": "\u2249",
        "\\approxeq": "\u224A",
        "\\tildetrpl": "\u224B",
        "\\not\\apid": "\u224B\u0338",
        "\\allequal": "\u224C",
        "\\asymp": "\u224D",
        "\\Bumpeq": "\u224E",
        "\\NotHumpDownHump": "\u224E\u0338",
        "\\bumpeq": "\u224F",
        "\\NotHumpEqual": "\u224F\u0338",
        "\\doteq": "\u2250",
        "\\not\\doteq": "\u2250\u0338",
        "\\doteqdot": "\u2251",
        "\\fallingdotseq": "\u2252",
        "\\risingdotseq": "\u2253",
        "\\coloneq": "\u2254",
        "\\eqcirc": "\u2256",
        "\\circeq": "\u2257",
        "\\arceq": "\u2258",
        "\\estimates": "\u2259",
        "\\starequal": "\u225B",
        "\\triangleq": "\u225C",
        "\\eqdef": "\u225D",
        "\\measeq": "\u225E",
        "\\neq": "\u2260",
        "\\equiv": "\u2261",
        "\\not\\equiv": "\u2262",
        "\\Equiv": "\u2263",
        "\\leq": "\u2264",
        "\\le": "\u2264",
        "\\geq": "\u2265",
        "\\leqq": "\u2266",
        "\\geqq": "\u2267",
        "\\lneqq": "\u2268",
        "\\lvertneqq": "\u2268\uFE00",
        "\\gneqq": "\u2269",
        "\\gvertneqq": "\u2269\uFE00",
        "\\ll": "\u226A",
        "\\NotLessLess": "\u226A\u0338",
        "\\gg": "\u226B",
        "\\NotGreaterGreater": "\u226B\u0338",
        "\\between": "\u226C",
        "{\\not\\kern-0.3em\\times}": "\u226D",
        "\\not<": "\u226E",
        "\\not>": "\u226F",
        "\\not\\leq": "\u2270",
        "\\not\\geq": "\u2271",
        "\\lessequivlnt": "\u2272",
        "\\greaterequivlnt": "\u2273",
        "\\lessgtr": "\u2276",
        "\\gtrless": "\u2277",
        "\\notlessgreater": "\u2278",
        "\\notgreaterless": "\u2279",
        "\\prec": "\u227A",
        "\\succ": "\u227B",
        "\\preccurlyeq": "\u227C",
        "\\succcurlyeq": "\u227D",
        "\\NotPrecedesTilde": "\u227E\u0338",
        "\\NotSucceedsTilde": "\u227F\u0338",
        "\\not\\prec": "\u2280",
        "\\not\\succ": "\u2281",
        "\\subset": "\u2282",
        "\\supset": "\u2283",
        "\\not\\subset": "\u2284",
        "\\not\\supset": "\u2285",
        "\\subseteq": "\u2286",
        "\\supseteq": "\u2287",
        "\\not\\subseteq": "\u2288",
        "\\not\\supseteq": "\u2289",
        "\\subsetneq": "\u228A",
        "\\varsubsetneqq": "\u228A\uFE00",
        "\\supsetneq": "\u228B",
        "\\varsupsetneq": "\u228B\uFE00",
        "\\cupleftarrow": "\u228C",
        "\\cupdot": "\u228D",
        "\\uplus": "\u228E",
        "\\sqsubset": "\u228F",
        "\\NotSquareSubset": "\u228F\u0338",
        "\\sqsupset": "\u2290",
        "\\NotSquareSuperset": "\u2290\u0338",
        "\\sqsubseteq": "\u2291",
        "\\sqsupseteq": "\u2292",
        "\\sqcap": "\u2293",
        "\\sqcup": "\u2294",
        "\\oplus": "\u2295",
        "\\ominus": "\u2296",
        "\\otimes": "\u2297",
        "\\oslash": "\u2298",
        "\\odot": "\u2299",
        "\\circledcirc": "\u229A",
        "\\circledast": "\u229B",
        "\\circledequal": "\u229C",
        "\\circleddash": "\u229D",
        "\\boxplus": "\u229E",
        "\\boxminus": "\u229F",
        "\\boxtimes": "\u22A0",
        "\\boxdot": "\u22A1",
        "\\vdash": "\u22A2",
        "\\dashv": "\u22A3",
        "\\top": "\u22A4",
        "\\assert": "\u22A6",
        "\\truestate": "\u22A7",
        "\\forcesextra": "\u22A8",
        "\\Vdash": "\u22A9",
        "\\Vvdash": "\u22AA",
        "\\VDash": "\u22AB",
        "\\nvdash": "\u22AC",
        "\\nvDash": "\u22AD",
        "\\nVdash": "\u22AE",
        "\\nVDash": "\u22AF",
        "\\prurel": "\u22B0",
        "\\scurel": "\u22B1",
        "\\vartriangleleft": "\u22B2",
        "\\vartriangleright": "\u22B3",
        "\\trianglelefteq": "\u22B4",
        "\\trianglerighteq": "\u22B5",
        "\\original": "\u22B6",
        "\\image": "\u22B7",
        "\\multimap": "\u22B8",
        "\\hermitconjmatrix": "\u22B9",
        "\\intercal": "\u22BA",
        "\\veebar": "\u22BB",
        "\\barvee": "\u22BD",
        "\\rightanglearc": "\u22BE",
        "\\varlrtriangle": "\u22BF",
        "\\bigcap": "\u22C2",
        "\\bigcup": "\u22C3",
        "\\diamond": "\u22C4",
        "\\cdot": "\u22C5",
        "\\star": "\u22C6",
        "\\divideontimes": "\u22C7",
        "\\bowtie": "\u22C8",
        "\\ltimes": "\u22C9",
        "\\rtimes": "\u22CA",
        "\\leftthreetimes": "\u22CB",
        "\\rightthreetimes": "\u22CC",
        "\\backsimeq": "\u22CD",
        "\\curlyvee": "\u22CE",
        "\\curlywedge": "\u22CF",
        "\\Subset": "\u22D0",
        "\\Supset": "\u22D1",
        "\\Cap": "\u22D2",
        "\\Cup": "\u22D3",
        "\\pitchfork": "\u22D4",
        "\\hash": "\u22D5",
        "\\lessdot": "\u22D6",
        "\\gtrdot": "\u22D7",
        "\\verymuchless": "\u22D8",
        "\\verymuchgreater": "\u22D9",
        "\\lesseqgtr": "\u22DA",
        "\\gtreqless": "\u22DB",
        "\\eqless": "\u22DC",
        "\\eqgtr": "\u22DD",
        "\\curlyeqprec": "\u22DE",
        "\\curlyeqsucc": "\u22DF",
        "\\npreceq": "\u22E0",
        "\\nsucceq": "\u22E1",
        "\\not\\sqsubseteq": "\u22E2",
        "\\not\\sqsupseteq": "\u22E3",
        "\\sqsubsetneq": "\u22E4",
        "\\Elzsqspne": "\u22E5",
        "\\lnsim": "\u22E6",
        "\\gnsim": "\u22E7",
        "\\precedesnotsimilar": "\u22E8",
        "\\succnsim": "\u22E9",
        "\\ntriangleleft": "\u22EA",
        "\\ntriangleright": "\u22EB",
        "\\ntrianglelefteq": "\u22EC",
        "\\ntrianglerighteq": "\u22ED",
        "\\vdots": "\u22EE",
        "\\cdots": "\u22EF",
        "\\upslopeellipsis": "\u22F0",
        "\\downslopeellipsis": "\u22F1",
        "\\disin": "\u22F2",
        "\\varisins": "\u22F3",
        "\\isins": "\u22F4",
        "\\isindot": "\u22F5",
        "\\barin": "\u22F6",
        "\\isinobar": "\u22F7",
        "\\isinvb": "\u22F8",
        "\\isinE": "\u22F9",
        "\\nisd": "\u22FA",
        "\\varnis": "\u22FB",
        "\\nis": "\u22FC",
        "\\varniobar": "\u22FD",
        "\\niobar": "\u22FE",
        "\\bagmember": "\u22FF",
        "\\diameter": "\u2300",
        "\\house": "\u2302",
        "\\barwedge": "\u2305",
        "\\varbarwedge": "\u2305",
        "\\perspcorrespond": "\u2306",
        "\\lceil": "\u2308",
        "\\rceil": "\u2309",
        "\\lfloor": "\u230A",
        "\\rfloor": "\u230B",
        "\\invneg": "\u2310",
        "\\wasylozenge": "\u2311",
        "\\profline": "\u2312",
        "\\profsurf": "\u2313",
        "\\recorder": "\u2315",
        '{\\mathchar"2208}': "\u2316",
        "\\viewdata": "\u2317",
        "\\turnednot": "\u2319",
        "\\ulcorner": "\u231C",
        "\\urcorner": "\u231D",
        "\\llcorner": "\u231E",
        "\\lrcorner": "\u231F",
        "\\inttop": "\u2320",
        "\\intbottom": "\u2321",
        "\\frown": "\u2322",
        "\\smile": "\u2323",
        "\\varhexagonlrbonds": "\u232C",
        "\\conictaper": "\u2332",
        "\\topbot": "\u2336",
        "\\APLinv": "\u2339",
        "\\notslash": "\u233F",
        "\\notbackslash": "\u2340",
        "\\APLleftarrowbox": "\u2347",
        "\\APLrightarrowbox": "\u2348",
        "\\invdiameter": "\u2349",
        "\\APLuparrowbox": "\u2350",
        "\\APLboxupcaret": "\u2353",
        "\\APLdownarrowbox": "\u2357",
        "\\APLcomment": "\u235D",
        "\\APLinput": "\u235E",
        "\\APLlog": "\u235F",
        "\\APLboxquestion": "\u2370",
        "\\rangledownzigzagarrow": "\u237C",
        "\\hexagon": "\u2394",
        "\\lparenuend": "\u239B",
        "\\lparenextender": "\u239C",
        "\\lparenlend": "\u239D",
        "\\rparenuend": "\u239E",
        "\\rparenextender": "\u239F",
        "\\rparenlend": "\u23A0",
        "\\lbrackuend": "\u23A1",
        "\\lbrackextender": "\u23A2",
        "\\Elzdlcorn": "\u23A3",
        "\\rbrackuend": "\u23A4",
        "\\rbrackextender": "\u23A5",
        "\\rbracklend": "\u23A6",
        "\\lbraceuend": "\u23A7",
        "\\lbracemid": "\u23A8",
        "\\lbracelend": "\u23A9",
        "\\vbraceextender": "\u23AA",
        "\\rbraceuend": "\u23AB",
        "\\rbracemid": "\u23AC",
        "\\rbracelend": "\u23AD",
        "\\intextender": "\u23AE",
        "\\harrowextender": "\u23AF",
        "\\lmoustache": "\u23B0",
        "\\rmoustache": "\u23B1",
        "\\sumtop": "\u23B2",
        "\\sumbottom": "\u23B3",
        "\\overbracket": "\u23B4",
        "\\underbracket": "\u23B5",
        "\\bbrktbrk": "\u23B6",
        "\\sqrtbottom": "\u23B7",
        "\\lvboxline": "\u23B8",
        "\\rvboxline": "\u23B9",
        "\\varcarriagereturn": "\u23CE",
        "\\overparen": "\u23DC",
        "\\underparen": "\u23DD",
        "\\overbrace": "\u23DE",
        "\\underbrace": "\u23DF",
        "\\obrbrak": "\u23E0",
        "\\ubrbrak": "\u23E1",
        "\\trapezium": "\u23E2",
        "\\benzenr": "\u23E3",
        "\\strns": "\u23E4",
        "\\fltns": "\u23E5",
        "\\accurrent": "\u23E6",
        "\\elinters": "\u23E7",
        "\\textvisiblespace": "\u2423",
        "\\ding{172}": "\u2460",
        "\\ding{173}": "\u2461",
        "\\ding{174}": "\u2462",
        "\\ding{175}": "\u2463",
        "\\ding{176}": "\u2464",
        "\\ding{177}": "\u2465",
        "\\ding{178}": "\u2466",
        "\\ding{179}": "\u2467",
        "\\ding{180}": "\u2468",
        "\\ding{181}": "\u2469",
        "\\circledS": "\u24C8",
        "\\Elzdshfnc": "\u2506",
        "\\Elzsqfnw": "\u2519",
        "\\diagup": "\u2571",
        "\\blockuphalf": "\u2580",
        "\\blocklowhalf": "\u2584",
        "\\blockfull": "\u2588",
        "\\blocklefthalf": "\u258C",
        "\\blockrighthalf": "\u2590",
        "\\blockqtrshaded": "\u2591",
        "\\blockhalfshaded": "\u2592",
        "\\blockthreeqtrshaded": "\u2593",
        "\\ding{110}": "\u25A0",
        "\\mdlgblksquare": "\u25A0",
        "\\square": "\u25A1",
        "\\Box": "\u25A1",
        "\\squoval": "\u25A2",
        "\\blackinwhitesquare": "\u25A3",
        "\\squarehfill": "\u25A4",
        "\\squarevfill": "\u25A5",
        "\\squarehvfill": "\u25A6",
        "\\squarenwsefill": "\u25A7",
        "\\squareneswfill": "\u25A8",
        "\\squarecrossfill": "\u25A9",
        "\\smwhtsquare": "\u25AB",
        "\\hrectangleblack": "\u25AC",
        "\\fbox{~~}": "\u25AD",
        "\\vrectangleblack": "\u25AE",
        "\\Elzvrecto": "\u25AF",
        "\\parallelogramblack": "\u25B0",
        "\\ding{115}": "\u25B2",
        "\\bigblacktriangleup": "\u25B2",
        "\\bigtriangleup": "\u25B3",
        "\\blacktriangle": "\u25B4",
        "\\vartriangle": "\u25B5",
        "\\RHD": "\u25B6",
        "\\rhd": "\u25B7",
        "\\blacktriangleright": "\u25B8",
        "\\triangleright": "\u25B9",
        "\\blackpointerright": "\u25BA",
        "\\whitepointerright": "\u25BB",
        "\\ding{116}": "\u25BC",
        "\\bigblacktriangledown": "\u25BC",
        "\\bigtriangledown": "\u25BD",
        "\\blacktriangledown": "\u25BE",
        "\\triangledown": "\u25BF",
        "\\LHD": "\u25C0",
        "\\lhd": "\u25C1",
        "\\blacktriangleleft": "\u25C2",
        "\\triangleleft": "\u25C3",
        "\\blackpointerleft": "\u25C4",
        "\\whitepointerleft": "\u25C5",
        "\\ding{117}": "\u25C6",
        "\\Diamondblack": "\u25C6",
        "\\Diamond": "\u25C7",
        "\\blackinwhitediamond": "\u25C8",
        "\\fisheye": "\u25C9",
        "\\lozenge": "\u25CA",
        "\\dottedcircle": "\u25CC",
        "\\circlevertfill": "\u25CD",
        "\\bullseye": "\u25CE",
        "\\ding{108}": "\u25CF",
        "\\CIRCLE": "\u25CF",
        "\\Elzcirfl": "\u25D0",
        "\\Elzcirfr": "\u25D1",
        "\\Elzcirfb": "\u25D2",
        "\\circletophalfblack": "\u25D3",
        "\\circleurquadblack": "\u25D4",
        "\\blackcircleulquadwhite": "\u25D5",
        "\\LEFTCIRCLE": "\u25D6",
        "\\ding{119}": "\u25D7",
        "\\RIGHTCIRCLE": "\u25D7",
        "\\Elzrvbull": "\u25D8",
        "\\inversewhitecircle": "\u25D9",
        "\\invwhiteupperhalfcircle": "\u25DA",
        "\\invwhitelowerhalfcircle": "\u25DB",
        "\\ularc": "\u25DC",
        "\\urarc": "\u25DD",
        "\\lrarc": "\u25DE",
        "\\llarc": "\u25DF",
        "\\topsemicircle": "\u25E0",
        "\\botsemicircle": "\u25E1",
        "\\lrblacktriangle": "\u25E2",
        "\\llblacktriangle": "\u25E3",
        "\\ulblacktriangle": "\u25E4",
        "\\urblacktriangle": "\u25E5",
        "\\smwhtcircle": "\u25E6",
        "\\Elzsqfl": "\u25E7",
        "\\Elzsqfr": "\u25E8",
        "\\squareulblack": "\u25E9",
        "\\Elzsqfse": "\u25EA",
        "\\boxbar": "\u25EB",
        "\\trianglecdot": "\u25EC",
        "\\triangleleftblack": "\u25ED",
        "\\trianglerightblack": "\u25EE",
        "\\bigcirc": "\u25EF",
        "\\squareulquad": "\u25F0",
        "\\squarellquad": "\u25F1",
        "\\squarelrquad": "\u25F2",
        "\\squareurquad": "\u25F3",
        "\\circleulquad": "\u25F4",
        "\\circlellquad": "\u25F5",
        "\\circlelrquad": "\u25F6",
        "\\circleurquad": "\u25F7",
        "\\ultriangle": "\u25F8",
        "\\urtriangle": "\u25F9",
        "\\lltriangle": "\u25FA",
        "\\mdsmwhtsquare": "\u25FD",
        "\\mdsmblksquare": "\u25FE",
        "\\lrtriangle": "\u25FF",
        "\\ding{72}": "\u2605",
        "\\bigstar": "\u2605",
        "\\ding{73}": "\u2606",
        "\\bigwhitestar": "\u2606",
        "\\Sun": "\u2609",
        "\\ding{37}": "\u260E",
        "\\Square": "\u2610",
        "\\CheckedBox": "\u2611",
        "\\XBox": "\u2612",
        "\\steaming": "\u2615",
        "\\ding{42}": "\u261B",
        "\\ding{43}": "\u261E",
        "\\pointright": "\u261E",
        "\\skull": "\u2620",
        "\\danger": "\u2621",
        "\\radiation": "\u2622",
        "\\biohazard": "\u2623",
        "\\yinyang": "\u262F",
        "\\frownie": "\u2639",
        "\\smiley": "\u263A",
        "\\blacksmiley": "\u263B",
        "\\sun": "\u263C",
        "\\rightmoon": "\u263D",
        "\\leftmoon": "\u263E",
        "\\mercury": "\u263F",
        "\\venus": "\u2640",
        "\\female": "\u2640",
        "\\earth": "\u2641",
        "\\male": "\u2642",
        "\\jupiter": "\u2643",
        "\\saturn": "\u2644",
        "\\uranus": "\u2645",
        "\\neptune": "\u2646",
        "\\pluto": "\u2647",
        "\\aries": "\u2648",
        "\\taurus": "\u2649",
        "\\gemini": "\u264A",
        "\\cancer": "\u264B",
        "\\leo": "\u264C",
        "\\virgo": "\u264D",
        "\\libra": "\u264E",
        "\\scorpio": "\u264F",
        "\\sagittarius": "\u2650",
        "\\capricornus": "\u2651",
        "\\aquarius": "\u2652",
        "\\pisces": "\u2653",
        "\\ding{171}": "\u2660",
        "\\spadesuit": "\u2660",
        "\\heartsuit": "\u2661",
        "\\ding{168}": "\u2663",
        "\\clubsuit": "\u2663",
        "\\varspadesuit": "\u2664",
        "\\ding{170}": "\u2665",
        "\\varheartsuit": "\u2665",
        "\\ding{169}": "\u2666",
        "\\vardiamondsuit": "\u2666",
        "\\varclubsuit": "\u2667",
        "\\quarternote": "\u2669",
        "\\eighthnote": "\u266A",
        "\\twonotes": "\u266B",
        "\\sixteenthnote": "\u266C",
        "\\flat": "\u266D",
        "\\natural": "\u266E",
        "\\sharp": "\u266F",
        "\\recycle": "\u267B",
        "\\acidfree": "\u267E",
        "\\dicei": "\u2680",
        "\\diceii": "\u2681",
        "\\diceiii": "\u2682",
        "\\diceiv": "\u2683",
        "\\dicev": "\u2684",
        "\\dicevi": "\u2685",
        "\\circledrightdot": "\u2686",
        "\\circledtwodots": "\u2687",
        "\\blackcircledrightdot": "\u2688",
        "\\blackcircledtwodots": "\u2689",
        "\\anchor": "\u2693",
        "\\swords": "\u2694",
        "\\warning": "\u26A0",
        "\\Hermaphrodite": "\u26A5",
        "\\medcirc": "\u26AA",
        "\\medbullet": "\u26AB",
        "\\mdsmwhtcircle": "\u26AC",
        "\\neuter": "\u26B2",
        "\\ding{33}": "\u2701",
        "\\ding{34}": "\u2702",
        "\\ding{35}": "\u2703",
        "\\ding{36}": "\u2704",
        "\\ding{38}": "\u2706",
        "\\ding{39}": "\u2707",
        "\\ding{40}": "\u2708",
        "\\ding{41}": "\u2709",
        "\\ding{44}": "\u270C",
        "\\ding{45}": "\u270D",
        "\\ding{46}": "\u270E",
        "\\pencil": "\u270E",
        "\\ding{47}": "\u270F",
        "\\ding{48}": "\u2710",
        "\\ding{49}": "\u2711",
        "\\ding{50}": "\u2712",
        "\\ding{51}": "\u2713",
        "\\checkmark": "\u2713",
        "\\ding{52}": "\u2714",
        "\\ding{53}": "\u2715",
        "\\ding{54}": "\u2716",
        "\\ding{55}": "\u2717",
        "\\ballotx": "\u2717",
        "\\ding{56}": "\u2718",
        "\\ding{57}": "\u2719",
        "\\ding{58}": "\u271A",
        "\\ding{59}": "\u271B",
        "\\ding{60}": "\u271C",
        "\\ding{61}": "\u271D",
        "\\ding{62}": "\u271E",
        "\\ding{63}": "\u271F",
        "\\ding{64}": "\u2720",
        "\\maltese": "\u2720",
        "\\ding{65}": "\u2721",
        "\\ding{66}": "\u2722",
        "\\ding{67}": "\u2723",
        "\\ding{68}": "\u2724",
        "\\ding{69}": "\u2725",
        "\\ding{70}": "\u2726",
        "\\ding{71}": "\u2727",
        "\\ding{74}": "\u272A",
        "\\circledstar": "\u272A",
        "\\ding{75}": "\u272B",
        "\\ding{76}": "\u272C",
        "\\ding{77}": "\u272D",
        "\\ding{78}": "\u272E",
        "\\ding{79}": "\u272F",
        "\\ding{80}": "\u2730",
        "\\ding{81}": "\u2731",
        "\\ding{82}": "\u2732",
        "\\ding{83}": "\u2733",
        "\\ding{84}": "\u2734",
        "\\ding{85}": "\u2735",
        "\\ding{86}": "\u2736",
        "\\varstar": "\u2736",
        "\\ding{87}": "\u2737",
        "\\ding{88}": "\u2738",
        "\\ding{89}": "\u2739",
        "\\ding{90}": "\u273A",
        "\\ding{91}": "\u273B",
        "\\ding{92}": "\u273C",
        "\\ding{93}": "\u273D",
        "\\dingasterisk": "\u273D",
        "\\ding{94}": "\u273E",
        "\\ding{95}": "\u273F",
        "\\ding{96}": "\u2740",
        "\\ding{97}": "\u2741",
        "\\ding{98}": "\u2742",
        "\\ding{99}": "\u2743",
        "\\ding{100}": "\u2744",
        "\\ding{101}": "\u2745",
        "\\ding{102}": "\u2746",
        "\\ding{103}": "\u2747",
        "\\ding{104}": "\u2748",
        "\\ding{105}": "\u2749",
        "\\ding{106}": "\u274A",
        "\\ding{107}": "\u274B",
        "\\ding{109}": "\u274D",
        "\\ding{111}": "\u274F",
        "\\ding{112}": "\u2750",
        "\\ding{113}": "\u2751",
        "\\ding{114}": "\u2752",
        "\\ding{118}": "\u2756",
        "\\ding{120}": "\u2758",
        "\\ding{121}": "\u2759",
        "\\ding{122}": "\u275A",
        "\\ding{123}": "\u275B",
        "\\ding{124}": "\u275C",
        "\\ding{125}": "\u275D",
        "\\ding{126}": "\u275E",
        "\\ding{161}": "\u2761",
        "\\ding{162}": "\u2762",
        "\\ding{163}": "\u2763",
        "\\ding{164}": "\u2764",
        "\\ding{165}": "\u2765",
        "\\ding{166}": "\u2766",
        "\\ding{167}": "\u2767",
        "\\ding{182}": "\u2776",
        "\\ding{183}": "\u2777",
        "\\ding{184}": "\u2778",
        "\\ding{185}": "\u2779",
        "\\ding{186}": "\u277A",
        "\\ding{187}": "\u277B",
        "\\ding{188}": "\u277C",
        "\\ding{189}": "\u277D",
        "\\ding{190}": "\u277E",
        "\\ding{191}": "\u277F",
        "\\ding{192}": "\u2780",
        "\\ding{193}": "\u2781",
        "\\ding{194}": "\u2782",
        "\\ding{195}": "\u2783",
        "\\ding{196}": "\u2784",
        "\\ding{197}": "\u2785",
        "\\ding{198}": "\u2786",
        "\\ding{199}": "\u2787",
        "\\ding{200}": "\u2788",
        "\\ding{201}": "\u2789",
        "\\ding{202}": "\u278A",
        "\\ding{203}": "\u278B",
        "\\ding{204}": "\u278C",
        "\\ding{205}": "\u278D",
        "\\ding{206}": "\u278E",
        "\\ding{207}": "\u278F",
        "\\ding{208}": "\u2790",
        "\\ding{209}": "\u2791",
        "\\ding{210}": "\u2792",
        "\\ding{211}": "\u2793",
        "\\ding{212}": "\u2794",
        "\\ding{216}": "\u2798",
        "\\ding{217}": "\u2799",
        "\\ding{218}": "\u279A",
        "\\ding{219}": "\u279B",
        "\\draftingarrow": "\u279B",
        "\\ding{220}": "\u279C",
        "\\ding{221}": "\u279D",
        "\\ding{222}": "\u279E",
        "\\ding{223}": "\u279F",
        "\\ding{224}": "\u27A0",
        "\\ding{225}": "\u27A1",
        "\\ding{226}": "\u27A2",
        "\\arrowbullet": "\u27A2",
        "\\ding{227}": "\u27A3",
        "\\ding{228}": "\u27A4",
        "\\ding{229}": "\u27A5",
        "\\ding{230}": "\u27A6",
        "\\ding{231}": "\u27A7",
        "\\ding{232}": "\u27A8",
        "\\ding{233}": "\u27A9",
        "\\ding{234}": "\u27AA",
        "\\ding{235}": "\u27AB",
        "\\ding{236}": "\u27AC",
        "\\ding{237}": "\u27AD",
        "\\ding{238}": "\u27AE",
        "\\ding{239}": "\u27AF",
        "\\ding{241}": "\u27B1",
        "\\ding{242}": "\u27B2",
        "\\ding{243}": "\u27B3",
        "\\ding{244}": "\u27B4",
        "\\ding{245}": "\u27B5",
        "\\ding{246}": "\u27B6",
        "\\ding{247}": "\u27B7",
        "\\ding{248}": "\u27B8",
        "\\ding{249}": "\u27B9",
        "\\ding{250}": "\u27BA",
        "\\ding{251}": "\u27BB",
        "\\ding{252}": "\u27BC",
        "\\ding{253}": "\u27BD",
        "\\ding{254}": "\u27BE",
        "\\threedangle": "\u27C0",
        "\\whiteinwhitetriangle": "\u27C1",
        "\\perp": "\u27C2",
        "\\subsetcirc": "\u27C3",
        "\\supsetcirc": "\u27C4",
        "\\Lbag": "\u27C5",
        "\\Rbag": "\u27C6",
        "\\veedot": "\u27C7",
        "\\bsolhsub": "\u27C8",
        "\\suphsol": "\u27C9",
        "\\longdivision": "\u27CC",
        "\\Diamonddot": "\u27D0",
        "\\wedgedot": "\u27D1",
        "\\upin": "\u27D2",
        "\\pullback": "\u27D3",
        "\\pushout": "\u27D4",
        "\\leftouterjoin": "\u27D5",
        "\\rightouterjoin": "\u27D6",
        "\\fullouterjoin": "\u27D7",
        "\\bigbot": "\u27D8",
        "\\bigtop": "\u27D9",
        "\\DashVDash": "\u27DA",
        "\\dashVdash": "\u27DB",
        "\\multimapinv": "\u27DC",
        "\\vlongdash": "\u27DD",
        "\\longdashv": "\u27DE",
        "\\cirbot": "\u27DF",
        "\\lozengeminus": "\u27E0",
        "\\concavediamond": "\u27E1",
        "\\concavediamondtickleft": "\u27E2",
        "\\concavediamondtickright": "\u27E3",
        "\\whitesquaretickleft": "\u27E4",
        "\\whitesquaretickright": "\u27E5",
        "\\llbracket": "\u27E6",
        "\\rrbracket": "\u27E7",
        "\\langle": "\u27E8",
        "\\rangle": "\u27E9",
        "\\lang": "\u27EA",
        "\\rang": "\u27EB",
        "\\Lbrbrak": "\u27EC",
        "\\Rbrbrak": "\u27ED",
        "\\lgroup": "\u27EE",
        "\\rgroup": "\u27EF",
        "\\UUparrow": "\u27F0",
        "\\DDownarrow": "\u27F1",
        "\\acwgapcirclearrow": "\u27F2",
        "\\cwgapcirclearrow": "\u27F3",
        "\\rightarrowonoplus": "\u27F4",
        "\\longleftarrow": "\u27F5",
        "\\longrightarrow": "\u27F6",
        "\\longleftrightarrow": "\u27F7",
        "\\Longleftarrow": "\u27F8",
        "\\Longrightarrow": "\u27F9",
        "\\Longleftrightarrow": "\u27FA",
        "\\longmapsfrom": "\u27FB",
        "\\longmapsto": "\u27FC",
        "\\Longmapsfrom": "\u27FD",
        "\\Longmapsto": "\u27FE",
        "\\sim\\joinrel\\leadsto": "\u27FF",
        "\\psur": "\u2900",
        "\\nVtwoheadrightarrow": "\u2901",
        "\\nvLeftarrow": "\u2902",
        "\\nvRightarrow": "\u2903",
        "\\nvLeftrightarrow": "\u2904",
        "\\Mapsfrom": "\u2906",
        "\\Mapsto": "\u2907",
        "\\downarrowbarred": "\u2908",
        "\\uparrowbarred": "\u2909",
        "\\Uuparrow": "\u290A",
        "\\Ddownarrow": "\u290B",
        "\\leftbkarrow": "\u290C",
        "\\rightbkarrow": "\u290D",
        "\\leftdbkarrow": "\u290E",
        "\\dbkarow": "\u290F",
        "\\drbkarow": "\u2910",
        "\\rightdotarrow": "\u2911",
        "\\UpArrowBar": "\u2912",
        "\\DownArrowBar": "\u2913",
        "\\pinj": "\u2914",
        "\\finj": "\u2915",
        "\\bij": "\u2916",
        "\\nvtwoheadrightarrowtail": "\u2917",
        "\\nVtwoheadrightarrowtail": "\u2918",
        "\\lefttail": "\u2919",
        "\\righttail": "\u291A",
        "\\leftdbltail": "\u291B",
        "\\rightdbltail": "\u291C",
        "\\diamondleftarrow": "\u291D",
        "\\rightarrowdiamond": "\u291E",
        "\\diamondleftarrowbar": "\u291F",
        "\\barrightarrowdiamond": "\u2920",
        "\\nwsearrow": "\u2921",
        "\\neswarrow": "\u2922",
        "\\rdiagovfdiag": "\u292B",
        "\\fdiagovrdiag": "\u292C",
        "\\seovnearrow": "\u292D",
        "\\neovsearrow": "\u292E",
        "\\fdiagovnearrow": "\u292F",
        "\\rdiagovsearrow": "\u2930",
        "\\neovnwarrow": "\u2931",
        "\\nwovnearrow": "\u2932",
        "\\uprightcurvearrow": "\u2934",
        "\\downrightcurvedarrow": "\u2935",
        "\\cwrightarcarrow": "\u2938",
        "\\acwleftarcarrow": "\u2939",
        "\\acwoverarcarrow": "\u293A",
        "\\acwunderarcarrow": "\u293B",
        "\\curvearrowrightminus": "\u293C",
        "\\curvearrowleftplus": "\u293D",
        "\\cwundercurvearrow": "\u293E",
        "\\ccwundercurvearrow": "\u293F",
        "\\Elolarr": "\u2940",
        "\\Elorarr": "\u2941",
        "\\ElzRlarr": "\u2942",
        "\\leftarrowshortrightarrow": "\u2943",
        "\\ElzrLarr": "\u2944",
        "\\rightarrowplus": "\u2945",
        "\\leftarrowplus": "\u2946",
        "\\Elzrarrx": "\u2947",
        "\\leftrightarrowcircle": "\u2948",
        "\\twoheaduparrowcircle": "\u2949",
        "\\leftrightharpoon": "\u294A",
        "\\rightleftharpoon": "\u294B",
        "\\updownharpoonrightleft": "\u294C",
        "\\updownharpoonleftright": "\u294D",
        "\\LeftRightVector": "\u294E",
        "\\RightUpDownVector": "\u294F",
        "\\DownLeftRightVector": "\u2950",
        "\\LeftUpDownVector": "\u2951",
        "\\LeftVectorBar": "\u2952",
        "\\RightVectorBar": "\u2953",
        "\\RightUpVectorBar": "\u2954",
        "\\RightDownVectorBar": "\u2955",
        "\\DownLeftVectorBar": "\u2956",
        "\\DownRightVectorBar": "\u2957",
        "\\LeftUpVectorBar": "\u2958",
        "\\LeftDownVectorBar": "\u2959",
        "\\LeftTeeVector": "\u295A",
        "\\RightTeeVector": "\u295B",
        "\\RightUpTeeVector": "\u295C",
        "\\RightDownTeeVector": "\u295D",
        "\\DownLeftTeeVector": "\u295E",
        "\\DownRightTeeVector": "\u295F",
        "\\LeftUpTeeVector": "\u2960",
        "\\LeftDownTeeVector": "\u2961",
        "\\leftleftharpoons": "\u2962",
        "\\upupharpoons": "\u2963",
        "\\rightrightharpoons": "\u2964",
        "\\downdownharpoons": "\u2965",
        "\\leftrightharpoonsup": "\u2966",
        "\\leftrightharpoonsdown": "\u2967",
        "\\rightleftharpoonsup": "\u2968",
        "\\rightleftharpoonsdown": "\u2969",
        "\\leftbarharpoon": "\u296A",
        "\\barleftharpoon": "\u296B",
        "\\rightbarharpoon": "\u296C",
        "\\barrightharpoon": "\u296D",
        "\\UpEquilibrium": "\u296E",
        "\\ReverseUpEquilibrium": "\u296F",
        "\\RoundImplies": "\u2970",
        "\\equalrightarrow": "\u2971",
        "\\similarrightarrow": "\u2972",
        "\\leftarrowsimilar": "\u2973",
        "\\rightarrowsimilar": "\u2974",
        "\\rightarrowapprox": "\u2975",
        "\\ltlarr": "\u2976",
        "\\leftarrowless": "\u2977",
        "\\gtrarr": "\u2978",
        "\\subrarr": "\u2979",
        "\\leftarrowsubset": "\u297A",
        "\\suplarr": "\u297B",
        "\\upfishtail": "\u297E",
        "\\downfishtail": "\u297F",
        "\\Elztfnc": "\u2980",
        "\\spot": "\u2981",
        "\\typecolon": "\u2982",
        "\\lBrace": "\u2983",
        "\\rBrace": "\u2984",
        "\\Elroang": "\u2986",
        "\\limg": "\u2987",
        "\\rimg": "\u2988",
        "\\lblot": "\u2989",
        "\\rblot": "\u298A",
        "\\lbrackubar": "\u298B",
        "\\rbrackubar": "\u298C",
        "\\lbrackultick": "\u298D",
        "\\rbracklrtick": "\u298E",
        "\\lbracklltick": "\u298F",
        "\\rbrackurtick": "\u2990",
        "\\langledot": "\u2991",
        "\\rangledot": "\u2992",
        "<\\kern-0.58em(": "\u2993",
        "\\Lparengtr": "\u2995",
        "\\Rparenless": "\u2996",
        "\\lblkbrbrak": "\u2997",
        "\\rblkbrbrak": "\u2998",
        "\\Elzddfnc": "\u2999",
        "\\vzigzag": "\u299A",
        "\\measuredangleleft": "\u299B",
        "\\Angle": "\u299C",
        "\\rightanglemdot": "\u299D",
        "\\angles": "\u299E",
        "\\angdnr": "\u299F",
        "\\Elzlpargt": "\u29A0",
        "\\sphericalangleup": "\u29A1",
        "\\turnangle": "\u29A2",
        "\\revangle": "\u29A3",
        "\\angleubar": "\u29A4",
        "\\revangleubar": "\u29A5",
        "\\wideangledown": "\u29A6",
        "\\wideangleup": "\u29A7",
        "\\measanglerutone": "\u29A8",
        "\\measanglelutonw": "\u29A9",
        "\\measanglerdtose": "\u29AA",
        "\\measangleldtosw": "\u29AB",
        "\\measangleurtone": "\u29AC",
        "\\measangleultonw": "\u29AD",
        "\\measangledrtose": "\u29AE",
        "\\measangledltosw": "\u29AF",
        "\\revemptyset": "\u29B0",
        "\\emptysetobar": "\u29B1",
        "\\emptysetocirc": "\u29B2",
        "\\emptysetoarr": "\u29B3",
        "\\emptysetoarrl": "\u29B4",
        "\\circledparallel": "\u29B7",
        "\\circledbslash": "\u29B8",
        "\\operp": "\u29B9",
        "\\obot": "\u29BA",
        "\\olcross": "\u29BB",
        "\\odotslashdot": "\u29BC",
        "\\uparrowoncircle": "\u29BD",
        "\\circledwhitebullet": "\u29BE",
        "\\circledbullet": "\u29BF",
        "\\circledless": "\u29C0",
        "\\circledgtr": "\u29C1",
        "\\cirscir": "\u29C2",
        "\\cirE": "\u29C3",
        "\\boxslash": "\u29C4",
        "\\boxbslash": "\u29C5",
        "\\boxast": "\u29C6",
        "\\boxcircle": "\u29C7",
        "\\boxbox": "\u29C8",
        "\\boxonbox": "\u29C9",
        "\\ElzLap": "\u29CA",
        "\\Elzdefas": "\u29CB",
        "\\triangles": "\u29CC",
        "\\triangleserifs": "\u29CD",
        "\\rtriltri": "\u29CE",
        "\\LeftTriangleBar": "\u29CF",
        "\\NotLeftTriangleBar": "\u29CF\u0338",
        "\\RightTriangleBar": "\u29D0",
        "\\NotRightTriangleBar": "\u29D0\u0338",
        "\\lfbowtie": "\u29D1",
        "\\rfbowtie": "\u29D2",
        "\\fbowtie": "\u29D3",
        "\\lftimes": "\u29D4",
        "\\rftimes": "\u29D5",
        "\\hourglass": "\u29D6",
        "\\blackhourglass": "\u29D7",
        "\\lvzigzag": "\u29D8",
        "\\rvzigzag": "\u29D9",
        "\\Lvzigzag": "\u29DA",
        "\\Rvzigzag": "\u29DB",
        "\\tieinfty": "\u29DD",
        "\\nvinfty": "\u29DE",
        "\\multimapboth": "\u29DF",
        "\\laplac": "\u29E0",
        "\\lrtriangleeq": "\u29E1",
        "\\shuffle": "\u29E2",
        "\\eparsl": "\u29E3",
        "\\smeparsl": "\u29E4",
        "\\eqvparsl": "\u29E5",
        "\\gleichstark": "\u29E6",
        "\\thermod": "\u29E7",
        "\\downtriangleleftblack": "\u29E8",
        "\\downtrianglerightblack": "\u29E9",
        "\\blackdiamonddownarrow": "\u29EA",
        "\\blacklozenge": "\u29EB",
        "\\circledownarrow": "\u29EC",
        "\\blackcircledownarrow": "\u29ED",
        "\\errbarsquare": "\u29EE",
        "\\errbarblacksquare": "\u29EF",
        "\\errbardiamond": "\u29F0",
        "\\errbarblackdiamond": "\u29F1",
        "\\errbarcircle": "\u29F2",
        "\\errbarblackcircle": "\u29F3",
        "\\RuleDelayed": "\u29F4",
        "\\dsol": "\u29F6",
        "\\rsolbar": "\u29F7",
        "\\xsol": "\u29F8",
        "\\zhide": "\u29F9",
        "\\doubleplus": "\u29FA",
        "\\tripleplus": "\u29FB",
        "\\lcurvyangle": "\u29FC",
        "\\rcurvyangle": "\u29FD",
        "\\tplus": "\u29FE",
        "\\tminus": "\u29FF",
        "\\bigodot": "\u2A00",
        "\\bigoplus": "\u2A01",
        "\\bigotimes": "\u2A02",
        "\\bigcupdot": "\u2A03",
        "\\Elxuplus": "\u2A04",
        "\\ElzThr": "\u2A05",
        "\\Elxsqcup": "\u2A06",
        "\\ElzInf": "\u2A07",
        "\\ElzSup": "\u2A08",
        "\\varprod": "\u2A09",
        "\\modtwosum": "\u2A0A",
        "\\sumint": "\u2A0B",
        "\\iiiint": "\u2A0C",
        "\\ElzCint": "\u2A0D",
        "\\intBar": "\u2A0E",
        "\\clockoint": "\u2A0F",
        "\\awint": "\u2A11",
        "\\rppolint": "\u2A12",
        "\\scpolint": "\u2A13",
        "\\npolint": "\u2A14",
        "\\pointint": "\u2A15",
        "\\sqrint": "\u2A16",
        "\\intlarhk": "\u2A17",
        "\\intx": "\u2A18",
        "\\intcap": "\u2A19",
        "\\intcup": "\u2A1A",
        "\\upint": "\u2A1B",
        "\\lowint": "\u2A1C",
        "\\Join": "\u2A1D",
        "\\bigtriangleleft": "\u2A1E",
        "\\zcmp": "\u2A1F",
        "\\zpipe": "\u2A20",
        "\\zproject": "\u2A21",
        "\\ringplus": "\u2A22",
        "\\plushat": "\u2A23",
        "\\simplus": "\u2A24",
        "\\plussim": "\u2A26",
        "\\plussubtwo": "\u2A27",
        "\\plustrif": "\u2A28",
        "\\commaminus": "\u2A29",
        "\\minusfdots": "\u2A2B",
        "\\minusrdots": "\u2A2C",
        "\\ElzTimes": "\u2A2F",
        "\\dottimes": "\u2A30",
        "\\timesbar": "\u2A31",
        "\\btimes": "\u2A32",
        "\\smashtimes": "\u2A33",
        "\\otimeshat": "\u2A36",
        "\\Otimes": "\u2A37",
        "\\odiv": "\u2A38",
        "\\triangleplus": "\u2A39",
        "\\triangleminus": "\u2A3A",
        "\\triangletimes": "\u2A3B",
        "\\intprodr": "\u2A3D",
        "\\fcmp": "\u2A3E",
        "\\amalg": "\u2A3F",
        "\\capdot": "\u2A40",
        "\\uminus": "\u2A41",
        "\\barcup": "\u2A42",
        "\\barcap": "\u2A43",
        "\\capwedge": "\u2A44",
        "\\cupvee": "\u2A45",
        "\\cupovercap": "\u2A46",
        "\\capovercup": "\u2A47",
        "\\cupbarcap": "\u2A48",
        "\\capbarcup": "\u2A49",
        "\\twocups": "\u2A4A",
        "\\twocaps": "\u2A4B",
        "\\closedvarcup": "\u2A4C",
        "\\closedvarcap": "\u2A4D",
        "\\Sqcap": "\u2A4E",
        "\\Sqcup": "\u2A4F",
        "\\closedvarcupsmashprod": "\u2A50",
        "\\wedgeodot": "\u2A51",
        "\\veeodot": "\u2A52",
        "\\ElzAnd": "\u2A53",
        "\\ElzOr": "\u2A54",
        "\\ElOr": "\u2A56",
        "\\bigslopedvee": "\u2A57",
        "\\bigslopedwedge": "\u2A58",
        "\\veeonwedge": "\u2A59",
        "\\wedgemidvert": "\u2A5A",
        "\\veemidvert": "\u2A5B",
        "\\midbarwedge": "\u2A5C",
        "\\midbarvee": "\u2A5D",
        "\\Elzminhat": "\u2A5F",
        "\\wedgedoublebar": "\u2A60",
        "\\varveebar": "\u2A61",
        "\\doublebarvee": "\u2A62",
        "\\dsub": "\u2A64",
        "\\rsub": "\u2A65",
        "\\eqdot": "\u2A66",
        "\\dotequiv": "\u2A67",
        "\\equivVert": "\u2A68",
        "\\equivVvert": "\u2A69",
        "\\dotsim": "\u2A6A",
        "\\simrdots": "\u2A6B",
        "\\simminussim": "\u2A6C",
        "\\congdot": "\u2A6D",
        "\\stackrel{*}{=}": "\u2A6E",
        "\\hatapprox": "\u2A6F",
        "\\approxeqq": "\u2A70",
        "\\eqqplus": "\u2A71",
        "\\pluseqq": "\u2A72",
        "\\eqqsim": "\u2A73",
        "\\Coloneqq": "\u2A74",
        "\\Equal": "\u2A75",
        "\\Same": "\u2A76",
        "\\ddotseq": "\u2A77",
        "\\equivDD": "\u2A78",
        "\\ltcir": "\u2A79",
        "\\gtcir": "\u2A7A",
        "\\ltquest": "\u2A7B",
        "\\gtquest": "\u2A7C",
        "\\leqslant": "\u2A7D",
        "\\nleqslant": "\u2A7D\u0338",
        "\\geqslant": "\u2A7E",
        "\\ngeqslant": "\u2A7E\u0338",
        "\\lesdot": "\u2A7F",
        "\\gesdot": "\u2A80",
        "\\lesdoto": "\u2A81",
        "\\gesdoto": "\u2A82",
        "\\lesdotor": "\u2A83",
        "\\gesdotol": "\u2A84",
        "\\lessapprox": "\u2A85",
        "\\gtrapprox": "\u2A86",
        "\\lneq": "\u2A87",
        "\\gneq": "\u2A88",
        "\\lnapprox": "\u2A89",
        "\\gnapprox": "\u2A8A",
        "\\lesseqqgtr": "\u2A8B",
        "\\gtreqqless": "\u2A8C",
        "\\lsime": "\u2A8D",
        "\\gsime": "\u2A8E",
        "\\lsimg": "\u2A8F",
        "\\gsiml": "\u2A90",
        "\\lgE": "\u2A91",
        "\\glE": "\u2A92",
        "\\lesges": "\u2A93",
        "\\gesles": "\u2A94",
        "\\eqslantless": "\u2A95",
        "\\eqslantgtr": "\u2A96",
        "\\elsdot": "\u2A97",
        "\\egsdot": "\u2A98",
        "\\eqqless": "\u2A99",
        "\\eqqgtr": "\u2A9A",
        "\\eqqslantless": "\u2A9B",
        "\\eqqslantgtr": "\u2A9C",
        "\\Pisymbol{ppi020}{117}": "\u2A9D",
        "\\Pisymbol{ppi020}{105}": "\u2A9E",
        "\\simlE": "\u2A9F",
        "\\simgE": "\u2AA0",
        "\\NestedLessLess": "\u2AA1",
        "\\NotNestedLessLess": "\u2AA1\u0338",
        "\\NestedGreaterGreater": "\u2AA2",
        "\\NotNestedGreaterGreater": "\u2AA2\u0338",
        "\\partialmeetcontraction": "\u2AA3",
        "\\glj": "\u2AA4",
        "\\gla": "\u2AA5",
        "\\leftslice": "\u2AA6",
        "\\rightslice": "\u2AA7",
        "\\lescc": "\u2AA8",
        "\\gescc": "\u2AA9",
        "\\smt": "\u2AAA",
        "\\lat": "\u2AAB",
        "\\smte": "\u2AAC",
        "\\late": "\u2AAD",
        "\\bumpeqq": "\u2AAE",
        "\\preceq": "\u2AAF",
        "\\not\\preceq": "\u2AAF\u0338",
        "\\succeq": "\u2AB0",
        "\\not\\succeq": "\u2AB0\u0338",
        "\\precneq": "\u2AB1",
        "\\succneq": "\u2AB2",
        "\\preceqq": "\u2AB3",
        "\\succeqq": "\u2AB4",
        "\\precneqq": "\u2AB5",
        "\\succneqq": "\u2AB6",
        "\\precapprox": "\u2AB7",
        "\\succapprox": "\u2AB8",
        "\\precnapprox": "\u2AB9",
        "\\succnapprox": "\u2ABA",
        "\\llcurly": "\u2ABB",
        "\\ggcurly": "\u2ABC",
        "\\subsetdot": "\u2ABD",
        "\\supsetdot": "\u2ABE",
        "\\subsetplus": "\u2ABF",
        "\\supsetplus": "\u2AC0",
        "\\submult": "\u2AC1",
        "\\supmult": "\u2AC2",
        "\\subedot": "\u2AC3",
        "\\supedot": "\u2AC4",
        "\\subseteqq": "\u2AC5",
        "\\nsubseteqq": "\u2AC5\u0338",
        "\\supseteqq": "\u2AC6",
        "\\nsupseteqq": "\u2AC6\u0338",
        "\\subsim": "\u2AC7",
        "\\supsim": "\u2AC8",
        "\\subsetapprox": "\u2AC9",
        "\\supsetapprox": "\u2ACA",
        "\\subsetneqq": "\u2ACB",
        "\\supsetneqq": "\u2ACC",
        "\\lsqhook": "\u2ACD",
        "\\rsqhook": "\u2ACE",
        "\\csub": "\u2ACF",
        "\\csup": "\u2AD0",
        "\\csube": "\u2AD1",
        "\\csupe": "\u2AD2",
        "\\subsup": "\u2AD3",
        "\\supsub": "\u2AD4",
        "\\subsub": "\u2AD5",
        "\\supsup": "\u2AD6",
        "\\suphsub": "\u2AD7",
        "\\supdsub": "\u2AD8",
        "\\forkv": "\u2AD9",
        "\\topfork": "\u2ADA",
        "\\mlcp": "\u2ADB",
        "\\forks": "\u2ADC",
        "\\forksnot": "\u2ADD",
        "\\shortlefttack": "\u2ADE",
        "\\shortdowntack": "\u2ADF",
        "\\shortuptack": "\u2AE0",
        "\\perps": "\u2AE1",
        "\\vDdash": "\u2AE2",
        "\\dashV": "\u2AE3",
        "\\Dashv": "\u2AE4",
        "\\DashV": "\u2AE5",
        "\\varVdash": "\u2AE6",
        "\\Barv": "\u2AE7",
        "\\vBar": "\u2AE8",
        "\\vBarv": "\u2AE9",
        "\\Top": "\u2AEA",
        "\\Not": "\u2AEC",
        "\\bNot": "\u2AED",
        "\\revnmid": "\u2AEE",
        "\\cirmid": "\u2AEF",
        "\\midcir": "\u2AF0",
        "\\topcir": "\u2AF1",
        "\\nhpar": "\u2AF2",
        "\\parsim": "\u2AF3",
        "\\interleave": "\u2AF4",
        "\\nhVvert": "\u2AF5",
        "\\Elztdcol": "\u2AF6",
        "\\lllnest": "\u2AF7",
        "\\gggnest": "\u2AF8",
        "\\leqqslant": "\u2AF9",
        "\\geqqslant": "\u2AFA",
        "\\trslash": "\u2AFB",
        "\\biginterleave": "\u2AFC",
        "{{/}\\!\\!{/}}": "\u2AFD",
        "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}": "\u2AFD\u20E5",
        "\\talloblong": "\u2AFE",
        "\\bigtalloblong": "\u2AFF",
        "\\squaretopblack": "\u2B12",
        "\\squarebotblack": "\u2B13",
        "\\squareurblack": "\u2B14",
        "\\squarellblack": "\u2B15",
        "\\diamondleftblack": "\u2B16",
        "\\diamondrightblack": "\u2B17",
        "\\diamondtopblack": "\u2B18",
        "\\diamondbotblack": "\u2B19",
        "\\dottedsquare": "\u2B1A",
        "\\blacksquare": "\u2B1B",
        "\\vysmblksquare": "\u2B1D",
        "\\vysmwhtsquare": "\u2B1E",
        "\\pentagonblack": "\u2B1F",
        "\\pentagon": "\u2B20",
        "\\varhexagon": "\u2B21",
        "\\varhexagonblack": "\u2B22",
        "\\hexagonblack": "\u2B23",
        "\\lgblkcircle": "\u2B24",
        "\\mdblkdiamond": "\u2B25",
        "\\mdwhtdiamond": "\u2B26",
        "\\mdblklozenge": "\u2B27",
        "\\mdwhtlozenge": "\u2B28",
        "\\smblkdiamond": "\u2B29",
        "\\smblklozenge": "\u2B2A",
        "\\smwhtlozenge": "\u2B2B",
        "\\blkhorzoval": "\u2B2C",
        "\\whthorzoval": "\u2B2D",
        "\\blkvertoval": "\u2B2E",
        "\\whtvertoval": "\u2B2F",
        "\\circleonleftarrow": "\u2B30",
        "\\leftthreearrows": "\u2B31",
        "\\leftarrowonoplus": "\u2B32",
        "\\longleftsquigarrow": "\u2B33",
        "\\nvtwoheadleftarrow": "\u2B34",
        "\\nVtwoheadleftarrow": "\u2B35",
        "\\twoheadmapsfrom": "\u2B36",
        "\\twoheadleftdbkarrow": "\u2B37",
        "\\leftdotarrow": "\u2B38",
        "\\nvleftarrowtail": "\u2B39",
        "\\nVleftarrowtail": "\u2B3A",
        "\\twoheadleftarrowtail": "\u2B3B",
        "\\nvtwoheadleftarrowtail": "\u2B3C",
        "\\nVtwoheadleftarrowtail": "\u2B3D",
        "\\leftarrowx": "\u2B3E",
        "\\leftcurvedarrow": "\u2B3F",
        "\\equalleftarrow": "\u2B40",
        "\\bsimilarleftarrow": "\u2B41",
        "\\leftarrowbackapprox": "\u2B42",
        "\\rightarrowgtr": "\u2B43",
        "\\rightarrowsupset": "\u2B44",
        "\\LLeftarrow": "\u2B45",
        "\\RRightarrow": "\u2B46",
        "\\bsimilarrightarrow": "\u2B47",
        "\\rightarrowbackapprox": "\u2B48",
        "\\similarleftarrow": "\u2B49",
        "\\leftarrowapprox": "\u2B4A",
        "\\leftarrowbsimilar": "\u2B4B",
        "\\rightarrowbsimilar": "\u2B4C",
        "\\medwhitestar": "\u2B50",
        "\\medblackstar": "\u2B51",
        "\\smwhitestar": "\u2B52",
        "\\rightpentagonblack": "\u2B53",
        "\\rightpentagon": "\u2B54",
        "\\postalmark": "\u3012",
        "\\lbrbrak": "\u3014",
        "\\rbrbrak": "\u3015",
        "\\openbracketleft": "\u301A",
        "\\openbracketright": "\u301B",
        "\\hzigzag": "\u3030",
        "\\dbend": "\uFFFD",
        "\\mathbf{A}": "\u{1D400}",
        "\\mathbf{B}": "\u{1D401}",
        "\\mathbf{C}": "\u{1D402}",
        "\\mathbf{D}": "\u{1D403}",
        "\\mathbf{E}": "\u{1D404}",
        "\\mathbf{F}": "\u{1D405}",
        "\\mathbf{G}": "\u{1D406}",
        "\\mathbf{H}": "\u{1D407}",
        "\\mathbf{I}": "\u{1D408}",
        "\\mathbf{J}": "\u{1D409}",
        "\\mathbf{K}": "\u{1D40A}",
        "\\mathbf{L}": "\u{1D40B}",
        "\\mathbf{M}": "\u{1D40C}",
        "\\mathbf{N}": "\u{1D40D}",
        "\\mathbf{O}": "\u{1D40E}",
        "\\mathbf{P}": "\u{1D40F}",
        "\\mathbf{Q}": "\u{1D410}",
        "\\mathbf{R}": "\u{1D411}",
        "\\mathbf{S}": "\u{1D412}",
        "\\mathbf{T}": "\u{1D413}",
        "\\mathbf{U}": "\u{1D414}",
        "\\mathbf{V}": "\u{1D415}",
        "\\mathbf{W}": "\u{1D416}",
        "\\mathbf{X}": "\u{1D417}",
        "\\mathbf{Y}": "\u{1D418}",
        "\\mathbf{Z}": "\u{1D419}",
        "\\mathbf{a}": "\u{1D41A}",
        "\\mathbf{b}": "\u{1D41B}",
        "\\mathbf{c}": "\u{1D41C}",
        "\\mathbf{d}": "\u{1D41D}",
        "\\mathbf{e}": "\u{1D41E}",
        "\\mathbf{f}": "\u{1D41F}",
        "\\mathbf{g}": "\u{1D420}",
        "\\mathbf{h}": "\u{1D421}",
        "\\mathbf{i}": "\u{1D422}",
        "\\mathbf{j}": "\u{1D423}",
        "\\mathbf{k}": "\u{1D424}",
        "\\mathbf{l}": "\u{1D425}",
        "\\mathbf{m}": "\u{1D426}",
        "\\mathbf{n}": "\u{1D427}",
        "\\mathbf{o}": "\u{1D428}",
        "\\mathbf{p}": "\u{1D429}",
        "\\mathbf{q}": "\u{1D42A}",
        "\\mathbf{r}": "\u{1D42B}",
        "\\mathbf{s}": "\u{1D42C}",
        "\\mathbf{t}": "\u{1D42D}",
        "\\mathbf{u}": "\u{1D42E}",
        "\\mathbf{v}": "\u{1D42F}",
        "\\mathbf{w}": "\u{1D430}",
        "\\mathbf{x}": "\u{1D431}",
        "\\mathbf{y}": "\u{1D432}",
        "\\mathbf{z}": "\u{1D433}",
        "\\mathsl{A}": "\u{1D434}",
        "\\mathsl{B}": "\u{1D435}",
        "\\mathsl{C}": "\u{1D436}",
        "\\mathsl{D}": "\u{1D437}",
        "\\mathsl{E}": "\u{1D438}",
        "\\mathsl{F}": "\u{1D439}",
        "\\mathsl{G}": "\u{1D43A}",
        "\\mathsl{H}": "\u{1D43B}",
        "\\mathsl{I}": "\u{1D43C}",
        "\\mathsl{J}": "\u{1D43D}",
        "\\mathsl{K}": "\u{1D43E}",
        "\\mathsl{L}": "\u{1D43F}",
        "\\mathsl{M}": "\u{1D440}",
        "\\mathsl{N}": "\u{1D441}",
        "\\mathsl{O}": "\u{1D442}",
        "\\mathsl{P}": "\u{1D443}",
        "\\mathsl{Q}": "\u{1D444}",
        "\\mathsl{R}": "\u{1D445}",
        "\\mathsl{S}": "\u{1D446}",
        "\\mathsl{T}": "\u{1D447}",
        "\\mathsl{U}": "\u{1D448}",
        "\\mathsl{V}": "\u{1D449}",
        "\\mathsl{W}": "\u{1D44A}",
        "\\mathsl{X}": "\u{1D44B}",
        "\\mathsl{Y}": "\u{1D44C}",
        "\\mathsl{Z}": "\u{1D44D}",
        "\\mathsl{a}": "\u{1D44E}",
        "\\mathsl{b}": "\u{1D44F}",
        "\\mathsl{c}": "\u{1D450}",
        "\\mathsl{d}": "\u{1D451}",
        "\\mathsl{e}": "\u{1D452}",
        "\\mathsl{f}": "\u{1D453}",
        "\\mathsl{g}": "\u{1D454}",
        "\\mathsl{i}": "\u{1D456}",
        "\\mathsl{j}": "\u{1D457}",
        "\\mathsl{k}": "\u{1D458}",
        "\\mathsl{l}": "\u{1D459}",
        "\\mathsl{m}": "\u{1D45A}",
        "\\mathsl{n}": "\u{1D45B}",
        "\\mathsl{o}": "\u{1D45C}",
        "\\mathsl{p}": "\u{1D45D}",
        "\\mathsl{q}": "\u{1D45E}",
        "\\mathsl{r}": "\u{1D45F}",
        "\\mathsl{s}": "\u{1D460}",
        "\\mathsl{t}": "\u{1D461}",
        "\\mathsl{u}": "\u{1D462}",
        "\\mathsl{v}": "\u{1D463}",
        "\\mathsl{w}": "\u{1D464}",
        "\\mathsl{x}": "\u{1D465}",
        "\\mathsl{y}": "\u{1D466}",
        "\\mathsl{z}": "\u{1D467}",
        "\\mathbit{A}": "\u{1D468}",
        "\\mathbit{B}": "\u{1D469}",
        "\\mathbit{C}": "\u{1D46A}",
        "\\mathbit{D}": "\u{1D46B}",
        "\\mathbit{E}": "\u{1D46C}",
        "\\mathbit{F}": "\u{1D46D}",
        "\\mathbit{G}": "\u{1D46E}",
        "\\mathbit{H}": "\u{1D46F}",
        "\\mathbit{I}": "\u{1D470}",
        "\\mathbit{J}": "\u{1D471}",
        "\\mathbit{K}": "\u{1D472}",
        "\\mathbit{L}": "\u{1D473}",
        "\\mathbit{M}": "\u{1D474}",
        "\\mathbit{N}": "\u{1D475}",
        "\\mathbit{O}": "\u{1D476}",
        "\\mathbit{P}": "\u{1D477}",
        "\\mathbit{Q}": "\u{1D478}",
        "\\mathbit{R}": "\u{1D479}",
        "\\mathbit{S}": "\u{1D47A}",
        "\\mathbit{T}": "\u{1D47B}",
        "\\mathbit{U}": "\u{1D47C}",
        "\\mathbit{V}": "\u{1D47D}",
        "\\mathbit{W}": "\u{1D47E}",
        "\\mathbit{X}": "\u{1D47F}",
        "\\mathbit{Y}": "\u{1D480}",
        "\\mathbit{Z}": "\u{1D481}",
        "\\mathbit{a}": "\u{1D482}",
        "\\mathbit{b}": "\u{1D483}",
        "\\mathbit{c}": "\u{1D484}",
        "\\mathbit{d}": "\u{1D485}",
        "\\mathbit{e}": "\u{1D486}",
        "\\mathbit{f}": "\u{1D487}",
        "\\mathbit{g}": "\u{1D488}",
        "\\mathbit{h}": "\u{1D489}",
        "\\mathbit{i}": "\u{1D48A}",
        "\\mathbit{j}": "\u{1D48B}",
        "\\mathbit{k}": "\u{1D48C}",
        "\\mathbit{l}": "\u{1D48D}",
        "\\mathbit{m}": "\u{1D48E}",
        "\\mathbit{n}": "\u{1D48F}",
        "\\mathbit{o}": "\u{1D490}",
        "\\mathbit{p}": "\u{1D491}",
        "\\mathbit{q}": "\u{1D492}",
        "\\mathbit{r}": "\u{1D493}",
        "\\mathbit{s}": "\u{1D494}",
        "\\mathbit{t}": "\u{1D495}",
        "\\mathbit{u}": "\u{1D496}",
        "\\mathbit{v}": "\u{1D497}",
        "\\mathbit{w}": "\u{1D498}",
        "\\mathbit{x}": "\u{1D499}",
        "\\mathbit{y}": "\u{1D49A}",
        "\\mathbit{z}": "\u{1D49B}",
        "\\mathscr{A}": "\u{1D49C}",
        "\\mathscr{C}": "\u{1D49E}",
        "\\mathscr{D}": "\u{1D49F}",
        "\\mathscr{G}": "\u{1D4A2}",
        "\\mathscr{J}": "\u{1D4A5}",
        "\\mathscr{K}": "\u{1D4A6}",
        "\\mathscr{N}": "\u{1D4A9}",
        "\\mathscr{O}": "\u{1D4AA}",
        "\\mathscr{P}": "\u{1D4AB}",
        "\\mathscr{Q}": "\u{1D4AC}",
        "\\mathscr{S}": "\u{1D4AE}",
        "\\mathscr{T}": "\u{1D4AF}",
        "\\mathscr{U}": "\u{1D4B0}",
        "\\mathscr{V}": "\u{1D4B1}",
        "\\mathscr{W}": "\u{1D4B2}",
        "\\mathscr{X}": "\u{1D4B3}",
        "\\mathscr{Y}": "\u{1D4B4}",
        "\\mathscr{Z}": "\u{1D4B5}",
        "\\mathscr{a}": "\u{1D4B6}",
        "\\mathscr{b}": "\u{1D4B7}",
        "\\mathscr{c}": "\u{1D4B8}",
        "\\mathscr{d}": "\u{1D4B9}",
        "\\mathscr{f}": "\u{1D4BB}",
        "\\mathscr{h}": "\u{1D4BD}",
        "\\mathscr{i}": "\u{1D4BE}",
        "\\mathscr{j}": "\u{1D4BF}",
        "\\mathscr{k}": "\u{1D4C0}",
        "\\mathscr{m}": "\u{1D4C2}",
        "\\mathscr{n}": "\u{1D4C3}",
        "\\mathscr{p}": "\u{1D4C5}",
        "\\mathscr{q}": "\u{1D4C6}",
        "\\mathscr{r}": "\u{1D4C7}",
        "\\mathscr{s}": "\u{1D4C8}",
        "\\mathscr{t}": "\u{1D4C9}",
        "\\mathscr{u}": "\u{1D4CA}",
        "\\mathscr{v}": "\u{1D4CB}",
        "\\mathscr{w}": "\u{1D4CC}",
        "\\mathscr{x}": "\u{1D4CD}",
        "\\mathscr{y}": "\u{1D4CE}",
        "\\mathscr{z}": "\u{1D4CF}",
        "\\mathmit{A}": "\u{1D4D0}",
        "\\mathmit{B}": "\u{1D4D1}",
        "\\mathmit{C}": "\u{1D4D2}",
        "\\mathmit{D}": "\u{1D4D3}",
        "\\mathmit{E}": "\u{1D4D4}",
        "\\mathmit{F}": "\u{1D4D5}",
        "\\mathmit{G}": "\u{1D4D6}",
        "\\mathmit{H}": "\u{1D4D7}",
        "\\mathmit{I}": "\u{1D4D8}",
        "\\mathmit{J}": "\u{1D4D9}",
        "\\mathmit{K}": "\u{1D4DA}",
        "\\mathmit{L}": "\u{1D4DB}",
        "\\mathmit{M}": "\u{1D4DC}",
        "\\mathmit{N}": "\u{1D4DD}",
        "\\mathmit{O}": "\u{1D4DE}",
        "\\mathmit{P}": "\u{1D4DF}",
        "\\mathmit{Q}": "\u{1D4E0}",
        "\\mathmit{R}": "\u{1D4E1}",
        "\\mathmit{S}": "\u{1D4E2}",
        "\\mathmit{T}": "\u{1D4E3}",
        "\\mathmit{U}": "\u{1D4E4}",
        "\\mathmit{V}": "\u{1D4E5}",
        "\\mathmit{W}": "\u{1D4E6}",
        "\\mathmit{X}": "\u{1D4E7}",
        "\\mathmit{Y}": "\u{1D4E8}",
        "\\mathmit{Z}": "\u{1D4E9}",
        "\\mathmit{a}": "\u{1D4EA}",
        "\\mathmit{b}": "\u{1D4EB}",
        "\\mathmit{c}": "\u{1D4EC}",
        "\\mathmit{d}": "\u{1D4ED}",
        "\\mathmit{e}": "\u{1D4EE}",
        "\\mathmit{f}": "\u{1D4EF}",
        "\\mathmit{g}": "\u{1D4F0}",
        "\\mathmit{h}": "\u{1D4F1}",
        "\\mathmit{i}": "\u{1D4F2}",
        "\\mathmit{j}": "\u{1D4F3}",
        "\\mathmit{k}": "\u{1D4F4}",
        "\\mathmit{l}": "\u{1D4F5}",
        "\\mathmit{m}": "\u{1D4F6}",
        "\\mathmit{n}": "\u{1D4F7}",
        "\\mathmit{o}": "\u{1D4F8}",
        "\\mathmit{p}": "\u{1D4F9}",
        "\\mathmit{q}": "\u{1D4FA}",
        "\\mathmit{r}": "\u{1D4FB}",
        "\\mathmit{s}": "\u{1D4FC}",
        "\\mathmit{t}": "\u{1D4FD}",
        "\\mathmit{u}": "\u{1D4FE}",
        "\\mathmit{v}": "\u{1D4FF}",
        "\\mathmit{w}": "\u{1D500}",
        "\\mathmit{x}": "\u{1D501}",
        "\\mathmit{y}": "\u{1D502}",
        "\\mathmit{z}": "\u{1D503}",
        "\\mathfrak{A}": "\u{1D504}",
        "\\mathfrak{B}": "\u{1D505}",
        "\\mathfrak{D}": "\u{1D507}",
        "\\mathfrak{E}": "\u{1D508}",
        "\\mathfrak{F}": "\u{1D509}",
        "\\mathfrak{G}": "\u{1D50A}",
        "\\mathfrak{J}": "\u{1D50D}",
        "\\mathfrak{K}": "\u{1D50E}",
        "\\mathfrak{L}": "\u{1D50F}",
        "\\mathfrak{M}": "\u{1D510}",
        "\\mathfrak{N}": "\u{1D511}",
        "\\mathfrak{O}": "\u{1D512}",
        "\\mathfrak{P}": "\u{1D513}",
        "\\mathfrak{Q}": "\u{1D514}",
        "\\mathfrak{S}": "\u{1D516}",
        "\\mathfrak{T}": "\u{1D517}",
        "\\mathfrak{U}": "\u{1D518}",
        "\\mathfrak{V}": "\u{1D519}",
        "\\mathfrak{W}": "\u{1D51A}",
        "\\mathfrak{X}": "\u{1D51B}",
        "\\mathfrak{Y}": "\u{1D51C}",
        "\\mathfrak{a}": "\u{1D51E}",
        "\\mathfrak{b}": "\u{1D51F}",
        "\\mathfrak{c}": "\u{1D520}",
        "\\mathfrak{d}": "\u{1D521}",
        "\\mathfrak{e}": "\u{1D522}",
        "\\mathfrak{f}": "\u{1D523}",
        "\\mathfrak{g}": "\u{1D524}",
        "\\mathfrak{h}": "\u{1D525}",
        "\\mathfrak{i}": "\u{1D526}",
        "\\mathfrak{j}": "\u{1D527}",
        "\\mathfrak{k}": "\u{1D528}",
        "\\mathfrak{l}": "\u{1D529}",
        "\\mathfrak{m}": "\u{1D52A}",
        "\\mathfrak{n}": "\u{1D52B}",
        "\\mathfrak{o}": "\u{1D52C}",
        "\\mathfrak{p}": "\u{1D52D}",
        "\\mathfrak{q}": "\u{1D52E}",
        "\\mathfrak{r}": "\u{1D52F}",
        "\\mathfrak{s}": "\u{1D530}",
        "\\mathfrak{t}": "\u{1D531}",
        "\\mathfrak{u}": "\u{1D532}",
        "\\mathfrak{v}": "\u{1D533}",
        "\\mathfrak{w}": "\u{1D534}",
        "\\mathfrak{x}": "\u{1D535}",
        "\\mathfrak{y}": "\u{1D536}",
        "\\mathfrak{z}": "\u{1D537}",
        "\\mathbb{A}": "\u{1D538}",
        "\\mathbb{B}": "\u{1D539}",
        "\\mathbb{D}": "\u{1D53B}",
        "\\mathbb{E}": "\u{1D53C}",
        "\\mathbb{F}": "\u{1D53D}",
        "\\mathbb{G}": "\u{1D53E}",
        "\\mathbb{I}": "\u{1D540}",
        "\\mathbb{J}": "\u{1D541}",
        "\\mathbb{K}": "\u{1D542}",
        "\\mathbb{L}": "\u{1D543}",
        "\\mathbb{M}": "\u{1D544}",
        "\\mathbb{O}": "\u{1D546}",
        "\\mathbb{S}": "\u{1D54A}",
        "\\mathbb{T}": "\u{1D54B}",
        "\\mathbb{U}": "\u{1D54C}",
        "\\mathbb{V}": "\u{1D54D}",
        "\\mathbb{W}": "\u{1D54E}",
        "\\mathbb{X}": "\u{1D54F}",
        "\\mathbb{Y}": "\u{1D550}",
        "\\mathbb{a}": "\u{1D552}",
        "\\mathbb{b}": "\u{1D553}",
        "\\mathbb{c}": "\u{1D554}",
        "\\mathbb{d}": "\u{1D555}",
        "\\mathbb{e}": "\u{1D556}",
        "\\mathbb{f}": "\u{1D557}",
        "\\mathbb{g}": "\u{1D558}",
        "\\mathbb{h}": "\u{1D559}",
        "\\mathbb{i}": "\u{1D55A}",
        "\\mathbb{j}": "\u{1D55B}",
        "\\mathbb{k}": "\u{1D55C}",
        "\\mathbb{l}": "\u{1D55D}",
        "\\mathbb{m}": "\u{1D55E}",
        "\\mathbb{n}": "\u{1D55F}",
        "\\mathbb{o}": "\u{1D560}",
        "\\mathbb{p}": "\u{1D561}",
        "\\mathbb{q}": "\u{1D562}",
        "\\mathbb{r}": "\u{1D563}",
        "\\mathbb{s}": "\u{1D564}",
        "\\mathbb{t}": "\u{1D565}",
        "\\mathbb{u}": "\u{1D566}",
        "\\mathbb{v}": "\u{1D567}",
        "\\mathbb{w}": "\u{1D568}",
        "\\mathbb{x}": "\u{1D569}",
        "\\mathbb{y}": "\u{1D56A}",
        "\\mathbb{z}": "\u{1D56B}",
        "\\mathslbb{A}": "\u{1D56C}",
        "\\mathslbb{B}": "\u{1D56D}",
        "\\mathslbb{C}": "\u{1D56E}",
        "\\mathslbb{D}": "\u{1D56F}",
        "\\mathslbb{E}": "\u{1D570}",
        "\\mathslbb{F}": "\u{1D571}",
        "\\mathslbb{G}": "\u{1D572}",
        "\\mathslbb{H}": "\u{1D573}",
        "\\mathslbb{I}": "\u{1D574}",
        "\\mathslbb{J}": "\u{1D575}",
        "\\mathslbb{K}": "\u{1D576}",
        "\\mathslbb{L}": "\u{1D577}",
        "\\mathslbb{M}": "\u{1D578}",
        "\\mathslbb{N}": "\u{1D579}",
        "\\mathslbb{O}": "\u{1D57A}",
        "\\mathslbb{P}": "\u{1D57B}",
        "\\mathslbb{Q}": "\u{1D57C}",
        "\\mathslbb{R}": "\u{1D57D}",
        "\\mathslbb{S}": "\u{1D57E}",
        "\\mathslbb{T}": "\u{1D57F}",
        "\\mathslbb{U}": "\u{1D580}",
        "\\mathslbb{V}": "\u{1D581}",
        "\\mathslbb{W}": "\u{1D582}",
        "\\mathslbb{X}": "\u{1D583}",
        "\\mathslbb{Y}": "\u{1D584}",
        "\\mathslbb{Z}": "\u{1D585}",
        "\\mathslbb{a}": "\u{1D586}",
        "\\mathslbb{b}": "\u{1D587}",
        "\\mathslbb{c}": "\u{1D588}",
        "\\mathslbb{d}": "\u{1D589}",
        "\\mathslbb{e}": "\u{1D58A}",
        "\\mathslbb{f}": "\u{1D58B}",
        "\\mathslbb{g}": "\u{1D58C}",
        "\\mathslbb{h}": "\u{1D58D}",
        "\\mathslbb{i}": "\u{1D58E}",
        "\\mathslbb{j}": "\u{1D58F}",
        "\\mathslbb{k}": "\u{1D590}",
        "\\mathslbb{l}": "\u{1D591}",
        "\\mathslbb{m}": "\u{1D592}",
        "\\mathslbb{n}": "\u{1D593}",
        "\\mathslbb{o}": "\u{1D594}",
        "\\mathslbb{p}": "\u{1D595}",
        "\\mathslbb{q}": "\u{1D596}",
        "\\mathslbb{r}": "\u{1D597}",
        "\\mathslbb{s}": "\u{1D598}",
        "\\mathslbb{t}": "\u{1D599}",
        "\\mathslbb{u}": "\u{1D59A}",
        "\\mathslbb{v}": "\u{1D59B}",
        "\\mathslbb{w}": "\u{1D59C}",
        "\\mathslbb{x}": "\u{1D59D}",
        "\\mathslbb{y}": "\u{1D59E}",
        "\\mathslbb{z}": "\u{1D59F}",
        "\\mathsf{A}": "\u{1D5A0}",
        "\\mathsf{B}": "\u{1D5A1}",
        "\\mathsf{C}": "\u{1D5A2}",
        "\\mathsf{D}": "\u{1D5A3}",
        "\\mathsf{E}": "\u{1D5A4}",
        "\\mathsf{F}": "\u{1D5A5}",
        "\\mathsf{G}": "\u{1D5A6}",
        "\\mathsf{H}": "\u{1D5A7}",
        "\\mathsf{I}": "\u{1D5A8}",
        "\\mathsf{J}": "\u{1D5A9}",
        "\\mathsf{K}": "\u{1D5AA}",
        "\\mathsf{L}": "\u{1D5AB}",
        "\\mathsf{M}": "\u{1D5AC}",
        "\\mathsf{N}": "\u{1D5AD}",
        "\\mathsf{O}": "\u{1D5AE}",
        "\\mathsf{P}": "\u{1D5AF}",
        "\\mathsf{Q}": "\u{1D5B0}",
        "\\mathsf{R}": "\u{1D5B1}",
        "\\mathsf{S}": "\u{1D5B2}",
        "\\mathsf{T}": "\u{1D5B3}",
        "\\mathsf{U}": "\u{1D5B4}",
        "\\mathsf{V}": "\u{1D5B5}",
        "\\mathsf{W}": "\u{1D5B6}",
        "\\mathsf{X}": "\u{1D5B7}",
        "\\mathsf{Y}": "\u{1D5B8}",
        "\\mathsf{Z}": "\u{1D5B9}",
        "\\mathsf{a}": "\u{1D5BA}",
        "\\mathsf{b}": "\u{1D5BB}",
        "\\mathsf{c}": "\u{1D5BC}",
        "\\mathsf{d}": "\u{1D5BD}",
        "\\mathsf{e}": "\u{1D5BE}",
        "\\mathsf{f}": "\u{1D5BF}",
        "\\mathsf{g}": "\u{1D5C0}",
        "\\mathsf{h}": "\u{1D5C1}",
        "\\mathsf{i}": "\u{1D5C2}",
        "\\mathsf{j}": "\u{1D5C3}",
        "\\mathsf{k}": "\u{1D5C4}",
        "\\mathsf{l}": "\u{1D5C5}",
        "\\mathsf{m}": "\u{1D5C6}",
        "\\mathsf{n}": "\u{1D5C7}",
        "\\mathsf{o}": "\u{1D5C8}",
        "\\mathsf{p}": "\u{1D5C9}",
        "\\mathsf{q}": "\u{1D5CA}",
        "\\mathsf{r}": "\u{1D5CB}",
        "\\mathsf{s}": "\u{1D5CC}",
        "\\mathsf{t}": "\u{1D5CD}",
        "\\mathsf{u}": "\u{1D5CE}",
        "\\mathsf{v}": "\u{1D5CF}",
        "\\mathsf{w}": "\u{1D5D0}",
        "\\mathsf{x}": "\u{1D5D1}",
        "\\mathsf{y}": "\u{1D5D2}",
        "\\mathsf{z}": "\u{1D5D3}",
        "\\mathsfbf{A}": "\u{1D5D4}",
        "\\mathsfbf{B}": "\u{1D5D5}",
        "\\mathsfbf{C}": "\u{1D5D6}",
        "\\mathsfbf{D}": "\u{1D5D7}",
        "\\mathsfbf{E}": "\u{1D5D8}",
        "\\mathsfbf{F}": "\u{1D5D9}",
        "\\mathsfbf{G}": "\u{1D5DA}",
        "\\mathsfbf{H}": "\u{1D5DB}",
        "\\mathsfbf{I}": "\u{1D5DC}",
        "\\mathsfbf{J}": "\u{1D5DD}",
        "\\mathsfbf{K}": "\u{1D5DE}",
        "\\mathsfbf{L}": "\u{1D5DF}",
        "\\mathsfbf{M}": "\u{1D5E0}",
        "\\mathsfbf{N}": "\u{1D5E1}",
        "\\mathsfbf{O}": "\u{1D5E2}",
        "\\mathsfbf{P}": "\u{1D5E3}",
        "\\mathsfbf{Q}": "\u{1D5E4}",
        "\\mathsfbf{R}": "\u{1D5E5}",
        "\\mathsfbf{S}": "\u{1D5E6}",
        "\\mathsfbf{T}": "\u{1D5E7}",
        "\\mathsfbf{U}": "\u{1D5E8}",
        "\\mathsfbf{V}": "\u{1D5E9}",
        "\\mathsfbf{W}": "\u{1D5EA}",
        "\\mathsfbf{X}": "\u{1D5EB}",
        "\\mathsfbf{Y}": "\u{1D5EC}",
        "\\mathsfbf{Z}": "\u{1D5ED}",
        "\\mathsfbf{a}": "\u{1D5EE}",
        "\\mathsfbf{b}": "\u{1D5EF}",
        "\\mathsfbf{c}": "\u{1D5F0}",
        "\\mathsfbf{d}": "\u{1D5F1}",
        "\\mathsfbf{e}": "\u{1D5F2}",
        "\\mathsfbf{f}": "\u{1D5F3}",
        "\\mathsfbf{g}": "\u{1D5F4}",
        "\\mathsfbf{h}": "\u{1D5F5}",
        "\\mathsfbf{i}": "\u{1D5F6}",
        "\\mathsfbf{j}": "\u{1D5F7}",
        "\\mathsfbf{k}": "\u{1D5F8}",
        "\\mathsfbf{l}": "\u{1D5F9}",
        "\\mathsfbf{m}": "\u{1D5FA}",
        "\\mathsfbf{n}": "\u{1D5FB}",
        "\\mathsfbf{o}": "\u{1D5FC}",
        "\\mathsfbf{p}": "\u{1D5FD}",
        "\\mathsfbf{q}": "\u{1D5FE}",
        "\\mathsfbf{r}": "\u{1D5FF}",
        "\\mathsfbf{s}": "\u{1D600}",
        "\\mathsfbf{t}": "\u{1D601}",
        "\\mathsfbf{u}": "\u{1D602}",
        "\\mathsfbf{v}": "\u{1D603}",
        "\\mathsfbf{w}": "\u{1D604}",
        "\\mathsfbf{x}": "\u{1D605}",
        "\\mathsfbf{y}": "\u{1D606}",
        "\\mathsfbf{z}": "\u{1D607}",
        "\\mathsfsl{A}": "\u{1D608}",
        "\\mathsfsl{B}": "\u{1D609}",
        "\\mathsfsl{C}": "\u{1D60A}",
        "\\mathsfsl{D}": "\u{1D60B}",
        "\\mathsfsl{E}": "\u{1D60C}",
        "\\mathsfsl{F}": "\u{1D60D}",
        "\\mathsfsl{G}": "\u{1D60E}",
        "\\mathsfsl{H}": "\u{1D60F}",
        "\\mathsfsl{I}": "\u{1D610}",
        "\\mathsfsl{J}": "\u{1D611}",
        "\\mathsfsl{K}": "\u{1D612}",
        "\\mathsfsl{L}": "\u{1D613}",
        "\\mathsfsl{M}": "\u{1D614}",
        "\\mathsfsl{N}": "\u{1D615}",
        "\\mathsfsl{O}": "\u{1D616}",
        "\\mathsfsl{P}": "\u{1D617}",
        "\\mathsfsl{Q}": "\u{1D618}",
        "\\mathsfsl{R}": "\u{1D619}",
        "\\mathsfsl{S}": "\u{1D61A}",
        "\\mathsfsl{T}": "\u{1D61B}",
        "\\mathsfsl{U}": "\u{1D61C}",
        "\\mathsfsl{V}": "\u{1D61D}",
        "\\mathsfsl{W}": "\u{1D61E}",
        "\\mathsfsl{X}": "\u{1D61F}",
        "\\mathsfsl{Y}": "\u{1D620}",
        "\\mathsfsl{Z}": "\u{1D621}",
        "\\mathsfsl{a}": "\u{1D622}",
        "\\mathsfsl{b}": "\u{1D623}",
        "\\mathsfsl{c}": "\u{1D624}",
        "\\mathsfsl{d}": "\u{1D625}",
        "\\mathsfsl{e}": "\u{1D626}",
        "\\mathsfsl{f}": "\u{1D627}",
        "\\mathsfsl{g}": "\u{1D628}",
        "\\mathsfsl{h}": "\u{1D629}",
        "\\mathsfsl{i}": "\u{1D62A}",
        "\\mathsfsl{j}": "\u{1D62B}",
        "\\mathsfsl{k}": "\u{1D62C}",
        "\\mathsfsl{l}": "\u{1D62D}",
        "\\mathsfsl{m}": "\u{1D62E}",
        "\\mathsfsl{n}": "\u{1D62F}",
        "\\mathsfsl{o}": "\u{1D630}",
        "\\mathsfsl{p}": "\u{1D631}",
        "\\mathsfsl{q}": "\u{1D632}",
        "\\mathsfsl{r}": "\u{1D633}",
        "\\mathsfsl{s}": "\u{1D634}",
        "\\mathsfsl{t}": "\u{1D635}",
        "\\mathsfsl{u}": "\u{1D636}",
        "\\mathsfsl{v}": "\u{1D637}",
        "\\mathsfsl{w}": "\u{1D638}",
        "\\mathsfsl{x}": "\u{1D639}",
        "\\mathsfsl{y}": "\u{1D63A}",
        "\\mathsfsl{z}": "\u{1D63B}",
        "\\mathsfbfsl{A}": "\u{1D63C}",
        "\\mathsfbfsl{B}": "\u{1D63D}",
        "\\mathsfbfsl{C}": "\u{1D63E}",
        "\\mathsfbfsl{D}": "\u{1D63F}",
        "\\mathsfbfsl{E}": "\u{1D640}",
        "\\mathsfbfsl{F}": "\u{1D641}",
        "\\mathsfbfsl{G}": "\u{1D642}",
        "\\mathsfbfsl{H}": "\u{1D643}",
        "\\mathsfbfsl{I}": "\u{1D644}",
        "\\mathsfbfsl{J}": "\u{1D645}",
        "\\mathsfbfsl{K}": "\u{1D646}",
        "\\mathsfbfsl{L}": "\u{1D647}",
        "\\mathsfbfsl{M}": "\u{1D648}",
        "\\mathsfbfsl{N}": "\u{1D649}",
        "\\mathsfbfsl{O}": "\u{1D64A}",
        "\\mathsfbfsl{P}": "\u{1D64B}",
        "\\mathsfbfsl{Q}": "\u{1D64C}",
        "\\mathsfbfsl{R}": "\u{1D64D}",
        "\\mathsfbfsl{S}": "\u{1D64E}",
        "\\mathsfbfsl{T}": "\u{1D64F}",
        "\\mathsfbfsl{U}": "\u{1D650}",
        "\\mathsfbfsl{V}": "\u{1D651}",
        "\\mathsfbfsl{W}": "\u{1D652}",
        "\\mathsfbfsl{X}": "\u{1D653}",
        "\\mathsfbfsl{Y}": "\u{1D654}",
        "\\mathsfbfsl{Z}": "\u{1D655}",
        "\\mathsfbfsl{a}": "\u{1D656}",
        "\\mathsfbfsl{b}": "\u{1D657}",
        "\\mathsfbfsl{c}": "\u{1D658}",
        "\\mathsfbfsl{d}": "\u{1D659}",
        "\\mathsfbfsl{e}": "\u{1D65A}",
        "\\mathsfbfsl{f}": "\u{1D65B}",
        "\\mathsfbfsl{g}": "\u{1D65C}",
        "\\mathsfbfsl{h}": "\u{1D65D}",
        "\\mathsfbfsl{i}": "\u{1D65E}",
        "\\mathsfbfsl{j}": "\u{1D65F}",
        "\\mathsfbfsl{k}": "\u{1D660}",
        "\\mathsfbfsl{l}": "\u{1D661}",
        "\\mathsfbfsl{m}": "\u{1D662}",
        "\\mathsfbfsl{n}": "\u{1D663}",
        "\\mathsfbfsl{o}": "\u{1D664}",
        "\\mathsfbfsl{p}": "\u{1D665}",
        "\\mathsfbfsl{q}": "\u{1D666}",
        "\\mathsfbfsl{r}": "\u{1D667}",
        "\\mathsfbfsl{s}": "\u{1D668}",
        "\\mathsfbfsl{t}": "\u{1D669}",
        "\\mathsfbfsl{u}": "\u{1D66A}",
        "\\mathsfbfsl{v}": "\u{1D66B}",
        "\\mathsfbfsl{w}": "\u{1D66C}",
        "\\mathsfbfsl{x}": "\u{1D66D}",
        "\\mathsfbfsl{y}": "\u{1D66E}",
        "\\mathsfbfsl{z}": "\u{1D66F}",
        "\\mathtt{A}": "\u{1D670}",
        "\\mathtt{B}": "\u{1D671}",
        "\\mathtt{C}": "\u{1D672}",
        "\\mathtt{D}": "\u{1D673}",
        "\\mathtt{E}": "\u{1D674}",
        "\\mathtt{F}": "\u{1D675}",
        "\\mathtt{G}": "\u{1D676}",
        "\\mathtt{H}": "\u{1D677}",
        "\\mathtt{I}": "\u{1D678}",
        "\\mathtt{J}": "\u{1D679}",
        "\\mathtt{K}": "\u{1D67A}",
        "\\mathtt{L}": "\u{1D67B}",
        "\\mathtt{M}": "\u{1D67C}",
        "\\mathtt{N}": "\u{1D67D}",
        "\\mathtt{O}": "\u{1D67E}",
        "\\mathtt{P}": "\u{1D67F}",
        "\\mathtt{Q}": "\u{1D680}",
        "\\mathtt{R}": "\u{1D681}",
        "\\mathtt{S}": "\u{1D682}",
        "\\mathtt{T}": "\u{1D683}",
        "\\mathtt{U}": "\u{1D684}",
        "\\mathtt{V}": "\u{1D685}",
        "\\mathtt{W}": "\u{1D686}",
        "\\mathtt{X}": "\u{1D687}",
        "\\mathtt{Y}": "\u{1D688}",
        "\\mathtt{Z}": "\u{1D689}",
        "\\mathtt{a}": "\u{1D68A}",
        "\\mathtt{b}": "\u{1D68B}",
        "\\mathtt{c}": "\u{1D68C}",
        "\\mathtt{d}": "\u{1D68D}",
        "\\mathtt{e}": "\u{1D68E}",
        "\\mathtt{f}": "\u{1D68F}",
        "\\mathtt{g}": "\u{1D690}",
        "\\mathtt{h}": "\u{1D691}",
        "\\mathtt{i}": "\u{1D692}",
        "\\mathtt{j}": "\u{1D693}",
        "\\mathtt{k}": "\u{1D694}",
        "\\mathtt{l}": "\u{1D695}",
        "\\mathtt{m}": "\u{1D696}",
        "\\mathtt{n}": "\u{1D697}",
        "\\mathtt{o}": "\u{1D698}",
        "\\mathtt{p}": "\u{1D699}",
        "\\mathtt{q}": "\u{1D69A}",
        "\\mathtt{r}": "\u{1D69B}",
        "\\mathtt{s}": "\u{1D69C}",
        "\\mathtt{t}": "\u{1D69D}",
        "\\mathtt{u}": "\u{1D69E}",
        "\\mathtt{v}": "\u{1D69F}",
        "\\mathtt{w}": "\u{1D6A0}",
        "\\mathtt{x}": "\u{1D6A1}",
        "\\mathtt{y}": "\u{1D6A2}",
        "\\mathtt{z}": "\u{1D6A3}",
        "\\mathbf{\\Gamma}": "\u{1D6AA}",
        "\\mathbf{\\Delta}": "\u{1D6AB}",
        "\\mathbf{\\Theta}": "\u{1D6AF}",
        "\\mathbf{\\Lambda}": "\u{1D6B2}",
        "\\mathbf{\\Xi}": "\u{1D6B5}",
        "\\mathbf{\\Pi}": "\u{1D6B7}",
        "\\mathbf{\\vartheta}": "\u{1D6B9}",
        "\\mathbf{\\Sigma}": "\u{1D6BA}",
        "\\mathbf{\\Upsilon}": "\u{1D6BC}",
        "\\mathbf{\\Phi}": "\u{1D6BD}",
        "\\mathbf{\\Psi}": "\u{1D6BF}",
        "\\mathbf{\\Omega}": "\u{1D6C0}",
        "\\mathbf{\\nabla}": "\u{1D6C1}",
        "\\mathbf{\\alpha}": "\u{1D6C2}",
        "\\mathbf{\\beta}": "\u{1D6C3}",
        "\\mathbf{\\gamma}": "\u{1D6C4}",
        "\\mathbf{\\delta}": "\u{1D6C5}",
        "\\mathbf{\\epsilon}": "\u{1D6C6}",
        "\\mathbf{\\zeta}": "\u{1D6C7}",
        "\\mathbf{\\eta}": "\u{1D6C8}",
        "\\mathbf{\\theta}": "\u{1D6C9}",
        "\\mathbf{\\lambda}": "\u{1D6CC}",
        "\\mathbf{\\xi}": "\u{1D6CF}",
        "\\mathbf{\\pi}": "\u{1D6D1}",
        "\\mathbf{\\varsigma}": "\u{1D6D3}",
        "\\mathbf{\\sigma}": "\u{1D6D4}",
        "\\mathbf{\\upsilon}": "\u{1D6D6}",
        "\\mathbf{\\phi}": "\u{1D6D7}",
        "\\mathbf{\\psi}": "\u{1D6D9}",
        "\\mathbf{\\omega}": "\u{1D6DA}",
        "\\mathbf{\\varkappa}": "\u{1D6DE}",
        "\\mathbf{\\varrho}": "\u{1D6E0}",
        "\\mathbf{\\varpi}": "\u{1D6E1}",
        "\\mathsl{\\Gamma}": "\u{1D6E4}",
        "\\mathsl{\\Delta}": "\u{1D6E5}",
        "\\mathsl{\\Lambda}": "\u{1D6EC}",
        "\\mathsl{\\Xi}": "\u{1D6EF}",
        "\\mathsl{\\Pi}": "\u{1D6F1}",
        "\\mathsl{\\Theta}": "\u{1D6F3}",
        "\\mathsl{\\Sigma}": "\u{1D6F4}",
        "\\mathsl{\\Upsilon}": "\u{1D6F6}",
        "\\mathsl{\\Phi}": "\u{1D6F7}",
        "\\mathsl{\\Psi}": "\u{1D6F9}",
        "\\mathsl{\\Omega}": "\u{1D6FA}",
        "\\mathsl{\\nabla}": "\u{1D6FB}",
        "\\mathsl{\\gamma}": "\u{1D6FE}",
        "\\mathsl{\\delta}": "\u{1D6FF}",
        "\\mathsl{\\theta}": "\u{1D703}",
        "\\mathsl{\\lambda}": "\u{1D706}",
        "\\mu": "\u{1D707}",
        "\\mathsl{\\xi}": "\u{1D709}",
        "\\mathsl{\\pi}": "\u{1D70B}",
        "\\mathsl{\\varsigma}": "\u{1D70D}",
        "\\mathsl{\\sigma}": "\u{1D70E}",
        "\\mathsl{\\upsilon}": "\u{1D710}",
        "\\mathsl{\\varphi}": "\u{1D711}",
        "\\mathsl{\\psi}": "\u{1D713}",
        "\\mathsl{\\omega}": "\u{1D714}",
        "\\mathsl{\\vartheta}": "\u{1D717}",
        "\\mathsl{\\varkappa}": "\u{1D718}",
        "\\mathsl{\\phi}": "\u{1D719}",
        "\\mathsl{\\varrho}": "\u{1D71A}",
        "\\mathsl{\\varpi}": "\u{1D71B}",
        "\\mathbit{\\Gamma}": "\u{1D71E}",
        "\\mathbit{\\Delta}": "\u{1D71F}",
        "\\mathbit{\\Theta}": "\u{1D723}",
        "\\mathbit{\\Lambda}": "\u{1D726}",
        "\\mathbit{\\Xi}": "\u{1D729}",
        "\\mathbit{\\Pi}": "\u{1D72B}",
        "\\mathbit{\\Sigma}": "\u{1D72E}",
        "\\mathbit{\\Upsilon}": "\u{1D730}",
        "\\mathbit{\\Phi}": "\u{1D731}",
        "\\mathbit{\\Psi}": "\u{1D733}",
        "\\mathbit{\\Omega}": "\u{1D734}",
        "\\mathbit{\\nabla}": "\u{1D735}",
        "\\mathbit{\\alpha}": "\u{1D736}",
        "\\mathbit{\\beta}": "\u{1D737}",
        "\\mathbit{\\gamma}": "\u{1D738}",
        "\\mathbit{\\delta}": "\u{1D739}",
        "\\mathbit{\\epsilon}": "\u{1D73A}",
        "\\mathbit{\\zeta}": "\u{1D73B}",
        "\\mathbit{\\eta}": "\u{1D73C}",
        "\\mathbit{\\theta}": "\u{1D73D}",
        "\\mathbit{\\imath}": "\u{1D73E}",
        "\\mathbit{\\kappa}": "\u{1D73F}",
        "\\mathbit{\\lambda}": "\u{1D740}",
        "\\mathbit{\\xi}": "\u{1D743}",
        "\\mathbit{\\pi}": "\u{1D745}",
        "\\mathbit{\\rho}": "\u{1D746}",
        "\\mathbit{\\varsigma}": "\u{1D747}",
        "\\mathbit{\\sigma}": "\u{1D748}",
        "\\mathbit{\\tau}": "\u{1D749}",
        "\\mathbit{\\upsilon}": "\u{1D74A}",
        "\\mathbit{\\varphi}": "\u{1D74B}",
        "\\mathbit{\\chi}": "\u{1D74C}",
        "\\mathbit{\\psi}": "\u{1D74D}",
        "\\mathbit{\\omega}": "\u{1D74E}",
        "\\mathbit{\\vartheta}": "\u{1D751}",
        "\\mathbit{\\varkappa}": "\u{1D752}",
        "\\mathbit{\\phi}": "\u{1D753}",
        "\\mathbit{\\varrho}": "\u{1D754}",
        "\\mathbit{\\varpi}": "\u{1D755}",
        "\\mathsfbf{\\Gamma}": "\u{1D758}",
        "\\mathsfbf{\\Delta}": "\u{1D759}",
        "\\mathsfbf{\\Theta}": "\u{1D75D}",
        "\\mathsfbf{\\Lambda}": "\u{1D760}",
        "\\mathsfbf{\\Xi}": "\u{1D763}",
        "\\mathsfbf{\\Pi}": "\u{1D765}",
        "\\mathsfbf{\\Sigma}": "\u{1D768}",
        "\\mathsfbf{\\Upsilon}": "\u{1D76A}",
        "\\mathsfbf{\\Phi}": "\u{1D76B}",
        "\\mathsfbf{\\Psi}": "\u{1D76D}",
        "\\mathsfbf{\\Omega}": "\u{1D76E}",
        "\\mathsfbf{\\nabla}": "\u{1D76F}",
        "\\mathsfbf{\\alpha}": "\u{1D770}",
        "\\mathsfbf{\\beta}": "\u{1D771}",
        "\\mathsfbf{\\gamma}": "\u{1D772}",
        "\\mathsfbf{\\delta}": "\u{1D773}",
        "\\mathsfbf{\\varepsilon}": "\u{1D774}",
        "\\mathsfbf{\\zeta}": "\u{1D775}",
        "\\mathsfbf{\\eta}": "\u{1D776}",
        "\\mathsfbf{\\theta}": "\u{1D777}",
        "\\mathsfbf{\\imath}": "\u{1D778}",
        "\\mathsfbf{\\kappa}": "\u{1D779}",
        "\\mathsfbf{\\lambda}": "\u{1D77A}",
        "\\mathsfbf{\\xi}": "\u{1D77D}",
        "\\mathsfbf{\\pi}": "\u{1D77F}",
        "\\mathsfbf{\\rho}": "\u{1D780}",
        "\\mathsfbf{\\varsigma}": "\u{1D781}",
        "\\mathsfbf{\\sigma}": "\u{1D782}",
        "\\mathsfbf{\\tau}": "\u{1D783}",
        "\\mathsfbf{\\upsilon}": "\u{1D784}",
        "\\mathsfbf{\\varphi}": "\u{1D785}",
        "\\mathsfbf{\\chi}": "\u{1D786}",
        "\\mathsfbf{\\psi}": "\u{1D787}",
        "\\mathsfbf{\\omega}": "\u{1D788}",
        "\\mathsfbf{\\vartheta}": "\u{1D78B}",
        "\\mathsfbf{\\varkappa}": "\u{1D78C}",
        "\\mathsfbf{\\phi}": "\u{1D78D}",
        "\\mathsfbf{\\varrho}": "\u{1D78E}",
        "\\mathsfbf{\\varpi}": "\u{1D78F}",
        "\\mathsfbfsl{\\Gamma}": "\u{1D792}",
        "\\mathsfbfsl{\\Delta}": "\u{1D793}",
        "\\mathsfbfsl{\\Theta}": "\u{1D797}",
        "\\mathsfbfsl{\\Lambda}": "\u{1D79A}",
        "\\mathsfbfsl{\\Xi}": "\u{1D79D}",
        "\\mathsfbfsl{\\Pi}": "\u{1D79F}",
        "\\mathsfbfsl{\\Sigma}": "\u{1D7A2}",
        "\\mathsfbfsl{\\Upsilon}": "\u{1D7A4}",
        "\\mathsfbfsl{\\Phi}": "\u{1D7A5}",
        "\\mathsfbfsl{\\Psi}": "\u{1D7A7}",
        "\\mathsfbfsl{\\Omega}": "\u{1D7A8}",
        "\\mathsfbfsl{\\nabla}": "\u{1D7A9}",
        "\\mathsfbfsl{\\alpha}": "\u{1D7AA}",
        "\\mathsfbfsl{\\beta}": "\u{1D7AB}",
        "\\mathsfbfsl{\\gamma}": "\u{1D7AC}",
        "\\mathsfbfsl{\\delta}": "\u{1D7AD}",
        "\\mathsfbfsl{\\varepsilon}": "\u{1D7AE}",
        "\\mathsfbfsl{\\zeta}": "\u{1D7AF}",
        "\\mathsfbfsl{\\eta}": "\u{1D7B0}",
        "\\mathsfbfsl{\\theta}": "\u{1D7B1}",
        "\\mathsfbfsl{\\imath}": "\u{1D7B2}",
        "\\mathsfbfsl{\\kappa}": "\u{1D7B3}",
        "\\mathsfbfsl{\\lambda}": "\u{1D7B4}",
        "\\mathsfbfsl{\\xi}": "\u{1D7B7}",
        "\\mathsfbfsl{\\pi}": "\u{1D7B9}",
        "\\mathsfbfsl{\\rho}": "\u{1D7BA}",
        "\\mathsfbfsl{\\varsigma}": "\u{1D7BB}",
        "\\mathsfbfsl{\\sigma}": "\u{1D7BC}",
        "\\mathsfbfsl{\\tau}": "\u{1D7BD}",
        "\\mathsfbfsl{\\upsilon}": "\u{1D7BE}",
        "\\mathsfbfsl{\\varphi}": "\u{1D7BF}",
        "\\mathsfbfsl{\\chi}": "\u{1D7C0}",
        "\\mathsfbfsl{\\psi}": "\u{1D7C1}",
        "\\mathsfbfsl{\\omega}": "\u{1D7C2}",
        "\\mathsfbfsl{\\vartheta}": "\u{1D7C5}",
        "\\mathsfbfsl{\\varkappa}": "\u{1D7C6}",
        "\\mathsfbfsl{\\phi}": "\u{1D7C7}",
        "\\mathsfbfsl{\\varrho}": "\u{1D7C8}",
        "\\mathsfbfsl{\\varpi}": "\u{1D7C9}",
        "\\mbfDigamma": "\u{1D7CA}",
        "\\mbfdigamma": "\u{1D7CB}",
        "\\mathbf{0}": "\u{1D7CE}",
        "\\mathbf{1}": "\u{1D7CF}",
        "\\mathbf{2}": "\u{1D7D0}",
        "\\mathbf{3}": "\u{1D7D1}",
        "\\mathbf{4}": "\u{1D7D2}",
        "\\mathbf{5}": "\u{1D7D3}",
        "\\mathbf{6}": "\u{1D7D4}",
        "\\mathbf{7}": "\u{1D7D5}",
        "\\mathbf{8}": "\u{1D7D6}",
        "\\mathbf{9}": "\u{1D7D7}",
        "\\mathbb{0}": "\u{1D7D8}",
        "\\mathbb{1}": "\u{1D7D9}",
        "\\mathbb{2}": "\u{1D7DA}",
        "\\mathbb{3}": "\u{1D7DB}",
        "\\mathbb{4}": "\u{1D7DC}",
        "\\mathbb{5}": "\u{1D7DD}",
        "\\mathbb{6}": "\u{1D7DE}",
        "\\mathbb{7}": "\u{1D7DF}",
        "\\mathbb{8}": "\u{1D7E0}",
        "\\mathbb{9}": "\u{1D7E1}",
        "\\mathsf{0}": "\u{1D7E2}",
        "\\mathsf{1}": "\u{1D7E3}",
        "\\mathsf{2}": "\u{1D7E4}",
        "\\mathsf{3}": "\u{1D7E5}",
        "\\mathsf{4}": "\u{1D7E6}",
        "\\mathsf{5}": "\u{1D7E7}",
        "\\mathsf{6}": "\u{1D7E8}",
        "\\mathsf{7}": "\u{1D7E9}",
        "\\mathsf{8}": "\u{1D7EA}",
        "\\mathsf{9}": "\u{1D7EB}",
        "\\mathsfbf{0}": "\u{1D7EC}",
        "\\mathsfbf{1}": "\u{1D7ED}",
        "\\mathsfbf{2}": "\u{1D7EE}",
        "\\mathsfbf{3}": "\u{1D7EF}",
        "\\mathsfbf{4}": "\u{1D7F0}",
        "\\mathsfbf{5}": "\u{1D7F1}",
        "\\mathsfbf{6}": "\u{1D7F2}",
        "\\mathsfbf{7}": "\u{1D7F3}",
        "\\mathsfbf{8}": "\u{1D7F4}",
        "\\mathsfbf{9}": "\u{1D7F5}",
        "\\mathtt{0}": "\u{1D7F6}",
        "\\mathtt{1}": "\u{1D7F7}",
        "\\mathtt{2}": "\u{1D7F8}",
        "\\mathtt{3}": "\u{1D7F9}",
        "\\mathtt{4}": "\u{1D7FA}",
        "\\mathtt{5}": "\u{1D7FB}",
        "\\mathtt{6}": "\u{1D7FC}",
        "\\mathtt{7}": "\u{1D7FD}",
        "\\mathtt{8}": "\u{1D7FE}",
        "\\mathtt{9}": "\u{1D7FF}"
      };
    }
  });

  // node_modules/unicode2latex/tables/diacritics.json
  var require_diacritics = __commonJS({
    "node_modules/unicode2latex/tables/diacritics.json"(exports, module) {
      module.exports = {
        commands: [
          "acute",
          "bar",
          "breve",
          "c",
          "d",
          "ddot",
          "dot",
          "grave",
          "hat",
          "k",
          "mathring",
          "overline",
          "r",
          "textacutemacron",
          "textacutewedge",
          "textadvancing",
          "textbrevemacron",
          "textcircumdot",
          "textcorner",
          "textdotacute",
          "textdotbreve",
          "textdoublegrave",
          "textdoublevbaraccent",
          "textgravedot",
          "textgravemacron",
          "textinvsubbridge",
          "textlowering",
          "textovercross",
          "textraising",
          "textretracting",
          "textringmacron",
          "textseagull",
          "textsubarch",
          "textsubbar",
          "textsubbridge",
          "textsubgrave",
          "textsublhalfring",
          "textsubplus",
          "textsubrhalfring",
          "textsubring",
          "textsubsquare",
          "textsubtilde",
          "textsubumlaut",
          "textsubwedge",
          "textsuperimposetilde",
          "textsyllabic",
          "texttildedot",
          "textvbaraccent",
          "tilde",
          "u",
          "underbar",
          "v"
        ],
        tolatex: {
          "\u0300": {
            command: "`",
            mode: "text"
          },
          "\u0300\u0304": {
            command: "textgravemacron",
            mode: "text"
          },
          "\u0300\u0307": {
            command: "textgravedot",
            mode: "text"
          },
          "\u0301": {
            command: "'",
            mode: "text"
          },
          "\u0301\u0304": {
            command: "textacutemacron",
            mode: "text"
          },
          "\u0301\u0307": {
            command: "textdotacute",
            mode: "text"
          },
          "\u0301\u030C": {
            command: "textacutewedge",
            mode: "text"
          },
          "\u0302": {
            command: "^",
            mode: "text"
          },
          "\u0302\u0307": {
            command: "textcircumdot",
            mode: "text"
          },
          "\u0303": {
            command: "~",
            mode: "text"
          },
          "\u0303\u0307": {
            command: "texttildedot",
            mode: "text"
          },
          "\u0304": {
            command: "=",
            mode: "text"
          },
          "\u0304\u0300": {
            command: "textgravemacron",
            mode: "text"
          },
          "\u0304\u0301": {
            command: "textacutemacron",
            mode: "text"
          },
          "\u0304\u0306": {
            command: "textbrevemacron",
            mode: "text"
          },
          "\u0304\u030A": {
            command: "textringmacron",
            mode: "text"
          },
          "\u0305": {
            command: "overline",
            mode: "math"
          },
          "\u0306": {
            command: "u",
            mode: "text"
          },
          "\u0306\u0304": {
            command: "textbrevemacron",
            mode: "text"
          },
          "\u0306\u0307": {
            command: "textdotbreve",
            mode: "text"
          },
          "\u0307": {
            command: ".",
            mode: "text"
          },
          "\u0307\u0300": {
            command: "textgravedot",
            mode: "text"
          },
          "\u0307\u0301": {
            command: "textdotacute",
            mode: "text"
          },
          "\u0307\u0302": {
            command: "textcircumdot",
            mode: "text"
          },
          "\u0307\u0303": {
            command: "texttildedot",
            mode: "text"
          },
          "\u0307\u0306": {
            command: "textdotbreve",
            mode: "text"
          },
          "\u0308": {
            command: '"',
            mode: "text"
          },
          "\u030A": {
            command: "r",
            mode: "text"
          },
          "\u030A\u0304": {
            command: "textringmacron",
            mode: "text"
          },
          "\u030B": {
            command: "H",
            mode: "text"
          },
          "\u030C": {
            command: "v",
            mode: "text"
          },
          "\u030C\u0301": {
            command: "textacutewedge",
            mode: "text"
          },
          "\u030D": {
            command: "textvbaraccent",
            mode: "text"
          },
          "\u030E": {
            command: "textdoublevbaraccent",
            mode: "text"
          },
          "\u030F": {
            command: "textdoublegrave",
            mode: "text"
          },
          "\u0310": {
            command: "textdotbreve",
            mode: "text"
          },
          "\u0316": {
            command: "textsubgrave",
            mode: "text"
          },
          "\u0318": {
            command: "textadvancing",
            mode: "text"
          },
          "\u0319": {
            command: "textretracting",
            mode: "text"
          },
          "\u031A": {
            command: "textcorner",
            mode: "text"
          },
          "\u031C": {
            command: "textsublhalfring",
            mode: "text"
          },
          "\u031D": {
            command: "textraising",
            mode: "text"
          },
          "\u031E": {
            command: "textlowering",
            mode: "text"
          },
          "\u031F": {
            command: "textsubplus",
            mode: "text"
          },
          "\u0323": {
            command: "d",
            mode: "text"
          },
          "\u0324": {
            command: "textsubumlaut",
            mode: "text"
          },
          "\u0325": {
            command: "textsubring",
            mode: "text"
          },
          "\u0327": {
            command: "c",
            mode: "text"
          },
          "\u0328": {
            command: "k",
            mode: "text"
          },
          "\u0329": {
            command: "textsyllabic",
            mode: "text"
          },
          "\u032A": {
            command: "textsubbridge",
            mode: "text"
          },
          "\u032C": {
            command: "textsubwedge",
            mode: "text"
          },
          "\u032F": {
            command: "textsubarch",
            mode: "text"
          },
          "\u0330": {
            command: "textsubtilde",
            mode: "text"
          },
          "\u0331": {
            command: "textsubbar",
            mode: "text"
          },
          "\u0334": {
            command: "textsuperimposetilde",
            mode: "text"
          },
          "\u0339": {
            command: "textsubrhalfring",
            mode: "text"
          },
          "\u033A": {
            command: "textinvsubbridge",
            mode: "text"
          },
          "\u033B": {
            command: "textsubsquare",
            mode: "text"
          },
          "\u033C": {
            command: "textseagull",
            mode: "text"
          },
          "\u033D": {
            command: "textovercross",
            mode: "text"
          }
        },
        tounicode: {
          '"': "\u0308",
          "'": "\u0301",
          ".": "\u0307",
          "=": "\u0304",
          H: "\u030B",
          "^": "\u0302",
          "`": "\u0300",
          acute: "\u0301",
          bar: "\u0304",
          breve: "\u0306",
          c: "\u0327",
          d: "\u0323",
          ddot: "\u0308",
          dot: "\u0307",
          grave: "\u0300",
          hat: "\u0302",
          k: "\u0328",
          mathring: "\u030A",
          overline: "\u0305",
          r: "\u030A",
          textacutemacron: "\u0304\u0301",
          textacutewedge: "\u030C\u0301",
          textadvancing: "\u0318",
          textbrevemacron: "\u0304\u0306",
          textcircumdot: "\u0307\u0302",
          textcorner: "\u031A",
          textdotacute: "\u0301\u0307",
          textdotbreve: "\u0310",
          textdoublegrave: "\u030F",
          textdoublevbaraccent: "\u030E",
          textgravedot: "\u0307\u0300",
          textgravemacron: "\u0300\u0304",
          textinvsubbridge: "\u033A",
          textlowering: "\u031E",
          textovercross: "\u033D",
          textraising: "\u031D",
          textretracting: "\u0319",
          textringmacron: "\u0304\u030A",
          textseagull: "\u033C",
          textsubarch: "\u032F",
          textsubbar: "\u0331",
          textsubbridge: "\u032A",
          textsubgrave: "\u0316",
          textsublhalfring: "\u031C",
          textsubplus: "\u031F",
          textsubrhalfring: "\u0339",
          textsubring: "\u0325",
          textsubsquare: "\u033B",
          textsubtilde: "\u0330",
          textsubumlaut: "\u0324",
          textsubwedge: "\u032C",
          textsuperimposetilde: "\u0334",
          textsyllabic: "\u0329",
          texttildedot: "\u0307\u0303",
          textvbaraccent: "\u030D",
          tilde: "\u0303",
          u: "\u0306",
          underbar: "\u0331",
          v: "\u030C",
          "~": "\u0303"
        }
      };
    }
  });

  // node_modules/unicode2latex/index.js
  var require_unicode2latex = __commonJS({
    "node_modules/unicode2latex/index.js"(exports, module) {
      module.exports = {
        ascii: require_ascii(),
        ascii_bibtex_creator: require_ascii_bibtex_creator(),
        unicode: require_unicode(),
        latex: require_latex(),
        diacritics: require_diacritics()
      };
    }
  });

  // node_modules/@retorquere/bibtex-parser/crossref.json
  var require_crossref = __commonJS({
    "node_modules/@retorquere/bibtex-parser/crossref.json"(exports, module) {
      module.exports = [
        {
          source: ["mvbook", "book"],
          target: ["inbook", "bookinbook", "suppbook"],
          fields: [
            { source: "author", target: "author" },
            { source: "author", target: "bookauthor" }
          ]
        },
        {
          source: ["mvbook"],
          target: ["book", "inbook", "bookinbook", "suppbook"],
          fields: [
            { source: "title", target: "maintitle" },
            { source: "subtitle", target: "mainsubtitle" },
            { source: "titleaddon", target: "maintitleaddon" }
          ]
        },
        {
          source: ["mvcollection", "mvreference"],
          target: [
            "collection",
            "reference",
            "incollection",
            "inreference",
            "suppcollection"
          ],
          fields: [
            { source: "title", target: "maintitle" },
            { source: "subtitle", target: "mainsubtitle" },
            { source: "titleaddon", target: "maintitleaddon" }
          ]
        },
        {
          source: ["mvproceedings"],
          target: ["proceedings", "inproceedings"],
          fields: [
            { source: "title", target: "maintitle" },
            { source: "subtitle", target: "mainsubtitle" },
            { source: "titleaddon", target: "maintitleaddon" }
          ]
        },
        {
          source: ["book"],
          target: ["inbook", "bookinbook", "suppbook"],
          fields: [
            { source: "title", target: "booktitle" },
            { source: "subtitle", target: "booksubtitle" },
            { source: "titleaddon", target: "booktitleaddon" }
          ]
        },
        {
          source: ["collection", "reference"],
          target: ["incollection", "inreference", "suppcollection"],
          fields: [
            { source: "title", target: "booktitle" },
            { source: "subtitle", target: "booksubtitle" },
            { source: "titleaddon", target: "booktitleaddon" }
          ]
        },
        {
          source: ["proceedings"],
          target: ["inproceedings"],
          fields: [
            { source: "title", target: "booktitle" },
            { source: "subtitle", target: "booksubtitle" },
            { source: "titleaddon", target: "booktitleaddon" }
          ]
        },
        {
          source: ["periodical"],
          target: ["article", "suppperiodical"],
          fields: [
            { source: "title", target: "journaltitle" },
            { source: "subtitle", target: "journalsubtitle" }
          ]
        }
      ];
    }
  });

  // node_modules/xregexp/tools/output/categories.js
  var require_categories = __commonJS({
    "node_modules/xregexp/tools/output/categories.js"(exports, module) {
      module.exports = [
        {
          "name": "C",
          "alias": "Other",
          "isBmpLast": true,
          "bmp": "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F-\u0897\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
          "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCBD\uDCC3-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
        },
        {
          "name": "Cc",
          "alias": "Control",
          "bmp": "\0-\x7F-\x9F"
        },
        {
          "name": "Cf",
          "alias": "Format",
          "bmp": "\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
          "astral": "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
        },
        {
          "name": "Cn",
          "alias": "Unassigned",
          "bmp": "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F\u0892-\u0897\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
          "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCC3-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
        },
        {
          "name": "Co",
          "alias": "Private_Use",
          "bmp": "\uE000-\uF8FF",
          "astral": "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
        },
        {
          "name": "Cs",
          "alias": "Surrogate",
          "bmp": "\uD800-\uDFFF"
        },
        {
          "name": "L",
          "alias": "Letter",
          "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
          "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
        },
        {
          "name": "LC",
          "alias": "Cased_Letter",
          "bmp": "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
          "astral": "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD00-\uDD43]"
        },
        {
          "name": "Ll",
          "alias": "Lowercase_Letter",
          "bmp": "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
          "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
        },
        {
          "name": "Lm",
          "alias": "Modifier_Letter",
          "bmp": "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
          "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
        },
        {
          "name": "Lo",
          "alias": "Other_Letter",
          "bmp": "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
          "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\u{1DF0A}|\uD838[\uDD00-\uDD2C\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
        },
        {
          "name": "Lt",
          "alias": "Titlecase_Letter",
          "bmp": "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
        },
        {
          "name": "Lu",
          "alias": "Uppercase_Letter",
          "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
          "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
        },
        {
          "name": "M",
          "alias": "Mark",
          "bmp": "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
          "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
        },
        {
          "name": "Mc",
          "alias": "Spacing_Mark",
          "bmp": "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
          "astral": "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
        },
        {
          "name": "Me",
          "alias": "Enclosing_Mark",
          "bmp": "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
        },
        {
          "name": "Mn",
          "alias": "Nonspacing_Mark",
          "bmp": "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
          "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
        },
        {
          "name": "N",
          "alias": "Number",
          "bmp": "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
          "astral": "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
        },
        {
          "name": "Nd",
          "alias": "Decimal_Number",
          "bmp": "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
          "astral": "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
        },
        {
          "name": "Nl",
          "alias": "Letter_Number",
          "bmp": "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
          "astral": "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
        },
        {
          "name": "No",
          "alias": "Other_Number",
          "bmp": "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
          "astral": "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
        },
        {
          "name": "P",
          "alias": "Punctuation",
          "bmp": "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
          "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
        },
        {
          "name": "Pc",
          "alias": "Connector_Punctuation",
          "bmp": "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
        },
        {
          "name": "Pd",
          "alias": "Dash_Punctuation",
          "bmp": "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u2E5D\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
          "astral": "\u{10EAD}"
        },
        {
          "name": "Pe",
          "alias": "Close_Punctuation",
          "bmp": "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
        },
        {
          "name": "Pf",
          "alias": "Final_Punctuation",
          "bmp": "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
        },
        {
          "name": "Pi",
          "alias": "Initial_Punctuation",
          "bmp": "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
        },
        {
          "name": "Po",
          "alias": "Other_Punctuation",
          "bmp": "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52-\u2E54\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
          "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
        },
        {
          "name": "Ps",
          "alias": "Open_Punctuation",
          "bmp": "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u2E55\u2E57\u2E59\u2E5B\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
        },
        {
          "name": "S",
          "alias": "Symbol",
          "bmp": "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
          "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
        },
        {
          "name": "Sc",
          "alias": "Currency_Symbol",
          "bmp": "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
          "astral": "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
        },
        {
          "name": "Sk",
          "alias": "Modifier_Symbol",
          "bmp": "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u0888\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC2\uFF3E\uFF40\uFFE3",
          "astral": "\uD83C[\uDFFB-\uDFFF]"
        },
        {
          "name": "Sm",
          "alias": "Math_Symbol",
          "bmp": "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
          "astral": "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
        },
        {
          "name": "So",
          "alias": "Other_Symbol",
          "bmp": "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFD40-\uFD4F\uFDCF\uFDFD-\uFDFF\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
          "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
        },
        {
          "name": "Z",
          "alias": "Separator",
          "bmp": " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
        },
        {
          "name": "Zl",
          "alias": "Line_Separator",
          "bmp": "\u2028"
        },
        {
          "name": "Zp",
          "alias": "Paragraph_Separator",
          "bmp": "\u2029"
        },
        {
          "name": "Zs",
          "alias": "Space_Separator",
          "bmp": " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
        }
      ];
    }
  });

  // node_modules/@retorquere/bibtex-parser/index.js
  var require_bibtex_parser = __commonJS({
    "node_modules/@retorquere/bibtex-parser/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jabref = exports.chunker = exports.promises = exports.ast = exports.parse = exports.fields = void 0;
      var tslib_1 = require_tslib();
      var bibtex = tslib_1.__importStar(require_grammar());
      var chunker = tslib_1.__importStar(require_chunker());
      var jabref_1 = require_jabref();
      var unicode2latex_1 = require_unicode2latex();
      var crossref_json_1 = tslib_1.__importDefault(require_crossref());
      var ParserError = class extends Error {
        constructor(message, node) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = this.constructor.name;
          this.node = node;
        }
      };
      var TeXError = class extends Error {
        constructor(message, node, text) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = this.constructor.name;
          this.node = node;
          this.text = text;
        }
      };
      function charCat(charcats, select) {
        return charcats.filter((cat2) => select.includes(cat2.alias)).map((cat2) => cat2.bmp).join("");
      }
      var charCategories2 = require_categories();
      var charClass = {
        Lu: charCat(charCategories2, ["Uppercase_Letter", "Titlecase_Letter"]),
        Ll: charCat(charCategories2, ["Lowercase_Letter"]),
        LnotLu: charCat(charCategories2, ["Lowercase_Letter", "Modifier_Letter", "Other_Letter", "Nonspacing_Mark", "Spacing_Mark", "Decimal_Number", "Letter_Number"]),
        P: charCat(charCategories2, ["Punctuation"]),
        L: charCat(charCategories2, ["Letter"]),
        N: charCat(charCategories2, ["Decimal_Number", "Letter_Number"]),
        AlphaNum: charCat(charCategories2, ["Letter", "Decimal_Number", "Letter_Number"]),
        LC: charCat(charCategories2, ["Cased_Letter"])
      };
      var marker = {
        and: "",
        comma: "",
        space: "",
        literal: "",
        markup: "",
        re: {
          and: /./,
          comma: /./,
          space: /./,
          literal: /./,
          literalName: /./
        },
        clean(s) {
          return s.replace(marker.re.space, " ").replace(marker.re.comma, ", ").replace(marker.re.literal, "");
        }
      };
      marker.re = {
        and: new RegExp(marker.and, "g"),
        comma: new RegExp(marker.comma, "g"),
        space: new RegExp(marker.space, "g"),
        literal: new RegExp(marker.literal, "g"),
        literalName: new RegExp(`^${marker.literal}([^${marker.literal}]*)${marker.literal}$`)
      };
      var preserveCase = {
        leadingCap: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]+[${charClass.P}]?$`),
        allCaps: new RegExp(`^[${charClass.Lu}${charClass.N}]{2,}$`),
        allLower: new RegExp(`^[${charClass.Ll}${charClass.N}]{2,}$`),
        joined: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]*([-+][${charClass.L}${charClass.N}]+)*[${charClass.P}]*$`),
        hasUpper: new RegExp(`[${charClass.Lu}]`),
        hasLower: new RegExp(`[${charClass.Ll}]`),
        isNumber: /^[0-9]+$/,
        hasAlpha: new RegExp(`[${charClass.L}]`),
        hasAlphaNum: new RegExp(`[${charClass.AlphaNum}]`),
        notAlphaNum: new RegExp(`[^${charClass.AlphaNum}]`, "g"),
        sentenceStart: new RegExp(`(^|([\u2014:?!.]\\s+))[${charClass.Lu}]`, "g"),
        markup: /<\/?span[^>]*>/g,
        acronym: new RegExp(`.*\\.${marker.markup}*[${charClass.Lu}]${marker.markup}*\\.$`),
        notCaseSensitive: new RegExp(`[^${charClass.LC}]`),
        isCaseSensitive: new RegExp(`[${charClass.LC}]`),
        quoted: /("[^"]+")|(“[^“]+“)/g
      };
      exports.fields = {
        creator: [
          "author",
          "bookauthor",
          "collaborator",
          "commentator",
          "director",
          "editor",
          "editora",
          "editorb",
          "editors",
          "holder",
          "scriptwriter",
          "translator"
        ],
        title: [
          "title",
          "series",
          "shorttitle",
          "booktitle",
          "type",
          "origtitle",
          "maintitle",
          "eventtitle"
        ],
        unnest: [
          "publisher",
          "location"
        ],
        verbatim: [
          "doi",
          "eprint",
          "file",
          "files",
          "groups",
          "ids",
          "url",
          "verba",
          "verbb",
          "verbc"
        ],
        html: [
          "annotation",
          "comment",
          "annote",
          "review",
          "notes",
          "note"
        ],
        unabbrev: [
          "journal",
          "journaltitle",
          "journal-full"
        ]
      };
      var english3 = [
        "american",
        "british",
        "canadian",
        "english",
        "australian",
        "newzealand",
        "usenglish",
        "ukenglish",
        "en",
        "eng",
        "en-au",
        "en-bz",
        "en-ca",
        "en-cb",
        "en-gb",
        "en-ie",
        "en-jm",
        "en-nz",
        "en-ph",
        "en-tt",
        "en-us",
        "en-za",
        "en-zw",
        "anglais"
      ];
      var Parser = class {
        constructor(options = {}) {
          this.in_preamble = false;
          this.preamble = [];
          this.log = function(_str) {
          };
          for (const [option, value] of Object.entries(options)) {
            if (typeof value === "undefined")
              delete options[option];
          }
          if (options.errorHandler === false) {
            options.errorHandler = function(_err) {
            };
          } else if (typeof options.errorHandler === "undefined") {
            options.errorHandler = function(err) {
              throw err;
            };
          }
          if (typeof options.sentenceCase === "boolean") {
            options.sentenceCase = options.sentenceCase ? english3 : [];
          } else {
            options.sentenceCase = options.sentenceCase || english3;
          }
          if (!options.strings)
            options.strings = {};
          if (!options.unabbreviate)
            options.unabbreviate = {};
          if (options.raw) {
            options.sentenceCase = false;
            options.caseProtection = false;
          }
          this.options = Object.assign({ caseProtection: "as-needed", verbatimFields: [/^citeulike-linkout-[0-9]+$/, ...exports.fields.verbatim], verbatimCommands: ["url", "href"], unnestFields: [...exports.fields.title, ...exports.fields.unnest, ...exports.fields.verbatim], unnestMode: "unwrap", htmlFields: exports.fields.html, guessAlreadySentenceCased: true, applyCrossRef: options.applyCrossRef || typeof options.applyCrossRef === "undefined", markup: {} }, options);
          const markup_defaults = {
            enquote: { open: "\u201C", close: "\u201D" },
            sub: { open: "<sub>", close: "</sub>" },
            sup: { open: "<sup>", close: "</sup>" },
            bold: { open: "<b>", close: "</b>" },
            italics: { open: "<i>", close: "</i>" },
            smallCaps: { open: '<span style="font-variant:small-caps;">', close: "</span>" },
            caseProtect: { open: '<span class="nocase">', close: "</span>" },
            roman: { open: "", close: "" },
            fixedWidth: { open: "", close: "" }
          };
          for (const [markup, { open, close }] of Object.entries(markup_defaults)) {
            this.options.markup[markup] = this.options.markup[markup] || { open, close };
          }
          for (const i of [1, 2, 3, 4]) {
            this.options.markup[`h${i}`] = this.options.markup[`h${i}`] || { open: `<h${i}>`, close: `</h${i}>` };
          }
          this.unresolvedStrings = {};
          this.errors = [];
          this.comments = [];
          this.entries = [];
          this.strings = {};
          this.newcommands = {};
          this.default_strings = {
            JAN: [this.text("01")],
            FEB: [this.text("02")],
            MAR: [this.text("03")],
            APR: [this.text("04")],
            MAY: [this.text("05")],
            JUN: [this.text("06")],
            JUL: [this.text("07")],
            AUG: [this.text("08")],
            SEP: [this.text("09")],
            OCT: [this.text("10")],
            NOV: [this.text("11")],
            DEC: [this.text("12")],
            ACMCS: [this.text("ACM Computing Surveys")],
            ACTA: [this.text("Acta Informatica")],
            CACM: [this.text("Communications of the ACM")],
            IBMJRD: [this.text("IBM Journal of Research and Development")],
            IBMSJ: [this.text("IBM Systems Journal")],
            IEEESE: [this.text("IEEE Transactions on Software Engineering")],
            IEEETC: [this.text("IEEE Transactions on Computers")],
            IEEETCAD: [this.text("IEEE Transactions on Computer-Aided Design of Integrated Circuits")],
            IPL: [this.text("Information Processing Letters")],
            JACM: [this.text("Journal of the ACM")],
            JCSS: [this.text("Journal of Computer and System Sciences")],
            SCP: [this.text("Science of Computer Programming")],
            SICOMP: [this.text("SIAM Journal on Computing")],
            TOCS: [this.text("ACM Transactions on Computer Systems")],
            TODS: [this.text("ACM Transactions on Database Systems")],
            TOG: [this.text("ACM Transactions on Graphics")],
            TOMS: [this.text("ACM Transactions on Mathematical Software")],
            TOOIS: [this.text("ACM Transactions on Office Information Systems")],
            TOPLAS: [this.text("ACM Transactions on Programming Languages and Systems")],
            TCS: [this.text("Theoretical Computer Science")]
          };
          if (typeof this.options.strings === "string") {
            const strings = this.options.strings;
            this.options.strings = {};
            this.parseChunk({ text: strings, offset: { pos: 0, line: 0 } });
            this.preloaded_strings = this.strings;
            this.strings = {};
          } else {
            this.preloaded_strings = {};
          }
        }
        ast(input, clean = true) {
          let parsed = [];
          for (const chunk of chunker.parse(input)) {
            const { children } = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
            if (clean)
              this.clean(children);
            parsed = parsed.concat(children);
          }
          return parsed;
        }
        parse(input) {
          for (const chunk of chunker.parse(input)) {
            this.parseChunk(chunk);
          }
          return this.parsed();
        }
        async parseAsync(input) {
          for (const chunk of await chunker.promises.parse(input)) {
            this.parseChunk(chunk);
          }
          return this.parsed();
        }
        parsed() {
          this.field = null;
          const strings = {};
          this.cleaning = { type: "other" };
          for (const [key, value] of Object.entries(this.strings)) {
            this.field = {
              name: "@string",
              text: "",
              level: 0,
              preserveRanges: null,
              words: {
                upper: 0,
                lower: 0,
                other: 0
              }
            };
            this.convert(this.clean(value));
            strings[key] = this.field.text;
          }
          if (this.options.applyCrossRef) {
            const entries = this.entries.reduce((acc, entry) => {
              acc[entry.key] = entry;
              return acc;
            }, {});
            for (const entry of this.entries) {
              if (entry.fields.crossref) {
                for (const parent_key of entry.fields.crossref) {
                  const parent = entries[parent_key];
                  const mapping = parent && crossref_json_1.default.find((xref) => xref.source.includes(parent.type) && xref.target.includes(entry.type));
                  if (parent && mapping) {
                    for (const { source: source2, target } of mapping.fields) {
                      if (parent.fields[source2] && !entry.fields[target]) {
                        entry.fields[target] = JSON.parse(JSON.stringify(parent.fields[source2]));
                      }
                    }
                  }
                }
              }
            }
          }
          const { comments, jabref } = jabref_1.parse(this.comments);
          return {
            errors: this.errors,
            entries: this.entries,
            comments,
            jabref,
            strings,
            preamble: this.preamble
          };
        }
        preserve(start, end, reason) {
          if (!this.field.preserveRanges)
            return;
          if (!end) {
            this.field.preserveRanges = null;
            return;
          }
          this.field.preserveRanges.push({ start, end, reason });
        }
        parseChunk(chunk) {
          this.chunk = chunk.text;
          try {
            let bib = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
            if (bib.kind !== "Bibliography")
              throw new Error(this.show(bib));
            bib = this.clean(bib);
            for (const entity of bib.children) {
              switch (entity.kind) {
                case "Entry":
                case "BracedComment":
                case "LineComment":
                case "PreambleExpression":
                  this.convert(entity);
                  break;
                case "StringDeclaration":
                case "NonEntryText":
                  break;
              }
            }
            return bib;
          } catch (err) {
            if (!err.location)
              throw err;
            this.errors.push({
              message: err.message,
              line: err.location.start.line + chunk.offset.line,
              column: err.location.start.column,
              source: this.chunk
            });
            return null;
          }
        }
        show(o) {
          let text = JSON.stringify(o);
          if (this.chunk)
            text += `
${this.chunk.trim()}`;
          return text;
        }
        text(value = "") {
          return { kind: "Text", value, mode: "text" };
        }
        error(err, returnvalue) {
          if (typeof this.options.errorHandler === "function")
            this.options.errorHandler(err);
          return returnvalue || this.text();
        }
        condense(node) {
          node.value = this.clean(node.value);
          node.value = node.value.reduce((acc, child) => {
            if (child.kind === "Block" && !child.case && Object.keys(child.markup).length === 0) {
              acc = acc.concat(child.value);
            } else {
              acc.push(child);
            }
            return acc;
          }, []);
          node.value = node.value.reduce((acc, child, i) => {
            if (acc.length === 0) {
              acc.push(child);
              return acc;
            }
            const last = acc[acc.length - 1];
            const next = node.value[i + 1];
            if (this.options.caseProtection === "strict" && this.onlyCaseProtected(last) && child.kind === "Text" && !child.value.match(preserveCase.isCaseSensitive) && this.onlyCaseProtected(next)) {
              last.value.push(child);
              delete last.source;
              return acc;
            }
            if (last.kind === "Block" && child.kind === "Block" && Object.keys(last.markup).sort().join("/") === Object.keys(child.markup).sort().join("/")) {
              last.value = last.value.concat(child.value);
              delete last.source;
              return acc;
            }
            if (last.kind === "Text" && child.kind === "Text" && last.mode === child.mode) {
              last.value += child.value;
              delete last.source;
              return acc;
            }
            acc.push(child);
            return acc;
          }, []);
        }
        onlyCaseProtected(node) {
          return (node === null || node === void 0 ? void 0 : node.kind) === "Block" && node.case === "protect" && Object.keys(node.markup).join("/") === "";
        }
        argument(node, kind) {
          if (!node.arguments || !node.arguments.required.length)
            return kind === "none";
          if (typeof kind === "number") {
            return node.arguments.required.length === kind ? node.arguments.required : false;
          }
          if (node.arguments.required.length !== 1)
            return false;
          if (kind === "text") {
            const first = node.arguments.required[0];
            if (first.kind === "Block") {
              switch (first.value.length) {
                case 0:
                  return "";
                case 1:
                  if (first.value[0].kind === "Text")
                    return first.value[0].value;
                  break;
              }
            }
            kind = "Text";
          }
          if (node.arguments.required.length !== 1 || node.arguments.required[0].kind !== kind)
            return false;
          switch (node.arguments.required[0].kind) {
            case "Text":
              return node.arguments.required[0].value;
            case "RegularCommand":
              return node.arguments.required[0];
            case "Block":
              return node.arguments.required[0];
          }
          return false;
        }
        clean(node) {
          if (Array.isArray(node))
            return node.map((child) => this.clean(child));
          delete node.loc;
          switch (node.kind) {
            case "InlineMath":
            case "DisplayMath":
              return this.clean_block(node);
            case "Environment":
              return this.clean_environment(node);
            case "Block":
              return this.clean_block(node);
            case "Bibliography":
              return this.clean_bib(node);
            case "RegularCommand":
              return this.clean_command(node);
            case "DiacriticCommand":
              return this.clean_diacritic(node);
            case "Entry":
              return this.clean_entry(node);
            case "Field":
              return this.options.raw ? node : this.clean_field(node);
            case "StringDeclaration":
              return this.clean_stringdecl(node);
            case "StringReference":
              return this.clean_stringref(node);
            case "SubscriptCommand":
            case "SuperscriptCommand":
              return this.clean_script(node);
            case "SymbolCommand":
              return this.clean_symbol(node);
            case "PreambleExpression":
              return this.clean_preamble(node);
            case "Number":
            case "Text":
            case "BracedComment":
            case "LineComment":
              return node;
            default:
              return this.error(new ParserError(`no cleanup method for ${this.show(node)}`, node), this.text());
          }
        }
        clean_preamble(node) {
          this.in_preamble = true;
          try {
            return this.clean(node.value);
          } finally {
            this.in_preamble = false;
          }
        }
        clean_bib(node) {
          node.children = node.children.filter((child) => child.kind !== "NonEntryText").map((child) => this.clean(child));
          return node;
        }
        clean_stringdecl(node) {
          this.strings[node.name.toUpperCase()] = node.value;
          return node;
        }
        clean_stringref(node) {
          const name = node.name.toUpperCase();
          const stringvalue = this.strings[name] || this.options.strings[name] || this.preloaded_strings[name] || this.default_strings[name] || exports.fields.unabbrev.includes(this.cleaning.name) && this.options.unabbreviate[name] && [this.text(this.options.unabbreviate[name])];
          if (!stringvalue) {
            if (!this.unresolvedStrings[name])
              this.errors.push({ message: `Unresolved @string reference ${JSON.stringify(node.name)}` });
            this.unresolvedStrings[name] = true;
          }
          return this.clean({
            kind: "Block",
            case: stringvalue ? void 0 : "preserve",
            markup: {},
            value: stringvalue ? JSON.parse(JSON.stringify(stringvalue)) : [this.text(node.name)]
          });
        }
        clean_entry(node) {
          const shortjournals = [];
          for (const field of node.fields) {
            if (exports.fields.unabbrev.includes(field.name) && Array.isArray(field.value)) {
              const abbr = field.value.map((v) => v.source).join("").toUpperCase();
              const journal = this.options.unabbreviate[abbr];
              if (journal) {
                shortjournals.push(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(field))), { name: "shortjournal" }));
                field.value = [this.text(journal)];
              }
            }
          }
          node.fields = node.fields.concat(shortjournals).map((child) => this.clean(child));
          return node;
        }
        startCleaning(name) {
          name = name.toLowerCase();
          if (exports.fields.title.includes(name)) {
            this.cleaning = { type: "title", name };
          } else if (exports.fields.creator.includes(name.replace(/s$/, ""))) {
            this.cleaning = { type: "creator", name: name.replace(/s$/, "") };
          } else {
            this.cleaning = { type: "other", name };
          }
        }
        stripNoCase(node, strip, preserve) {
          switch (node.kind) {
            case "RegularCommand":
              if (["chsf", "bibstring", "cite"].includes(node.command))
                strip = true;
              node.arguments.required.map((arg) => this.stripNoCase(arg, strip, preserve));
              break;
            case "Block":
            case "InlineMath":
            case "DisplayMath":
              if (strip && node.case === "protect") {
                if (preserve) {
                  node.case = "preserve";
                } else {
                  delete node.case;
                }
              }
              node.value.map((v) => this.stripNoCase(v, strip || node.case === "protect", preserve));
              break;
            case "Field":
              if (Array.isArray(node.value))
                node.value.forEach((v) => this.stripNoCase(v, strip, preserve));
              break;
          }
        }
        isVerbatimField(name) {
          return !!this.options.verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
        }
        clean_field(node) {
          this.startCleaning(node.name);
          this.stripNoCase(node, !this.options.caseProtection || this.isVerbatimField(node.name), this.options.sentenceCase.length === 0);
          if (Array.isArray(node.value))
            this.condense(node);
          return node;
        }
        clean_script(node) {
          let m, value, singlechar;
          if (singlechar = unicode2latex_1.latex[node.source])
            return this.text(singlechar);
          if ((m = node.source.match(/^([\^_])([^{}]+)$/)) && ((singlechar = unicode2latex_1.latex[`${m[1]}${m[2]}`]) || (singlechar = unicode2latex_1.latex[`${m[1]}{${m[2]}}`])))
            return this.text(singlechar);
          if ((m = node.source.match(/^([\^_])\{([^{}]+)\}$/)) && ((singlechar = unicode2latex_1.latex[`${m[1]}${m[2]}`]) || (singlechar = unicode2latex_1.latex[`${m[1]}{${m[2]}}`])))
            return this.text(singlechar);
          const cmd = node.kind === "SuperscriptCommand" ? "^" : "_";
          if (typeof node.value === "string" && (singlechar = unicode2latex_1.latex[`${cmd}${node.value}`] || unicode2latex_1.latex[`${cmd}{${node.value}}`])) {
            return this.text(singlechar);
          }
          if (typeof node.value === "string") {
            value = [this.text(node.value)];
          } else if (!Array.isArray(node.value)) {
            value = [node.value];
          } else {
            value = node.value;
          }
          const mode = node.kind === "SuperscriptCommand" ? "sup" : "sub";
          return this.clean({
            kind: "Block",
            markup: { [mode]: true },
            value
          });
        }
        clean_environment(node) {
          this.condense(node);
          return node;
        }
        needsProtection(word) {
          return !word.match(preserveCase.hasUpper) && !!word.match(preserveCase.hasLower);
        }
        clean_block(node) {
          var _a;
          this.condense(node);
          if (this.options.caseProtection !== "strict" && ((_a = this.cleaning) === null || _a === void 0 ? void 0 : _a.type) === "title" && node.case === "protect") {
            let preserve = true;
            for (const child of node.value) {
              if (child.kind === "Text") {
                const value = child.value.trim();
                preserve = !value.match(preserveCase.isCaseSensitive) || !value.split(/\s+/).find((word) => this.needsProtection(word));
              } else {
                preserve = false;
              }
              if (!preserve)
                break;
            }
            if (preserve)
              node.case = "preserve";
          }
          if (node.kind === "Block") {
            for (const [markup, on] of Object.entries(node.markup)) {
              if (!on)
                delete node.markup[markup];
            }
          }
          return node;
        }
        clean_diacritic(node) {
          const char = node.dotless ? `\\${node.character}` : node.character;
          let unicode2 = unicode2latex_1.latex[`\\${node.mark}{${char}}`] || unicode2latex_1.latex[`\\${node.mark}${char}`] || unicode2latex_1.latex[`{\\${node.mark} ${char}}`] || unicode2latex_1.latex[`{\\${node.mark}${char}}`] || unicode2latex_1.latex[`\\${node.mark} ${char}`];
          if (!unicode2 && !node.dotless && node.character.length === 1 && unicode2latex_1.diacritics.tounicode[node.mark])
            unicode2 = node.character + unicode2latex_1.diacritics.tounicode[node.mark];
          if (!unicode2 && !this.in_preamble)
            return this.error(new TeXError(`Unhandled \\${node.mark}{${char}}`, node, this.chunk));
          return this.text(unicode2);
        }
        clean_symbol(node) {
          if (node.command === "\\")
            return this.text("\n");
          return this.text(unicode2latex_1.latex[`\\${node.command}`] || node.command);
        }
        first_text_block(node) {
          if (!node)
            return null;
          if (node.kind === "Block") {
            for (const child of node.value) {
              switch (child.kind) {
                case "Text":
                  return child.value ? node : null;
                case "Block":
                  const candidate = this.first_text_block(child);
                  if (candidate)
                    return candidate;
                  break;
                default:
                  return null;
              }
            }
          } else {
            return null;
          }
        }
        clean_command(node) {
          var _a;
          let arg, unicode2;
          if (unicode2 = unicode2latex_1.latex[node.source])
            return this.text(unicode2);
          switch (node.command) {
            case "newcommand":
              if (((_a = node.arguments) === null || _a === void 0 ? void 0 : _a.required.length) === 2 && node.arguments.required[0].kind === "Block" && node.arguments.required[0].value.length === 1 && node.arguments.required[0].value[0].kind === "RegularCommand" && node.arguments.required[1].kind === "Block") {
                this.newcommands[node.arguments.required[0].value[0].command] = node.arguments.required[1].value;
                return this.text();
              }
              break;
            case "item":
              return { kind: "Markup", value: "<li>", source: node.source };
            case "frac":
              if (arg = this.argument(node, 2)) {
                if (arg[0].kind === "Text" && arg[1].kind === "Text" && (unicode2 = unicode2latex_1.latex[`\\frac{${arg[0].value}}{${arg[1].value}}`]))
                  return this.text(unicode2);
                return this.clean({
                  kind: "Block",
                  case: "protect",
                  markup: {},
                  value: [
                    { kind: "Block", markup: { sup: true }, value: [arg[0]] },
                    this.text("\u2044"),
                    { kind: "Block", markup: { sub: true }, value: [arg[1]] }
                  ]
                });
              }
              break;
            case "vspace":
            case "vphantom":
            case "path":
            case "aftergroup":
            case "ignorespaces":
            case "relax":
            case "noopsort":
            case "ifdefined":
            case "DeclarePrefChars":
            case "else":
            case "fi":
            case "makeatletter":
              return this.text();
            case "ElsevierGlyph":
              if (arg = this.argument(node, "Text")) {
                if (unicode2 = unicode2latex_1.latex[`\\${node.command}{${arg}}`])
                  return this.text(unicode2);
                return this.text(String.fromCharCode(parseInt(arg, 16)));
              }
              break;
            case "chsf":
              if (this.argument(node, "none"))
                return this.text();
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "enquote":
            case "mkbibquote":
            case "bibstring":
            case "cite":
            case "textsc":
            case "textbf":
            case "mkbibbold":
            case "section":
            case "subsection":
            case "subsubsection":
            case "subsubsubsection":
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "textsuperscript":
            case "sp":
              if ((arg = this.argument(node, "Text")) && (unicode2 = unicode2latex_1.latex[`^{${arg}}`]))
                return this.text(unicode2);
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "textsubscript":
            case "sb":
              if ((arg = this.argument(node, "Text")) && (unicode2 = unicode2latex_1.latex[`_{${arg}}`]))
                return this.text(unicode2);
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "mkbibitalic":
            case "mkbibemph":
            case "textit":
            case "emph":
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              if (arg = this.argument(node, "Text"))
                return this.clean({ kind: "Block", markup: { italics: true }, value: [this.text(arg)] });
              break;
            case "bibcyr":
              if (this.argument(node, "none"))
                return this.text();
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "hspace":
            case "mathrm":
            case "textrm":
            case "ocirc":
            case "mbox":
              if (arg = this.argument(node, "text")) {
                if (node.command === "mbox" && !arg)
                  return this.text("\u200B");
                unicode2 = unicode2latex_1.latex[`\\${node.command}{${arg}}`];
                return this.text(unicode2 || (node.command === "hspace" ? " " : arg));
              } else if (!node.arguments.required.length) {
                return node.command === "mbox" ? this.text("\u200B") : this.text();
              } else if (arg = this.argument(node, "Block")) {
                return this.clean(arg);
              }
              break;
            case "href":
              if (arg = this.argument(node, 2))
                return this.clean(arg[0]);
              break;
            case "url":
              if (arg = this.argument(node, "Text"))
                return this.text(arg);
              if (arg = this.argument(node, "Block"))
                return this.clean(arg);
              break;
            case "sl":
            case "em":
            case "it":
            case "itshape":
            case "bf":
            case "bfseries":
            case "sc":
            case "scshape":
            case "tt":
            case "rm":
            case "sf":
            case "verb":
              return this.text();
            case "left":
            case "right":
              return this.text();
            case "par":
              return this.text("\n\n");
            case "cyr":
              if (this.argument(node, "none"))
                return this.text();
              break;
            case "polhk":
              if (unicode2 = this.argument(node, "text")) {
                if (unicode2.length === 1)
                  return this.text(`${unicode2}\u0328`);
              }
              if (this.argument(node, "none"))
                return this.text("\u0328");
              break;
            default:
              if (node.kind === "RegularCommand" && this.newcommands[node.command]) {
                return this.clean({
                  kind: "Block",
                  markup: {},
                  value: JSON.parse(JSON.stringify(this.newcommands[node.command]))
                });
              }
              if (unicode2latex_1.diacritics.tounicode[node.command]) {
                node.arguments.required = this.clean(node.arguments.required);
                let block;
                if (node.arguments.required.length === 1 && node.arguments.required[0].kind === "Text") {
                  block = {
                    kind: "Block",
                    markup: {},
                    value: [{
                      kind: "DiacriticCommand",
                      mark: node.command,
                      character: node.arguments.required[0].value,
                      dotless: false,
                      loc: node.arguments.required[0].loc,
                      source: node.arguments.required[0].source
                    }]
                  };
                  return this.clean(block);
                } else if (block = this.first_text_block(node.arguments.required[0])) {
                  let fixed = false;
                  block.value = block.value.reduce((value, child) => {
                    if (!fixed && child.kind === "Text") {
                      fixed = true;
                      value.push({ kind: "DiacriticCommand", mark: node.command, character: child.value[0] });
                      value.push(Object.assign(Object.assign({}, child), { value: child.value.substring(1) }));
                    } else {
                      value.push(child);
                    }
                    return value;
                  }, []);
                  return this.clean({
                    kind: "Block",
                    markup: {},
                    value: node.arguments.required
                  });
                } else {
                  if (node.command === "overline")
                    return this.text(" ");
                  return this.clean({
                    kind: "Block",
                    markup: {},
                    value: [this.text(` ${unicode2latex_1.diacritics.tounicode[node.command]}`)].concat(node.arguments.required)
                  });
                }
              }
              if (unicode2 = unicode2latex_1.latex[node.source] || unicode2latex_1.latex[`${node.source}{}`])
                return this.text(unicode2);
              if ((unicode2 = unicode2latex_1.latex[`\\${node.command}`] || unicode2latex_1.latex[`\\${node.command}{}`]) && this.argument(node, "none"))
                return this.text(unicode2);
              if ((arg = this.argument(node, "Text")) && (unicode2 = unicode2latex_1.latex[`\\${node.command}{${arg}}`]))
                return this.text(unicode2);
              break;
          }
          if (this.in_preamble)
            return this.text(node.source);
          if (this.options.unknownCommandHandler) {
            return this.options.unknownCommandHandler.call(this, node);
          } else if (this.options.unknownCommandHandler === false) {
            return this.text();
          } else {
            return this.error(new TeXError(`Unhandled command: ${node.command}${this.show(node)}`, node, this.chunk));
          }
        }
        preserveCase(word) {
          var _a, _b;
          if (!word.trim())
            return false;
          if (!word.match(preserveCase.hasAlphaNum))
            return true;
          word = word.replace(/[/’'”:()]/g, "");
          if (word === "I")
            return true;
          if (word.length === 1)
            return false;
          if (word.replace(preserveCase.notCaseSensitive) === "")
            return false;
          if (word.match(preserveCase.leadingCap) && ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.text) === null || _b === void 0 ? void 0 : _b.length) === 0)
            return false;
          if (word.match(preserveCase.allCaps))
            return true;
          if (word.length > 1 && word.match(preserveCase.joined))
            return false;
          if (word.match(preserveCase.hasUpper))
            return true;
          if (word.match(preserveCase.isNumber))
            return true;
          return false;
        }
        convert(node) {
          if (Array.isArray(node))
            return node.map((child) => this.convert(child));
          if (this.options.raw && this.field)
            node = this.text(node.source);
          switch (node.kind) {
            case "Markup":
              if (this.field)
                this.field.text += node.value;
              break;
            case "BracedComment":
            case "LineComment":
              this.comments.push(node.value);
              break;
            case "Entry":
              this.convert_entry(node);
              break;
            case "Number":
              this.convert_number(node);
              break;
            case "Text":
              this.convert_text(node);
              break;
            case "Block":
            case "InlineMath":
            case "DisplayMath":
              const start = this.field ? this.field.text.length : null;
              const preserve = typeof start === "number" && this.field.preserveRanges;
              this.convert_block(node);
              if (preserve && (node.case || node.kind.endsWith("Math")))
                this.preserve(start, this.field.text.length);
              break;
            case "Environment":
              this.convert_environment(node);
              break;
            case "PreambleExpression":
              this.preamble.push(node.value.map((preamble) => preamble.source).join("\n\n"));
              break;
            case "StringDeclaration":
              break;
            default:
              return this.error(new ParserError(`no converter for ${node.kind}: ${this.show(node)}`, node));
          }
        }
        splitOnce(s, sep, fromEnd = false) {
          const split = fromEnd ? s.lastIndexOf(sep) : s.indexOf(sep);
          return split < 0 ? [s, ""] : [s.substr(0, split), s.substr(split + 1)];
        }
        parseName(name) {
          let parsed = null;
          const parts = name.split(marker.comma);
          if (parts.length && !parts.find((p) => !p.match(/^[a-z]+(-i)?=/i))) {
            for (const part of parts) {
              parsed = parsed || {};
              const [attr, value] = this.splitOnce(part.replace(marker.re.space, ""), "=").map((v) => v.trim());
              if (!value) {
                parsed = null;
                break;
              }
              switch (attr.toLowerCase()) {
                case "family":
                  parsed.lastName = value;
                  break;
                case "given-i":
                  parsed.initial = value;
                  break;
                case "given":
                  parsed.firstName = value;
                  break;
                case "prefix":
                  parsed.prefix = value;
                  break;
                case "suffix":
                  parsed.suffix = value;
                  break;
                case "useprefix":
                  parsed.useprefix = value.toLowerCase() === "true";
                  break;
                case "juniorcomma":
                  parsed.useprefix = value.toLowerCase() === "true";
                  break;
                default:
                  parsed[attr.toLowerCase()] = value;
                  break;
              }
            }
          }
          const prefix = /(.+?)\s+(vere|von|van den|van der|van|de|del|della|der|di|da|pietro|vanden|du|st.|st|la|lo|ter|bin|ibn|te|ten|op|ben|al)\s+(.+)/;
          let m;
          switch (parsed ? 0 : parts.length) {
            case 0:
              break;
            case 1:
              if (marker.re.literalName.test(parts[0])) {
                parsed = { literal: parts[0] };
              } else if (m = parts[0].replace(marker.re.space, " ").match(prefix)) {
                parsed = {
                  firstName: m[1],
                  prefix: m[2],
                  lastName: m[3]
                };
              } else {
                const [firstName, lastName] = this.splitOnce(parts[0], marker.space, true);
                if (lastName) {
                  parsed = { firstName, lastName };
                } else {
                  parsed = { lastName: firstName };
                }
              }
              break;
            case 2:
              parsed = {
                lastName: parts[0],
                firstName: parts[1]
              };
              break;
            default:
              parsed = {
                lastName: parts[0],
                suffix: parts[1],
                firstName: parts.slice(2).join(marker.comma)
              };
          }
          for (const [k, v] of Object.entries(parsed)) {
            if (typeof v !== "string")
              continue;
            parsed[k] = marker.clean(v).trim();
          }
          return parsed;
        }
        convert_entry(node) {
          this.entry = {
            key: node.id,
            type: node.type,
            fields: {},
            creators: {}
          };
          this.entries.push(this.entry);
          const order = ["langid", "hyphenation", "language"];
          node.fields.sort((a, b) => {
            const ia2 = order.indexOf(a.name);
            const ib = order.indexOf(b.name);
            if (ia2 === -1 && ib === -1)
              return a.name.localeCompare(b.name);
            if (ia2 === -1)
              return 1;
            if (ib === -1)
              return -1;
            return ia2 - ib;
          });
          let sentenceCase = !!this.options.sentenceCase.length;
          for (const field of node.fields) {
            if (field.kind !== "Field")
              return this.error(new ParserError(`Expected Field, got ${field.kind}`, node));
            this.startCleaning(field.name);
            this.field = {
              name: field.name,
              text: "",
              level: 0,
              words: {
                upper: 0,
                lower: 0,
                other: 0
              },
              preserveRanges: sentenceCase && exports.fields.title.includes(field.name) ? [] : null,
              html: this.options.htmlFields.includes(field.name)
            };
            this.entry.fields[this.field.name] = this.entry.fields[this.field.name] || [];
            if (field.value.kind === "Number") {
              this.entry.fields[this.field.name].push(field.value.value);
              this.field = null;
              continue;
            }
            this.convert(field.value);
            this.field.text = this.field.text.trim();
            this.field.text = this.field.text.replace(/<\/([a-z])><\1>/g, "");
            this.field.text = this.field.text.replace(/<([a-z])>(\s*)<\/\1>/g, "$1");
            if (!this.field.text)
              continue;
            switch (this.field.name) {
              case "langid":
              case "hyphenation":
                sentenceCase = sentenceCase && this.options.sentenceCase.includes(this.field.text.toLowerCase());
                break;
              case "language":
                sentenceCase = sentenceCase && !!this.field.text.toLowerCase().trim().split(/\s*,\s*/).find((lang) => this.options.sentenceCase.includes(lang));
                break;
            }
            if (this.field.name.match(/^(keywords?|groups)$/)) {
              for (let text of this.field.text.split(marker.comma)) {
                text = text.trim();
                if (text)
                  this.entry.fields[this.field.name].push(text);
              }
            } else if (this.cleaning.type === "creator") {
              if (!this.entry.creators[this.field.name])
                this.entry.creators[this.field.name] = [];
              if (this.field.text.includes(`${marker.comma}${marker.and}`)) {
                this.field.text = this.field.text.replace(new RegExp(`${marker.comma}${marker.and}`, "g"), marker.and).replace(new RegExp(marker.comma), marker.and);
              }
              for (const creator of this.field.text.split(marker.and)) {
                this.entry.fields[this.field.name].push(marker.clean(creator));
                this.entry.creators[this.field.name].push(this.parseName(creator));
              }
            } else if (exports.fields.unabbrev.includes(field.name)) {
              this.entry.fields[this.field.name].push((this.options.unabbreviate[this.field.text] || this.field.text).normalize("NFC"));
            } else {
              if (this.field.preserveRanges) {
                if (this.options.guessAlreadySentenceCased && Math.max(this.field.words.upper, this.field.words.lower) > this.field.words.other + Math.min(this.field.words.upper, this.field.words.lower)) {
                  this.preserve(null, null);
                } else {
                  const txt = this.field.text.replace(preserveCase.markup, (markup) => marker.markup.repeat(markup.length));
                  let match;
                  preserveCase.sentenceStart.lastIndex = 0;
                  while (match = preserveCase.sentenceStart.exec(txt)) {
                    if (match.index > 2 && txt.substr(0, match.index + 1).match(preserveCase.acronym))
                      continue;
                    this.preserve(match.index, match.index + match[0].length);
                  }
                  preserveCase.quoted.lastIndex = 0;
                  while (match = preserveCase.quoted.exec(this.field.text)) {
                    this.preserve(match.index, match.index + match[0].length);
                  }
                }
              }
              this.entry.fields[this.field.name].push(this.convertToSentenceCase(this.field.text).normalize("NFC"));
            }
          }
          this.field = null;
        }
        convertToSentenceCase(text) {
          if (!this.field.preserveRanges)
            return text;
          const lead = text.match(/^(<[^>]+>)*./);
          if (lead) {
            this.preserve(lead[0].length - 1, lead[0].length);
          } else {
            this.preserve(0, 1);
          }
          let sentenceCased = text.toLowerCase().replace(/(([?!]\s*|^)(['"¡¿“‘„«\s]+)?[^\s])/g, (x) => x.toUpperCase());
          for (const { start, end } of this.field.preserveRanges) {
            sentenceCased = sentenceCased.substring(0, start) + text.substring(start, end) + sentenceCased.substring(end);
          }
          if (text !== sentenceCased)
            this.entry.sentenceCased = true;
          return sentenceCased;
        }
        convert_number(node) {
          this.field.text += `${node.value}`;
        }
        convert_text(node) {
          if (node.mode === "verbatim") {
            this.field.text += node.value.trim();
            return;
          }
          for (const word of node.value.split(/\b/)) {
            if (word.match(preserveCase.allLower)) {
              this.field.words.lower++;
            } else if (word.match(preserveCase.allCaps)) {
              this.field.words.upper++;
            } else if (word.match(preserveCase.hasAlpha)) {
              this.field.words.other++;
            }
          }
          if (this.field.level === 0 && this.cleaning.type === "creator") {
            this.field.text += node.value.replace(/\s+and\s+/ig, marker.and).replace(/\s*,\s*/g, marker.comma).replace(/\s+/g, marker.space);
            return;
          }
          if (this.field.level === 0 && this.field.name.match(/^(keywords?|groups)$/)) {
            this.field.text += node.value.replace(/\s*[;,]\s*/g, marker.comma);
            return;
          }
          if (this.field.html) {
            this.field.text += node.value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
          } else if (this.field.preserveRanges) {
            const words = node.value.split(/(\s+)/);
            for (const word of words) {
              const start = this.field.text.length;
              this.field.text += word;
              if (this.preserveCase(word))
                this.preserve(start, this.field.text.length);
            }
          } else {
            this.field.text += node.value;
          }
        }
        convert_environment(node) {
          const [open, close] = {
            enumerate: ["<ol>", "</ol>"],
            itemize: ["<ul>", "</ul>"],
            quotation: ["<blockquote>", "</blockquote>"]
          }[node.env] || ["", ""];
          if (!open)
            this.error(new TeXError(`Unhandled \\${node.env}{...}`, node, this.chunk));
          this.field.text += open;
          this.convert_block(Object.assign(Object.assign({}, node), { kind: "Block", markup: {} }));
          this.field.text += close;
        }
        convert_block(node) {
          const start = this.field.text.length;
          let prefix = "";
          let postfix = "";
          if (this.options.caseProtection !== "strict" && this.cleaning.type === "other")
            delete node.case;
          if (this.cleaning.type === "creator" && node.case === "protect") {
            prefix += marker.literal;
            postfix = marker.literal + postfix;
            delete node.case;
          }
          if (node.case === "protect") {
            prefix += this.options.markup.caseProtect.open;
            postfix = this.options.markup.caseProtect.close + postfix;
          }
          if (node.kind === "Block") {
            for (const markup of Object.keys(node.markup)) {
              if (!this.options.markup[markup]) {
                this.error(new ParserError(`markup: ${markup}`, node));
                return;
              }
              prefix += this.options.markup[markup].open;
              postfix = `${this.options.markup[markup].close}${postfix}`;
            }
          }
          const end = {
            withoutPrefix: this.field.text.length,
            withPrefix: this.field.text.length + prefix.length
          };
          this.field.text += prefix;
          this.field.level++;
          this.convert(node.value);
          this.field.level--;
          const added = this.field.text.substring(end.withPrefix);
          const added_text = added.replace(/<\/?[^>]+>/g, "");
          const needsProtection = added_text && (this.options.caseProtection === "strict" && added_text.match(preserveCase.isCaseSensitive) || this.options.caseProtection === "as-needed" && added_text.split(/\s+/).find((word) => this.needsProtection(word)));
          if (!added) {
            this.field.text = this.field.text.substring(0, end.withoutPrefix);
          } else if (this.field.preserveRanges && prefix === this.options.markup.caseProtect.open && !needsProtection) {
            this.field.text = this.field.text.substring(0, end.withoutPrefix) + added;
            this.field.preserveRanges = this.field.preserveRanges.filter((range) => range.start < end.withoutPrefix);
          } else {
            this.field.text += postfix;
          }
          this.field.text = this.field.text.replace(/<(sup|sub)>([^<>]+)<\/\1>$/i, (m, mode, chars) => {
            const cmd = mode === "sup" ? "^" : "_";
            let script = "";
            for (const char of chars) {
              const unicode2 = unicode2latex_1.latex[`${cmd}${char}`] || unicode2latex_1.latex[`${cmd}{${char}}`];
              script += unicode2 ? unicode2 : `<${mode}>${char}</${mode}>`;
            }
            script = script.replace(new RegExp(`</${mode}><${mode}>`, "g"), "");
            return script.length < m.length ? script : m;
          });
          if (node.case && this.field.preserveRanges)
            this.preserve(start, this.field.text.length);
        }
      };
      function parse2(input, options = {}) {
        const parser = new Parser(options);
        return parser.parse(input);
      }
      exports.parse = parse2;
      function ast2(input, options = {}, clean = true) {
        const parser = new Parser(options);
        return parser.ast(input, clean);
      }
      exports.ast = ast2;
      exports.promises = {
        async parse(input, options = {}) {
          const parser = new Parser(options);
          return await parser.parseAsync(input);
        }
      };
      exports.chunker = tslib_1.__importStar(require_chunker());
      exports.jabref = tslib_1.__importStar(require_jabref());
    }
  });

  // node_modules/citeproc/citeproc_commonjs.js
  var require_citeproc_commonjs = __commonJS({
    "node_modules/citeproc/citeproc_commonjs.js"(exports, module) {
      var CSL4 = {
        PROCESSOR_VERSION: "1.4.59",
        error: function(str) {
          if (typeof Error === "undefined") {
            throw new Error("citeproc-js error: " + str);
          } else {
            throw "citeproc-js error: " + str;
          }
        },
        debug: function(str) {
          if (typeof console === "undefined") {
            dump("CSL: " + str + "\n");
          } else {
            console.log("citeproc-js warning: " + str);
          }
        },
        toLocaleUpperCase(str) {
          var arr = this.tmp.lang_array;
          try {
            str = str.toLocaleUpperCase(arr);
          } catch (e) {
            str = str.toUpperCase();
          }
          return str;
        },
        toLocaleLowerCase(str) {
          var arr = this.tmp.lang_array;
          try {
            str = str.toLocaleLowerCase(arr);
          } catch (e) {
            str = str.toLowerCase();
          }
          return str;
        },
        LOCATOR_LABELS_REGEXP: new RegExp("^((vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\\.)\\s+(.*)"),
        STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
        STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\s*[.,;]*\s*(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
        STATUTE_SUBDIV_STRINGS: {
          "vrs.": "verse",
          "sv.": "sub-verbo",
          "subpara.": "subparagraph",
          "op.": "opus",
          "subch.": "subchapter",
          "add.": "addendum",
          "amend.": "amendment",
          "annot.": "annotation",
          "app.": "appendix",
          "art.": "article",
          "bibliog.": "bibliography",
          "bk.": "book",
          "ch.": "chapter",
          "cl.": "clause",
          "col.": "column",
          "cmt.": "comment",
          "dec.": "decision",
          "dept.": "department",
          "div.": "division",
          "ex.": "example",
          "fig.": "figure",
          "fld.": "field",
          "fol.": "folio",
          "n.": "note",
          "hypo.": "hypothetical",
          "illus.": "illustration",
          "intro.": "introduction",
          "l.": "line",
          "no.": "issue",
          "p.": "page",
          "pp.": "page",
          "para.": "paragraph",
          "pt.": "part",
          "pmbl.": "preamble",
          "princ.": "principle",
          "pub.": "publication",
          "r.": "rule",
          "rn.": "randnummer",
          "sched.": "schedule",
          "sec.": "section",
          "ser.": "series,",
          "subdiv.": "subdivision",
          "subsec.": "subsection",
          "supp.": "supplement",
          "tbl.": "table",
          "tit.": "title",
          "vol.": "volume"
        },
        STATUTE_SUBDIV_STRINGS_REVERSE: {
          "verse": "vrs.",
          "sub-verbo": "sv.",
          "sub verbo": "sv.",
          "subparagraph": "subpara.",
          "opus": "op.",
          "subchapter": "subch.",
          "addendum": "add.",
          "amendment": "amend.",
          "annotation": "annot.",
          "appendix": "app.",
          "article": "art.",
          "bibliography": "bibliog.",
          "book": "bk.",
          "chapter": "ch.",
          "clause": "cl.",
          "column": "col.",
          "comment": "cmt.",
          "decision": "dec.",
          "department": "dept.",
          "division": "div.",
          "example": "ex.",
          "figure": "fig.",
          "field": "fld.",
          "folio": "fol.",
          "note": "n.",
          "hypothetical": "hypo.",
          "illustration": "illus.",
          "introduction": "intro.",
          "line": "l.",
          "issue": "no.",
          "page": "p.",
          "paragraph": "para.",
          "part": "pt.",
          "preamble": "pmbl.",
          "principle": "princ.",
          "publication": "pub.",
          "rule": "r.",
          "randnummer": "rn.",
          "schedule": "sched.",
          "section": "sec.",
          "series,": "ser.",
          "subdivision": "subdiv.",
          "subsection": "subsec.",
          "supplement": "supp.",
          "table": "tbl.",
          "title": "tit.",
          "volume": "vol."
        },
        LOCATOR_LABELS_MAP: {
          "vrs": "verse",
          "sv": "sub-verbo",
          "subpara": "subparagraph",
          "op": "opus",
          "subch": "subchapter",
          "add": "addendum",
          "amend": "amendment",
          "annot": "annotation",
          "app": "appendix",
          "art": "article",
          "bibliog": "bibliography",
          "bk": "book",
          "ch": "chapter",
          "cl": "clause",
          "col": "column",
          "cmt": "comment",
          "dec": "decision",
          "dept": "department",
          "div": "division",
          "ex": "example",
          "fig": "figure",
          "fld": "field",
          "fol": "folio",
          "n": "note",
          "hypo": "hypothetical",
          "illus": "illustration",
          "intro": "introduction",
          "l": "line",
          "no": "issue",
          "p": "page",
          "pp": "page",
          "para": "paragraph",
          "pt": "part",
          "pmbl": "preamble",
          "princ": "principle",
          "pub": "publication",
          "r": "rule",
          "rn": "randnummer",
          "sched": "schedule",
          "sec": "section",
          "ser": "series,",
          "subdiv": "subdivision",
          "subsec": "subsection",
          "supp": "supplement",
          "tbl": "table",
          "tit": "title",
          "vol": "volume"
        },
        MODULE_MACROS: {
          "juris-pretitle": true,
          "juris-title": true,
          "juris-pretitle-short": true,
          "juris-title-short": true,
          "juris-main": true,
          "juris-main-short": true,
          "juris-tail": true,
          "juris-tail-short": true,
          "juris-locator": true
        },
        MODULE_TYPES: {
          "legal_case": true,
          "legislation": true,
          "bill": true,
          "hearing": true,
          "gazette": true,
          "report": true,
          "regulation": true,
          "standard": true,
          "patent": true,
          "locator": true
        },
        checkNestedBrace: function(state) {
          if (state.opt.xclass === "note") {
            this.depth = 0;
            this.update = function(str) {
              var str = str ? str : "";
              var lst = str.split(/([\(\)])/);
              for (var i = 1, ilen = lst.length; i < ilen; i += 2) {
                if (lst[i] === "(") {
                  if (this.depth % 2 === 1) {
                    lst[i] = "[";
                  }
                  this.depth += 1;
                } else if (lst[i] === ")") {
                  if (this.depth % 2 === 0) {
                    lst[i] = "]";
                  }
                  this.depth -= 1;
                }
              }
              var ret = lst.join("");
              return ret;
            };
          } else {
            this.update = function(str) {
              return str;
            };
          }
        },
        MULTI_FIELDS: ["event", "publisher", "publisher-place", "event-place", "title", "container-title", "collection-title", "authority", "genre", "title-short", "medium", "country", "jurisdiction", "archive", "archive-place"],
        LangPrefsMap: {
          "title": "titles",
          "title-short": "titles",
          "event": "titles",
          "genre": "titles",
          "medium": "titles",
          "container-title": "journals",
          "collection-title": "titles",
          "archive": "journals",
          "publisher": "publishers",
          "authority": "publishers",
          "publisher-place": "places",
          "event-place": "places",
          "archive-place": "places",
          "jurisdiction": "places",
          "number": "places",
          "edition": "places",
          "issue": "places",
          "volume": "places"
        },
        AbbreviationSegments: function() {
          this["container-title"] = {};
          this["collection-title"] = {};
          this["institution-entire"] = {};
          this["institution-part"] = {};
          this.nickname = {};
          this.number = {};
          this.title = {};
          this.place = {};
          this.hereinafter = {};
          this.classic = {};
          this["container-phrase"] = {};
          this["title-phrase"] = {};
        },
        getAbbrevsDomain: function(state, country2, lang) {
          var domain = null;
          if (state.opt.availableAbbrevDomains && country2 && country2 !== "default") {
            var globalDomainPreference = state.locale[state.opt.lang].opts["jurisdiction-preference"];
            var itemDomainPreference = null;
            if (state.locale[lang]) {
              itemDomainPreference = state.locale[lang].opts["jurisdiction-preference"];
            }
            if (itemDomainPreference) {
              for (var j = itemDomainPreference.length - 1; j > -1; j--) {
                if (state.opt.availableAbbrevDomains[country2].indexOf(itemDomainPreference[j]) > -1) {
                  domain = itemDomainPreference[j];
                  break;
                }
              }
            }
            if (!domain && globalDomainPreference) {
              for (var j = globalDomainPreference.length - 1; j > -1; j--) {
                if (state.opt.availableAbbrevDomains[country2].indexOf(globalDomainPreference[j]) > -1) {
                  domain = globalDomainPreference[j];
                  break;
                }
              }
            }
          }
          return domain;
        },
        FIELD_CATEGORY_REMAP: {
          "title": "title",
          "container-title": "container-title",
          "collection-title": "collection-title",
          "country": "place",
          "number": "number",
          "place": "place",
          "archive": "container-title",
          "title-short": "title",
          "genre": "title",
          "event": "title",
          "medium": "title",
          "archive-place": "place",
          "publisher-place": "place",
          "event-place": "place",
          "jurisdiction": "place",
          "language-name": "place",
          "language-name-original": "place",
          "call-number": "number",
          "chapter-number": "number",
          "collection-number": "number",
          "edition": "number",
          "page": "number",
          "issue": "number",
          "locator": "number",
          "locator-extra": "number",
          "number-of-pages": "number",
          "number-of-volumes": "number",
          "volume": "number",
          "citation-number": "number",
          "publisher": "institution-part"
        },
        parseLocator: function(item) {
          if (this.opt.development_extensions.locator_date_and_revision) {
            if (item.locator) {
              item.locator = "" + item.locator;
              var idx = item.locator.indexOf("|");
              if (idx > -1) {
                var raw_locator = item.locator;
                item.locator = raw_locator.slice(0, idx);
                raw_locator = raw_locator.slice(idx + 1);
                var m = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);
                if (m) {
                  item["locator-date"] = this.fun.dateparser.parseDateToObject(m[1]);
                  raw_locator = raw_locator.slice(m[1].length);
                }
                item["locator-extra"] = raw_locator.replace(/^\s+/, "").replace(/\s+$/, "");
              }
            }
          }
          if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, "");
          }
          return item;
        },
        normalizeLocaleStr: function(str) {
          if (!str) {
            return;
          }
          var lst = str.split("-");
          lst[0] = lst[0].toLowerCase();
          if (lst[1]) {
            lst[1] = lst[1].toUpperCase();
          }
          return lst.join("-");
        },
        parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {
          if (typeof Item.note !== "string") {
            return;
          }
          var elems = [];
          var lines = Item.note.split("\n");
          for (var i = 0, ilen = lines.length; i < ilen; i++) {
            var line = lines[i];
            var elems = [];
            var m = line.match(CSL4.NOTE_FIELDS_REGEXP);
            if (m) {
              var splt = line.split(CSL4.NOTE_FIELDS_REGEXP);
              for (var j = 0, jlen = splt.length - 1; j < jlen; j++) {
                elems.push(splt[j]);
                elems.push(m[j]);
              }
              elems.push(splt[splt.length - 1]);
              for (var j = 1, jlen = elems.length; j < jlen; j += 2) {
                if (elems[j - 1].trim() && (i > 0 || j > 1) && !elems[j - 1].match(CSL4.NOTE_FIELD_REGEXP)) {
                  break;
                } else {
                  elems[j] = "\n" + elems[j].slice(2, -1).trim() + "\n";
                }
              }
              lines[i] = elems.join("");
            }
          }
          lines = lines.join("\n").split("\n");
          var offset = 0;
          var names2 = {};
          for (var i = 0, ilen = lines.length; i < ilen; i++) {
            var line = lines[i];
            var mm = line.match(CSL4.NOTE_FIELD_REGEXP);
            if (!line.trim()) {
              continue;
            } else if (!mm) {
              if (i === 0) {
                continue;
              } else {
                offset = i;
                break;
              }
            }
            var key = mm[1];
            var val = mm[2].replace(/^\s+/, "").replace(/\s+$/, "");
            if (key === "type") {
              Item.type = val;
              lines[i] = "";
            } else if (CSL4.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
              if (!Item[key] || allowDateOverride) {
                Item[key] = CSL4.DateParser.parseDateToArray(val);
                if (!validFieldsForType || validFieldsForType[key] && this.isDateString(val)) {
                  lines[i] = "";
                }
              }
            } else if (!Item[key]) {
              if (CSL4.NAME_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                if (!names2[key]) {
                  names2[key] = [];
                }
                var lst = val.split(/\s*\|\|\s*/);
                if (lst.length === 1) {
                  names2[key].push({ literal: lst[0] });
                } else if (lst.length === 2) {
                  var name = { family: lst[0], given: lst[1] };
                  CSL4.parseParticles(name);
                  names2[key].push(name);
                }
              } else {
                Item[key] = val;
              }
              if (!validFieldsForType || validFieldsForType[key]) {
                lines[i] = "";
              }
            }
          }
          for (var key in names2) {
            Item[key] = names2[key];
          }
          if (validFieldsForType) {
            if (lines[offset].trim()) {
              lines[offset] = "\n" + lines[offset];
            }
            for (var i = offset - 1; i > -1; i--) {
              if (!lines[i].trim()) {
                lines = lines.slice(0, i).concat(lines.slice(i + 1));
              }
            }
          }
          Item.note = lines.join("\n").trim();
        },
        checkPrefixSpaceAppend: function(state, prefix) {
          if (!prefix) {
            prefix = "";
          }
          var sp = "";
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
          var test_char = test_prefix.slice(-1);
          if (test_prefix.match(CSL4.ENDSWITH_ROMANESQUE_REGEXP)) {
            sp = " ";
          } else if (CSL4.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1) {
            sp = " ";
          } else if (test_char.match(/[\)\],0-9]/)) {
            sp = " ";
          }
          var prefix = (prefix + sp).replace(/\s+/g, " ");
          return prefix;
        },
        checkIgnorePredecessor: function(state, prefix) {
          var ignorePredecessor = false;
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
          var test_char = test_prefix.slice(-1);
          if (CSL4.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1 && prefix.trim().indexOf(" ") > -1) {
            state.tmp.term_predecessor = false;
            return true;
          }
          return false;
        },
        checkSuffixSpacePrepend: function(state, suffix) {
          if (!suffix) {
            return "";
          }
          if (suffix.match(CSL4.STARTSWITH_ROMANESQUE_REGEXP) || ["[", "("].indexOf(suffix.slice(0, 1)) > -1) {
            suffix = " " + suffix;
          }
          return suffix;
        },
        GENDERS: ["masculine", "feminine"],
        ERROR_NO_RENDERED_FORM: 1,
        PREVIEW: "Just for laughs.",
        ASSUME_ALL_ITEMS_REGISTERED: 2,
        START: 0,
        END: 1,
        SINGLETON: 2,
        SEEN: 6,
        SUCCESSOR: 3,
        SUCCESSOR_OF_SUCCESSOR: 4,
        SUPPRESS: 5,
        SINGULAR: 0,
        PLURAL: 1,
        LITERAL: true,
        BEFORE: 1,
        AFTER: 2,
        DESCENDING: 1,
        ASCENDING: 2,
        PRIMARY: 1,
        SECONDARY: 2,
        POSITION_FIRST: 0,
        POSITION_SUBSEQUENT: 1,
        POSITION_IBID: 2,
        POSITION_IBID_WITH_LOCATOR: 3,
        POSITION_CONTAINER_SUBSEQUENT: 4,
        POSITION_MAP: {
          "0": 0,
          "4": 1,
          "1": 2,
          "2": 3,
          "3": 4
        },
        POSITION_TEST_VARS: ["position", "first-reference-note-number", "near-note"],
        AREAS: ["citation", "citation_sort", "bibliography", "bibliography_sort", "intext"],
        CITE_FIELDS: ["first-reference-note-number", "first-container-reference-note-number", "locator", "locator-extra"],
        SWAPPING_PUNCTUATION: [".", "!", "?", ":", ","],
        TERMINAL_PUNCTUATION: [":", ".", ";", "!", "?", " "],
        NONE: 0,
        NUMERIC: 1,
        POSITION: 2,
        TRIGRAPH: 3,
        DATE_PARTS: ["year", "month", "day"],
        DATE_PARTS_ALL: ["year", "month", "day", "season"],
        DATE_PARTS_INTERNAL: ["year", "month", "day", "year_end", "month_end", "day_end"],
        NAME_PARTS: ["non-dropping-particle", "family", "given", "dropping-particle", "suffix", "literal"],
        DISAMBIGUATE_OPTIONS: [
          "disambiguate-add-names",
          "disambiguate-add-givenname",
          "disambiguate-add-year-suffix"
        ],
        GIVENNAME_DISAMBIGUATION_RULES: [
          "all-names",
          "all-names-with-initials",
          "primary-name",
          "primary-name-with-initials",
          "by-cite"
        ],
        NAME_ATTRIBUTES: [
          "and",
          "delimiter-precedes-last",
          "delimiter-precedes-et-al",
          "initialize-with",
          "initialize",
          "name-as-sort-order",
          "sort-separator",
          "et-al-min",
          "et-al-use-first",
          "et-al-subsequent-min",
          "et-al-subsequent-use-first",
          "form",
          "prefix",
          "suffix",
          "delimiter"
        ],
        LOOSE: 0,
        STRICT: 1,
        TOLERANT: 2,
        PREFIX_PUNCTUATION: /[.;:]\s*$/,
        SUFFIX_PUNCTUATION: /^\s*[.;:,\(\)]/,
        NUMBER_REGEXP: /(?:^\d+|\d+$)/,
        NAME_INITIAL_REGEXP: /^([A-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u042f\u0590-\u05d4\u05d6-\u05ff\u0600-\u06ff\u0370\u0372\u0376\u0386\u0388-\u03ab\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f4\u03f7\u03fd-\u03ff])([a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u052f\u0600-\u06ff\u0370-\u03ff\u1f00-\u1fff]*|)(\.)*/,
        ROMANESQUE_REGEXP: /[-0-9a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
        ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/g,
        STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
        ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]$/,
        ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]+$/,
        VIETNAMESE_SPECIALS: /[\u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]/,
        VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]{2,6})(\s+|$))+$/,
        NOTE_FIELDS_REGEXP: /\{:(?:[\-_a-z]+|[A-Z]+):[^\}]+\}/g,
        NOTE_FIELD_REGEXP: /^([\-_a-z]+|[A-Z]+):\s*([^\}]+)$/,
        PARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\u02bb |\u2019 | |\' ) *)(.+)$/,
        PARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\-|\u02bb|\u2019| |\') *)(.+)$/,
        DISPLAY_CLASSES: ["block", "left-margin", "right-inline", "indent"],
        NAME_VARIABLES: [
          "author",
          "collection-editor",
          "composer",
          "container-author",
          "director",
          "editor",
          "editorial-director",
          "illustrator",
          "interviewer",
          "original-author",
          "recipient",
          "reviewed-author",
          "translator",
          "commenter"
        ],
        CREATORS: [
          "author",
          "collection-editor",
          "composer",
          "container-author",
          "director",
          "editor",
          "editorial-director",
          "illustrator",
          "interviewer",
          "original-author",
          "recipient",
          "reviewed-author",
          "translator",
          "commenter"
        ],
        NUMERIC_VARIABLES: [
          "call-number",
          "chapter-number",
          "collection-number",
          "division",
          "edition",
          "page",
          "issue",
          "locator",
          "locator-extra",
          "number",
          "number-of-pages",
          "number-of-volumes",
          "version",
          "volume",
          "supplement",
          "citation-number"
        ],
        DATE_VARIABLES: [
          "locator-date",
          "issued",
          "event-date",
          "accessed",
          "original-date",
          "publication-date",
          "available-date",
          "submitted",
          "alt-issued",
          "alt-event"
        ],
        VARIABLES_WITH_SHORT_FORM: [
          "title",
          "container-title"
        ],
        TITLE_FIELD_SPLITS: function(seg) {
          var keys = ["title", "short", "main", "sub", "subjoin"];
          var ret = {};
          for (var i = 0, ilen = keys.length; i < ilen; i++) {
            ret[keys[i]] = seg + "title" + (keys[i] === "title" ? "" : "-" + keys[i]);
          }
          return ret;
        },
        demoteNoiseWords: function(state, fld, drop_or_demote) {
          var SKIP_WORDS2 = state.locale[state.opt.lang].opts["leading-noise-words"];
          if (fld && drop_or_demote) {
            fld = fld.split(/\s+/);
            fld.reverse();
            var toEnd = [];
            for (var j = fld.length - 1; j > -1; j += -1) {
              if (SKIP_WORDS2.indexOf(fld[j].toLowerCase()) > -1) {
                toEnd.push(fld.pop());
              } else {
                break;
              }
            }
            fld.reverse();
            var start = fld.join(" ");
            var end = toEnd.join(" ");
            if (drop_or_demote === "drop" || !end) {
              fld = start;
            } else if (drop_or_demote === "demote") {
              fld = [start, end].join(", ");
            }
          }
          return fld;
        },
        extractTitleAndSubtitle: function(Item, narrowSpaceLocale) {
          var narrowSpace = narrowSpaceLocale ? "\u202F" : "";
          var segments = [""];
          if (this.opt.development_extensions.split_container_title) {
            segments.push("container-");
          }
          for (var i = 0, ilen = segments.length; i < ilen; i++) {
            var seg = segments[i];
            var title2 = CSL4.TITLE_FIELD_SPLITS(seg);
            var langs = [false];
            if (Item.multi) {
              for (var lang in Item.multi._keys[title2.short]) {
                langs.push(lang);
              }
            }
            for (var j = 0, jlen = langs.length; j < jlen; j++) {
              var lang = langs[j];
              var vals = {};
              if (lang) {
                if (Item.multi._keys[title2.title]) {
                  vals[title2.title] = Item.multi._keys[title2.title][lang];
                }
                if (Item.multi._keys[title2["short"]]) {
                  vals[title2["short"]] = Item.multi._keys[title2["short"]][lang];
                }
              } else {
                vals[title2.title] = Item[title2.title];
                vals[title2["short"]] = Item[title2["short"]];
              }
              vals[title2.main] = vals[title2.title];
              vals[title2.sub] = false;
              var shortTitle2 = vals[title2["short"]];
              if (vals[title2.title]) {
                if (shortTitle2 && shortTitle2.toLowerCase() === vals[title2.title].toLowerCase()) {
                  vals[title2.main] = vals[title2.title];
                  vals[title2.subjoin] = "";
                  vals[title2.sub] = "";
                } else if (shortTitle2) {
                  var tail = vals[title2.title].slice(shortTitle2.replace(/[\?\!]+$/, "").length);
                  var top = vals[title2.title].replace(tail.replace(/^[\?\!]+/, ""), "").trim();
                  var m = CSL4.TITLE_SPLIT_REGEXP.matchfirst.exec(tail);
                  if (m && top.toLowerCase() === shortTitle2.toLowerCase()) {
                    vals[title2.main] = top;
                    vals[title2.subjoin] = m[1].replace(/[\?\!]+(\s*)$/, "$1");
                    vals[title2.sub] = tail.replace(CSL4.TITLE_SPLIT_REGEXP.matchfirst, "");
                    if (this.opt.development_extensions.force_short_title_casing_alignment) {
                      vals[title2["short"]] = vals[title2.main];
                    }
                  } else {
                    var splitTitle = CSL4.TITLE_SPLIT(vals[title2.title]);
                    if (splitTitle.length == 3) {
                      vals[title2.main] = splitTitle[0];
                      vals[title2.subjoin] = splitTitle[1];
                      vals[title2.sub] = splitTitle[2];
                    } else {
                      vals[title2.main] = vals[title2.title];
                      vals[title2.subjoin] = "";
                      vals[title2.sub] = "";
                    }
                  }
                } else {
                  var splitTitle = CSL4.TITLE_SPLIT(vals[title2.title]);
                  if (splitTitle.length == 3) {
                    vals[title2.main] = splitTitle[0];
                    vals[title2.subjoin] = splitTitle[1];
                    vals[title2.sub] = splitTitle[2];
                    if (this.opt.development_extensions.implicit_short_title && Item.type !== "legal_case") {
                      if (!Item[title2.short] && !vals[title2.main].match(/^[\-\.[0-9]+$/)) {
                        var punct = vals[title2.subjoin].trim();
                        if (["?", "!"].indexOf(punct) === -1) {
                          punct = "";
                        }
                        vals[title2.short] = vals[title2.main] + punct;
                      }
                    }
                  } else {
                    vals[title2.main] = vals[title2.title];
                    vals[title2.subjoin] = "";
                    vals[title2.sub] = "";
                  }
                }
                if (vals[title2.subjoin]) {
                  if (vals[title2.subjoin].match(/([\?\!])/)) {
                    var m = vals[title2.subjoin].match(/(\s*)$/);
                    vals[title2.main] = vals[title2.main] + narrowSpace + vals[title2.subjoin].trim();
                    vals[title2.subjoin] = m[1];
                  }
                }
              }
              if (vals[title2.subjoin]) {
                if (vals[title2.subjoin].indexOf(":") > -1) {
                  vals[title2.subjoin] = narrowSpace + ": ";
                }
                if (vals[title2.subjoin].indexOf("-") > -1 || vals[title2.subjoin].indexOf("\u2014") > -1) {
                  vals[title2.subjoin] = "\u2014";
                }
              }
              if (lang) {
                for (var key in vals) {
                  if (!Item.multi._keys[key]) {
                    Item.multi._keys[key] = {};
                  }
                  Item.multi._keys[key][lang] = vals[key];
                }
              } else {
                for (var key in vals) {
                  Item[key] = vals[key];
                }
              }
            }
          }
        },
        titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {
          var title2 = CSL4.TITLE_FIELD_SPLITS(seg);
          var vals = {};
          if (lang && Item.multi) {
            if (Item.multi._keys[title2.title]) {
              vals[title2.title] = Item.multi._keys[title2.title][lang];
            }
            if (Item.multi._keys[title2.main]) {
              vals[title2.main] = Item.multi._keys[title2.main][lang];
            }
            if (Item.multi._keys[title2.sub]) {
              vals[title2.sub] = Item.multi._keys[title2.sub][lang];
            }
            if (Item.multi._keys[title2.subjoin]) {
              vals[title2.subjoin] = Item.multi._keys[title2.subjoin][lang];
            }
          } else {
            vals[title2.title] = Item[title2.title];
            vals[title2.main] = Item[title2.main];
            vals[title2.sub] = Item[title2.sub];
            vals[title2.subjoin] = Item[title2.subjoin];
          }
          if (vals[title2.main] && vals[title2.sub]) {
            var mainTitle = vals[title2.main];
            var subJoin = vals[title2.subjoin];
            var subTitle = vals[title2.sub];
            if (sentenceCase) {
              mainTitle = CSL4.Output.Formatters.sentence(state, mainTitle);
              subTitle = CSL4.Output.Formatters.sentence(state, subTitle);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
              subTitle = CSL4.Output.Formatters["capitalize-first"](state, subTitle);
            }
            return [mainTitle, subJoin, subTitle].join("");
          } else if (vals[title2.title]) {
            if (sentenceCase) {
              return CSL4.Output.Formatters.sentence(state, vals[title2.title]);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
              var splits = CSL4.TITLE_SPLIT(vals[title2.title]);
              for (var i = 0, ilen = splits.length; i < ilen; i += 2) {
                splits[i] = CSL4.Output.Formatters["capitalize-first"](state, splits[i]);
              }
              for (var i = 1, ilen = splits.length - 1; i < ilen; i += 2) {
                var m = splits[i].match(/([:\?\!] )/);
                if (m) {
                  var narrowSpace = state.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr" ? "\u202F" : "";
                  splits[i] = narrowSpace + m[1];
                }
                if (splits[i].indexOf("-") > -1 || splits[i].indexOf("\u2014") > -1) {
                  splits[i] = "\u2014";
                }
              }
              vals[title2.title] = splits.join("");
              return vals[title2.title];
            } else {
              return vals[title2.title];
            }
          } else {
            return "";
          }
        },
        getSafeEscape: function(state) {
          if (["bibliography", "citation"].indexOf(state.tmp.area) > -1) {
            var callbacks = [];
            if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === "html") {
              callbacks.push(function(txt) {
                return txt.replace(/\u202f/g, '<span style="white-space:nowrap">&thinsp;</span>');
              });
            }
            if (callbacks.length) {
              return function(txt) {
                for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {
                  txt = callbacks[i](txt);
                }
                return CSL4.Output.Formats[state.opt.mode].text_escape(txt);
              };
            } else {
              return CSL4.Output.Formats[state.opt.mode].text_escape;
            }
          } else {
            return function(txt) {
              return txt;
            };
          }
        },
        SKIP_WORDS: ["about", "above", "across", "afore", "after", "against", "al", "along", "alongside", "amid", "amidst", "among", "amongst", "anenst", "apropos", "apud", "around", "as", "aside", "astride", "at", "athwart", "atop", "barring", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "circa", "despite", "down", "during", "et", "except", "for", "forenenst", "from", "given", "in", "inside", "into", "lest", "like", "modulo", "near", "next", "notwithstanding", "of", "off", "on", "onto", "out", "over", "per", "plus", "pro", "qua", "sans", "since", "than", "through", " thru", "throughout", "thruout", "till", "to", "toward", "towards", "under", "underneath", "until", "unto", "up", "upon", "versus", "vs.", "v.", "vs", "v", "via", "vis-\xE0-vis", "with", "within", "without", "according to", "ahead of", "apart from", "as for", "as of", "as per", "as regards", "aside from", "back to", "because of", "close to", "due to", "except for", "far from", "inside of", "instead of", "near to", "next to", "on to", "out from", "out of", "outside of", "prior to", "pursuant to", "rather than", "regardless of", "such as", "that of", "up to", "where as", "or", "yet", "so", "for", "and", "nor", "a", "an", "the", "de", "d'", "von", "van", "c", "ca"],
        FORMAT_KEY_SEQUENCE: [
          "@strip-periods",
          "@font-style",
          "@font-variant",
          "@font-weight",
          "@text-decoration",
          "@vertical-align",
          "@quotes"
        ],
        INSTITUTION_KEYS: [
          "font-style",
          "font-variant",
          "font-weight",
          "text-decoration",
          "text-case"
        ],
        SUFFIX_CHARS: "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",
        ROMAN_NUMERALS: [
          ["", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"],
          ["", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"],
          ["", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"],
          ["", "m", "mm", "mmm", "mmmm", "mmmmm"]
        ],
        LANGS: {
          "af-ZA": "Afrikaans",
          "ar": "Arabic",
          "bg-BG": "Bulgarian",
          "ca-AD": "Catalan",
          "cs-CZ": "Czech",
          "da-DK": "Danish",
          "de-AT": "Austrian",
          "de-CH": "German (CH)",
          "de-DE": "German (DE)",
          "el-GR": "Greek",
          "en-GB": "English (GB)",
          "en-US": "English (US)",
          "es-ES": "Spanish",
          "et-EE": "Estonian",
          "eu": "European",
          "fa-IR": "Persian",
          "fi-FI": "Finnish",
          "fr-CA": "French (CA)",
          "fr-FR": "French (FR)",
          "he-IL": "Hebrew",
          "hr-HR": "Croatian",
          "hu-HU": "Hungarian",
          "is-IS": "Icelandic",
          "it-IT": "Italian",
          "ja-JP": "Japanese",
          "km-KH": "Khmer",
          "ko-KR": "Korean",
          "lt-LT": "Lithuanian",
          "lv-LV": "Latvian",
          "mn-MN": "Mongolian",
          "nb-NO": "Norwegian (Bokm\xE5l)",
          "nl-NL": "Dutch",
          "nn-NO": "Norwegian (Nynorsk)",
          "pl-PL": "Polish",
          "pt-BR": "Portuguese (BR)",
          "pt-PT": "Portuguese (PT)",
          "ro-RO": "Romanian",
          "ru-RU": "Russian",
          "sk-SK": "Slovak",
          "sl-SI": "Slovenian",
          "sr-RS": "Serbian",
          "sv-SE": "Swedish",
          "th-TH": "Thai",
          "tr-TR": "Turkish",
          "uk-UA": "Ukrainian",
          "vi-VN": "Vietnamese",
          "zh-CN": "Chinese (CN)",
          "zh-TW": "Chinese (TW)"
        },
        LANG_BASES: {
          af: "af_ZA",
          ar: "ar",
          bg: "bg_BG",
          ca: "ca_AD",
          cs: "cs_CZ",
          da: "da_DK",
          de: "de_DE",
          el: "el_GR",
          en: "en_US",
          es: "es_ES",
          et: "et_EE",
          eu: "eu",
          fa: "fa_IR",
          fi: "fi_FI",
          fr: "fr_FR",
          he: "he_IL",
          hr: "hr-HR",
          hu: "hu_HU",
          is: "is_IS",
          it: "it_IT",
          ja: "ja_JP",
          km: "km_KH",
          ko: "ko_KR",
          lt: "lt_LT",
          lv: "lv-LV",
          mn: "mn_MN",
          nb: "nb_NO",
          nl: "nl_NL",
          nn: "nn-NO",
          pl: "pl_PL",
          pt: "pt_PT",
          ro: "ro_RO",
          ru: "ru_RU",
          sk: "sk_SK",
          sl: "sl_SI",
          sr: "sr_RS",
          sv: "sv_SE",
          th: "th_TH",
          tr: "tr_TR",
          uk: "uk_UA",
          vi: "vi_VN",
          zh: "zh_CN"
        },
        SUPERSCRIPTS: {
          "\xAA": "a",
          "\xB2": "2",
          "\xB3": "3",
          "\xB9": "1",
          "\xBA": "o",
          "\u02B0": "h",
          "\u02B1": "\u0266",
          "\u02B2": "j",
          "\u02B3": "r",
          "\u02B4": "\u0279",
          "\u02B5": "\u027B",
          "\u02B6": "\u0281",
          "\u02B7": "w",
          "\u02B8": "y",
          "\u02E0": "\u0263",
          "\u02E1": "l",
          "\u02E2": "s",
          "\u02E3": "x",
          "\u02E4": "\u0295",
          "\u1D2C": "A",
          "\u1D2D": "\xC6",
          "\u1D2E": "B",
          "\u1D30": "D",
          "\u1D31": "E",
          "\u1D32": "\u018E",
          "\u1D33": "G",
          "\u1D34": "H",
          "\u1D35": "I",
          "\u1D36": "J",
          "\u1D37": "K",
          "\u1D38": "L",
          "\u1D39": "M",
          "\u1D3A": "N",
          "\u1D3C": "O",
          "\u1D3D": "\u0222",
          "\u1D3E": "P",
          "\u1D3F": "R",
          "\u1D40": "T",
          "\u1D41": "U",
          "\u1D42": "W",
          "\u1D43": "a",
          "\u1D44": "\u0250",
          "\u1D45": "\u0251",
          "\u1D46": "\u1D02",
          "\u1D47": "b",
          "\u1D48": "d",
          "\u1D49": "e",
          "\u1D4A": "\u0259",
          "\u1D4B": "\u025B",
          "\u1D4C": "\u025C",
          "\u1D4D": "g",
          "\u1D4F": "k",
          "\u1D50": "m",
          "\u1D51": "\u014B",
          "\u1D52": "o",
          "\u1D53": "\u0254",
          "\u1D54": "\u1D16",
          "\u1D55": "\u1D17",
          "\u1D56": "p",
          "\u1D57": "t",
          "\u1D58": "u",
          "\u1D59": "\u1D1D",
          "\u1D5A": "\u026F",
          "\u1D5B": "v",
          "\u1D5C": "\u1D25",
          "\u1D5D": "\u03B2",
          "\u1D5E": "\u03B3",
          "\u1D5F": "\u03B4",
          "\u1D60": "\u03C6",
          "\u1D61": "\u03C7",
          "\u2070": "0",
          "\u2071": "i",
          "\u2074": "4",
          "\u2075": "5",
          "\u2076": "6",
          "\u2077": "7",
          "\u2078": "8",
          "\u2079": "9",
          "\u207A": "+",
          "\u207B": "\u2212",
          "\u207C": "=",
          "\u207D": "(",
          "\u207E": ")",
          "\u207F": "n",
          "\u2120": "SM",
          "\u2122": "TM",
          "\u3192": "\u4E00",
          "\u3193": "\u4E8C",
          "\u3194": "\u4E09",
          "\u3195": "\u56DB",
          "\u3196": "\u4E0A",
          "\u3197": "\u4E2D",
          "\u3198": "\u4E0B",
          "\u3199": "\u7532",
          "\u319A": "\u4E59",
          "\u319B": "\u4E19",
          "\u319C": "\u4E01",
          "\u319D": "\u5929",
          "\u319E": "\u5730",
          "\u319F": "\u4EBA",
          "\u02C0": "\u0294",
          "\u02C1": "\u0295",
          "\u06E5": "\u0648",
          "\u06E6": "\u064A"
        },
        SUPERSCRIPTS_REGEXP: new RegExp("[\xAA\xB2\xB3\xB9\xBA\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02E0\u02E1\u02E2\u02E3\u02E4\u1D2C\u1D2D\u1D2E\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u2070\u2071\u2074\u2075\u2076\u2077\u2078\u2079\u207A\u207B\u207C\u207D\u207E\u207F\u2120\u2122\u3192\u3193\u3194\u3195\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u02C0\u02C1\u06E5\u06E6]", "g"),
        UPDATE_GROUP_CONTEXT_CONDITION: function(state, str, valueTerm, token, value) {
          if (!state.opt.use_context_condition)
            return;
          var flags = state.tmp.group_context.tip;
          if (flags.condition) {
            if (!flags.condition.termtxt) {
              flags.condition.termtxt = str;
              flags.condition.valueTerm = valueTerm;
            }
            if (!flags.value_seen && flags.condition.test === "comma-safe-numbers-only") {
              if (value) {
                flags.value_seen = true;
                if (!value.match(/^[0-9]/)) {
                  state.tmp.just_did_number = false;
                }
              }
            }
          } else {
            if (token && token.decorations.filter((o) => o[0] === "@vertical-align").length > 0) {
              state.tmp.just_did_number = false;
            } else if (token && token.strings.suffix) {
              state.tmp.just_did_number = false;
            } else if (str) {
              if (str.match(/[0-9]$/)) {
                state.tmp.just_did_number = true;
              } else {
                state.tmp.just_did_number = false;
              }
            }
          }
        },
        EVALUATE_GROUP_CONDITION: function(state, flags) {
          if (!state.opt.use_context_condition)
            return;
          var testres;
          var numbersOnly = flags.condition.test === "comma-safe-numbers-only";
          if (flags.condition.test === "empty-label") {
            testres = !flags.condition.termtxt;
          } else if (flags.condition.test === "empty-label-no-decor") {
            testres = !flags.condition.termtxt || flags.condition.termtxt.indexOf("%s") > -1;
          } else if (["comma-safe", "comma-safe-numbers-only"].indexOf(flags.condition.test) > -1) {
            var locale_term = flags.condition.termtxt;
            var termStartAlpha = false;
            if (flags.condition.termtxt) {
              termStartAlpha = flags.condition.termtxt.slice(0, 1).match(CSL4.ALL_ROMANESQUE_REGEXP);
            }
            var num = state.tmp.just_did_number;
            if (num) {
              if (flags.condition.valueTerm) {
                testres = numbersOnly ? false : true;
              } else if (!locale_term) {
                testres = true;
              } else if (termStartAlpha) {
                testres = numbersOnly ? false : true;
              } else if (["always", "after-number"].indexOf(state.opt.require_comma_on_symbol) > -1) {
                testres = true;
              } else {
                testres = false;
              }
            } else {
              if (flags.condition.valueTerm) {
                testres = false;
              } else if (!locale_term) {
                testres = false;
              } else if (termStartAlpha) {
                testres = numbersOnly ? false : true;
              } else if (state.opt.require_comma_on_symbol === "always") {
                testres = true;
              } else {
                testres = false;
              }
            }
          }
          if (testres) {
            var force_suppress = false;
          } else {
            var force_suppress = true;
          }
          if (flags.condition.not) {
            force_suppress = !force_suppress;
          }
          return force_suppress;
        },
        SYS_OPTIONS: [
          "prioritize_disambiguate_condition",
          "csl_reverse_lookup_support",
          "main_title_from_short_title",
          "uppercase_subtitles",
          "force_short_title_casing_alignment",
          "implicit_short_title",
          "split_container_title"
        ],
        TITLE_SPLIT_REGEXP: function() {
          var splits = [
            "\\.\\s+",
            "\\!\\s+",
            "\\?\\s+",
            "\\s*::*\\s+",
            "\\s*\u2014\\s*",
            "\\s+\\-\\s+",
            "\\s*\\-\\-\\-*\\s*"
          ];
          return {
            match: new RegExp("(" + splits.join("|") + ")", "g"),
            matchfirst: new RegExp("^(" + splits.join("|") + ")"),
            split: new RegExp("(?:" + splits.join("|") + ")")
          };
        }(),
        TITLE_SPLIT: function(str) {
          if (!str) {
            return str;
          }
          var m = str.match(CSL4.TITLE_SPLIT_REGEXP.match);
          var lst = str.split(CSL4.TITLE_SPLIT_REGEXP.split);
          for (var i = lst.length - 2; i > -1; i--) {
            lst[i] = lst[i].trim();
            if (lst[i] && lst[i].slice(-1).toLowerCase() !== lst[i].slice(-1)) {
              lst[i] = lst[i] + m[i] + lst[i + 1];
              lst = lst.slice(0, i + 1).concat(lst.slice(i + 2));
            } else {
              lst = lst.slice(0, i + 1).concat([m[i]]).concat(lst.slice(i + 1));
            }
          }
          return lst;
        },
        GET_COURT_CLASS: function(state, Item, sortKey) {
          var cls = "";
          var authority2 = null;
          var country2 = Item.jurisdiction ? Item.jurisdiction.split(":")[0] : null;
          var classType = "court_condition_classes";
          if (sortKey) {
            classType = "court_key_classes";
          }
          if (country2 && Item.authority) {
            if (typeof Item.authority === "string") {
              authority2 = Item.authority;
            } else {
              if (Item.authority[0] && Item.authority[0].literal) {
                authority2 = Item.authority[0].literal;
              }
            }
          }
          if (authority2) {
            if (this.lang && state.locale[this.lang].opts[classType] && state.locale[this.lang].opts[classType][country2] && state.locale[this.lang].opts[classType][country2][authority2]) {
              cls = state.locale[this.lang].opts[classType][country2][authority2];
            } else if (state.locale[state.opt["default-locale"][0]].opts[classType] && state.locale[state.opt["default-locale"][0]].opts[classType][country2] && state.locale[state.opt["default-locale"][0]].opts[classType][country2][authority2]) {
              cls = state.locale[state.opt["default-locale"][0]].opts[classType][country2][authority2];
            }
          }
          return cls;
        },
        SET_COURT_CLASSES: function(state, lang, myxml, dataObj) {
          var nodes = myxml.getNodesByName(dataObj, "court-class");
          for (var pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            var courtclass = nodes[pos];
            var attributes = myxml.attributes(courtclass);
            var cls = attributes["@name"];
            var country2 = attributes["@country"];
            var courts = attributes["@courts"];
            var classType = "court_key_classes";
            if (state.registry) {
              classType = "court_condition_classes";
            }
            if (cls && country2 && courts) {
              courts = courts.trim().split(/\s+/);
              if (!state.locale[lang].opts[classType]) {
                state.locale[lang].opts[classType] = {};
              }
              if (!state.locale[lang].opts[classType][country2]) {
                state.locale[lang].opts[classType][country2] = {};
              }
              for (var i = 0, ilen = courts.length; i < ilen; i++) {
                state.locale[lang].opts[classType][country2][courts[i]] = cls;
              }
            }
          }
        },
        INIT_JURISDICTION_MACROS: function(state, Item, item, macroName) {
          if (!state.sys.retrieveStyleModule || !CSL4.MODULE_MACROS[macroName] || !Item.jurisdiction) {
            return false;
          }
          var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
          if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {
            var res = state.retrieveAllStyleModules(jurisdictionList);
            for (var jurisdiction2 in res) {
              var fallback = state.loadStyleModule(jurisdiction2, res[jurisdiction2]);
              if (fallback) {
                if (!res[fallback]) {
                  Object.assign(res, state.retrieveAllStyleModules([fallback]));
                  state.loadStyleModule(fallback, res[fallback], true);
                }
              }
            }
          }
          if (state.opt.parallel.enable) {
            if (!state.parallel) {
              state.parallel = new CSL4.Parallel(state);
            }
          }
          for (var i = 0, ilen = jurisdictionList.length; i < ilen; i++) {
            var jurisdiction2 = jurisdictionList[i];
            if (item) {
              if (state.juris[jurisdiction2] && !item["best-jurisdiction"] && state.juris[jurisdiction2].types.locator) {
                item["best-jurisdiction"] = jurisdiction2;
              }
            }
            if (state.juris[jurisdiction2] && state.juris[jurisdiction2].types[Item.type]) {
              Item["best-jurisdiction"] = jurisdiction2;
              return true;
            }
          }
          return false;
        }
      };
      CSL4.XmlJSON = function(dataObj) {
        this.dataObj = dataObj;
        this.institution = {
          name: "institution",
          attrs: {
            "institution-parts": "long",
            "delimiter": ", "
          },
          children: [
            {
              name: "institution-part",
              attrs: {
                name: "long"
              },
              children: []
            }
          ]
        };
      };
      CSL4.XmlJSON.prototype.clean = function(json) {
        return json;
      };
      CSL4.XmlJSON.prototype.getStyleId = function(myjson, styleName) {
        var tagName = "id";
        if (styleName) {
          tagName = "title";
        }
        var ret = "";
        var children = myjson.children;
        for (var i = 0, ilen = children.length; i < ilen; i++) {
          if (children[i].name === "info") {
            var grandkids = children[i].children;
            for (var j = 0, jlen = grandkids.length; j < jlen; j++) {
              if (grandkids[j].name === tagName) {
                ret = grandkids[j].children[0];
              }
            }
          }
        }
        return ret;
      };
      CSL4.XmlJSON.prototype.children = function(myjson) {
        if (myjson && myjson.children.length) {
          return myjson.children.slice();
        } else {
          return false;
        }
      };
      CSL4.XmlJSON.prototype.nodename = function(myjson) {
        return myjson ? myjson.name : null;
      };
      CSL4.XmlJSON.prototype.attributes = function(myjson) {
        var ret = {};
        for (var attrname in myjson.attrs) {
          ret["@" + attrname] = myjson.attrs[attrname];
        }
        return ret;
      };
      CSL4.XmlJSON.prototype.content = function(myjson) {
        var ret = "";
        if (!myjson || !myjson.children) {
          return ret;
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "string") {
            ret += myjson.children[i];
          }
        }
        return ret;
      };
      CSL4.XmlJSON.prototype.namespace = {};
      CSL4.XmlJSON.prototype.numberofnodes = function(myjson) {
        if (myjson && typeof myjson.length == "number") {
          return myjson.length;
        } else {
          return 0;
        }
      };
      CSL4.XmlJSON.prototype.getAttributeValue = function(myjson, name, namespace) {
        var ret = "";
        if (namespace) {
          name = namespace + ":" + name;
        }
        if (myjson) {
          if (myjson.attrs) {
            if (myjson.attrs[name]) {
              ret = myjson.attrs[name];
            } else {
              ret = "";
            }
          }
        }
        return ret;
      };
      CSL4.XmlJSON.prototype.getNodeValue = function(myjson, name) {
        var ret = "";
        if (name) {
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name === name) {
              if (myjson.children[i].children.length) {
                ret = myjson.children[i];
              } else {
                ret = "";
              }
            }
          }
        } else if (myjson) {
          ret = myjson;
        }
        if (ret && ret.children && ret.children.length == 1 && typeof ret.children[0] === "string") {
          ret = ret.children[0];
        }
        return ret;
      };
      CSL4.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myjson, nodename, partname, attrname, val) {
        var pos, len, xml, nodes, node;
        if (attrname.slice(0, 1) === "@") {
          attrname = attrname.slice(1);
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {
            myjson.children[i].attrs[attrname] = val;
          }
        }
      };
      CSL4.XmlJSON.prototype.deleteNodeByNameAttribute = function(myjson, val) {
        var i, ilen;
        for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (!myjson.children[i] || typeof myjson.children[i] === "string") {
            continue;
          }
          if (myjson.children[i].attrs.name == val) {
            myjson.children = myjson.children.slice(0, i).concat(myjson.children.slice(i + 1));
          }
        }
      };
      CSL4.XmlJSON.prototype.deleteAttribute = function(myjson, attrname) {
        var i, ilen;
        if (typeof myjson.attrs[attrname] !== "undefined") {
          myjson.attrs.pop(attrname);
        }
      };
      CSL4.XmlJSON.prototype.setAttribute = function(myjson, attr, val) {
        myjson.attrs[attr] = val;
        return false;
      };
      CSL4.XmlJSON.prototype.nodeCopy = function(myjson, clone) {
        if (!clone) {
          var clone = {};
        }
        if (typeof clone === "object" && typeof clone.length === "undefined") {
          for (var key in myjson) {
            if (typeof myjson[key] === "string") {
              clone[key] = myjson[key];
            } else if (typeof myjson[key] === "object") {
              if (typeof myjson[key].length === "undefined") {
                clone[key] = this.nodeCopy(myjson[key], {});
              } else {
                clone[key] = this.nodeCopy(myjson[key], []);
              }
            }
          }
        } else {
          for (var i = 0, ilen = myjson.length; i < ilen; i += 1) {
            if (typeof myjson[i] === "string") {
              clone[i] = myjson[i];
            } else {
              clone[i] = this.nodeCopy(myjson[i], {});
            }
          }
        }
        return clone;
      };
      CSL4.XmlJSON.prototype.getNodesByName = function(myjson, name, nameattrval, ret) {
        var nodes, node, pos, len;
        if (!ret) {
          var ret = [];
        }
        if (!myjson || !myjson.children) {
          return ret;
        }
        if (name === myjson.name) {
          if (nameattrval) {
            if (nameattrval === myjson.attrs.name) {
              ret.push(myjson);
            }
          } else {
            ret.push(myjson);
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] !== "object") {
            continue;
          }
          this.getNodesByName(myjson.children[i], name, nameattrval, ret);
        }
        return ret;
      };
      CSL4.XmlJSON.prototype.nodeNameIs = function(myjson, name) {
        if (typeof myjson === "undefined") {
          return false;
        }
        if (name == myjson.name) {
          return true;
        }
        return false;
      };
      CSL4.XmlJSON.prototype.makeXml = function(myjson) {
        if (typeof myjson === "string") {
          if (myjson.slice(0, 1) === "<") {
            myjson = this.jsonStringWalker.walkToObject(myjson);
          } else {
            myjson = JSON.parse(myjson);
          }
        }
        return myjson;
      };
      CSL4.XmlJSON.prototype.insertChildNodeAfter = function(parent, node, pos, datejson) {
        for (var i = 0, ilen = parent.children.length; i < ilen; i += 1) {
          if (node === parent.children[i]) {
            parent.children = parent.children.slice(0, i).concat([datejson]).concat(parent.children.slice(i + 1));
            break;
          }
        }
        return parent;
      };
      CSL4.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {
        if (myjson.name === "group") {
          var useme = true;
          var mustHaves = ["publisher", "publisher-place"];
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);
            var isText = myjson.children[i].name === "text";
            if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {
              mustHaves = mustHaves.slice(0, haveVarname).concat(mustHaves.slice(haveVarname + 1));
            } else {
              useme = false;
              break;
            }
          }
          if (useme && !mustHaves.length) {
            myjson.attrs["has-publisher-and-publisher-place"] = true;
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "object") {
            this.insertPublisherAndPlace(myjson.children[i]);
          }
        }
      };
      CSL4.XmlJSON.prototype.isChildOfSubstitute = function(parents) {
        if (parents.length > 0) {
          var myparents = parents.slice();
          var parent = myparents.pop();
          if (parent === "substitute") {
            return true;
          } else {
            return this.isChildOfSubstitute(myparents);
          }
        }
        return false;
      };
      CSL4.XmlJSON.prototype.addMissingNameNodes = function(myjson, parents) {
        if (!parents) {
          parents = [];
        }
        if (myjson.name === "names") {
          if (!this.isChildOfSubstitute(parents)) {
            var addName = true;
            for (var i = 0, ilen = myjson.children.length; i < ilen; i++) {
              if (myjson.children[i].name === "name") {
                addName = false;
                break;
              }
            }
            if (addName) {
              myjson.children = [{ name: "name", attrs: {}, children: [] }].concat(myjson.children);
            }
          }
        }
        parents.push(myjson.name);
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "object") {
            this.addMissingNameNodes(myjson.children[i], parents);
          }
        }
        parents.pop();
      };
      CSL4.XmlJSON.prototype.addInstitutionNodes = function(myjson) {
        var names2, thenames, institution2, theinstitution, name, thename, xml, pos, len;
        if (myjson.name === "names") {
          var attributes = {};
          var insertPos = -1;
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name == "name") {
              for (var key in myjson.children[i].attrs) {
                attributes[key] = myjson.children[i].attrs[key];
              }
              attributes.delimiter = myjson.children[i].attrs.delimiter;
              attributes.and = myjson.children[i].attrs.and;
              insertPos = i;
              for (var k = 0, klen = myjson.children[i].children.length; k < klen; k += 1) {
                if (myjson.children[i].children[k].attrs.name !== "family") {
                  continue;
                }
                for (var key in myjson.children[i].children[k].attrs) {
                  attributes[key] = myjson.children[i].children[k].attrs[key];
                }
              }
            }
            if (myjson.children[i].name == "institution") {
              insertPos = -1;
              break;
            }
          }
          if (insertPos > -1) {
            var institution2 = this.nodeCopy(this.institution);
            for (var i = 0, ilen = CSL4.INSTITUTION_KEYS.length; i < ilen; i += 1) {
              var attrname = CSL4.INSTITUTION_KEYS[i];
              if (typeof attributes[attrname] !== "undefined") {
                institution2.children[0].attrs[attrname] = attributes[attrname];
              }
              if (attributes.delimiter) {
                institution2.attrs.delimiter = attributes.delimiter;
              }
              if (attributes.and) {
                institution2.attrs.and = attributes.and;
              }
            }
            myjson.children = myjson.children.slice(0, insertPos + 1).concat([institution2]).concat(myjson.children.slice(insertPos + 1));
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "string") {
            continue;
          }
          this.addInstitutionNodes(myjson.children[i]);
        }
      };
      CSL4.XmlJSON.prototype.flagDateMacros = function(myjson) {
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === "macro") {
            if (this.inspectDateMacros(myjson.children[i])) {
              myjson.children[i].attrs["macro-has-date"] = "true";
            }
          }
        }
      };
      CSL4.XmlJSON.prototype.inspectDateMacros = function(myjson) {
        if (!myjson || !myjson.children) {
          return false;
        }
        if (myjson.name === "date") {
          return true;
        } else {
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (this.inspectDateMacros(myjson.children[i])) {
              return true;
            }
          }
        }
        return false;
      };
      CSL4.stripXmlProcessingInstruction = function(xml) {
        if (!xml) {
          return xml;
        }
        xml = xml.replace(/^<\?[^?]+\?>/, "");
        xml = xml.replace(/<!--[^>]+-->/g, "");
        xml = xml.replace(/^\s+/g, "");
        xml = xml.replace(/\s+$/g, "");
        return xml;
      };
      CSL4.parseXml = function(str) {
        var _pos = 0;
        var _obj = { children: [] };
        var _stack = [_obj.children];
        function _listifyString(str2) {
          str2 = str2.split(/(?:\r\n|\n|\r)/).join(" ").replace(/>[	 ]+</g, "><").replace(/<\!--.*?-->/g, "");
          var lst2 = str2.split("><");
          var stylePos = null;
          for (var i2 = 0, ilen2 = lst2.length; i2 < ilen2; i2++) {
            if (i2 > 0) {
              lst2[i2] = "<" + lst2[i2];
            }
            if (i2 < lst2.length - 1) {
              lst2[i2] = lst2[i2] + ">";
            }
            if (typeof stylePos != "number") {
              if (lst2[i2].slice(0, 7) === "<style " || lst2[i2].slice(0, 8) == "<locale ") {
                stylePos = i2;
              }
            }
          }
          lst2 = lst2.slice(stylePos);
          for (var i2 = lst2.length - 2; i2 > -1; i2--) {
            if (lst2[i2].slice(1).indexOf("<") === -1) {
              var stub = lst2[i2].slice(0, 5);
              if (lst2[i2].slice(-2) !== "/>") {
                if (stub === "<term") {
                  if (lst2[i2 + 1].slice(0, 6) === "</term") {
                    lst2[i2] = lst2[i2] + lst2[i2 + 1];
                    lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                  }
                } else if (["<sing", "<mult"].indexOf(stub) > -1) {
                  if (lst2[i2].slice(-2) !== "/>" && lst2[i2 + 1].slice(0, 1) === "<") {
                    lst2[i2] = lst2[i2] + lst2[i2 + 1];
                    lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                  }
                }
              }
            }
          }
          return lst2;
        }
        function _decodeHtmlEntities(str2) {
          return str2.split("&amp;").join("&").split("&quot;").join('"').split("&gt;").join(">").split("&lt;").join("<").replace(/&#([0-9]{1,6});/gi, function(match, numStr) {
            var num = parseInt(numStr, 10);
            return String.fromCharCode(num);
          }).replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr) {
            var num = parseInt(numStr, 16);
            return String.fromCharCode(num);
          });
        }
        function _getAttributes(elem2) {
          var m = elem2.match(/([^\'\"=	 ]+)=(?:\"[^\"]*\"|\'[^\']*\')/g);
          if (m) {
            for (var i2 = 0, ilen2 = m.length; i2 < ilen2; i2++) {
              m[i2] = m[i2].replace(/=.*/, "");
            }
          }
          return m;
        }
        function _getAttribute(elem2, attr) {
          var rex = RegExp("^.*[	 ]+" + attr + `=("(?:[^"]*)"|'(?:[^']*)').*$`);
          var m = elem2.match(rex);
          return m ? m[1].slice(1, -1) : null;
        }
        function _getTagName(elem2) {
          var rex = RegExp("^<([^	 />]+)");
          var m = elem2.match(rex);
          return m ? m[1] : null;
        }
        function _castObjectFromOpeningTag(elem2) {
          var obj = {};
          obj.name = _getTagName(elem2);
          obj.attrs = {};
          var attributes = _getAttributes(elem2);
          if (attributes) {
            for (var i2 = 0, ilen2 = attributes.length; i2 < ilen2; i2++) {
              var attr = {
                name: attributes[i2],
                value: _getAttribute(elem2, attributes[i2])
              };
              obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);
            }
          }
          obj.children = [];
          return obj;
        }
        function _extractTextFromCompositeElement(elem2) {
          var m = elem2.match(/^.*>([^<]*)<.*$/);
          return _decodeHtmlEntities(m[1]);
        }
        function _appendToChildren(obj) {
          _stack.slice(-1)[0].push(obj);
        }
        function _extendStackWithNewChildren(obj) {
          _stack.push(obj.children);
        }
        function processElement(elem2) {
          var obj;
          if (elem2.slice(1).indexOf("<") > -1) {
            var tag = elem2.slice(0, elem2.indexOf(">") + 1);
            obj = _castObjectFromOpeningTag(tag);
            obj.children = [_extractTextFromCompositeElement(elem2)];
            _appendToChildren(obj);
          } else if (elem2.slice(-2) === "/>") {
            obj = _castObjectFromOpeningTag(elem2);
            if (_getTagName(elem2) === "term") {
              obj.children.push("");
            }
            _appendToChildren(obj);
          } else if (elem2.slice(0, 2) === "</") {
            _stack.pop();
          } else {
            obj = _castObjectFromOpeningTag(elem2);
            _appendToChildren(obj);
            _extendStackWithNewChildren(obj);
          }
        }
        var lst = _listifyString(str);
        for (var i = 0, ilen = lst.length; i < ilen; i++) {
          var elem = lst[i];
          processElement(elem);
        }
        return _obj.children[0];
      };
      CSL4.XmlDOM = function(dataObj) {
        this.dataObj = dataObj;
        if (typeof DOMParser == "undefined") {
          DOMParser = function() {
          };
          DOMParser.prototype.parseFromString = function(str2, contentType) {
            if (typeof ActiveXObject != "undefined") {
              var xmldata = new ActiveXObject("MSXML.DomDocument");
              xmldata.async = false;
              xmldata.loadXML(str2);
              return xmldata;
            } else if (typeof XMLHttpRequest != "undefined") {
              var xmldata = new XMLHttpRequest();
              if (!contentType) {
                contentType = "text/xml";
              }
              xmldata.open("GET", "data:" + contentType + ";charset=utf-8," + encodeURIComponent(str2), false);
              if (xmldata.overrideMimeType) {
                xmldata.overrideMimeType(contentType);
              }
              xmldata.send(null);
              return xmldata.responseXML;
            } else if (typeof marknote != "undefined") {
              var parser = new marknote.Parser();
              return parser.parse(str2);
            }
          };
          this.hasAttributes = function(node) {
            var ret;
            if (node.attributes && node.attributes.length) {
              ret = true;
            } else {
              ret = false;
            }
            return ret;
          };
        } else {
          this.hasAttributes = function(node) {
            var ret;
            if (node.attributes && node.attributes.length) {
              ret = true;
            } else {
              ret = false;
            }
            return ret;
          };
        }
        this.importNode = function(doc, srcElement) {
          var ret;
          if (typeof doc.importNode == "undefined") {
            ret = this._importNode(doc, srcElement, true);
          } else {
            ret = doc.importNode(srcElement, true);
          }
          return ret;
        };
        this._importNode = function(doc, node, allChildren) {
          switch (node.nodeType) {
            case 1:
              var newNode = doc.createElement(node.nodeName);
              if (node.attributes && node.attributes.length > 0)
                for (var i = 0, il = node.attributes.length; i < il; )
                  newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
              if (allChildren && node.childNodes && node.childNodes.length > 0)
                for (var i = 0, il = node.childNodes.length; i < il; )
                  newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));
              return newNode;
              break;
            case 3:
            case 4:
            case 8:
          }
        };
        this.parser = new DOMParser();
        var str = '<docco><institution institution-parts="long" delimiter=", " substitute-use-first="1" use-last="1"><institution-part name="long"/></institution></docco>';
        var inst_doc = this.parser.parseFromString(str, "text/xml");
        var inst_node = inst_doc.getElementsByTagName("institution");
        this.institution = inst_node.item(0);
        var inst_part_node = inst_doc.getElementsByTagName("institution-part");
        this.institutionpart = inst_part_node.item(0);
        this.ns = "http://purl.org/net/xbiblio/csl";
      };
      CSL4.XmlDOM.prototype.clean = function(xml) {
        xml = xml.replace(/<\?[^?]+\?>/g, "");
        xml = xml.replace(/<![^>]+>/g, "");
        xml = xml.replace(/^\s+/, "");
        xml = xml.replace(/\s+$/, "");
        xml = xml.replace(/^\n*/, "");
        return xml;
      };
      CSL4.XmlDOM.prototype.getStyleId = function(myxml, styleName) {
        var text = "";
        var tagName = "id";
        if (styleName) {
          tagName = "title";
        }
        var node = myxml.getElementsByTagName(tagName);
        if (node && node.length) {
          node = node.item(0);
        }
        if (node) {
          text = node.textContent;
        }
        if (!text) {
          text = node.innerText;
        }
        if (!text) {
          text = node.innerHTML;
        }
        return text;
      };
      CSL4.XmlDOM.prototype.children = function(myxml) {
        var children, pos, len, ret;
        if (myxml) {
          ret = [];
          children = myxml.childNodes;
          for (pos = 0, len = children.length; pos < len; pos += 1) {
            if (children[pos].nodeName != "#text") {
              ret.push(children[pos]);
            }
          }
          return ret;
        } else {
          return [];
        }
      };
      CSL4.XmlDOM.prototype.nodename = function(myxml) {
        var ret = myxml.nodeName;
        return ret;
      };
      CSL4.XmlDOM.prototype.attributes = function(myxml) {
        var ret, attrs, attr, key, xml, pos, len;
        ret = new Object();
        if (myxml && this.hasAttributes(myxml)) {
          attrs = myxml.attributes;
          for (pos = 0, len = attrs.length; pos < len; pos += 1) {
            attr = attrs[pos];
            ret["@" + attr.name] = attr.value;
          }
        }
        return ret;
      };
      CSL4.XmlDOM.prototype.content = function(myxml) {
        var ret;
        if (typeof myxml.textContent != "undefined") {
          ret = myxml.textContent;
        } else if (typeof myxml.innerText != "undefined") {
          ret = myxml.innerText;
        } else {
          ret = myxml.txt;
        }
        return ret;
      };
      CSL4.XmlDOM.prototype.namespace = {
        "xml": "http://www.w3.org/XML/1998/namespace"
      };
      CSL4.XmlDOM.prototype.numberofnodes = function(myxml) {
        if (myxml) {
          return myxml.length;
        } else {
          return 0;
        }
      };
      CSL4.XmlDOM.prototype.getAttributeName = function(attr) {
        var ret = attr.name;
        return ret;
      };
      CSL4.XmlDOM.prototype.getAttributeValue = function(myxml, name, namespace) {
        var ret = "";
        if (namespace) {
          name = namespace + ":" + name;
        }
        if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {
          ret = myxml.getAttribute(name);
        }
        return ret;
      };
      CSL4.XmlDOM.prototype.getNodeValue = function(myxml, name) {
        var ret = null;
        if (name) {
          var vals = myxml.getElementsByTagName(name);
          if (vals.length > 0) {
            if (typeof vals[0].textContent != "undefined") {
              ret = vals[0].textContent;
            } else if (typeof vals[0].innerText != "undefined") {
              ret = vals[0].innerText;
            } else {
              ret = vals[0].text;
            }
          }
        }
        if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || myxml.childNodes.length == 1 && myxml.firstChild.nodeName == "#text")) {
          if (typeof myxml.textContent != "undefined") {
            ret = myxml.textContent;
          } else if (typeof myxml.innerText != "undefined") {
            ret = myxml.innerText;
          } else {
            ret = myxml.text;
          }
        }
        if (ret === null) {
          ret = myxml;
        }
        return ret;
      };
      CSL4.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myxml, nodename, partname, attrname, val) {
        var pos, len, xml, nodes, node;
        if (attrname.slice(0, 1) === "@") {
          attrname = attrname.slice(1);
        }
        nodes = myxml.getElementsByTagName(nodename);
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (node.getAttribute("name") != partname) {
            continue;
          }
          node.setAttribute(attrname, val);
        }
      };
      CSL4.XmlDOM.prototype.deleteNodeByNameAttribute = function(myxml, val) {
        var pos, len, node, nodes;
        nodes = myxml.childNodes;
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (!node || node.nodeType == node.TEXT_NODE) {
            continue;
          }
          if (this.hasAttributes(node) && node.getAttribute("name") == val) {
            myxml.removeChild(nodes[pos]);
          }
        }
      };
      CSL4.XmlDOM.prototype.deleteAttribute = function(myxml, attr) {
        myxml.removeAttribute(attr);
      };
      CSL4.XmlDOM.prototype.setAttribute = function(myxml, attr, val) {
        if (!myxml.ownerDocument) {
          myxml = myxml.firstChild;
        }
        if (["function", "unknown"].indexOf(typeof myxml.setAttribute) > -1) {
          myxml.setAttribute(attr, val);
        }
        return false;
      };
      CSL4.XmlDOM.prototype.nodeCopy = function(myxml) {
        var cloned_node = myxml.cloneNode(true);
        return cloned_node;
      };
      CSL4.XmlDOM.prototype.getNodesByName = function(myxml, name, nameattrval) {
        var ret, nodes, node, pos, len;
        ret = [];
        nodes = myxml.getElementsByTagName(name);
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes.item(pos);
          if (nameattrval && !(this.hasAttributes(node) && node.getAttribute("name") == nameattrval)) {
            continue;
          }
          ret.push(node);
        }
        return ret;
      };
      CSL4.XmlDOM.prototype.nodeNameIs = function(myxml, name) {
        if (name == myxml.nodeName) {
          return true;
        }
        return false;
      };
      CSL4.XmlDOM.prototype.makeXml = function(myxml) {
        var ret, topnode;
        if (!myxml) {
          myxml = "<docco><bogus/></docco>";
        }
        myxml = myxml.replace(/\s*<\?[^>]*\?>\s*\n*/g, "");
        var nodetree = this.parser.parseFromString(myxml, "application/xml");
        return nodetree.firstChild;
      };
      CSL4.XmlDOM.prototype.insertChildNodeAfter = function(parent, node, pos, datexml) {
        var myxml, xml;
        myxml = this.importNode(node.ownerDocument, datexml);
        parent.replaceChild(myxml, node);
        return parent;
      };
      CSL4.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {
        var group = myxml.getElementsByTagName("group");
        for (var i = 0, ilen = group.length; i < ilen; i += 1) {
          var node = group.item(i);
          var skippers = [];
          for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
            if (node.childNodes.item(j).nodeType !== 1) {
              skippers.push(j);
            }
          }
          if (node.childNodes.length - skippers.length === 2) {
            var twovars = [];
            for (var j = 0, jlen = 2; j < jlen; j += 1) {
              if (skippers.indexOf(j) > -1) {
                continue;
              }
              var child = node.childNodes.item(j);
              var subskippers = [];
              for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                if (child.childNodes.item(k).nodeType !== 1) {
                  subskippers.push(k);
                }
              }
              if (child.childNodes.length - subskippers.length === 0) {
                twovars.push(child.getAttribute("variable"));
                if (child.getAttribute("suffix") || child.getAttribute("prefix")) {
                  twovars = [];
                  break;
                }
              }
            }
            if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
              node.setAttribute("has-publisher-and-publisher-place", true);
            }
          }
        }
      };
      CSL4.XmlDOM.prototype.isChildOfSubstitute = function(node) {
        if (node.parentNode) {
          if (node.parentNode.tagName.toLowerCase() === "substitute") {
            return true;
          } else {
            return this.isChildOfSubstitute(node.parentNode);
          }
        }
        return false;
      };
      CSL4.XmlDOM.prototype.addMissingNameNodes = function(myxml) {
        var nameslist = myxml.getElementsByTagName("names");
        for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {
          var names2 = nameslist.item(i);
          var namelist = names2.getElementsByTagName("name");
          if ((!namelist || namelist.length === 0) && !this.isChildOfSubstitute(names2)) {
            var doc = names2.ownerDocument;
            var name = doc.createElement("name");
            names2.appendChild(name);
          }
        }
      };
      CSL4.XmlDOM.prototype.addInstitutionNodes = function(myxml) {
        var names2, thenames, institution2, theinstitution, theinstitutionpart, name, thename, xml, pos, len;
        names2 = myxml.getElementsByTagName("names");
        for (pos = 0, len = names2.length; pos < len; pos += 1) {
          thenames = names2.item(pos);
          name = thenames.getElementsByTagName("name");
          if (name.length == 0) {
            continue;
          }
          institution2 = thenames.getElementsByTagName("institution");
          if (institution2.length == 0) {
            theinstitution = this.importNode(myxml.ownerDocument, this.institution);
            theinstitutionpart = theinstitution.getElementsByTagName("institution-part").item(0);
            thename = name.item(0);
            thenames.insertBefore(theinstitution, thename.nextSibling);
            for (var j = 0, jlen = CSL4.INSTITUTION_KEYS.length; j < jlen; j += 1) {
              var attrname = CSL4.INSTITUTION_KEYS[j];
              var attrval = thename.getAttribute(attrname);
              if (attrval) {
                theinstitutionpart.setAttribute(attrname, attrval);
              }
            }
            var nameparts = thename.getElementsByTagName("name-part");
            for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {
              if (nameparts[j].getAttribute("name") === "family") {
                for (var k = 0, klen = CSL4.INSTITUTION_KEYS.length; k < klen; k += 1) {
                  var attrname = CSL4.INSTITUTION_KEYS[k];
                  var attrval = nameparts[j].getAttribute(attrname);
                  if (attrval) {
                    theinstitutionpart.setAttribute(attrname, attrval);
                  }
                }
              }
            }
          }
        }
      };
      CSL4.XmlDOM.prototype.flagDateMacros = function(myxml) {
        var pos, len, thenode, thedate;
        var nodes = myxml.getElementsByTagName("macro");
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          thenode = nodes.item(pos);
          thedate = thenode.getElementsByTagName("date");
          if (thedate.length) {
            thenode.setAttribute("macro-has-date", "true");
          }
        }
      };
      CSL4.setupXml = function(xmlObject) {
        var dataObj = {};
        var parser = null;
        if (typeof xmlObject !== "undefined") {
          if (typeof xmlObject === "string") {
            xmlObject = xmlObject.replace("^\uFEFF", "").replace(/^\s+/, "");
            if (xmlObject.slice(0, 1) === "<") {
              dataObj = CSL4.parseXml(xmlObject);
            } else {
              dataObj = JSON.parse(xmlObject);
            }
            parser = new CSL4.XmlJSON(dataObj);
          } else if (typeof xmlObject.getAttribute !== "undefined") {
            parser = new CSL4.XmlDOM(xmlObject);
          } else if (typeof xmlObject.toXMLString !== "undefined") {
            parser = new CSL4.XmlE4X(xmlObject);
          } else {
            parser = new CSL4.XmlJSON(xmlObject);
          }
        } else {
          CSL4.error("unable to parse XML input");
        }
        if (!parser) {
          CSL4.error("citeproc-js error: unable to parse CSL style or locale object");
        }
        return parser;
      };
      CSL4.getSortCompare = function(default_locale) {
        if (CSL4.stringCompare) {
          return CSL4.stringCompare;
        }
        var me = this;
        var strcmp;
        var strcmp_opts = {
          sensitivity: "base",
          ignorePunctuation: true,
          numeric: true
        };
        if (!default_locale) {
          default_locale = "en-US";
        }
        strcmp = function(a, b) {
          return CSL4.toLocaleLowerCase.call(me, a).localeCompare(CSL4.toLocaleLowerCase.call(me, b), default_locale, strcmp_opts);
        };
        var stripPunct = function(str) {
          return str.replace(/^[\[\]\'\"]*/g, "");
        };
        var getBracketPreSort = function() {
          if (!strcmp("[x", "x")) {
            return false;
          } else {
            return function(a, b) {
              return strcmp(stripPunct(a), stripPunct(b));
            };
          }
        };
        var bracketPreSort = getBracketPreSort();
        var sortCompare = function(a, b) {
          if (bracketPreSort) {
            return bracketPreSort(a, b);
          } else {
            return strcmp(a, b);
          }
        };
        return sortCompare;
      };
      CSL4.ambigConfigDiff = function(a, b) {
        var pos, len, ppos, llen;
        if (a.names.length !== b.names.length) {
          return 1;
        } else {
          for (pos = 0, len = a.names.length; pos < len; pos += 1) {
            if (a.names[pos] !== b.names[pos]) {
              return 1;
            } else {
              for (ppos = 0, llen = a.givens[pos]; ppos < llen; ppos += 1) {
                if (a.givens[pos][ppos] !== b.givens[pos][ppos]) {
                  return 1;
                }
              }
            }
          }
        }
        if (a.disambiguate != b.disambiguate) {
          return 1;
        }
        if (a.year_suffix !== b.year_suffix) {
          return 1;
        }
        return 0;
      };
      CSL4.cloneAmbigConfig = function(config, oldconfig) {
        var i, ilen, j, jlen, param;
        var ret = {};
        ret.names = [];
        ret.givens = [];
        ret.year_suffix = false;
        ret.disambiguate = false;
        for (i = 0, ilen = config.names.length; i < ilen; i += 1) {
          param = config.names[i];
          ret.names[i] = param;
        }
        for (i = 0, ilen = config.givens.length; i < ilen; i += 1) {
          param = [];
          for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {
            param.push(config.givens[i][j]);
          }
          ret.givens.push(param);
        }
        if (oldconfig) {
          ret.year_suffix = oldconfig.year_suffix;
          ret.disambiguate = oldconfig.disambiguate;
        } else {
          ret.year_suffix = config.year_suffix;
          ret.disambiguate = config.disambiguate;
        }
        return ret;
      };
      CSL4.getAmbigConfig = function() {
        var config, ret;
        config = this.tmp.disambig_request;
        if (!config) {
          config = this.tmp.disambig_settings;
        }
        var ret = CSL4.cloneAmbigConfig(config);
        return ret;
      };
      CSL4.getMaxVals = function() {
        return this.tmp.names_max.mystack.slice();
      };
      CSL4.getMinVal = function() {
        return this.tmp["et-al-min"];
      };
      CSL4.tokenExec = function(token, Item, item) {
        var next, maybenext, exec, debug;
        debug = false;
        next = token.next;
        maybenext = false;
        var record = function(result) {
          if (result) {
            this.tmp.jump.replace("succeed");
            return token.succeed;
          } else {
            this.tmp.jump.replace("fail");
            return token.fail;
          }
        };
        if (token.test) {
          next = record.call(this, token.test(Item, item));
        }
        for (var i = 0, ilen = token.execs.length; i < ilen; i++) {
          exec = token.execs[i];
          maybenext = exec.call(token, this, Item, item);
          if (maybenext) {
            next = maybenext;
          }
        }
        if (debug) {
          CSL4.debug(token.name + " (" + token.tokentype + ") ---> done");
        }
        return next;
      };
      CSL4.expandMacro = function(macro_key_token, target) {
        var mkey, macro_nodes, end_of_macro, func;
        mkey = macro_key_token.postponed_macro;
        var sort_direction = macro_key_token.strings.sort_direction;
        macro_key_token = new CSL4.Token("group", CSL4.START);
        var hasDate = false;
        var macroid = false;
        macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, "macro", mkey);
        if (macro_nodes.length) {
          macroid = this.cslXml.getAttributeValue(macro_nodes[0], "cslid");
          hasDate = this.cslXml.getAttributeValue(macro_nodes[0], "macro-has-date");
        }
        if (hasDate) {
          mkey = mkey + "@" + this.build.current_default_locale;
          func = function(state) {
            if (state.tmp.extension) {
              state.tmp["doing-macro-with-date"] = true;
            }
          };
          macro_key_token.execs.push(func);
        }
        if (this.build.macro_stack.indexOf(mkey) > -1) {
          CSL4.error('CSL processor error: call to macro "' + mkey + '" would cause an infinite loop');
        } else {
          this.build.macro_stack.push(mkey);
        }
        macro_key_token.cslid = macroid;
        if (CSL4.MODULE_MACROS[mkey]) {
          macro_key_token.juris = mkey;
          this.opt.update_mode = CSL4.POSITION;
        }
        CSL4.Node.group.build.call(macro_key_token, this, target, true);
        if (!this.cslXml.getNodeValue(macro_nodes)) {
          CSL4.error('CSL style error: undefined macro "' + mkey + '"');
        }
        var mytarget = CSL4.getMacroTarget.call(this, mkey);
        if (mytarget) {
          CSL4.buildMacro.call(this, mytarget, macro_nodes);
          CSL4.configureMacro.call(this, mytarget);
        }
        if (!this.build.extension) {
          var func = function(macro_name) {
            return function(state, Item, item) {
              var next = 0;
              while (next < state.macros[macro_name].length) {
                next = CSL4.tokenExec.call(state, state.macros[macro_name][next], Item, item);
              }
            };
          }(mkey);
          var text_node = new CSL4.Token("text", CSL4.SINGLETON);
          text_node.execs.push(func);
          target.push(text_node);
        }
        end_of_macro = new CSL4.Token("group", CSL4.END);
        end_of_macro.strings.sort_direction = sort_direction;
        if (hasDate) {
          func = function(state) {
            if (state.tmp.extension) {
              state.tmp["doing-macro-with-date"] = false;
            }
          };
          end_of_macro.execs.push(func);
        }
        if (macro_key_token.juris) {
          end_of_macro.juris = mkey;
        }
        CSL4.Node.group.build.call(end_of_macro, this, target, true);
        this.build.macro_stack.pop();
      };
      CSL4.getMacroTarget = function(mkey) {
        var mytarget = false;
        if (this.build.extension) {
          mytarget = this[this.build.root + this.build.extension].tokens;
        } else if (!this.macros[mkey]) {
          mytarget = [];
          this.macros[mkey] = mytarget;
        }
        return mytarget;
      };
      CSL4.buildMacro = function(mytarget, macro_nodes) {
        var builder = CSL4.makeBuilder(this, mytarget);
        var mynode;
        if (typeof macro_nodes.length === "undefined") {
          mynode = macro_nodes;
        } else {
          mynode = macro_nodes[0];
        }
        builder(mynode);
      };
      CSL4.configureMacro = function(mytarget) {
        if (!this.build.extension) {
          this.configureTokenList(mytarget);
        }
      };
      CSL4.XmlToToken = function(state, tokentype, explicitTarget, var_stack) {
        var name, txt, attrfuncs, attributes, decorations, token, key, target;
        name = state.cslXml.nodename(this);
        if (state.build.skip && state.build.skip !== name) {
          return;
        }
        if (!name) {
          txt = state.cslXml.content(this);
          if (txt) {
            state.build.text = txt;
          }
          return;
        }
        if (!CSL4.Node[state.cslXml.nodename(this)]) {
          CSL4.error('Undefined node name "' + name + '".');
        }
        attrfuncs = [];
        attributes = state.cslXml.attributes(this);
        decorations = CSL4.setDecorations.call(this, state, attributes);
        token = new CSL4.Token(name, tokentype);
        if (tokentype !== CSL4.END || name === "if" || name === "else-if" || name === "layout") {
          for (var key in attributes) {
            if (attributes.hasOwnProperty(key)) {
              if (tokentype === CSL4.END && key !== "@language" && key !== "@locale") {
                continue;
              }
              if (attributes.hasOwnProperty(key)) {
                if (CSL4.Attributes[key]) {
                  try {
                    CSL4.Attributes[key].call(token, state, "" + attributes[key]);
                  } catch (e) {
                    CSL4.error(key + " attribute: " + e);
                  }
                } else {
                  CSL4.debug('warning: undefined attribute "' + key + '" in style');
                }
              }
            }
          }
          token.decorations = decorations;
          if (CSL4.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
            var_stack.push(token.variables);
          }
        } else if (tokentype === CSL4.END && attributes["@variable"]) {
          token.hasVariable = true;
          if (CSL4.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
            token.variables = var_stack.pop();
          }
        }
        if (explicitTarget) {
          target = explicitTarget;
        } else {
          target = state[state.build.area].tokens;
        }
        CSL4.Node[name].build.call(token, state, target, true);
      };
      CSL4.DateParser = function() {
        var epochPairs = [
          ["\u660E\u6CBB", 1867],
          ["\u5927\u6B63", 1911],
          ["\u662D\u548C", 1925],
          ["\u5E73\u6210", 1988]
        ];
        var epochYearByName = {};
        for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
          var key = epochPairs[i][0];
          var val = epochPairs[i][1];
          epochYearByName[key] = val;
        }
        var epochMatchStrings = [];
        var epochMap = {};
        for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
          var pair = epochPairs[i];
          var val = pair[0];
          epochMatchStrings.push(val);
          epochMap[pair[0]] = pair[1];
        }
        var epochMatchString = epochMatchStrings.join("|");
        var epochSplitter = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)");
        var epochMatcher = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)", "g");
        var kanjiMonthDay = /(\u6708|\u5E74)/g;
        var kanjiYear = /\u65E5/g;
        var kanjiRange = /\u301c/g;
        var yearLast = "(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])";
        var yearFirst = "[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])";
        var numberVal = "[?0-9]{1,3}";
        var rangeSeparator = "[%%DATED%%]";
        var fuzzyChar = "[?~]";
        var chars = "[^-/~?0-9]+";
        var rexString = "(" + yearFirst + "|" + yearLast + "|" + numberVal + "|" + rangeSeparator + "|" + fuzzyChar + "|" + chars + ")";
        var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "-"));
        var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "/"));
        var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, "/").replace(/%%DATED%%/g, "-"));
        var monthString = "january february march april may june july august september october november december spring summer fall winter spring summer";
        this.monthStrings = monthString.split(" ");
        this.setOrderDayMonth = function() {
          this.monthGuess = 1;
          this.dayGuess = 0;
        };
        this.setOrderMonthDay = function() {
          this.monthGuess = 0;
          this.dayGuess = 1;
        };
        this.resetDateParserMonths = function() {
          this.monthSets = [];
          for (var i2 = 0, ilen2 = this.monthStrings.length; i2 < ilen2; i2++) {
            this.monthSets.push([this.monthStrings[i2]]);
          }
          this.monthAbbrevs = [];
          for (var i2 = 0, ilen2 = this.monthSets.length; i2 < ilen2; i2++) {
            this.monthAbbrevs.push([]);
            for (var j = 0, jlen = this.monthSets[i2].length; j < jlen; j++) {
              this.monthAbbrevs[i2].push(this.monthSets[i2][0].slice(0, 3));
            }
          }
          this.monthRexes = [];
          for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
            this.monthRexes.push(new RegExp("(?:" + this.monthAbbrevs[i2].join("|") + ")"));
          }
        };
        this.addDateParserMonths = function(lst) {
          if (typeof lst === "string") {
            lst = lst.split(/\s+/);
          }
          if (lst.length !== 12 && lst.length !== 16) {
            CSL4.debug("month [+season] list of " + lst.length + ", expected 12 or 16. Ignoring.");
            return;
          }
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            var abbrevLength = null;
            var skip = false;
            var insert = 3;
            var extendedSets = {};
            for (var j = 0, jlen = this.monthAbbrevs.length; j < jlen; j++) {
              extendedSets[j] = {};
              if (j === i2) {
                for (var k = 0, klen = this.monthAbbrevs[i2].length; k < klen; k++) {
                  if (this.monthAbbrevs[i2][k] === lst[i2].slice(0, this.monthAbbrevs[i2][k].length)) {
                    skip = true;
                    break;
                  }
                }
              } else {
                for (var k = 0, klen = this.monthAbbrevs[j].length; k < klen; k++) {
                  abbrevLength = this.monthAbbrevs[j][k].length;
                  if (this.monthAbbrevs[j][k] === lst[i2].slice(0, abbrevLength)) {
                    while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i2].slice(0, abbrevLength)) {
                      if (abbrevLength > lst[i2].length || abbrevLength > this.monthSets[j][k].length) {
                        CSL4.debug("unable to disambiguate month string in date parser: " + lst[i2]);
                        break;
                      } else {
                        abbrevLength += 1;
                      }
                    }
                    insert = abbrevLength;
                    extendedSets[j][k] = abbrevLength;
                  }
                }
              }
              for (var jKey in extendedSets) {
                for (var kKey in extendedSets[jKey]) {
                  abbrevLength = extendedSets[jKey][kKey];
                  jKey = parseInt(jKey, 10);
                  kKey = parseInt(kKey, 10);
                  this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);
                }
              }
            }
            if (!skip) {
              this.monthSets[i2].push(lst[i2]);
              this.monthAbbrevs[i2].push(lst[i2].slice(0, insert));
            }
          }
          this.monthRexes = [];
          this.monthRexStrs = [];
          for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
            this.monthRexes.push(new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")"));
            this.monthRexStrs.push("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
          }
          if (this.monthAbbrevs.length === 18) {
            for (var i2 = 12, ilen2 = 14; i2 < ilen2; i2++) {
              this.monthRexes[i2 + 4] = new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
              this.monthRexStrs[i2 + 4] = "^(?:" + this.monthAbbrevs[i2].join("|") + ")";
            }
          }
        };
        this.convertDateObjectToArray = function(thedate) {
          thedate["date-parts"] = [];
          thedate["date-parts"].push([]);
          var slicelen = 0;
          var part;
          for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2++) {
            part = ["year", "month", "day"][i2];
            if (!thedate[part]) {
              break;
            }
            slicelen += 1;
            thedate["date-parts"][0].push(thedate[part]);
            delete thedate[part];
          }
          thedate["date-parts"].push([]);
          for (var i2 = 0, ilen2 = slicelen; i2 < ilen2; i2++) {
            part = ["year_end", "month_end", "day_end"][i2];
            if (!thedate[part]) {
              break;
            }
            thedate["date-parts"][1].push(thedate[part]);
            delete thedate[part];
          }
          if (thedate["date-parts"][0].length !== thedate["date-parts"][1].length) {
            thedate["date-parts"].pop();
          }
          return thedate;
        };
        this.convertDateObjectToString = function(thedate) {
          var ret = [];
          for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
            if (thedate[CSL4.DATE_PARTS_ALL[i2]]) {
              ret.push(thedate[CSL4.DATE_PARTS_ALL[i2]]);
            } else {
              break;
            }
          }
          return ret.join("-");
        };
        this._parseNumericDate = function(ret, delim, suff, txt) {
          if (!suff) {
            suff = "";
          }
          var lst = txt.split(delim);
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            if (lst[i2].length === 4) {
              ret["year" + suff] = lst[i2].replace(/^0*/, "");
              if (!i2) {
                lst = lst.slice(1);
              } else {
                lst = lst.slice(0, i2);
              }
              break;
            }
          }
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            lst[i2] = parseInt(lst[i2], 10);
          }
          if (lst.length === 1 || lst.length === 2 && !lst[1]) {
            var month = lst[0];
            if (month) {
              ret["month" + suff] = "" + lst[0];
            }
          } else if (lst.length === 2) {
            if (lst[this.monthGuess] > 12) {
              var month = lst[this.dayGuess];
              var day = lst[this.monthGuess];
              if (month) {
                ret["month" + suff] = "" + month;
                if (day) {
                  ret["day" + suff] = "" + day;
                }
              }
            } else {
              var month = lst[this.monthGuess];
              var day = lst[this.dayGuess];
              if (month) {
                ret["month" + suff] = "" + month;
                if (day) {
                  ret["day" + suff] = "" + day;
                }
              }
            }
          }
        };
        this.parseDateToObject = function(txt) {
          var orig = txt;
          var slashPos = -1;
          var dashPos = -1;
          var yearIsNegative = false;
          var lst;
          if (txt) {
            txt = txt.replace(/^(.*[0-9])T[0-9].*/, "$1");
            if (txt.slice(0, 1) === "-") {
              yearIsNegative = true;
              txt = txt.slice(1);
            }
            if (txt.match(/^[0-9]{1,3}$/)) {
              while (txt.length < 4) {
                txt = "0" + txt;
              }
            }
            txt = "" + txt;
            txt = txt.replace(/\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/, "");
            var m = txt.match(kanjiMonthDay);
            if (m) {
              txt = txt.replace(/\s+/g, "");
              txt = txt.replace(kanjiYear, "");
              txt = txt.replace(kanjiMonthDay, "-");
              txt = txt.replace(kanjiRange, "/");
              txt = txt.replace(/\-\//g, "/");
              txt = txt.replace(/-$/g, "");
              var slst = txt.split(epochSplitter);
              lst = [];
              var mm = txt.match(epochMatcher);
              if (mm) {
                var mmx = [];
                for (var i2 = 0, ilen2 = mm.length; i2 < ilen2; i2++) {
                  mmx = mmx.concat(mm[i2].match(/([^0-9]+)([0-9]+)/).slice(1));
                }
                for (var i2 = 0, ilen2 = slst.length; i2 < ilen2; i2++) {
                  lst.push(slst[i2]);
                  if (i2 !== ilen2 - 1) {
                    var mmpos = i2 * 2;
                    lst.push(mmx[mmpos]);
                    lst.push(mmx[mmpos + 1]);
                  }
                }
              } else {
                lst = slst;
              }
              for (var i2 = 1, ilen2 = lst.length; i2 < ilen2; i2 += 3) {
                lst[i2 + 1] = epochMap[lst[i2]] + parseInt(lst[i2 + 1], 10);
                lst[i2] = "";
              }
              txt = lst.join("");
              txt = txt.replace(/\s*-\s*$/, "").replace(/\s*-\s*\//, "/");
              txt = txt.replace(/\.\s*$/, "");
              txt = txt.replace(/\.(?! )/, "");
              slashPos = txt.indexOf("/");
              dashPos = txt.indexOf("-");
            }
          }
          txt = txt.replace(/([A-Za-z])\./g, "$1");
          var number2 = "";
          var note = "";
          var thedate = {};
          var rangeDelim;
          var dateDelim;
          if (txt.slice(0, 1) === '"' && txt.slice(-1) === '"') {
            thedate.literal = txt.slice(1, -1);
            return thedate;
          }
          if (slashPos > -1 && dashPos > -1) {
            var slashCount = txt.split("/");
            if (slashCount.length > 3) {
              rangeDelim = "-";
              txt = txt.replace(/\_/g, "-");
              dateDelim = "/";
              lst = txt.split(rexSlashDash);
            } else {
              rangeDelim = "/";
              txt = txt.replace(/\_/g, "/");
              dateDelim = "-";
              lst = txt.split(rexDashSlash);
            }
          } else {
            txt = txt.replace(/\//g, "-");
            txt = txt.replace(/\_/g, "-");
            rangeDelim = "-";
            dateDelim = "-";
            lst = txt.split(rexDash);
          }
          var ret = [];
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            var m = lst[i2].match(/^\s*([\-\/]|[^\-\/\~\?0-9]+|[\-~?0-9]+)\s*$/);
            if (m) {
              ret.push(m[1]);
            }
          }
          var delimPos = ret.indexOf(rangeDelim);
          var delims = [];
          var isRange = false;
          if (delimPos > -1) {
            delims.push([0, delimPos]);
            delims.push([delimPos + 1, ret.length]);
            isRange = true;
          } else {
            delims.push([0, ret.length]);
          }
          var suff = "";
          for (var i2 = 0, ilen2 = delims.length; i2 < ilen2; i2++) {
            var delim = delims[i2];
            var date2 = ret.slice(delim[0], delim[1]);
            outer:
              for (var j = 0, jlen = date2.length; j < jlen; j++) {
                var element = date2[j];
                if (element.indexOf(dateDelim) > -1) {
                  this._parseNumericDate(thedate, dateDelim, suff, element);
                  continue;
                }
                if (element.match(/[0-9]{4}/)) {
                  thedate["year" + suff] = element.replace(/^0*/, "");
                  continue;
                }
                if (element === "~" || element === "?" || element === "c" || element.match(/^cir/)) {
                  thedate.circa = true;
                }
                for (var k = 0, klen = this.monthRexes.length; k < klen; k++) {
                  if (element.toLocaleLowerCase().match(this.monthRexes[k])) {
                    thedate["month" + suff] = "" + (parseInt(k, 10) + 1);
                    continue outer;
                  }
                }
                if (element.match(/^[0-9]+$/)) {
                  number2 = element;
                }
                if (element.toLocaleLowerCase().match(/^bc/) && number2) {
                  thedate["year" + suff] = "" + number2 * -1;
                  number2 = "";
                  continue;
                }
                if (element.toLocaleLowerCase().match(/^ad/) && number2) {
                  thedate["year" + suff] = "" + number2;
                  number2 = "";
                  continue;
                }
                if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate["season" + suff]) {
                  note = element;
                  continue;
                }
              }
            if (number2) {
              thedate["day" + suff] = number2;
              number2 = "";
            }
            if (note && !thedate["season" + suff]) {
              thedate["season" + suff] = note.trim();
              note = "";
            }
            suff = "_end";
          }
          if (isRange) {
            for (var j = 0, jlen = CSL4.DATE_PARTS_ALL.length; j < jlen; j++) {
              var item = CSL4.DATE_PARTS_ALL[j];
              if (thedate[item] && !thedate[item + "_end"]) {
                thedate[item + "_end"] = thedate[item];
              } else if (!thedate[item] && thedate[item + "_end"]) {
                thedate[item] = thedate[item + "_end"];
              }
            }
          }
          if (!thedate.year || thedate.year && thedate.day && !thedate.month) {
            thedate = { "literal": orig };
          }
          var parts = ["year", "month", "day", "year_end", "month_end", "day_end"];
          for (var i2 = 0, ilen2 = parts.length; i2 < ilen2; i2++) {
            var part = parts[i2];
            if (typeof thedate[part] === "string" && thedate[part].match(/^[0-9]+$/)) {
              thedate[part] = parseInt(thedate[part], 10);
            }
          }
          if (yearIsNegative && Object.keys(thedate).indexOf("year") > -1) {
            thedate.year = thedate.year * -1;
          }
          return thedate;
        };
        this.parseDateToArray = function(txt) {
          return this.convertDateObjectToArray(this.parseDateToObject(txt));
        };
        this.parseDateToString = function(txt) {
          return this.convertDateObjectToString(this.parseDateToObject(txt));
        };
        this.parse = function(txt) {
          return this.parseDateToObject(txt);
        };
        this.setOrderMonthDay();
        this.resetDateParserMonths();
      };
      CSL4.DateParser = new CSL4.DateParser();
      CSL4.Engine = function(sys, style, lang, forceLang) {
        var attrs, langspec;
        this.processor_version = CSL4.PROCESSOR_VERSION;
        this.csl_version = "1.0";
        this.sys = sys;
        if (typeof Object.assign != "function") {
          Object.defineProperty(Object, "assign", {
            value: function assign(target) {
              "use strict";
              if (target == null) {
                throw new TypeError("Cannot convert undefined or null to object");
              }
              var to2 = Object(target);
              for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index];
                if (nextSource != null) {
                  for (var nextKey in nextSource) {
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                      to2[nextKey] = nextSource[nextKey];
                    }
                  }
                }
              }
              return to2;
            },
            writable: true,
            configurable: true
          });
        }
        if (sys.variableWrapper) {
          CSL4.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp("^([" + [" "].concat(CSL4.SWAPPING_PUNCTUATION).join("") + "]*)(.*)");
        }
        if (CSL4.retrieveStyleModule) {
          this.sys.retrieveStyleModule = CSL4.retrieveStyleModule;
        }
        if (CSL4.getAbbreviation) {
          this.sys.getAbbreviation = CSL4.getAbbreviation;
        }
        if (this.sys.stringCompare) {
          CSL4.stringCompare = this.sys.stringCompare;
        }
        this.sys.AbbreviationSegments = CSL4.AbbreviationSegments;
        this.transform = new CSL4.Transform(this);
        this.setParseNames = function(val) {
          this.opt["parse-names"] = val;
        };
        this.opt = new CSL4.Engine.Opt();
        this.tmp = new CSL4.Engine.Tmp();
        this.build = new CSL4.Engine.Build();
        this.fun = new CSL4.Engine.Fun(this);
        this.configure = new CSL4.Engine.Configure();
        this.citation_sort = new CSL4.Engine.CitationSort();
        this.bibliography_sort = new CSL4.Engine.BibliographySort();
        this.citation = new CSL4.Engine.Citation(this);
        this.bibliography = new CSL4.Engine.Bibliography();
        this.intext = new CSL4.Engine.InText();
        this.output = new CSL4.Output.Queue(this);
        this.dateput = new CSL4.Output.Queue(this);
        this.cslXml = CSL4.setupXml(style);
        for (var i in CSL4.SYS_OPTIONS) {
          var option = CSL4.SYS_OPTIONS[i];
          if (typeof this.sys[option] === "boolean") {
            this.opt.development_extensions[option] = this.sys[option];
          }
        }
        if (this.opt.development_extensions.uppercase_subtitles || this.opt.development_extensions.implicit_short_title) {
          this.opt.development_extensions.main_title_from_short_title = true;
        }
        if (this.opt.development_extensions.csl_reverse_lookup_support) {
          this.build.cslNodeId = 0;
          this.setCslNodeIds = function(myxml, nodename) {
            var children = this.cslXml.children(myxml);
            this.cslXml.setAttribute(myxml, "cslid", this.build.cslNodeId);
            this.opt.nodenames.push(nodename);
            this.build.cslNodeId += 1;
            for (var i2 = 0, ilen = this.cslXml.numberofnodes(children); i2 < ilen; i2 += 1) {
              nodename = this.cslXml.nodename(children[i2]);
              if (nodename) {
                this.setCslNodeIds(children[i2], nodename);
              }
            }
          };
          this.setCslNodeIds(this.cslXml.dataObj, "style");
        }
        this.cslXml.addMissingNameNodes(this.cslXml.dataObj);
        this.cslXml.addInstitutionNodes(this.cslXml.dataObj);
        this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);
        this.cslXml.flagDateMacros(this.cslXml.dataObj);
        attrs = this.cslXml.attributes(this.cslXml.dataObj);
        if (typeof attrs["@sort-separator"] === "undefined") {
          this.cslXml.setAttribute(this.cslXml.dataObj, "sort-separator", ", ");
        }
        this.opt["initialize-with-hyphen"] = true;
        this.setStyleAttributes();
        this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, "class");
        this.opt["class"] = this.opt.xclass;
        this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);
        this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);
        if (this.opt.version.slice(0, 4) === "1.1m") {
          this.opt.development_extensions.consolidate_legal_items = true;
          this.opt.development_extensions.consolidate_container_items = true;
          this.opt.development_extensions.main_title_from_short_title = true;
          this.opt.development_extensions.expect_and_symbol_form = true;
          this.opt.development_extensions.require_explicit_legal_case_title_short = true;
          this.opt.development_extensions.force_jurisdiction = true;
          this.opt.development_extensions.force_title_abbrev_fallback = true;
        }
        if (lang) {
          lang = lang.replace("_", "-");
          lang = CSL4.normalizeLocaleStr(lang);
        }
        if (this.opt["default-locale"][0]) {
          this.opt["default-locale"][0] = this.opt["default-locale"][0].replace("_", "-");
          this.opt["default-locale"][0] = CSL4.normalizeLocaleStr(this.opt["default-locale"][0]);
        }
        if (lang && forceLang) {
          this.opt["default-locale"] = [lang];
        }
        if (lang && !forceLang && this.opt["default-locale"][0]) {
          lang = this.opt["default-locale"][0];
        }
        if (this.opt["default-locale"].length === 0) {
          if (!lang) {
            lang = "en-US";
          }
          this.opt["default-locale"].push("en-US");
        }
        if (!lang) {
          lang = this.opt["default-locale"][0];
        }
        langspec = CSL4.localeResolve(lang);
        this.opt.lang = langspec.best;
        this.opt["default-locale"][0] = langspec.best;
        this.locale = {};
        if (!this.opt["default-locale-sort"]) {
          this.opt["default-locale-sort"] = this.opt["default-locale"][0];
        }
        if ("dale|".localeCompare("daleb", this.opt["default-locale-sort"]) > -1) {
          this.opt.sort_sep = "@";
        } else {
          this.opt.sort_sep = "|";
        }
        this.localeConfigure(langspec);
        function makeRegExp2(lst) {
          var lst = lst.slice();
          var ret = new RegExp("(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
          return ret;
        }
        this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp2(this.locale[this.opt.lang].opts["skip-words"]);
        this.output.adjust = new CSL4.Output.Queue.adjust(this.getOpt("punctuation-in-quote"));
        this.registry = new CSL4.Registry(this);
        this.macros = {};
        this.build.area = "citation";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        this.build.area = "bibliography";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        this.build.area = "intext";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        if (this.opt.parallel.enable) {
          this.parallel = new CSL4.Parallel(this);
        }
        this.juris = {};
        this.configureTokenLists();
        this.disambiguate = new CSL4.Disambiguation(this);
        this.splice_delimiter = false;
        this.fun.dateparser = CSL4.DateParser;
        this.fun.flipflopper = new CSL4.Util.FlipFlopper(this);
        this.setCloseQuotesArray();
        this.fun.ordinalizer.init(this);
        this.fun.long_ordinalizer.init(this);
        this.fun.page_mangler = CSL4.Util.PageRangeMangler.getFunction(this, "page");
        this.fun.year_mangler = CSL4.Util.PageRangeMangler.getFunction(this, "year");
        this.setOutputFormat("html");
      };
      CSL4.Engine.prototype.setCloseQuotesArray = function() {
        var ret;
        ret = [];
        ret.push(this.getTerm("close-quote"));
        ret.push(this.getTerm("close-inner-quote"));
        ret.push('"');
        ret.push("'");
        this.opt.close_quotes_array = ret;
      };
      CSL4.makeBuilder = function(me, target) {
        var var_stack = [];
        var node_stack = [];
        function runStart(node) {
          node_stack.push(node);
          CSL4.XmlToToken.call(node, me, CSL4.START, target, var_stack);
        }
        function runEnd() {
          var node = node_stack.pop();
          CSL4.XmlToToken.call(node, me, CSL4.END, target, var_stack);
        }
        function runSingle(node) {
          CSL4.XmlToToken.call(node, me, CSL4.SINGLETON, target, var_stack);
        }
        function buildStyle(nodes, parent, node_stack2) {
          if (!node_stack2) {
            node_stack2 = [];
          }
          if (!nodes) {
            nodes = [];
          }
          if (typeof nodes.length === "undefined") {
            nodes = [nodes];
          }
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (me.cslXml.nodename(node) === null) {
              continue;
            }
            if (parent && me.cslXml.nodename(node) === "date") {
              CSL4.Util.fixDateNode.call(me, parent, i, node);
              node = me.cslXml.children(parent)[i];
            }
            if (me.cslXml.numberofnodes(me.cslXml.children(node))) {
              runStart(node);
              buildStyle(me.cslXml.children(node), node, node_stack2);
              runEnd();
            } else {
              runSingle(node);
            }
          }
        }
        return buildStyle;
      };
      CSL4.Engine.prototype.buildTokenLists = function(area_nodes, target) {
        if (!this.cslXml.getNodeValue(area_nodes)) {
          return;
        }
        var builder = CSL4.makeBuilder(this, target);
        var mynode;
        if (typeof area_nodes.length === "undefined") {
          mynode = area_nodes;
        } else {
          mynode = area_nodes[0];
        }
        builder(mynode);
      };
      CSL4.Engine.prototype.setStyleAttributes = function() {
        var dummy, attributes, attrname;
        var dummy = {};
        dummy.name = this.cslXml.nodename(this.cslXml.dataObj);
        attributes = this.cslXml.attributes(this.cslXml.dataObj);
        for (attrname in attributes) {
          if (attributes.hasOwnProperty(attrname)) {
            CSL4.Attributes[attrname].call(dummy, this, attributes[attrname]);
          }
        }
      };
      CSL4.Engine.prototype.getTerm = function(term, form, plural, gender, mode, forceDefaultLocale) {
        if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {
          CSL4.debug("Warning: term key is in uppercase form: " + term);
          term = term.toLowerCase();
        }
        var lang;
        if (forceDefaultLocale) {
          lang = this.opt["default-locale"][0];
        } else {
          lang = this.opt.lang;
        }
        var ret = CSL4.Engine.getField(CSL4.LOOSE, this.locale[lang].terms, term, form, plural, gender);
        if (!ret && term === "range-delimiter") {
          ret = "\u2013";
        }
        if (typeof ret === "undefined") {
          if (mode === CSL4.STRICT) {
            CSL4.error('Error in getTerm: term "' + term + '" does not exist.');
          } else if (mode === CSL4.TOLERANT) {
            ret = "";
          }
        }
        if (ret) {
          this.tmp.cite_renders_content = true;
        }
        return ret;
      };
      CSL4.Engine.prototype.getDate = function(form, forceDefaultLocale) {
        var lang;
        if (forceDefaultLocale) {
          lang = this.opt["default-locale"];
        } else {
          lang = this.opt.lang;
        }
        if (this.locale[lang].dates[form]) {
          return this.locale[lang].dates[form];
        } else {
          return false;
        }
      };
      CSL4.Engine.prototype.getOpt = function(arg) {
        if (typeof this.locale[this.opt.lang].opts[arg] !== "undefined") {
          return this.locale[this.opt.lang].opts[arg];
        } else {
          return false;
        }
      };
      CSL4.Engine.prototype.getVariable = function(Item, varname, form, plural) {
        return CSL4.Engine.getField(CSL4.LOOSE, Item, varname, form, plural);
      };
      CSL4.Engine.prototype.getDateNum = function(ItemField, partname) {
        if (typeof ItemField === "undefined") {
          return 0;
        } else {
          return ItemField[partname];
        }
      };
      CSL4.Engine.getField = function(mode, hash, term, form, plural, gender) {
        var ret, forms, f, pos, len, hashterm;
        ret = "";
        if (typeof hash[term] === "undefined") {
          if (mode === CSL4.STRICT) {
            CSL4.error('Error in getField: term "' + term + '" does not exist.');
          } else {
            return void 0;
          }
        }
        if (gender && hash[term][gender]) {
          hashterm = hash[term][gender];
        } else {
          hashterm = hash[term];
        }
        forms = [];
        if (form === "symbol") {
          forms = ["symbol", "short"];
        } else if (form === "verb-short") {
          forms = ["verb-short", "verb"];
        } else if (form !== "long") {
          forms = [form];
        }
        forms = forms.concat(["long"]);
        len = forms.length;
        for (pos = 0; pos < len; pos += 1) {
          f = forms[pos];
          if (typeof hashterm === "string" || typeof hashterm === "number") {
            ret = hashterm;
          } else if (typeof hashterm[f] !== "undefined") {
            if (typeof hashterm[f] === "string" || typeof hashterm[f] === "number") {
              ret = hashterm[f];
            } else {
              if (typeof plural === "number") {
                ret = hashterm[f][plural];
              } else {
                ret = hashterm[f][0];
              }
            }
            break;
          }
        }
        return ret;
      };
      CSL4.Engine.prototype.configureTokenLists = function() {
        var area, pos, len;
        len = CSL4.AREAS.length;
        for (pos = 0; pos < len; pos += 1) {
          area = CSL4.AREAS[pos];
          var tokens = this[area].tokens;
          this.configureTokenList(tokens);
        }
        this.version = CSL4.version;
        return this.state;
      };
      CSL4.Engine.prototype.configureTokenList = function(tokens) {
        var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;
        dateparts_master = ["year", "month", "day"];
        llen = tokens.length - 1;
        for (ppos = llen; ppos > -1; ppos += -1) {
          token = tokens[ppos];
          if (token.name === "date" && CSL4.END === token.tokentype) {
            dateparts = [];
          }
          if (token.name === "date-part" && token.strings.name) {
            lllen = dateparts_master.length;
            for (pppos = 0; pppos < lllen; pppos += 1) {
              part = dateparts_master[pppos];
              if (part === token.strings.name) {
                dateparts.push(token.strings.name);
              }
            }
          }
          if (token.name === "date" && CSL4.START === token.tokentype) {
            dateparts.reverse();
            token.dateparts = dateparts;
          }
          token.next = ppos + 1;
          if (token.name && CSL4.Node[token.name].configure) {
            CSL4.Node[token.name].configure.call(token, this, ppos);
          }
        }
      };
      CSL4.Engine.prototype.refetchItems = function(ids) {
        var ret = [];
        for (var i = 0, ilen = ids.length; i < ilen; i += 1) {
          ret.push(this.refetchItem("" + ids[i]));
        }
        return ret;
      };
      CSL4.ITERATION = 0;
      CSL4.Engine.prototype.retrieveItem = function(id2) {
        var Item, m, i;
        if (!this.tmp.loadedItemIDs[id2]) {
          this.tmp.loadedItemIDs[id2] = true;
        } else {
          return this.registry.refhash[id2];
        }
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase && typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase === "boolean") {
          for (var i = 0, ilen = this.opt["default-locale"].length; i < ilen; i += 1) {
            this.opt["default-locale"][i] = this.opt["default-locale"][i].toLowerCase();
          }
          for (var i = 0, ilen = this.opt["locale-translit"].length; i < ilen; i += 1) {
            this.opt["locale-translit"][i] = this.opt["locale-translit"][i].toLowerCase();
          }
          for (var i = 0, ilen = this.opt["locale-translat"].length; i < ilen; i += 1) {
            this.opt["locale-translat"][i] = this.opt["locale-translat"][i].toLowerCase();
          }
          this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;
        }
        CSL4.ITERATION += 1;
        Item = JSON.parse(JSON.stringify(this.sys.retrieveItem("" + id2)));
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          if (Item.multi) {
            if (Item.multi._keys) {
              for (var field in Item.multi._keys) {
                for (var key in Item.multi._keys[field]) {
                  if (key !== key.toLowerCase()) {
                    Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];
                    delete Item.multi._keys[field][key];
                  }
                }
              }
            }
            if (Item.multi.main) {
              for (var field in Item.multi.main) {
                Item.multi.main[field] = Item.multi.main[field].toLowerCase();
              }
            }
          }
          for (var i = 0, ilen = CSL4.NAME_VARIABLES.length; i > ilen; i += 1) {
            var ctype = CSL4.NAME_VARIABLES[i];
            if (Item[ctype] && Item[ctype].multi) {
              for (var j = 0, jlen = Item[ctype].length; j < jlen; j += 1) {
                var creator = Item[ctype][j];
                if (creator.multi) {
                  if (creator.multi._key) {
                    for (var key in creator.multi._key) {
                      if (key !== key.toLowerCase()) {
                        creator.multi._key[key.toLowerCase()] = creator.multi._key[key];
                        delete creator.multi._key[key];
                      }
                    }
                  }
                  if (creator.multi.main) {
                    creator.multi.main = creator.multi.main.toLowerCase();
                  }
                }
              }
            }
          }
        }
        if (Item.language && Item.language.match(/[><]/)) {
          var m = Item.language.match(/(.*?)([<>])(.*)/);
          if (m[2] === "<") {
            Item["language-name"] = m[1];
            Item["language-name-original"] = m[3];
          } else {
            Item["language-name"] = m[3];
            Item["language-name-original"] = m[1];
          }
          if (this.opt.multi_layout) {
            if (Item["language-name-original"]) {
              Item.language = Item["language-name-original"];
            }
          } else {
            if (Item["language-name"]) {
              Item.language = Item["language-name"];
            }
          }
        }
        if (Item.page) {
          Item["page-first"] = Item.page;
          var num = "" + Item.page;
          var m = num.split(/\s*(?:&|, |-|\u2013)\s*/);
          if (m[0].slice(-1) !== "\\") {
            Item["page-first"] = m[0];
          }
        }
        if (this.opt.development_extensions.field_hack && Item.note) {
          CSL4.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);
        }
        for (var key in Item) {
          if (CSL4.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
            var dateobj = Item[key];
            if (dateobj) {
              if (this.opt.development_extensions.raw_date_parsing) {
                if (dateobj.raw && (!dateobj["date-parts"] || dateobj["date-parts"].length === 0)) {
                  dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);
                }
              }
              Item[key] = this.dateParseArray(dateobj);
            }
          }
        }
        if (this.opt.development_extensions.consolidate_legal_items) {
          if (Item.type && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "title", "jurisdiction", "genre", "volume", "container-title"];
            var legislation_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname]) {
                legislation_id.push(Item[varname]);
              }
            }
            elements = ["original-date", "issued"];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname] && Item[varname].year) {
                var value = Item[varname].year;
                legislation_id.push(value);
                break;
              }
            }
            Item.legislation_id = legislation_id.join("::");
          }
        }
        if (this.bibliography.opt.track_container_items) {
          if (this.bibliography.opt.track_container_items.indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "container-title", "publisher", "edition"];
            var container_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname]) {
                container_id.push(Item[varname]);
              }
            }
            Item.container_id = container_id.join("::");
          }
        }
        if (this.opt.development_extensions.force_jurisdiction) {
          if (typeof Item.authority === "string") {
            Item.authority = [
              {
                literal: Item.authority,
                multi: {
                  _key: {}
                }
              }
            ];
            if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {
              Item.authority[0].multi._key = {};
              for (var key in Item.multi._keys.authority) {
                Item.authority[0].multi._key[key] = {
                  literal: Item.multi._keys.authority[key]
                };
              }
            }
          }
        }
        if (!Item["title-short"]) {
          Item["title-short"] = Item.shortTitle;
        }
        if (this.opt.development_extensions.main_title_from_short_title) {
          var narrowSpaceLocale = this.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr";
          CSL4.extractTitleAndSubtitle.call(this, Item, narrowSpaceLocale);
        }
        var isLegalType = ["bill", "legal_case", "legislation", "gazette", "regulation"].indexOf(Item.type) > -1;
        if (this.opt.development_extensions.force_jurisdiction && isLegalType) {
          if (!Item.jurisdiction) {
            Item.jurisdiction = "us";
          }
        }
        var normalizedKey;
        if (!isLegalType && Item.title && this.sys.getAbbreviation) {
          var noHints = false;
          if (!Item.jurisdiction) {
            noHints = true;
          }
          if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey("title", Item.title);
          } else {
            normalizedKey = Item.title;
          }
          var jurisdiction2 = this.transform.loadAbbreviation(Item.jurisdiction, "title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction2].title) {
            if (this.transform.abbrevs[jurisdiction2].title[normalizedKey]) {
              Item["title-short"] = this.transform.abbrevs[jurisdiction2].title[normalizedKey];
            }
          }
        }
        if (!Item["container-title-short"]) {
          Item["container-title-short"] = Item.journalAbbreviation;
        }
        if (Item["container-title"] && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey(Item["container-title"]);
          } else {
            normalizedKey = Item["container-title"];
          }
          var jurisdiction2 = this.transform.loadAbbreviation(Item.jurisdiction, "container-title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction2]["container-title"]) {
            if (this.transform.abbrevs[jurisdiction2]["container-title"][normalizedKey]) {
              Item["container-title-short"] = this.transform.abbrevs[jurisdiction2]["container-title"][normalizedKey];
            }
          }
        }
        if (Item.jurisdiction) {
          Item.country = Item.jurisdiction.split(":")[0];
        }
        if (this.registry.refhash[id2]) {
          if (JSON.stringify(this.registry.refhash[id2]) != JSON.stringify(Item)) {
            for (var key in this.registry.refhash[id2]) {
              delete this.registry.refhash[id2][key];
            }
            this.tmp.taintedItemIDs[Item.id] = true;
            Object.assign(this.registry.refhash[id2], Item);
          }
        } else {
          this.registry.refhash[id2] = Item;
        }
        return this.registry.refhash[id2];
      };
      CSL4.Engine.prototype.refetchItem = function(id2) {
        return this.registry.refhash[id2];
      };
      CSL4.Engine.prototype.setOpt = function(token, name, value) {
        if (token.name === "style" || token.name === "cslstyle") {
          this.opt.inheritedAttributes[name] = value;
          this.citation.opt.inheritedAttributes[name] = value;
          this.bibliography.opt.inheritedAttributes[name] = value;
        } else if (["citation", "bibliography"].indexOf(token.name) > -1) {
          this[token.name].opt.inheritedAttributes[name] = value;
        } else {
          token.strings[name] = value;
        }
      };
      CSL4.Engine.prototype.inheritOpt = function(token, attrname, parentname, defaultValue) {
        if (typeof token.strings[attrname] !== "undefined") {
          return token.strings[attrname];
        } else {
          var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];
          if (typeof parentValue !== "undefined") {
            return parentValue;
          } else {
            return defaultValue;
          }
        }
      };
      CSL4.Engine.prototype.remapSectionVariable = function(inputList) {
        for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
          var Item = inputList[i][0];
          var item = inputList[i][1];
          if (["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
            if (item.locator) {
              item.locator = item.locator.trim();
              var m = item.locator.match(CSL4.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
              if (!m) {
                if (item.label) {
                  item.locator = CSL4.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + " " + item.locator;
                } else {
                  item.locator = "p. " + item.locator;
                }
              }
            }
            var sectionMasterLabel = null;
            if (Item.section) {
              Item.section = Item.section.trim();
              var m = Item.section.match(CSL4.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
              if (!m) {
                Item.section = "sec. " + Item.section;
                sectionMasterLabel = "sec.";
              } else {
                sectionMasterLabel = m[0].trim();
              }
            }
            if (Item.section) {
              if (!item.locator) {
                item.locator = Item.section;
              } else {
                var m = item.locator.match(/^([^ ]*)\s*(.*)/);
                var space = " ";
                if (m) {
                  if (m[1] === "p." && sectionMasterLabel !== "p.") {
                    item.locator = m[2];
                  }
                  if (["[", "(", ".", ",", ";", ":", "?"].indexOf(item.locator.slice(0, 1)) > -1) {
                    space = "";
                  }
                } else {
                  space = "";
                }
                item.locator = Item.section + space + item.locator;
              }
            }
            item.label = "";
          }
        }
      };
      CSL4.Engine.prototype.setNumberLabels = function(Item) {
        if (Item.number && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1 && this.opt.development_extensions.consolidate_legal_items && !this.tmp.shadow_numbers["number"]) {
          this.tmp.shadow_numbers["number"] = {};
          this.tmp.shadow_numbers["number"].values = [];
          this.tmp.shadow_numbers["number"].plural = 0;
          this.tmp.shadow_numbers["number"].numeric = false;
          this.tmp.shadow_numbers["number"].label = false;
          var value = "" + Item.number;
          value = value.split("\\").join("");
          var firstword = value.split(/\s+/)[0];
          var firstlabel = CSL4.STATUTE_SUBDIV_STRINGS[firstword];
          if (firstlabel) {
            var splt = value.split(CSL4.STATUTE_SUBDIV_PLAIN_REGEX);
            if (splt.length > 1) {
              var lst = [];
              for (var j = 1, jlen = splt.length; j < jlen; j += 1) {
                lst.push(splt[j].replace(/\s*$/, "").replace(/^\s*/, ""));
              }
              value = lst.join(" ");
            } else {
              value = splt[0];
            }
            this.tmp.shadow_numbers["number"].label = firstlabel;
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = false;
          } else {
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = true;
          }
        }
      };
      CSL4.substituteOne = function(template) {
        return function(state, list) {
          if (!list) {
            return "";
          } else {
            return template.replace("%%STRING%%", list);
          }
        };
      };
      CSL4.substituteTwo = function(template) {
        return function(param) {
          var template2 = template.replace("%%PARAM%%", param);
          return function(state, list) {
            if (!list) {
              return "";
            } else {
              return template2.replace("%%STRING%%", list);
            }
          };
        };
      };
      CSL4.Mode = function(mode) {
        var decorations, params, param, func, val, args;
        decorations = {};
        params = CSL4.Output.Formats[mode];
        for (param in params) {
          if (true) {
            if (param.slice(0, 1) !== "@") {
              decorations[param] = params[param];
              continue;
            }
            func = false;
            val = params[param];
            args = param.split("/");
            if (typeof val === "string" && val.indexOf("%%STRING%%") > -1) {
              if (val.indexOf("%%PARAM%%") > -1) {
                func = CSL4.substituteTwo(val);
              } else {
                func = CSL4.substituteOne(val);
              }
            } else if (typeof val === "boolean" && !val) {
              func = CSL4.Output.Formatters.passthrough;
            } else if (typeof val === "function") {
              func = val;
            } else {
              CSL4.error("Bad " + mode + " config entry for " + param + ": " + val);
            }
            if (args.length === 1) {
              decorations[args[0]] = func;
            } else if (args.length === 2) {
              if (!decorations[args[0]]) {
                decorations[args[0]] = {};
              }
              decorations[args[0]][args[1]] = func;
            }
          }
        }
        return decorations;
      };
      CSL4.setDecorations = function(state, attributes) {
        var ret, key, pos;
        ret = [];
        for (pos in CSL4.FORMAT_KEY_SEQUENCE) {
          if (true) {
            var key = CSL4.FORMAT_KEY_SEQUENCE[pos];
            if (attributes[key]) {
              ret.push([key, attributes[key]]);
              delete attributes[key];
            }
          }
        }
        return ret;
      };
      CSL4.Doppeler = function(rexStr, stringMangler) {
        var matchRex = new RegExp("(" + rexStr + ")", "g");
        var splitRex = new RegExp(rexStr, "g");
        this.split = function(str) {
          if (stringMangler) {
            str = stringMangler(str);
          }
          var match = str.match(matchRex);
          if (!match) {
            return {
              tags: [],
              strings: [str]
            };
          }
          var split = str.split(splitRex);
          for (var i = match.length - 1; i > -1; i--) {
            if (typeof match[i] === "number") {
              match[i] = "";
            }
            var tag = match[i];
            if (tag === "'" && split[i + 1].length > 0) {
              split[i + 1] = match[i] + split[i + 1];
              match[i] = "";
            }
          }
          return {
            tags: match,
            strings: split,
            origStrings: split.slice()
          };
        };
        this.join = function(obj) {
          var lst = obj.strings.slice(-1);
          for (var i = obj.tags.length - 1; i > -1; i--) {
            lst.push(obj.tags[i]);
            lst.push(obj.strings[i]);
          }
          lst.reverse();
          return lst.join("");
        };
      };
      CSL4.Engine.prototype.normalDecorIsOrphan = function(blob, params) {
        if (params[1] === "normal") {
          var use_param = false;
          var all_the_decor;
          if (this.tmp.area === "citation") {
            all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);
          } else {
            all_the_decor = blob.alldecor;
          }
          for (var k = all_the_decor.length - 1; k > -1; k += -1) {
            for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {
              if (all_the_decor[k][n][0] === params[0]) {
                if (all_the_decor[k][n][1] !== "normal") {
                  use_param = true;
                }
              }
            }
          }
          if (!use_param) {
            return true;
          }
        }
        return false;
      };
      CSL4.Engine.prototype.getCitationLabel = function(Item) {
        var label2 = "";
        var params = this.getTrigraphParams();
        var config = params[0];
        var myname = this.getTerm("reference", "short", 0);
        if (typeof myname === "undefined") {
          myname = "reference";
        }
        myname = myname.replace(".", "");
        myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);
        for (var i = 0, ilen = CSL4.NAME_VARIABLES.length; i < ilen; i += 1) {
          var n = CSL4.NAME_VARIABLES[i];
          if (Item[n]) {
            var names2 = Item[n];
            if (names2.length > params.length) {
              config = params[params.length - 1];
            } else {
              config = params[names2.length - 1];
            }
            for (var j = 0, jlen = names2.length; j < jlen; j += 1) {
              if (j === config.authors.length) {
                break;
              }
              var res = this.nameOutput.getName(names2[j], "locale-translit", true);
              var name = res.name;
              if (name && name.family) {
                myname = name.family;
                myname = myname.replace(/^([ \'\u2019a-z]+\s+)/, "");
              } else if (name && name.literal) {
                myname = name.literal;
              }
              var m = myname.toLowerCase().match(/^(a\s+|the\s+|an\s+)/);
              if (m) {
                myname = myname.slice(m[1].length);
              }
              myname = myname.replace(CSL4.ROMANESQUE_NOT_REGEXP, "");
              if (!myname) {
                break;
              }
              myname = myname.slice(0, config.authors[j]);
              if (myname.length > 1) {
                myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();
              } else if (myname.length === 1) {
                myname = myname.toUpperCase();
              }
              label2 += myname;
            }
            break;
          }
        }
        if (!label2) {
          if (Item.title) {
            var skipWords = this.locale[this.opt.lang].opts["skip-words"];
            var lst = Item.title.split(/\s+/);
            for (var i = lst.length - 1; i > -1; i--) {
              if (skipWords.indexOf(lst[i]) > -1) {
                lst = lst.slice(0, i).concat(lst.slice(i + 1));
              }
            }
            var str = lst.join("");
            str = str.slice(0, params[0].authors[0]);
            if (str.length > 1) {
              str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();
            } else if (str.length === 1) {
              str = str.toUpperCase();
            }
            label2 = str;
          }
        }
        var year2 = "0000";
        if (Item.issued) {
          if (Item.issued.year) {
            year2 = "" + Item.issued.year;
          }
        }
        year2 = year2.slice(config.year * -1);
        label2 = label2 + year2;
        return label2;
      };
      CSL4.Engine.prototype.getTrigraphParams = function() {
        var params = [];
        var ilst = this.opt.trigraph.split(":");
        if (!this.opt.trigraph || this.opt.trigraph.slice(0, 1) !== "A") {
          CSL4.error("Bad trigraph definition: " + this.opt.trigraph);
        }
        for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {
          var str = ilst[i];
          var config = { authors: [], year: 0 };
          for (var j = 0, jlen = str.length; j < jlen; j += 1) {
            switch (str.slice(j, j + 1)) {
              case "A":
                config.authors.push(1);
                break;
              case "a":
                config.authors[config.authors.length - 1] += 1;
                break;
              case "0":
                config.year += 1;
                break;
              default:
                CSL4.error("Invalid character in trigraph definition: " + this.opt.trigraph);
            }
          }
          params.push(config);
        }
        return params;
      };
      CSL4.Engine.prototype.setOutputFormat = function(mode) {
        this.opt.mode = mode;
        this.fun.decorate = CSL4.Mode(mode);
        if (!this.output[mode]) {
          this.output[mode] = {};
          this.output[mode].tmp = {};
        }
      };
      CSL4.Engine.prototype.getSortFunc = function() {
        return function(a, b) {
          a = a.split("-");
          b = b.split("-");
          if (a.length < b.length) {
            return 1;
          } else if (a.length > b.length) {
            return -1;
          } else {
            a = a.slice(-1)[0];
            b = b.slice(-1)[0];
            if (a.length < b.length) {
              return 1;
            } else if (a.length > b.length) {
              return -1;
            } else {
              return 0;
            }
          }
        };
      };
      CSL4.Engine.prototype.setLangTagsForCslSort = function(tags) {
        var i, ilen;
        if (tags) {
          this.opt["locale-sort"] = [];
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-sort"].push(tags[i]);
          }
        }
        this.opt["locale-sort"].sort(this.getSortFunc());
      };
      CSL4.Engine.prototype.setLangTagsForCslTransliteration = function(tags) {
        var i, ilen;
        this.opt["locale-translit"] = [];
        if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-translit"].push(tags[i]);
          }
        }
        this.opt["locale-translit"].sort(this.getSortFunc());
      };
      CSL4.Engine.prototype.setLangTagsForCslTranslation = function(tags) {
        var i, ilen;
        this.opt["locale-translat"] = [];
        if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-translat"].push(tags[i]);
          }
        }
        this.opt["locale-translat"].sort(this.getSortFunc());
      };
      CSL4.Engine.prototype.setLangPrefsForCites = function(obj, conv) {
        var opt = this.opt["cite-lang-prefs"];
        if (!conv) {
          conv = function(key) {
            return key.toLowerCase();
          };
        }
        var segments = ["Persons", "Institutions", "Titles", "Journals", "Publishers", "Places"];
        for (var i = 0, ilen = segments.length; i < ilen; i += 1) {
          var clientSegment = conv(segments[i]);
          var citeprocSegment = segments[i].toLowerCase();
          if (!obj[clientSegment]) {
            continue;
          }
          var supplements = [];
          while (obj[clientSegment].length > 1) {
            supplements.push(obj[clientSegment].pop());
          }
          var sortval = { orig: 1, translit: 2, translat: 3 };
          if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {
            supplements.reverse();
          }
          while (supplements.length) {
            obj[clientSegment].push(supplements.pop());
          }
          var lst = opt[citeprocSegment];
          while (lst.length) {
            lst.pop();
          }
          for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {
            lst.push(obj[clientSegment][j]);
          }
        }
      };
      CSL4.Engine.prototype.setLangPrefsForCiteAffixes = function(affixList) {
        if (affixList && affixList.length === 48) {
          var affixes = this.opt.citeAffixes;
          var count = 0;
          var settings = ["persons", "institutions", "titles", "journals", "publishers", "places"];
          var forms = ["translit", "orig", "translit", "translat"];
          var value;
          for (var i = 0, ilen = settings.length; i < ilen; i += 1) {
            for (var j = 0, jlen = forms.length; j < jlen; j += 1) {
              value = "";
              if (count % 8 === 4) {
                if (!affixes[settings[i]]["locale-" + forms[j]].prefix && !affixes[settings[i]]["locale-" + forms[j]].suffix) {
                  value = affixList[count] ? affixList[count] : "";
                  affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                  value = affixList[count] ? affixList[count + 1] : "";
                  affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                }
              } else {
                value = affixList[count] ? affixList[count] : "";
                affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                value = affixList[count] ? affixList[count + 1] : "";
                affixes[settings[i]]["locale-" + forms[j]].suffix = value;
              }
              count += 2;
            }
          }
          this.opt.citeAffixes = affixes;
        }
      };
      CSL4.Engine.prototype.setAutoVietnameseNamesOption = function(arg) {
        if (arg) {
          this.opt["auto-vietnamese-names"] = true;
        } else {
          this.opt["auto-vietnamese-names"] = false;
        }
      };
      CSL4.Engine.prototype.setAbbreviations = function(arg) {
        if (this.sys.setAbbreviations) {
          this.sys.setAbbreviations(arg);
        }
      };
      CSL4.Engine.prototype.setSuppressTrailingPunctuation = function(arg) {
        this.citation.opt.suppressTrailingPunctuation = !!arg;
      };
      CSL4.Output = {};
      CSL4.Output.Queue = function(state) {
        this.levelname = ["top"];
        this.state = state;
        this.queue = [];
        this.empty = new CSL4.Token("empty");
        var tokenstore = {};
        tokenstore.empty = this.empty;
        this.formats = new CSL4.Stack(tokenstore);
        this.current = new CSL4.Stack(this.queue);
      };
      CSL4.Output.Queue.prototype.pop = function() {
        var drip = this.current.value();
        if (drip.length) {
          return drip.pop();
        } else {
          return drip.blobs.pop();
        }
      };
      CSL4.Output.Queue.prototype.getToken = function(name) {
        var ret = this.formats.value()[name];
        return ret;
      };
      CSL4.Output.Queue.prototype.mergeTokenStrings = function(base, modifier) {
        var base_token, modifier_token, ret, key;
        base_token = this.formats.value()[base];
        modifier_token = this.formats.value()[modifier];
        ret = base_token;
        if (modifier_token) {
          if (!base_token) {
            base_token = new CSL4.Token(base, CSL4.SINGLETON);
            base_token.decorations = [];
          }
          ret = new CSL4.Token(base, CSL4.SINGLETON);
          var key = "";
          for (var key in base_token.strings) {
            if (base_token.strings.hasOwnProperty(key)) {
              ret.strings[key] = base_token.strings[key];
            }
          }
          for (var key in modifier_token.strings) {
            if (modifier_token.strings.hasOwnProperty(key)) {
              ret.strings[key] = modifier_token.strings[key];
            }
          }
          ret.decorations = base_token.decorations.concat(modifier_token.decorations);
        }
        return ret;
      };
      CSL4.Output.Queue.prototype.addToken = function(name, modifier, token) {
        var newtok, attr;
        newtok = new CSL4.Token("output");
        if (typeof token === "string") {
          token = this.formats.value()[token];
        }
        if (token && token.strings) {
          for (attr in token.strings) {
            if (token.strings.hasOwnProperty(attr)) {
              newtok.strings[attr] = token.strings[attr];
            }
          }
          newtok.decorations = token.decorations;
        }
        if (typeof modifier === "string") {
          newtok.strings.delimiter = modifier;
        }
        this.formats.value()[name] = newtok;
      };
      CSL4.Output.Queue.prototype.pushFormats = function(tokenstore) {
        if (!tokenstore) {
          tokenstore = {};
        }
        tokenstore.empty = this.empty;
        this.formats.push(tokenstore);
      };
      CSL4.Output.Queue.prototype.popFormats = function() {
        this.formats.pop();
      };
      CSL4.Output.Queue.prototype.startTag = function(name, token) {
        var tokenstore = {};
        if (this.state.tmp["doing-macro-with-date"] && this.state.tmp.extension) {
          token = this.empty;
          name = "empty";
        }
        tokenstore[name] = token;
        this.pushFormats(tokenstore);
        this.openLevel(name);
      };
      CSL4.Output.Queue.prototype.endTag = function(name) {
        this.closeLevel(name);
        this.popFormats();
      };
      CSL4.Output.Queue.prototype.openLevel = function(token) {
        var blob, curr;
        if (typeof token === "object") {
          blob = new CSL4.Blob(void 0, token);
        } else if (typeof token === "undefined") {
          blob = new CSL4.Blob(void 0, this.formats.value().empty, "empty");
        } else {
          if (!this.formats.value() || !this.formats.value()[token]) {
            CSL4.error('CSL processor error: call to nonexistent format token "' + token + '"');
          }
          blob = new CSL4.Blob(void 0, this.formats.value()[token], token);
        }
        curr = this.current.value();
        if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);
        }
        curr.push(blob);
        this.current.push(blob);
      };
      CSL4.Output.Queue.prototype.closeLevel = function(name) {
        if (name && name !== this.current.value().levelname) {
          CSL4.error("Level mismatch error:  wanted " + name + " but found " + this.current.value().levelname);
        }
        var blob = this.current.pop();
        if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);
        }
      };
      CSL4.Output.Queue.prototype.append = function(str, tokname, notSerious, ignorePredecessor, noStripPeriods) {
        var token, blob, curr;
        var useblob = true;
        if (notSerious) {
          ignorePredecessor = true;
        }
        if (this.state.tmp["doing-macro-with-date"] && !notSerious) {
          if (tokname !== "macro-with-date") {
            return false;
          }
          if (tokname === "macro-with-date") {
            tokname = "empty";
          }
        }
        if (typeof str === "undefined") {
          return false;
        }
        if (typeof str === "number") {
          str = "" + str;
        }
        if (!notSerious && this.state.tmp.element_trace && this.state.tmp.element_trace.value() === "suppress-me") {
          return false;
        }
        blob = false;
        if (!tokname) {
          token = this.formats.value().empty;
        } else if (tokname === "literal") {
          token = true;
          useblob = false;
        } else if (typeof tokname === "string") {
          token = this.formats.value()[tokname];
        } else {
          token = tokname;
        }
        if (!token) {
          CSL4.error("CSL processor error: unknown format token name: " + tokname);
        }
        if (token.strings && typeof token.strings.delimiter === "undefined") {
          token.strings.delimiter = "";
        }
        if (typeof str === "string" && str.length) {
          str = str.replace(/ ([:;?!\u00bb])/g, "\u202F$1").replace(/\u00ab /g, "\xAB\u202F");
          this.last_char_rendered = str.slice(-1);
          str = str.replace(/\s+'/g, " '");
          if (!notSerious) {
            str = str.replace(/^'/g, " '");
          }
          if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
          }
        }
        blob = new CSL4.Blob(str, token);
        curr = this.current.value();
        if (typeof curr === "undefined" && this.current.mystack.length === 0) {
          this.current.mystack.push([]);
          curr = this.current.value();
        }
        if (typeof blob.blobs === "string") {
          if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
          }
        }
        if (typeof str === "string") {
          if (typeof blob.blobs === "string") {
            if (blob.blobs.slice(0, 1) !== " ") {
              var blobPrefix = "";
              var blobBlobs = blob.blobs;
              while (CSL4.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {
                blobPrefix = blobPrefix + blobBlobs.slice(0, 1);
                blobBlobs = blobBlobs.slice(1);
              }
              if (blobBlobs && blobPrefix) {
                blob.strings.prefix = blob.strings.prefix + blobPrefix;
                blob.blobs = blobBlobs;
              }
            }
          }
          if (blob.strings["text-case"]) {
            blob.blobs = CSL4.Output.Formatters[blob.strings["text-case"]](this.state, str);
          }
          if (this.state.tmp.strip_periods && !noStripPeriods) {
            blob.blobs = blob.blobs.replace(/\.([^a-z]|$)/g, "$1");
          }
          for (var i = blob.decorations.length - 1; i > -1; i += -1) {
            if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
              blob.punctuation_in_quote = this.state.getOpt("punctuation-in-quote");
            }
            if (!blob.blobs.match(CSL4.ROMANESQUE_REGEXP)) {
              if (blob.decorations[i][0] === "@font-style") {
                blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));
              }
            }
          }
          curr.push(blob);
          this.state.fun.flipflopper.processTags(blob);
        } else if (useblob) {
          curr.push(blob);
        } else {
          curr.push(str);
        }
        return true;
      };
      CSL4.Output.Queue.prototype.string = function(state, myblobs, blob) {
        var i, ilen, j, jlen, b;
        var txt_esc = CSL4.getSafeEscape(this.state);
        var blobs = myblobs.slice();
        var ret = [];
        if (blobs.length === 0) {
          return ret;
        }
        var blob_delimiter = "";
        if (blob) {
          blob_delimiter = blob.strings.delimiter;
        } else {
          state.tmp.count_offset_characters = false;
          state.tmp.offset_characters = 0;
        }
        if (blob && blob.new_locale) {
          blob.old_locale = state.opt.lang;
          state.opt.lang = blob.new_locale;
        }
        var blobjr, use_suffix, use_prefix, params;
        for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          blobjr = blobs[i];
          if (blobjr.strings.first_blob) {
            state.tmp.count_offset_characters = blobjr.strings.first_blob;
          }
          if (typeof blobjr.blobs === "string") {
            if (typeof blobjr.num === "number") {
              ret.push(blobjr);
            } else if (blobjr.blobs) {
              if (blobjr.particle) {
                blobjr.blobs = blobjr.particle + blobjr.blobs;
                blobjr.particle = "";
              }
              b = txt_esc(blobjr.blobs);
              var blen = b.length;
              if (!state.tmp.suppress_decorations) {
                for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                  params = blobjr.decorations[j];
                  if (params[0] === "@showid") {
                    continue;
                  }
                  if (state.normalDecorIsOrphan(blobjr, params)) {
                    continue;
                  }
                  b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                }
              }
              if (b && b.length) {
                b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);
                if (state.opt.development_extensions.csl_reverse_lookup_support && !state.tmp.suppress_decorations) {
                  for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                    params = blobjr.decorations[j];
                    if (params[0] === "@showid") {
                      b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                    }
                  }
                }
                ret.push(b);
                if (state.tmp.count_offset_characters) {
                  state.tmp.offset_characters += blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length;
                }
              }
            }
          } else if (blobjr.blobs.length) {
            var addtoret = state.output.string(state, blobjr.blobs, blobjr);
            if (blob) {
              if (addtoret !== "string" && addtoret.length > 1 && blobjr.strings.delimiter) {
                var numberSeen = false;
                for (var j = 0, jlen = addtoret.length; j < jlen; j++) {
                  if (typeof addtoret[j] !== "string") {
                    numberSeen = true;
                  } else if (numberSeen) {
                    addtoret[j] = blobjr.strings.delimiter + addtoret[j];
                  }
                }
              }
            }
            ret = ret.concat(addtoret);
          }
          if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {
            state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;
            state.tmp.count_offset_characters = false;
          }
        }
        for (i = 0, ilen = ret.length - 1; i < ilen; i += 1) {
          if (typeof ret[i].num === "number" && typeof ret[i + 1].num === "number" && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
            ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : "");
            ret[i + 1].successor_prefix = "";
            ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
          }
        }
        var span_split = 0;
        for (var i = 0, ilen = ret.length; i < ilen; i += 1) {
          if (typeof ret[i] === "string") {
            span_split = parseInt(i, 10) + 1;
            if (i < ret.length - 1 && typeof ret[i + 1] === "object") {
              if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
                ret[i] += txt_esc(blob_delimiter);
              }
              ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
            }
          }
        }
        if (blob && (blob.decorations.length || blob.strings.suffix)) {
          span_split = ret.length;
        } else if (blob && blob.strings.prefix) {
          for (var i = 0, ilen = ret.length; i < ilen; i++) {
            if (typeof ret[i].num !== "undefined") {
              span_split = i;
              if (i === 0) {
                ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;
              }
              break;
            }
          }
        }
        var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);
        if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
          if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
              params = blob.decorations[i];
              if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) > -1) {
                continue;
              }
              if (state.normalDecorIsOrphan(blobjr, params)) {
                continue;
              }
              if (!params[0])
                continue;
              if (typeof blobs_start === "string") {
                blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
              }
            }
          }
          b = blobs_start;
          use_suffix = blob.strings.suffix;
          if (b && b.length) {
            use_prefix = blob.strings.prefix;
            b = txt_esc(use_prefix) + b + txt_esc(use_suffix);
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += use_prefix.length + use_suffix.length;
            }
          }
          blobs_start = b;
          if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
              params = blob.decorations[i];
              if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) === -1) {
                continue;
              }
              if (typeof blobs_start === "string") {
                blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
              }
            }
          }
        }
        var blobs_end = ret.slice(span_split, ret.length);
        if (!blobs_end.length && blobs_start) {
          ret = [blobs_start];
        } else if (blobs_end.length && !blobs_start) {
          ret = blobs_end;
        } else if (blobs_start && blobs_end.length) {
          ret = [blobs_start].concat(blobs_end);
        }
        if (typeof blob === "undefined") {
          this.queue = [];
          this.current.mystack = [];
          this.current.mystack.push(this.queue);
          if (state.tmp.suppress_decorations) {
            ret = state.output.renderBlobs(ret, void 0, false);
          }
        } else if (typeof blob === "boolean") {
          ret = state.output.renderBlobs(ret, void 0, true);
        }
        if (blob && blob.new_locale) {
          state.opt.lang = blob.old_locale;
        }
        return ret;
      };
      CSL4.Output.Queue.prototype.clearlevel = function() {
        var blob, pos, len;
        blob = this.current.value();
        len = blob.blobs.length;
        for (pos = 0; pos < len; pos += 1) {
          blob.blobs.pop();
        }
      };
      CSL4.Output.Queue.prototype.renderBlobs = function(blobs, delim, in_cite, parent) {
        var state, ret, ret_last_char, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;
        txt_esc = CSL4.getSafeEscape(this.state);
        if (!delim) {
          delim = "";
        }
        state = this.state;
        ret = "";
        ret_last_char = [];
        use_delim = "";
        len = blobs.length;
        if (this.state.tmp.area === "citation" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === "object" && parent) {
          blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;
          blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;
          blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);
          blobs[0].params = parent.params;
          return blobs[0];
        }
        var start = true;
        for (pos = 0; pos < len; pos += 1) {
          if (blobs[pos].checkNext) {
            blobs[pos].checkNext(blobs[pos + 1], start);
            start = false;
          } else if (blobs[pos + 1] && blobs[pos + 1].splice_prefix) {
            start = false;
          } else {
            start = true;
          }
        }
        var doit = true;
        for (pos = blobs.length - 1; pos > 0; pos += -1) {
          if (blobs[pos].checkLast) {
            if (doit && blobs[pos].checkLast(blobs[pos - 1])) {
              doit = false;
            }
          } else {
            doit = true;
          }
        }
        len = blobs.length;
        for (pos = 0; pos < len; pos += 1) {
          blob = blobs[pos];
          if (ret) {
            use_delim = delim;
          }
          if (typeof blob === "string") {
            ret += txt_esc(use_delim);
            ret += blob;
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += use_delim.length;
            }
          } else if (in_cite) {
            if (ret) {
              ret = [ret, blob];
            } else {
              ret = [blob];
            }
          } else if (blob.status !== CSL4.SUPPRESS) {
            if (blob.particle) {
              str = blob.particle + blob.num;
            } else {
              str = blob.formatter.format(blob.num, blob.gender);
            }
            var strlen = str.replace(/<[^>]*>/g, "").length;
            this.append(str, "empty", true);
            var str_blob = this.pop();
            var count_offset_characters = state.tmp.count_offset_characters;
            str = this.string(state, [str_blob], false);
            state.tmp.count_offset_characters = count_offset_characters;
            if (blob.strings["text-case"]) {
              str = CSL4.Output.Formatters[blob.strings["text-case"]](this.state, str);
            }
            if (str && this.state.tmp.strip_periods) {
              str = str.replace(/\.([^a-z]|$)/g, "$1");
            }
            if (!state.tmp.suppress_decorations) {
              llen = blob.decorations.length;
              for (ppos = 0; ppos < llen; ppos += 1) {
                params = blob.decorations[ppos];
                if (state.normalDecorIsOrphan(blob, params)) {
                  continue;
                }
                str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);
              }
            }
            str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);
            var addme = "";
            if (blob.status === CSL4.END) {
              addme = txt_esc(blob.range_prefix);
            } else if (blob.status === CSL4.SUCCESSOR) {
              addme = txt_esc(blob.successor_prefix);
            } else if (blob.status === CSL4.START) {
              if (pos > 0 && !blob.suppress_splice_prefix) {
                addme = txt_esc(blob.splice_prefix);
              } else {
                addme = "";
              }
            } else if (blob.status === CSL4.SEEN) {
              addme = txt_esc(blob.splice_prefix);
            }
            ret += addme;
            ret += str;
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length;
            }
          }
        }
        return ret;
      };
      CSL4.Output.Queue.purgeEmptyBlobs = function(parent) {
        if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        for (var i = parent.blobs.length - 1; i > -1; i--) {
          CSL4.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);
          var child = parent.blobs[i];
          if (!child || !child.blobs || !child.blobs.length) {
            var buf = [];
            while (parent.blobs.length - 1 > i) {
              buf.push(parent.blobs.pop());
            }
            parent.blobs.pop();
            while (buf.length) {
              parent.blobs.push(buf.pop());
            }
          }
        }
      };
      CSL4.Output.Queue.adjust = function(punctInQuote) {
        var NO_SWAP_IN = {
          ";": true,
          ":": true
        };
        var NO_SWAP_OUT = {
          ".": true,
          "!": true,
          "?": true
        };
        var LtoR_MAP = {
          "!": {
            ".": "!",
            "?": "!?",
            ":": "!",
            ",": "!,",
            ";": "!;"
          },
          "?": {
            "!": "?!",
            ".": "?",
            ":": "?",
            ",": "?,",
            ";": "?;"
          },
          ".": {
            "!": ".!",
            "?": ".?",
            ":": ".:",
            ",": ".,",
            ";": ".;"
          },
          ":": {
            "!": "!",
            "?": "?",
            ".": ":",
            ",": ":,",
            ";": ":;"
          },
          ",": {
            "!": ",!",
            "?": ",?",
            ":": ",:",
            ".": ",.",
            ";": ",;"
          },
          ";": {
            "!": "!",
            "?": "?",
            ":": ";",
            ",": ";,",
            ".": ";"
          }
        };
        var SWAP_IN = {};
        var SWAP_OUT = {};
        var PUNCT = {};
        var PUNCT_OR_SPACE = {};
        for (var key in LtoR_MAP) {
          PUNCT[key] = true;
          PUNCT_OR_SPACE[key] = true;
          if (!NO_SWAP_IN[key]) {
            SWAP_IN[key] = true;
          }
          if (!NO_SWAP_OUT[key]) {
            SWAP_OUT[key] = true;
          }
        }
        PUNCT_OR_SPACE[" "] = true;
        PUNCT_OR_SPACE["\xA0"] = true;
        var RtoL_MAP = {};
        for (var key in LtoR_MAP) {
          for (var subkey in LtoR_MAP[key]) {
            if (!RtoL_MAP[subkey]) {
              RtoL_MAP[subkey] = {};
            }
            RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];
          }
        }
        function blobIsNumber(blob) {
          return typeof blob.num === "number" || blob.blobs && blob.blobs.length === 1 && typeof blob.blobs[0].num === "number";
        }
        function blobEndsInNumber(blob) {
          if (typeof blob.num === "number") {
            return true;
          }
          if (!blob.blobs || typeof blob.blobs !== "object") {
            return false;
          }
          if (blobEndsInNumber(blob.blobs[blob.blobs.length - 1])) {
            return true;
          }
        }
        function blobHasDecorations(blob, includeQuotes) {
          var ret = false;
          var decorlist = ["@font-style", "@font-variant", "@font-weight", "@text-decoration", "@vertical-align"];
          if (includeQuotes) {
            decorlist.push("@quotes");
          }
          if (blob.decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
              if (decorlist.indexOf(blob.decorations[i][0]) > -1) {
                ret = true;
                break;
              }
            }
          }
          return ret;
        }
        function blobHasDescendantQuotes(blob) {
          if (blob.decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
              if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
                return true;
              }
            }
          }
          if (typeof blob.blobs !== "object") {
            return false;
          }
          return blobHasDescendantQuotes(blob.blobs[blob.blobs.length - 1]);
        }
        function blobHasDescendantMergingPunctuation(parentChar, blob) {
          var childChar = blob.strings.suffix.slice(-1);
          if (!childChar && typeof blob.blobs === "string") {
            childChar = blob.blobs.slice(-1);
          }
          var mergedChars = RtoL_MAP[parentChar][childChar];
          if (mergedChars && mergedChars.length === 1) {
            return true;
          }
          if (typeof blob.blobs !== "object") {
            return false;
          }
          if (blobHasDescendantMergingPunctuation(parentChar, blob.blobs[blob.blobs.length - 1])) {
            return true;
          }
          return false;
        }
        function matchLastChar(blob, chr2) {
          if (!PUNCT[chr2]) {
            return false;
          }
          if (typeof blob.blobs === "string") {
            if (blob.blobs.slice(-1) === chr2) {
              return true;
            } else {
              return false;
            }
          } else {
            var child = blob.blobs[blob.blobs.length - 1];
            if (child) {
              var childChar = child.strings.suffix.slice(-1);
              if (!childChar) {
                return matchLastChar(child, chr2);
              } else if (child.strings.suffix.slice(-1) == chr2) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
        }
        function mergeChars(First, first, Second, second, merge_right) {
          var FirstStrings = first === "blobs" ? First : First.strings;
          var SecondStrings = second === "blobs" ? Second : Second.strings;
          var firstChar = FirstStrings[first].slice(-1);
          var secondChar = SecondStrings[second].slice(0, 1);
          function cullRight() {
            SecondStrings[second] = SecondStrings[second].slice(1);
          }
          function cullLeft() {
            FirstStrings[first] = FirstStrings[first].slice(0, -1);
          }
          function addRight(chr2) {
            SecondStrings[second] = chr2 + SecondStrings[second];
          }
          function addLeft(chr2) {
            FirstStrings[first] += chr2;
          }
          var cull = merge_right ? cullLeft : cullRight;
          function matchOnRight() {
            return RtoL_MAP[secondChar];
          }
          function matchOnLeft() {
            return LtoR_MAP[firstChar];
          }
          var match = merge_right ? matchOnLeft : matchOnRight;
          function mergeToRight() {
            var chr2 = LtoR_MAP[firstChar][secondChar];
            if (typeof chr2 === "string") {
              cullLeft();
              cullRight();
              addRight(chr2);
            } else {
              addRight(firstChar);
              cullLeft();
            }
          }
          function mergeToLeft() {
            var chr2 = RtoL_MAP[secondChar][firstChar];
            if (typeof chr2 === "string") {
              cullLeft();
              cullRight();
              addLeft(chr2);
            } else {
              addLeft(secondChar);
              cullRight();
            }
          }
          var merge = merge_right ? mergeToRight : mergeToLeft;
          var isDuplicate = firstChar === secondChar;
          if (isDuplicate) {
            cull();
          } else {
            if (match()) {
              merge();
            }
          }
        }
        function upward(parent) {
          if (parent.blobs && typeof parent.blobs == "string") {
            if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
          } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var parentDecorations = blobHasDecorations(parent, true);
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            this.upward(parent.blobs[i]);
            var parentStrings = parent.strings;
            var childStrings = parent.blobs[i].strings;
            if (i === 0) {
              if (parentStrings.prefix.slice(-1) === " " && childStrings.prefix.slice(0, 1) === " ") {
                childStrings.prefix = childStrings.prefix.slice(1);
              }
              var childChar = childStrings.prefix.slice(0, 1);
              if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {
                parentStrings.prefix += childChar;
                childStrings.prefix = childStrings.prefix.slice(1);
              }
            }
            if (i === parent.blobs.length - 1) {
              var childChar = childStrings.suffix.slice(-1);
              if (!parentDecorations && [" "].indexOf(childChar) > -1) {
                if (parentStrings.suffix.slice(0, 1) !== childChar) {
                  parentStrings.suffix = childChar + parentStrings.suffix;
                }
                childStrings.suffix = childStrings.suffix.slice(0, -1);
              }
            }
            if (parentStrings.delimiter && i > 0) {
              if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)] && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {
                childStrings.prefix = childStrings.prefix.slice(1);
              }
            }
          }
        }
        function leftward(parent) {
          if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            this.leftward(parent.blobs[i]);
            if (i < parent.blobs.length - 1 && !parent.strings.delimiter) {
              var child = parent.blobs[i];
              var childChar = child.strings.suffix.slice(-1);
              var sibling = parent.blobs[i + 1];
              var siblingChar = sibling.strings.prefix.slice(0, 1);
              var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);
              var hasNumber = typeof childChar === "number" || typeof siblingChar === "number";
              if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {
                var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);
                var suffixAndFieldMatch = !child.strings.suffix && typeof child.blobs === "string" && child.blobs.slice(-1) === siblingChar;
                if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {
                  mergeChars(child, "suffix", sibling, "prefix");
                } else {
                  sibling.strings.prefix = sibling.strings.prefix.slice(1);
                }
              }
            }
          }
        }
        function downward(parent) {
          if (parent.blobs && typeof parent.blobs == "string") {
            if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
          } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var parentStrings = parent.strings;
          var someChildrenAreNumbers = false;
          for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
            if (blobIsNumber(parent.blobs[i])) {
              someChildrenAreNumbers = true;
              break;
            }
          }
          if (true) {
            if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {
              var delimChar = parentStrings.delimiter.slice(0, 1);
              for (var i = parent.blobs.length - 2; i > -1; i--) {
                var childStrings = parent.blobs[i].strings;
                if (childStrings.suffix.slice(-1) !== delimChar) {
                  childStrings.suffix += delimChar;
                }
              }
              parentStrings.delimiter = parentStrings.delimiter.slice(1);
            }
          }
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            var child = parent.blobs[i];
            var childStrings = parent.blobs[i].strings;
            var childDecorations = blobHasDecorations(child, true);
            var childIsNumber = blobIsNumber(child);
            if (i === parent.blobs.length - 1) {
              if (true) {
                var parentChar = parentStrings.suffix.slice(0, 1);
                var allowMigration = false;
                if (PUNCT[parentChar]) {
                  allowMigration = blobHasDescendantMergingPunctuation(parentChar, child);
                  if (!allowMigration && punctInQuote) {
                    allowMigration = blobHasDescendantQuotes(child);
                  }
                }
                if (allowMigration) {
                  if (PUNCT[parentChar]) {
                    if (!blobEndsInNumber(child)) {
                      if (typeof child.blobs === "string") {
                        mergeChars(child, "blobs", parent, "suffix");
                      } else {
                        mergeChars(child, "suffix", parent, "suffix");
                      }
                      if (parentStrings.suffix.slice(0, 1) === ".") {
                        childStrings.suffix += parentStrings.suffix.slice(0, 1);
                        parentStrings.suffix = parentStrings.suffix.slice(1);
                      }
                    }
                  }
                }
                if (childStrings.suffix.slice(-1) === "\xA0" && parentStrings.suffix.slice(0, 1) === " ") {
                  parentStrings.suffix = parentStrings.suffix.slice(1);
                }
                if (PUNCT_OR_SPACE[childStrings.suffix.slice(0, 1)]) {
                  if (typeof child.blobs === "string" && child.blobs.slice(-1) === childStrings.suffix.slice(0, 1)) {
                    childStrings.suffix = childStrings.suffix.slice(1);
                  }
                  if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {
                    parentStrings.suffix = parentStrings.suffix.slice(0, -1);
                  }
                }
              }
              if (matchLastChar(parent, parent.strings.suffix.slice(0, 1))) {
                parent.strings.suffix = parent.strings.suffix.slice(1);
              }
            } else if (parentStrings.delimiter) {
              if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0, 1)] && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {
                parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);
              }
            } else {
              var siblingStrings = parent.blobs[i + 1].strings;
              if (!blobIsNumber(child) && !childDecorations && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)] && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {
                siblingStrings.prefix = siblingStrings.prefix.slice(1);
              }
            }
            if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0, 1)] && typeof child.blobs === "string") {
              mergeChars(child, "blobs", child, "suffix");
            }
            this.downward(parent.blobs[i]);
          }
        }
        function swapToTheLeft(child) {
          var childChar = child.strings.suffix.slice(0, 1);
          if (typeof child.blobs === "string") {
            while (SWAP_IN[childChar]) {
              mergeChars(child, "blobs", child, "suffix");
              childChar = child.strings.suffix.slice(0, 1);
            }
          } else {
            while (SWAP_IN[childChar]) {
              mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix");
              childChar = child.strings.suffix.slice(0, 1);
            }
          }
        }
        function swapToTheRight(child) {
          if (typeof child.blobs === "string") {
            var childChar = child.blobs.slice(-1);
            while (SWAP_OUT[childChar]) {
              mergeChars(child, "blobs", child, "suffix", true);
              childChar = child.blobs.slice(-1);
            }
          } else {
            var childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
            while (SWAP_OUT[childChar]) {
              mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix", true);
              childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
            }
          }
        }
        function fix(parent) {
          if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var lastChar;
          for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
            var child = parent.blobs[i];
            var quoteSwap = false;
            for (var j = 0, jlen = child.decorations.length; j < jlen; j++) {
              var decoration = child.decorations[j];
              if (decoration[0] === "@quotes" && decoration[1] !== "false") {
                quoteSwap = true;
              }
            }
            if (quoteSwap) {
              if (punctInQuote) {
                swapToTheLeft(child);
              } else {
                swapToTheRight(child);
              }
            }
            lastChar = this.fix(parent.blobs[i]);
            if (child.blobs && typeof child.blobs === "string") {
              lastChar = child.blobs.slice(-1);
            }
          }
          return lastChar;
        }
        this.upward = upward;
        this.leftward = leftward;
        this.downward = downward;
        this.fix = fix;
      };
      CSL4.Engine.Opt = function() {
        this.parallel = {
          enable: false
        }, this.has_disambiguate = false;
        this.mode = "html";
        this.dates = {};
        this.jurisdictions_seen = {};
        this.suppressedJurisdictions = {};
        this.inheritedAttributes = {};
        this["locale-sort"] = [];
        this["locale-translit"] = [];
        this["locale-translat"] = [];
        this.citeAffixes = {
          persons: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          institutions: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          titles: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          journals: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          publishers: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          places: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          }
        };
        this["default-locale"] = [];
        this.update_mode = CSL4.NONE;
        this.bib_mode = CSL4.NONE;
        this.sort_citations = false;
        this["et-al-min"] = 0;
        this["et-al-use-first"] = 1;
        this["et-al-use-last"] = false;
        this["et-al-subsequent-min"] = false;
        this["et-al-subsequent-use-first"] = false;
        this["demote-non-dropping-particle"] = "display-and-sort";
        this["parse-names"] = true;
        this.citation_number_slug = false;
        this.trigraph = "Aaaa00:AaAa00:AaAA00:AAAA00";
        this.nodenames = [];
        this.gender = {};
        this["cite-lang-prefs"] = {
          persons: ["orig"],
          institutions: ["orig"],
          titles: ["orig"],
          journals: ["orig"],
          publishers: ["orig"],
          places: ["orig"],
          number: ["orig"]
        };
        this.has_layout_locale = false;
        this.disable_duplicate_year_suppression = [];
        this.use_context_condition = false;
        this.jurisdiction_fallbacks = {};
        this.development_extensions = {};
        this.development_extensions.field_hack = true;
        this.development_extensions.allow_field_hack_date_override = true;
        this.development_extensions.locator_date_and_revision = true;
        this.development_extensions.locator_label_parse = true;
        this.development_extensions.raw_date_parsing = true;
        this.development_extensions.clean_up_csl_flaws = true;
        this.development_extensions.consolidate_legal_items = false;
        this.development_extensions.csl_reverse_lookup_support = false;
        this.development_extensions.wrap_url_and_doi = false;
        this.development_extensions.thin_non_breaking_space_html_hack = false;
        this.development_extensions.apply_citation_wrapper = false;
        this.development_extensions.main_title_from_short_title = false;
        this.development_extensions.uppercase_subtitles = false;
        this.development_extensions.normalize_lang_keys_to_lowercase = false;
        this.development_extensions.strict_text_case_locales = false;
        this.development_extensions.expect_and_symbol_form = false;
        this.development_extensions.require_explicit_legal_case_title_short = false;
        this.development_extensions.spoof_institutional_affiliations = false;
        this.development_extensions.force_jurisdiction = false;
        this.development_extensions.parse_names = true;
        this.development_extensions.hanging_indent_legacy_number = false;
        this.development_extensions.throw_on_empty = false;
        this.development_extensions.strict_inputs = true;
        this.development_extensions.prioritize_disambiguate_condition = false;
        this.development_extensions.force_short_title_casing_alignment = true;
        this.development_extensions.implicit_short_title = false;
        this.development_extensions.force_title_abbrev_fallback = false;
        this.development_extensions.split_container_title = false;
        this.development_extensions.legacy_institution_name_ordering = false;
        this.development_extensions.etal_min_etal_usefirst_hack = false;
      };
      CSL4.Engine.Tmp = function() {
        this.names_max = new CSL4.Stack();
        this.names_base = new CSL4.Stack();
        this.givens_base = new CSL4.Stack();
        this.value = [];
        this.namepart_decorations = {};
        this.namepart_type = false;
        this.area = "citation";
        this.root = "citation";
        this.extension = "";
        this.can_substitute = new CSL4.Stack(0, CSL4.LITERAL);
        this.element_rendered_ok = false;
        this.element_trace = new CSL4.Stack("style");
        this.nameset_counter = 0;
        this.group_context = new CSL4.Stack({
          term_intended: false,
          variable_attempt: false,
          variable_success: false,
          output_tip: void 0,
          label_form: void 0,
          parallel_first: void 0,
          parallel_last: void 0,
          parallel_delimiter_override: void 0,
          condition: false,
          force_suppress: false,
          done_vars: []
        });
        this.term_predecessor = false;
        this.in_cite_predecessor = false;
        this.jump = new CSL4.Stack(0, CSL4.LITERAL);
        this.decorations = new CSL4.Stack();
        this.tokenstore_stack = new CSL4.Stack();
        this.last_suffix_used = "";
        this.last_names_used = [];
        this.last_years_used = [];
        this.years_used = [];
        this.names_used = [];
        this.taintedItemIDs = {};
        this.taintedCitationIDs = {};
        this.initialize_with = new CSL4.Stack();
        this.disambig_request = false;
        this["name-as-sort-order"] = false;
        this.suppress_decorations = false;
        this.disambig_settings = new CSL4.AmbigConfig();
        this.bib_sort_keys = [];
        this.prefix = new CSL4.Stack("", CSL4.LITERAL);
        this.suffix = new CSL4.Stack("", CSL4.LITERAL);
        this.delimiter = new CSL4.Stack("", CSL4.LITERAL);
        this.cite_locales = [];
        this.cite_affixes = {
          citation: false,
          bibliography: false,
          citation_sort: false,
          bibliography_sort: false
        };
        this.strip_periods = 0;
        this.shadow_numbers = {};
        this.authority_stop_last = 0;
        this.loadedItemIDs = {};
        this.condition_counter = 0;
        this.condition_lang_val_arr = [];
        this.condition_lang_counter_arr = [];
      };
      CSL4.Engine.Fun = function(state) {
        this.match = new CSL4.Util.Match();
        this.suffixator = new CSL4.Util.Suffixator(CSL4.SUFFIX_CHARS);
        this.romanizer = new CSL4.Util.Romanizer();
        this.ordinalizer = new CSL4.Util.Ordinalizer(state);
        this.long_ordinalizer = new CSL4.Util.LongOrdinalizer();
      };
      CSL4.Engine.Build = function() {
        this["alternate-term"] = false;
        this.in_bibliography = false;
        this.in_style = false;
        this.skip = false;
        this.postponed_macro = false;
        this.layout_flag = false;
        this.name = false;
        this.names_variables = [[]];
        this.name_label = [{}];
        this.form = false;
        this.term = false;
        this.macro = {};
        this.macro_stack = [];
        this.text = false;
        this.lang = false;
        this.area = "citation";
        this.root = "citation";
        this.extension = "";
        this.substitute_level = new CSL4.Stack(0, CSL4.LITERAL);
        this.names_level = 0;
        this.render_nesting_level = 0;
        this.render_seen = false;
        this.bibliography_key_pos = 0;
      };
      CSL4.Engine.Configure = function() {
        this.tests = [];
        this.fail = [];
        this.succeed = [];
      };
      CSL4.Engine.Citation = function(state) {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.srt = new CSL4.Registry.Comparifier(state, "citation_sort");
        this.opt.collapse = [];
        this.opt["disambiguate-add-names"] = false;
        this.opt["disambiguate-add-givenname"] = false;
        this.opt["disambiguate-add-year-suffix"] = false;
        this.opt["givenname-disambiguation-rule"] = "by-cite";
        this.opt["near-note-distance"] = 5;
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "citation";
      };
      CSL4.Engine.Bibliography = function() {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.opt.collapse = [];
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt["line-spacing"] = 1;
        this.opt["entry-spacing"] = 1;
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "bibliography";
      };
      CSL4.Engine.BibliographySort = function() {
        this.tokens = [];
        this.opt = {};
        this.opt.sort_directions = [];
        this.opt.topdecor = [];
        this.opt.citation_number_sort_direction = CSL4.ASCENDING;
        this.opt.citation_number_secondary = false;
        this.tmp = {};
        this.keys = [];
        this.root = "bibliography";
      };
      CSL4.Engine.CitationSort = function() {
        this.tokens = [];
        this.opt = {};
        this.opt.sort_directions = [];
        this.keys = [];
        this.opt.topdecor = [];
        this.root = "citation";
      };
      CSL4.Engine.InText = function() {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.opt.collapse = [];
        this.opt["disambiguate-add-names"] = false;
        this.opt["disambiguate-add-givenname"] = false;
        this.opt["disambiguate-add-year-suffix"] = false;
        this.opt["givenname-disambiguation-rule"] = "by-cite";
        this.opt["near-note-distance"] = 5;
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "intext";
      };
      CSL4.Engine.prototype.previewCitationCluster = function(citation, citationsPre, citationsPost, newMode) {
        var oldMode = this.opt.mode;
        this.setOutputFormat(newMode);
        if (citation.citationID) {
          delete citation.citationID;
        }
        var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL4.PREVIEW);
        this.setOutputFormat(oldMode);
        return ret[1];
      };
      CSL4.Engine.prototype.appendCitationCluster = function(citation) {
        var citationsPre = [];
        var len = this.registry.citationreg.citationByIndex.length;
        for (var pos = 0; pos < len; pos += 1) {
          var c = this.registry.citationreg.citationByIndex[pos];
          citationsPre.push(["" + c.citationID, c.properties.noteIndex]);
        }
        return this.processCitationCluster(citation, citationsPre, [])[1];
      };
      CSL4.Engine.prototype.processCitationCluster = function(citation, citationsPre, citationsPost, flag) {
        var c, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m, citationsInNote;
        this.debug = false;
        this.tmp.loadedItemIDs = {};
        this.tmp.citation_errors = [];
        this.registry.return_data = { "bibchange": false };
        this.setCitationId(citation);
        var oldCitationList;
        var oldItemList;
        var oldAmbigs;
        if (flag === CSL4.PREVIEW) {
          if (this.debug) {
            CSL4.debug("****** start state save *********");
          }
          oldCitationList = this.registry.citationreg.citationByIndex.slice();
          oldItemList = this.registry.reflist.slice();
          var newCitationList = citationsPre.concat(citationsPost);
          var newItemIds = {};
          var newItemIdsList = [];
          for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {
            c = this.registry.citationreg.citationById[newCitationList[i][0]];
            for (j = 0, jlen = c.citationItems.length; j < jlen; j += 1) {
              newItemIds[c.citationItems[j].id] = true;
              newItemIdsList.push("" + c.citationItems[j].id);
            }
          }
          for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {
            newItemIds[citation.citationItems[j].id] = true;
            newItemIdsList.push("" + citation.citationItems[j].id);
          }
          oldAmbigs = {};
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            if (!newItemIds[oldItemList[i].id]) {
              var oldAkey = this.registry.registry[oldItemList[i].id].ambig;
              var ids = this.registry.ambigcites[oldAkey];
              if (ids) {
                for (j = 0, jlen = ids.length; j < jlen; j += 1) {
                  oldAmbigs[ids[j]] = CSL4.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);
                }
              }
            }
          }
          if (this.debug) {
            CSL4.debug("****** end state save *********");
          }
        }
        this.tmp.taintedCitationIDs = {};
        var sortedItems = [];
        var rerunAkeys = {};
        for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {
          item = {};
          for (var key in citation.citationItems[i]) {
            item[key] = citation.citationItems[i][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (Item.id) {
            this.transform.loadAbbreviation("default", "hereinafter", Item.id, Item.language);
          }
          item = CSL4.parseLocator.call(this, item);
          if (this.opt.development_extensions.consolidate_legal_items) {
            this.remapSectionVariable([[Item, item]]);
          }
          if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
              var m = CSL4.LOCATOR_LABELS_REGEXP.exec(item.locator);
              if (m) {
                var tryLabel = CSL4.LOCATOR_LABELS_MAP[m[2]];
                if (this.getTerm(tryLabel)) {
                  item.label = tryLabel;
                  item.locator = m[3];
                }
              }
            }
          }
          var newitem = [Item, item];
          sortedItems.push(newitem);
          citation.citationItems[i].item = Item;
        }
        citation.sortedItems = sortedItems;
        var citationByIndex = [];
        var citationById = {};
        var lastNotePos;
        for (i = 0, ilen = citationsPre.length; i < ilen; i += 1) {
          preCitation = citationsPre[i];
          if (this.opt.development_extensions.strict_inputs) {
            if (citationById[preCitation[0]]) {
              CSL4.error("Previously referenced citationID " + preCitation[0] + " encountered in citationsPre");
            }
            if (preCitation[1]) {
              if (lastNotePos > preCitation[1]) {
                CSL4.debug("Note index sequence is not sane at citationsPre[" + i + "]");
              }
              lastNotePos = preCitation[1];
            }
          }
          this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);
          citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];
        }
        if (!citation.properties) {
          citation.properties = {
            noteIndex: 0
          };
        }
        if (this.opt.development_extensions.strict_inputs) {
          if (citationById[citation.citationID]) {
            CSL4.error("Citation with previously referenced citationID " + citation.citationID);
          }
          if (citation.properties.noteIndex) {
            if (lastNotePos > citation.properties.noteIndex) {
              CSL4.debug("Note index sequence is not sane for citation " + citation.citationID);
            }
            lastNotePos = citation.properties.noteIndex;
          }
        }
        citationByIndex.push(citation);
        citationById[citation.citationID] = citation;
        for (i = 0, ilen = citationsPost.length; i < ilen; i += 1) {
          postCitation = citationsPost[i];
          if (this.opt.development_extensions.strict_inputs) {
            if (citationById[postCitation[0]]) {
              CSL4.error("Previously referenced citationID " + postCitation[0] + " encountered in citationsPost");
            }
            if (postCitation[1]) {
              if (lastNotePos > postCitation[1]) {
                CSL4.debug("Note index sequence is not sane at postCitation[" + i + "]");
              }
              lastNotePos = postCitation[1];
            }
          }
          this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);
          citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];
        }
        this.registry.citationreg.citationByIndex = citationByIndex;
        this.registry.citationreg.citationById = citationById;
        this.registry.citationreg.citationsByItemId = {};
        if (this.opt.update_mode === CSL4.POSITION) {
          textCitations = [];
          noteCitations = [];
          citationsInNote = {};
        }
        var update_items = [];
        for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {
          citationByIndex[i].properties.index = i;
          for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {
            item = citationByIndex[i].sortedItems[j];
            if (!this.registry.citationreg.citationsByItemId[item[1].id]) {
              this.registry.citationreg.citationsByItemId[item[1].id] = [];
              update_items.push("" + item[1].id);
            }
            if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {
              this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);
            }
          }
          if (this.opt.update_mode === CSL4.POSITION) {
            if (citationByIndex[i].properties.noteIndex) {
              noteCitations.push(citationByIndex[i]);
            } else {
              citationByIndex[i].properties.noteIndex = 0;
              textCitations.push(citationByIndex[i]);
            }
          }
        }
        if (flag !== CSL4.ASSUME_ALL_ITEMS_REGISTERED) {
          if (this.debug) {
            CSL4.debug("****** start update items *********");
          }
          this.updateItems(update_items, null, null, true);
          if (this.debug) {
            CSL4.debug("****** endo update items *********");
          }
        }
        if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            sortedItems[i][1].sortkeys = CSL4.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
          }
          if (this.opt.grouped_sort && !citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              var sortkeys = sortedItems[i][1].sortkeys;
              this.tmp.authorstring_request = true;
              var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;
              this.tmp.authorstring_request = true;
              CSL4.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);
              var authorstring = this.registry.authorstrings[sortedItems[i][0].id];
              this.tmp.authorstring_request = false;
              sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
            var lastauthor = false;
            var thiskey = false;
            var thisauthor = false;
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              if (sortedItems[i][1].sortkeys[0] !== lastauthor) {
                thisauthor = sortedItems[i][1].sortkeys[0];
                thiskey = sortedItems[i][1].sortkeys[1];
              }
              sortedItems[i][1].sortkeys[0] = "" + thiskey + i;
              lastauthor = thisauthor;
            }
          }
          if (!citation.properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
        }
        if (this.opt.parallel.enable) {
          this.parallel.StartCitation(citation.sortedItems);
        }
        var citations;
        if (this.opt.update_mode === CSL4.POSITION) {
          for (var i = 0; i < 2; i += 1) {
            var first_ref = {};
            var last_ref = {};
            var first_container_ref = {};
            citations = [textCitations, noteCitations][i];
            for (j = 0, jlen = citations.length; j < jlen; j += 1) {
              var onecitation = citations[j];
              if (!citations[j].properties.noteIndex) {
                citations[j].properties.noteIndex = 0;
              }
              citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);
              if (j > 0 && onecitation.properties.noteIndex && citations[j - 1].properties.noteIndex > onecitation.properties.noteIndex) {
                citationsInNote = {};
                first_ref = {};
                last_ref = {};
                first_container_ref = {};
              }
              for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {
                if (onecitation.sortedItems[k][1].parallel && onecitation.sortedItems[k][1].parallel !== "first") {
                  continue;
                }
                if (!citationsInNote[onecitation.properties.noteIndex]) {
                  citationsInNote[onecitation.properties.noteIndex] = 1;
                } else {
                  citationsInNote[onecitation.properties.noteIndex] += 1;
                }
              }
              for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {
                item = citations[j].sortedItems[k];
                var item_id = item[0].id;
                var first_id = item[0].legislation_id ? item[0].legislation_id : item[0].id;
                var last_id = item[0].legislation_id ? item[0].legislation_id : item[0].container_id ? item[0].container_id : item[0].id;
                var myxloc = item[1]["locator-extra"];
                var mylocator = item[1].locator;
                var mylabel = item[1].label;
                var incitationid;
                var incitationxloc;
                if (k > 0) {
                  if (onecitation.sortedItems[k - 1][0].legislation_id) {
                    incitationid = onecitation.sortedItems[k - 1][0].legislation_id;
                  } else {
                    incitationid = onecitation.sortedItems[k - 1][1].id;
                    incitationxloc = onecitation.sortedItems[k - 1][1]["locator-extra"];
                    for (var l = k - 2; l > -1; l--) {
                      if (onecitation.sortedItems[l][1].parallel === "first") {
                        incitationid = onecitation.sortedItems[l][1].id;
                        incitationxloc = onecitation.sortedItems[l][1]["locator-extra"];
                      }
                    }
                  }
                }
                if (flag === CSL4.PREVIEW) {
                  if (onecitation.citationID != citation.citationID) {
                    if (typeof first_ref[item[1].id] === "undefined") {
                      first_ref[first_id] = onecitation.properties.noteIndex;
                      last_ref[last_id] = onecitation.properties.noteIndex;
                    } else {
                      last_ref[last_id] = onecitation.properties.noteIndex;
                    }
                    continue;
                  }
                }
                var oldvalue = {};
                oldvalue.position = item[1].position;
                oldvalue["first-reference-note-number"] = item[1]["first-reference-note-number"];
                oldvalue["first-container-reference-note-number"] = item[1]["first-container-reference-note-number"];
                oldvalue["near-note"] = item[1]["near-note"];
                item[1]["first-reference-note-number"] = 0;
                item[1]["first-container-reference-note-number"] = 0;
                item[1]["near-note"] = false;
                if (this.registry.citationreg.citationsByItemId[item_id]) {
                  if (this.opt.xclass === "note" && this.opt.has_disambiguate) {
                    var oldCount = this.registry.registry[item[0].id]["citation-count"];
                    var newCount = this.registry.citationreg.citationsByItemId[item_id].length;
                    this.registry.registry[item[0].id]["citation-count"] = this.registry.citationreg.citationsByItemId[item_id].length;
                    if (typeof oldCount === "number") {
                      var oldCountCheck = oldCount < 2;
                      var newCountCheck = newCount < 2;
                      if (oldCountCheck !== newCountCheck) {
                        for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                          this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                        }
                      }
                    } else {
                      for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                        this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                      }
                    }
                  }
                }
                var oldlastid;
                var oldlastxloc;
                if (typeof last_ref[last_id] === "undefined" && onecitation.properties.mode !== "author-only") {
                  first_ref[first_id] = onecitation.properties.noteIndex;
                  last_ref[last_id] = onecitation.properties.noteIndex;
                  first_container_ref[last_id] = onecitation.properties.noteIndex;
                  item[1].position = CSL4.POSITION_FIRST;
                } else {
                  var ibidme = false;
                  var suprame = false;
                  var prevCitation = null;
                  if (j > 0) {
                    var prevCitation = citations[j - 1];
                  }
                  var thisCitation = citations[j];
                  if (j > 0) {
                    var old_last_id_offset = 1;
                    if (prevCitation.properties.mode === "author-only" && j > 1) {
                      old_last_id_offset = 2;
                    }
                    var adjusted_offset = j - old_last_id_offset;
                    if (citations[adjusted_offset].sortedItems.length) {
                      oldlastid = citations[adjusted_offset].sortedItems.slice(-1)[0][1].id;
                      oldlastxloc = citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1]["locator-extra"];
                    }
                    if (prevCitation.sortedItems.length) {
                      if (prevCitation.sortedItems[0].slice(-1)[0].legislation_id) {
                        oldlastid = prevCitation.sortedItems[0].slice(-1)[0].legislation_id;
                      }
                    }
                  }
                  if (j > 0 && k === 0 && prevCitation.properties.noteIndex !== thisCitation.properties.noteIndex) {
                    var useme = false;
                    var oldid = prevCitation.sortedItems[0][0].id;
                    if (prevCitation.sortedItems[0][0].legislation_id) {
                      oldid = prevCitation.sortedItems[0][0].legislation_id;
                    }
                    if (oldid == first_id && prevCitation.properties.noteIndex >= thisCitation.properties.noteIndex - 1) {
                      var prevxloc = prevCitation.sortedItems[0][1]["locator-extra"];
                      var thisxloc = thisCitation.sortedItems[0][1]["locator-extra"];
                      if ((citationsInNote[prevCitation.properties.noteIndex] === 1 || prevCitation.properties.noteIndex === 0) && prevxloc === thisxloc) {
                        useme = true;
                      }
                    }
                    if (useme) {
                      ibidme = true;
                    } else {
                      suprame = true;
                    }
                  } else if (k > 0 && incitationid == first_id && incitationxloc == myxloc) {
                    ibidme = true;
                  } else if (k === 0 && j > 0 && prevCitation.properties.noteIndex == thisCitation.properties.noteIndex && prevCitation.sortedItems.length && oldlastid == first_id && oldlastxloc == myxloc) {
                    ibidme = true;
                  } else {
                    suprame = true;
                  }
                  var prev, prev_locator, prev_label, curr_locator, curr_label;
                  if (ibidme) {
                    if (k > 0) {
                      prev = onecitation.sortedItems[k - 1][1];
                    } else {
                      prev = citations[j - 1].sortedItems[0][1];
                    }
                    if (prev.locator) {
                      if (prev.label) {
                        prev_label = prev.label;
                      } else {
                        prev_label = "";
                      }
                      prev_locator = "" + prev.locator + prev_label;
                    } else {
                      prev_locator = prev.locator;
                    }
                    if (mylocator) {
                      if (mylabel) {
                        curr_label = mylabel;
                      } else {
                        curr_label = "";
                      }
                      curr_locator = "" + mylocator + curr_label;
                    } else {
                      curr_locator = mylocator;
                    }
                  }
                  if (ibidme && prev_locator && !curr_locator) {
                    ibidme = false;
                    suprame = true;
                  }
                  if (ibidme) {
                    if (!prev_locator && curr_locator) {
                      item[1].position = CSL4.POSITION_IBID_WITH_LOCATOR;
                    } else if (!prev_locator && !curr_locator) {
                      item[1].position = CSL4.POSITION_IBID;
                    } else if (prev_locator && curr_locator === prev_locator) {
                      item[1].position = CSL4.POSITION_IBID;
                    } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {
                      item[1].position = CSL4.POSITION_IBID_WITH_LOCATOR;
                    } else {
                      ibidme = false;
                      suprame = true;
                    }
                  }
                  if (suprame) {
                    item[1].position = CSL4.POSITION_CONTAINER_SUBSEQUENT;
                    if (typeof first_ref[first_id] === "undefined") {
                      first_ref[first_id] = onecitation.properties.noteIndex;
                    } else {
                      item[1].position = CSL4.POSITION_SUBSEQUENT;
                    }
                  }
                  if (suprame || ibidme) {
                    if (onecitation.properties.mode === "author-only") {
                      item[1].position = CSL4.POSITION_FIRST;
                    }
                    if (first_container_ref[last_id] != onecitation.properties.noteIndex) {
                      item[1]["first-container-reference-note-number"] = first_container_ref[last_id];
                      if (this.registry.registry[item[0].id]) {
                        this.registry.registry[item[0].id]["first-container-reference-note-number"] = first_container_ref[last_id];
                      }
                    }
                    if (first_ref[first_id] != onecitation.properties.noteIndex) {
                      item[1]["first-reference-note-number"] = first_ref[first_id];
                      if (this.registry.registry[item[0].id]) {
                        this.registry.registry[item[0].id]["first-reference-note-number"] = first_ref[first_id];
                      }
                    }
                  }
                }
                if (onecitation.properties.noteIndex) {
                  var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[last_id], 10);
                  if (item[1].position !== CSL4.POSITION_FIRST && note_distance <= this.citation.opt["near-note-distance"]) {
                    item[1]["near-note"] = true;
                  }
                  last_ref[last_id] = onecitation.properties.noteIndex;
                } else if (item[1].position !== CSL4.POSITION_FIRST) {
                  item[1]["near-note"] = true;
                }
                if (onecitation.citationID != citation.citationID) {
                  for (n = 0, nlen = CSL4.POSITION_TEST_VARS.length; n < nlen; n += 1) {
                    var param = CSL4.POSITION_TEST_VARS[n];
                    if (item[1][param] !== oldvalue[param]) {
                      if (this.registry.registry[item[0].id]) {
                        if (param === "first-reference-note-number") {
                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                          this.tmp.taintedItemIDs[item[0].id] = true;
                        }
                      }
                      this.tmp.taintedCitationIDs[onecitation.citationID] = true;
                    }
                  }
                }
                if (this.sys.variableWrapper) {
                  item[1].index = onecitation.properties.index;
                  item[1].noteIndex = onecitation.properties.noteIndex;
                }
              }
            }
          }
        }
        if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          if (!citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              sortedItems[i][1].sortkeys = CSL4.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
        }
        for (var key in this.tmp.taintedItemIDs) {
          if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {
            citations = this.registry.citationreg.citationsByItemId[key];
            if (citations) {
              for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
                this.tmp.taintedCitationIDs[citations[i].citationID] = true;
              }
            }
          }
        }
        var ret = [];
        if (flag === CSL4.PREVIEW) {
          if (this.debug) {
            CSL4.debug("****** start run processor *********");
          }
          try {
            ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);
          } catch (e) {
            CSL4.error("Error running CSL processor for preview: " + e);
          }
          if (this.debug) {
            CSL4.debug("****** end run processor *********");
            CSL4.debug("****** start state restore *********");
          }
          this.registry.citationreg.citationByIndex = oldCitationList;
          this.registry.citationreg.citationById = {};
          for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {
            this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];
          }
          if (this.debug) {
            CSL4.debug("****** start final update *********");
          }
          var oldItemIds = [];
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            oldItemIds.push("" + oldItemList[i].id);
          }
          this.updateItems(oldItemIds, null, null, true);
          if (this.debug) {
            CSL4.debug("****** end final update *********");
          }
          for (var key in oldAmbigs) {
            if (oldAmbigs.hasOwnProperty(key)) {
              this.registry.registry[key].disambig = oldAmbigs[key];
            }
          }
          if (this.debug) {
            CSL4.debug("****** end state restore *********");
          }
        } else {
          for (var rerunAkey in rerunAkeys) {
            this.disambiguate.run(rerunAkey, citation);
          }
          var obj;
          for (var key in this.tmp.taintedCitationIDs) {
            if (key == citation.citationID) {
              continue;
            }
            var mycitation = this.registry.citationreg.citationById[key];
            if (!mycitation.properties.unsorted) {
              for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {
                mycitation.sortedItems[i][1].sortkeys = CSL4.getSortKeys.call(this, mycitation.sortedItems[i][0], "citation_sort");
              }
              mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);
            }
            this.tmp.citation_pos = mycitation.properties.index;
            this.tmp.citation_note_index = mycitation.properties.noteIndex;
            this.tmp.citation_id = "" + mycitation.citationID;
            obj = [];
            obj.push(mycitation.properties.index);
            obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));
            obj.push(mycitation.citationID);
            ret.push(obj);
          }
          this.tmp.taintedItemIDs = {};
          this.tmp.taintedCitationIDs = {};
          this.tmp.citation_pos = citation.properties.index;
          this.tmp.citation_note_index = citation.properties.noteIndex;
          this.tmp.citation_id = "" + citation.citationID;
          obj = [];
          obj.push(citationsPre.length);
          obj.push(this.process_CitationCluster.call(this, sortedItems, citation));
          obj.push(citation.citationID);
          ret.push(obj);
          ret.sort(function(a, b) {
            if (a[0] > b[0]) {
              return 1;
            } else if (a[0] < b[0]) {
              return -1;
            } else {
              return 0;
            }
          });
        }
        this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();
        return [this.registry.return_data, ret];
      };
      CSL4.Engine.prototype.process_CitationCluster = function(sortedItems, citation) {
        var str = "";
        if (citation && citation.properties && citation.properties.mode === "composite") {
          citation.properties.mode = "author-only";
          var firstChunk = CSL4.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "suppress-author";
          var secondChunk = "";
          if (citation.properties.infix) {
            this.output.append(citation.properties.infix);
            secondChunk = this.output.string(this, this.output.queue);
            if (typeof secondChunk === "object") {
              secondChunk = secondChunk.join("");
            }
          }
          var thirdChunk = CSL4.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "composite";
          if (firstChunk && secondChunk && CSL4.SWAPPING_PUNCTUATION.concat(["\u2019", "'"]).indexOf(secondChunk[0]) > -1) {
            firstChunk += secondChunk;
            secondChunk = false;
          }
          str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {
            return obj;
          }).join(" ");
        } else {
          str = CSL4.getCitationCluster.call(this, sortedItems, citation);
        }
        return str;
      };
      CSL4.Engine.prototype.makeCitationCluster = function(rawList) {
        var inputList, newitem, str, pos, len, item, Item;
        inputList = [];
        len = rawList.length;
        for (pos = 0; pos < len; pos += 1) {
          item = {};
          for (var key in rawList[pos]) {
            item[key] = rawList[pos][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
              var m = CSL4.LOCATOR_LABELS_REGEXP.exec(item.locator);
              if (m) {
                var tryLabel = CSL4.LOCATOR_LABELS_MAP[m[2]];
                if (this.getTerm(tryLabel)) {
                  item.label = tryLabel;
                  item.locator = m[3];
                }
              }
            }
          }
          if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, "");
          }
          newitem = [Item, item];
          inputList.push(newitem);
        }
        if (this.opt.development_extensions.consolidate_legal_items) {
          this.remapSectionVariable(inputList);
        }
        if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {
          len = inputList.length;
          for (pos = 0; pos < len; pos += 1) {
            inputList[pos][1].sortkeys = CSL4.getSortKeys.call(this, inputList[pos][0], "citation_sort");
          }
          inputList.sort(this.citation.srt.compareCompositeKeys);
        }
        this.tmp.citation_errors = [];
        var str = CSL4.getCitationCluster.call(this, inputList);
        return str;
      };
      CSL4.getAmbiguousCite = function(Item, disambig, visualForm, item) {
        var ret;
        var flags = this.tmp.group_context.tip;
        var oldTermSiblingLayer = {
          term_intended: flags.term_intended,
          variable_attempt: flags.variable_attempt,
          variable_success: flags.variable_success,
          output_tip: flags.output_tip,
          label_form: flags.label_form,
          non_parallel: flags.non_parallel,
          parallel_last: flags.parallel_last,
          parallel_first: flags.parallel_first,
          parallel_last_override: flags.parallel_last_override,
          parallel_delimiter_override: flags.parallel_delimiter_override,
          parallel_delimiter_override_on_suppress: flags.parallel_delimiter_override_on_suppress,
          condition: flags.condition,
          force_suppress: flags.force_suppress,
          done_vars: flags.done_vars.slice()
        };
        if (disambig) {
          this.tmp.disambig_request = disambig;
        } else {
          this.tmp.disambig_request = false;
        }
        var itemSupp = {
          position: CSL4.POSITION_SUBSEQUENT,
          "near-note": true
        };
        if (item) {
          itemSupp.locator = item.locator;
          itemSupp.label = item.label;
        }
        if (this.registry.registry[Item.id] && this.registry.citationreg.citationsByItemId && this.registry.citationreg.citationsByItemId[Item.id] && this.registry.citationreg.citationsByItemId[Item.id].length && visualForm) {
          if (this.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            itemSupp["first-reference-note-number"] = this.registry.registry[Item.id]["first-reference-note-number"];
          }
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        var origSuppressDecorations = this.tmp.suppress_decorations;
        this.tmp.suppress_decorations = true;
        this.tmp.just_looking = true;
        CSL4.getCite.call(this, Item, itemSupp, null, false);
        for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
          CSL4.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
        }
        if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.output.adjust.fix(this.output.queue[j]);
          }
        }
        var ret = this.output.string(this, this.output.queue);
        this.tmp.just_looking = false;
        this.tmp.suppress_decorations = origSuppressDecorations;
        this.tmp.group_context.replace(oldTermSiblingLayer);
        return ret;
      };
      CSL4.getSpliceDelimiter = function(last_locator, last_collapsed, pos) {
        if (this.citation.opt["after-collapse-delimiter"] !== void 0) {
          if (last_locator) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (last_collapsed && !this.tmp.have_collapsed) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== "year-suffix") {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else {
            this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;
          }
        } else if (this.tmp.use_cite_group_delimiter) {
          this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
        } else {
          if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL4.NUMERIC) {
            this.tmp.splice_delimiter = ", ";
          } else if (this.tmp.cite_locales[pos - 1]) {
            var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
            if (alt_affixes && alt_affixes.delimiter) {
              this.tmp.splice_delimiter = alt_affixes.delimiter;
            }
          } else if (!this.tmp.splice_delimiter) {
            this.tmp.splice_delimiter = "";
          }
        }
        return this.tmp.splice_delimiter;
      };
      CSL4.getCitationCluster = function(inputList, citation) {
        var result, objects, myparams, len, pos, item, last_collapsed, params, empties, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;
        var citation_prefix = "";
        this.output.checkNestedBrace = new CSL4.checkNestedBrace(this);
        if (citation) {
          citationID = citation.citationID;
          authorOnly = citation.properties.mode === "author-only" ? !!citation.properties.mode : false;
          if (this.opt.xclass !== "note") {
            suppressAuthor = citation.properties.mode === "suppress-author" ? !!citation.properties.mode : false;
          }
          if (citation.properties.prefix) {
            citation_prefix = CSL4.checkPrefixSpaceAppend(this, citation.properties.prefix);
          }
        }
        inputList = inputList ? inputList : [];
        this.tmp.last_primary_names_string = false;
        txt_esc = CSL4.getSafeEscape(this);
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        result = "";
        objects = [];
        this.tmp.last_suffix_used = "";
        this.tmp.last_names_used = [];
        this.tmp.last_years_used = [];
        this.tmp.backref_index = [];
        this.tmp.cite_locales = [];
        if (!this.tmp.just_looking) {
          this.tmp.abbrev_trimmer = {
            QUASHES: {}
          };
        }
        var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);
        var suppressTrailingPunctuation = false;
        if (this.citation.opt.suppressTrailingPunctuation) {
          suppressTrailingPunctuation = true;
        }
        if (citationID) {
          if (this.registry.citationreg.citationById[citationID].properties["suppress-trailing-punctuation"]) {
            suppressTrailingPunctuation = true;
          }
        }
        if (this.opt.xclass === "note") {
          var parasets = [];
          var lastTitle = false;
          var lastPosition = false;
          var lastID = false;
          var lst = [];
          for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
            var type2 = inputList[i][0].type;
            var title2 = inputList[i][0].title;
            var position = inputList[i][1].position;
            var id2 = inputList[i][0].id;
            if (title2 && type2 === "legal_case" && id2 !== lastID && position) {
              if (title2 !== lastTitle || parasets.length === 0) {
                lst = [];
                parasets.push(lst);
              }
              lst.push(inputList[i][1]);
            }
            lastTitle = title2;
            lastPosition = position;
            lastID = id2;
          }
          for (i = 0, ilen = parasets.length; i < ilen; i += 1) {
            lst = parasets[i];
            if (lst.length < 2) {
              continue;
            }
            var locatorInLastPosition = lst.slice(-1)[0].locator;
            if (locatorInLastPosition) {
              for (var j = 0, jlen = lst.length - 1; j < jlen; j += 1) {
                if (lst[j].locator) {
                  locatorInLastPosition = false;
                }
              }
            }
            if (locatorInLastPosition) {
              lst[0].locator = locatorInLastPosition;
              delete lst.slice(-1)[0].locator;
              lst[0].label = lst.slice(-1)[0].label;
              if (lst.slice(-1)[0].label) {
                delete lst.slice(-1)[0].label;
              }
            }
          }
        }
        myparams = [];
        len = inputList.length;
        if (inputList[0] && inputList[0][1]) {
          if (authorOnly) {
            delete inputList[0][1]["suppress-author"];
            inputList[0][1]["author-only"] = true;
          } else if (suppressAuthor) {
            delete inputList[0][1]["author-only"];
            inputList[0][1]["suppress-author"] = true;
          }
        }
        if (this.opt.parallel.enable) {
          this.parallel.StartCitation(inputList);
        }
        for (pos = 0; pos < len; pos += 1) {
          this.tmp.cite_index = pos;
          Item = inputList[pos][0];
          item = inputList[pos][1];
          item = CSL4.parseLocator.call(this, item);
          last_collapsed = this.tmp.have_collapsed;
          var last_locator = false;
          if (pos > 0 && inputList[pos - 1][1]) {
            last_locator = !!inputList[pos - 1][1].locator;
          }
          params = {};
          this.tmp.shadow_numbers = {};
          if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {
            var output = this.output;
            this.output = new CSL4.Output.Queue(this);
            this.output.adjust = new CSL4.Output.Queue.adjust();
            CSL4.getAmbiguousCite.call(this, Item, null, false, item);
            this.output = output;
          }
          this.tmp.in_cite_predecessor = false;
          if (pos > 0) {
            CSL4.getCite.call(this, Item, item, "" + inputList[pos - 1][0].id, true);
          } else {
            this.tmp.term_predecessor = false;
            CSL4.getCite.call(this, Item, item, null, true);
          }
          if (!this.tmp.cite_renders_content) {
            error_object = {
              citationID: "" + this.tmp.citation_id,
              index: this.tmp.citation_pos,
              noteIndex: this.tmp.citation_note_index,
              itemID: "" + Item.id,
              citationItems_pos: pos,
              error_code: CSL4.ERROR_NO_RENDERED_FORM
            };
            this.tmp.citation_errors.push(error_object);
          }
          params.splice_delimiter = CSL4.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);
          if (item && item["author-only"]) {
            this.tmp.suppress_decorations = true;
          }
          if (pos > 0) {
            preceding_item = inputList[pos - 1][1];
            var precedingEndsInPeriodOrComma = preceding_item.suffix && [";", ".", ","].indexOf(preceding_item.suffix.slice(-1)) > -1;
            var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [";", ".", ","].indexOf(item.prefix.slice(0, 1)) > -1;
            if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {
              var spaceidx = params.splice_delimiter.indexOf(" ");
              if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {
                params.splice_delimiter = params.splice_delimiter.slice(spaceidx);
              } else {
                params.splice_delimiter = "";
              }
            }
          }
          params.suppress_decorations = this.tmp.suppress_decorations;
          params.have_collapsed = this.tmp.have_collapsed;
          myparams.push(params);
          if (item["author-only"]) {
            break;
          }
        }
        empties = 0;
        myblobs = this.output.queue.slice();
        var citation_suffix = "";
        if (citation) {
          citation_suffix = CSL4.checkSuffixSpacePrepend(this, citation.properties.suffix);
        }
        var suffix = this.citation.opt.layout_suffix;
        var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];
        if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {
          suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;
        }
        if (CSL4.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {
          suffix = suffix.slice(0, 1);
        }
        suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);
        for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
          CSL4.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
        }
        if (!this.tmp.suppress_decorations && this.output.queue.length) {
          if (!(this.opt.development_extensions.apply_citation_wrapper && this.sys.wrapCitationEntry && !this.tmp.just_looking && this.tmp.area === "citation")) {
            if (!suppressTrailingPunctuation) {
              this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;
            }
            this.output.queue[0].strings.prefix = use_layout_prefix;
          }
        }
        if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);
          }
        }
        for (pos = 0, len = myblobs.length; pos < len; pos += 1) {
          var buffer = [];
          this.output.queue = [myblobs[pos]];
          this.tmp.suppress_decorations = myparams[pos].suppress_decorations;
          this.tmp.splice_delimiter = myparams[pos].splice_delimiter;
          if (myblobs[pos].parallel_delimiter) {
            this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;
          }
          this.tmp.have_collapsed = myparams[pos].have_collapsed;
          composite = this.output.string(this, this.output.queue);
          this.tmp.suppress_decorations = false;
          if (typeof composite === "string") {
            this.tmp.suppress_decorations = false;
            if (!composite) {
              if (this.opt.development_extensions.throw_on_empty) {
                CSL4.error("Citation would render no content");
              } else {
                composite = "[NO_PRINTED_FORM]";
              }
            }
            return composite;
          }
          if (typeof composite === "object" && composite.length === 0 && !item["suppress-author"]) {
            if (pos === 0) {
              var errStr = "[CSL STYLE ERROR: reference with no printed form.]";
              var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : "";
              var sufStr = pos === myblobs.length - 1 ? txt_esc(this.citation.opt.layout_suffix) : "";
              composite.push(preStr + errStr + sufStr);
            } else if (pos === myblobs.length - 1) {
              var tmpobj = objects[objects.length - 1];
              if (typeof tmpobj === "string") {
                objects[objects.length - 1] += txt_esc(this.citation.opt.layout_suffix);
              } else if (typeof tmpobj === "object") {
                tmpobj.strings.suffix += txt_esc(this.citation.opt.layout_suffix);
              }
            }
          }
          if (buffer.length && typeof composite[0] === "string") {
            composite.reverse();
            var tmpstr = composite.pop();
            if (tmpstr && tmpstr.slice(0, 1) === ",") {
              buffer.push(tmpstr);
            } else if (typeof buffer.slice(-1)[0] == "string" && buffer.slice(-1)[0].slice(-1) === ",") {
              buffer.push(" " + tmpstr);
            } else if (tmpstr) {
              buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);
            }
          } else {
            composite.reverse();
            compie = composite.pop();
            if (typeof compie !== "undefined") {
              if (buffer.length && typeof buffer[buffer.length - 1] === "string") {
                buffer[buffer.length - 1] += compie.successor_prefix;
              }
              buffer.push(compie);
            }
          }
          llen = composite.length;
          for (ppos = 0; ppos < llen; ppos += 1) {
            obj = composite[ppos];
            if (typeof obj === "string") {
              buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);
              continue;
            }
            compie = composite.pop();
            if (typeof compie !== "undefined") {
              buffer.push(compie);
            }
          }
          if (buffer.length === 0 && !inputList[pos][1]["suppress-author"]) {
            empties += 1;
          }
          if (buffer.length > 1 && typeof buffer[0] !== "string") {
            buffer = [this.output.renderBlobs(buffer)];
          }
          if (buffer.length) {
            if (typeof buffer[0] === "string") {
              if (pos > 0) {
                buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];
              }
            } else {
              if (pos > 0) {
                buffer[0].splice_prefix = this.tmp.splice_delimiter;
              } else {
                buffer[0].splice_prefix = "";
              }
            }
          }
          objects = objects.concat(buffer);
        }
        result += this.output.renderBlobs(objects);
        if (result) {
          if (!this.tmp.suppress_decorations) {
            len = this.citation.opt.layout_decorations.length;
            for (pos = 0; pos < len; pos += 1) {
              params = this.citation.opt.layout_decorations[pos];
              if (params[1] === "normal") {
                continue;
              }
              if (!item || !item["author-only"]) {
                result = this.fun.decorate[params[0]][params[1]](this, result);
              }
            }
          }
        }
        this.tmp.suppress_decorations = false;
        if (!result) {
          if (this.opt.development_extensions.throw_on_empty) {
            CSL4.error("Citation would render no content");
          } else {
            result = "[NO_PRINTED_FORM]";
          }
        }
        return result;
      };
      CSL4.getCite = function(Item, item, prevItemID, blockShadowNumberReset) {
        var next, error_object;
        var areaOrig = this.tmp.area;
        if (item && item["author-only"] && this.intext && this.intext.tokens.length > 0) {
          this.tmp.area = "intext";
        }
        this.tmp.cite_renders_content = false;
        this.tmp.probably_rendered_something = false;
        this.tmp.prevItemID = prevItemID;
        CSL4.citeStart.call(this, Item, item, blockShadowNumberReset);
        next = 0;
        this.tmp.name_node = {};
        this.nameOutput = new CSL4.NameOutput(this, Item, item);
        while (next < this[this.tmp.area].tokens.length) {
          next = CSL4.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);
        }
        CSL4.citeEnd.call(this, Item, item);
        if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {
          if (this.tmp.area === "bibliography") {
            error_object = {
              index: this.tmp.bibliography_pos,
              itemID: "" + Item.id,
              error_code: CSL4.ERROR_NO_RENDERED_FORM
            };
            this.tmp.bibliography_errors.push(error_object);
          }
        }
        this.tmp.area = areaOrig;
        return "" + Item.id;
      };
      CSL4.citeStart = function(Item, item, blockShadowNumberReset) {
        this.tmp.lang_array = [];
        if (Item.language) {
          var m = Item.language.match(/^([a-zA-Z]+).*/);
          if (m) {
            this.tmp.lang_array.push(m[1].toLowerCase());
          }
        }
        this.tmp.lang_array.push(this.opt.lang);
        if (!blockShadowNumberReset) {
          this.tmp.shadow_numbers = {};
        }
        this.tmp.disambiguate_count = 0;
        this.tmp.disambiguate_maxMax = 0;
        this.tmp.same_author_as_previous_cite = false;
        if (!this.tmp.suppress_decorations) {
          this.tmp.subsequent_author_substitute_ok = true;
        } else {
          this.tmp.subsequent_author_substitute_ok = false;
        }
        this.tmp.lastchr = "";
        if (this.tmp.area === "citation" && this.citation.opt.collapse && this.citation.opt.collapse.length) {
          this.tmp.have_collapsed = true;
        } else {
          this.tmp.have_collapsed = false;
        }
        this.tmp.render_seen = false;
        if (this.tmp.disambig_request && !this.tmp.disambig_override) {
          this.tmp.disambig_settings = this.tmp.disambig_request;
        } else if (this.registry.registry[Item.id] && !this.tmp.disambig_override) {
          this.tmp.disambig_request = this.registry.registry[Item.id].disambig;
          this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;
        } else {
          this.tmp.disambig_settings = new CSL4.AmbigConfig();
        }
        if (this.tmp.area !== "citation") {
          if (!this.registry.registry[Item.id]) {
            this.tmp.disambig_restore = new CSL4.AmbigConfig();
          } else {
            this.tmp.disambig_restore = CSL4.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
            if (this.tmp.area === "bibliography" && this.tmp.disambig_settings && this.tmp.disambig_override) {
              if (this.opt["disambiguate-add-names"]) {
                this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();
                if (this.tmp.disambig_request) {
                  this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();
                }
              }
              if (this.opt["disambiguate-add-givenname"]) {
                this.tmp.disambig_request = this.tmp.disambig_settings;
                this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();
                this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();
                for (var i = 0, ilen = this.tmp.disambig_settings.givens.length; i < ilen; i += 1) {
                  this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                }
                for (var i = 0, ilen = this.tmp.disambig_request.givens.length; i < ilen; i += 1) {
                  this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                }
              }
            }
          }
        }
        this.tmp.names_used = [];
        this.tmp.nameset_counter = 0;
        this.tmp.years_used = [];
        this.tmp.names_max.clear();
        if (!this.tmp.just_looking) {
          if (!item || item.parallel === "first" || !item.parallel) {
            this.tmp.abbrev_trimmer = {
              QUASHES: {}
            };
          }
        }
        this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;
        this.bibliography_sort.keys = [];
        this.citation_sort.keys = [];
        this.tmp.has_done_year_suffix = false;
        this.tmp.last_cite_locale = false;
        if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {
          this.tmp.disambig_restore = CSL4.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
        }
        this.tmp.first_name_string = false;
        this.tmp.authority_stop_last = 0;
      };
      CSL4.citeEnd = function(Item, item) {
        if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
          this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();
          this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();
          for (var i = 0, ilen = this.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
            this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();
          }
        }
        this.tmp.disambig_restore = false;
        if (item && item.suffix) {
          this.tmp.last_suffix_used = item.suffix;
        } else {
          this.tmp.last_suffix_used = "";
        }
        this.tmp.last_years_used = this.tmp.years_used.slice();
        this.tmp.last_names_used = this.tmp.names_used.slice();
        this.tmp.cut_var = false;
        this.tmp.disambig_request = false;
        this.tmp.cite_locales.push(this.tmp.last_cite_locale);
        if (this.tmp.issued_date && this.tmp.renders_collection_number) {
          var buf = [];
          for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {
            buf.push(this.tmp.issued_date.list.pop());
          }
          this.tmp.issued_date.list.pop();
          for (i = buf.length - 1; i > -1; i += -1) {
            this.tmp.issued_date.list.push(buf.pop());
          }
        }
        this.tmp.issued_date = false;
        this.tmp.renders_collection_number = false;
      };
      CSL4.Engine.prototype.makeBibliography = function(bibsection) {
        var debug, ret, params, maxoffset, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;
        debug = false;
        if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {
          bibsection = {
            exclude: []
          };
          if (this.bibliography.opt.exclude_types) {
            for (var i in this.bibliography.opt.exclude_types) {
              var val = this.bibliography.opt.exclude_types[i];
              bibsection.exclude.push({
                field: "type",
                value: val
              });
            }
          }
          if (this.bibliography.opt.exclude_with_fields) {
            for (var i in this.bibliography.opt.exclude_with_fields) {
              var field = this.bibliography.opt.exclude_with_fields[i];
              bibsection.exclude.push({
                field,
                value: true
              });
            }
          }
        }
        if (!this.bibliography.tokens.length) {
          return false;
        }
        if (typeof bibsection === "string") {
          this.opt.citation_number_slug = bibsection;
          bibsection = false;
        }
        if (debug) {
          len = this.bibliography.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tok = this.bibliography.tokens[pos];
            CSL4.debug("bibtok: " + tok.name);
          }
          CSL4.debug("---");
          len = this.citation.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tokk = this.citation.tokens[pos];
            CSL4.debug("cittok: " + tok.name);
          }
          CSL4.debug("---");
          len = this.bibliography_sort.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tokkk = this.bibliography_sort.tokens[pos];
            CSL4.debug("bibsorttok: " + tok.name);
          }
        }
        ret = CSL4.getBibliographyEntries.call(this, bibsection);
        entry_ids = ret[0];
        entry_strings = ret[1];
        var done = ret[2];
        params = {
          "maxoffset": 0,
          "entryspacing": this.bibliography.opt["entry-spacing"],
          "linespacing": this.bibliography.opt["line-spacing"],
          "second-field-align": false,
          "entry_ids": entry_ids,
          "bibliography_errors": this.tmp.bibliography_errors.slice(),
          "done": done
        };
        if (this.bibliography.opt["second-field-align"]) {
          params["second-field-align"] = this.bibliography.opt["second-field-align"];
        }
        maxoffset = 0;
        len = this.registry.reflist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.registry.reflist[pos];
          if (item.offset > params.maxoffset) {
            params.maxoffset = item.offset;
          }
        }
        if (this.bibliography.opt.hangingindent) {
          params.hangingindent = this.bibliography.opt.hangingindent;
        }
        params.bibstart = this.fun.decorate.bibstart;
        params.bibend = this.fun.decorate.bibend;
        this.opt.citation_number_slug = false;
        return [params, entry_strings];
      };
      CSL4.getBibliographyEntries = function(bibsection) {
        var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, debug, i, ilen, siblings, skips, sortedItems, eyetem, entry_item_data, j, jlen;
        ret = [];
        entry_item_data = [];
        this.tmp.area = "bibliography";
        this.tmp.root = "bibliography";
        this.tmp.last_rendered_name = false;
        this.tmp.bibliography_errors = [];
        this.tmp.bibliography_pos = 0;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          input = this.registry.getSortedIds();
        } else {
          input = this.refetchItems(this.registry.getSortedIds());
        }
        this.tmp.disambig_override = true;
        function eval_string(a, b) {
          if (a === b) {
            return true;
          }
          return false;
        }
        function eval_list(a, lst) {
          lllen = lst.length;
          for (pppos = 0; pppos < lllen; pppos += 1) {
            if (eval_string(a, lst[pppos])) {
              return true;
            }
          }
          return false;
        }
        function eval_spec(a, b) {
          if (typeof a === "boolean" || !a) {
            if (a) {
              return !!b;
            } else {
              return !b;
            }
          } else {
            if (typeof b === "string") {
              return eval_string(a, b);
            } else if (!b) {
              return false;
            } else {
              return eval_list(a, b);
            }
          }
        }
        skips = {};
        var page_item_count;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          page_item_count = 0;
          if (bibsection.page_start !== true) {
            for (i = 0, ilen = input.length; i < ilen; i += 1) {
              skips[input[i]] = true;
              if (bibsection.page_start == input[i]) {
                break;
              }
            }
          }
        }
        var processed_item_ids = [];
        var consolidatedIDs = {};
        this.tmp.container_item_count = {};
        input = input.filter((o) => {
          var ret2 = o;
          if (o.legislation_id) {
            if (consolidatedIDs[o.legislation_id]) {
              ret2 = false;
            } else {
              consolidatedIDs[o.legislation_id] = true;
            }
          } else if (o.container_id) {
            if (!this.tmp.container_item_count[o.container_id]) {
              this.tmp.container_item_count[o.container_id] = 0;
            }
            this.tmp.container_item_count[o.container_id]++;
            if (this.bibliography.opt.consolidate_containers.indexOf(o.type) > -1) {
              if (consolidatedIDs[o.container_id]) {
                ret2 = false;
              } else {
                consolidatedIDs[o.container_id] = true;
              }
            }
          }
          return ret2;
        });
        this.tmp.container_item_pos = {};
        for (i = 0, ilen = input.length; i < ilen; i += 1) {
          if (bibsection && bibsection.page_start && bibsection.page_length) {
            if (skips[input[i]]) {
              continue;
            }
            item = this.refetchItem(input[i]);
            if (page_item_count === bibsection.page_length) {
              break;
            }
          } else {
            item = input[i];
            if (skips[item.id]) {
              continue;
            }
          }
          if (bibsection) {
            include = true;
            if (bibsection.include) {
              include = false;
              for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {
                spec = bibsection.include[j];
                if (eval_spec(spec.value, item[spec.field])) {
                  include = true;
                  break;
                }
              }
            } else if (bibsection.exclude) {
              anymatch = false;
              for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {
                spec = bibsection.exclude[j];
                if (eval_spec(spec.value, item[spec.field])) {
                  anymatch = true;
                  break;
                }
              }
              if (anymatch) {
                include = false;
              }
            } else if (bibsection.select) {
              include = false;
              allmatch = true;
              for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {
                spec = bibsection.select[j];
                if (!eval_spec(spec.value, item[spec.field])) {
                  allmatch = false;
                }
              }
              if (allmatch) {
                include = true;
              }
            }
            if (bibsection.quash) {
              allmatch = true;
              for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {
                spec = bibsection.quash[j];
                if (!eval_spec(spec.value, item[spec.field])) {
                  allmatch = false;
                }
              }
              if (allmatch) {
                include = false;
              }
            }
            if (!include) {
              continue;
            }
          }
          if (debug) {
            CSL4.debug("BIB: " + item.id);
          }
          if (item.container_id) {
            if (!this.tmp.container_item_pos[item.container_id]) {
              this.tmp.container_item_pos[item.container_id] = 0;
            }
            this.tmp.container_item_pos[item.container_id]++;
          }
          bib_entry = new CSL4.Token("group", CSL4.START);
          bib_entry.decorations = [["@bibliography", "entry"]].concat(this.bibliography.opt.layout_decorations);
          this.output.startTag("bib_entry", bib_entry);
          if (item.system_id && this.sys.embedBibliographyEntry) {
            this.output.current.value().item_id = item.system_id;
          } else {
            this.output.current.value().system_id = item.id;
          }
          entry_item_ids = [];
          if (this.registry.registry[item.id].master && !(bibsection && bibsection.page_start && bibsection.page_length)) {
            sortedItems = [[item, { id: item.id }]];
            siblings = this.registry.registry[item.id].siblings;
            for (var j = 0, jlen = siblings.length; j < jlen; j++) {
              sortedItems.push([this.refetchItem(siblings[j]), { id: siblings[j] }]);
            }
            this.parallel.StartCitation(sortedItems);
            if (this.registry.registry[item.id].parallel_delimiter_override) {
              this.output.queue[0].strings.delimiter = this.registry.registry[item.id].parallel_delimiter_override;
            } else {
              this.output.queue[0].strings.delimiter = ", ";
            }
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            for (j = 0, jlen = sortedItems.length; j < jlen; j += 1) {
              if (j < sortedItems.length - 1) {
                this.tmp.parallel_and_not_last = true;
              } else {
                delete this.tmp.parallel_and_not_last;
              }
              entry_item_ids.push("" + CSL4.getCite.call(this, sortedItems[j][0], sortedItems[j][1]));
              this.tmp.cite_index++;
              skips[sortedItems[j][0].id] = true;
            }
          } else if (!this.registry.registry[item.id].siblings) {
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            entry_item_ids.push("" + CSL4.getCite.call(this, item));
            if (bibsection && bibsection.page_start && bibsection.page_length) {
              page_item_count += 1;
            }
          }
          entry_item_data.push("");
          this.tmp.bibliography_pos += 1;
          processed_item_ids.push(entry_item_ids);
          this.output.endTag("bib_entry");
          if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {
            if (!this.output.queue[0].blobs[0].blobs[0].strings) {
              topblobs = this.output.queue[0].blobs;
            } else {
              topblobs = this.output.queue[0].blobs[0].blobs;
            }
            topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;
          }
          for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            CSL4.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);
          }
          for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j], true);
            this.output.adjust.fix(this.output.queue[j]);
          }
          res = this.output.string(this, this.output.queue)[0];
          if (!res && this.opt.update_mode === CSL4.NUMERIC) {
            var err = ret.length + 1 + ". [CSL STYLE ERROR: reference with no printed form.]";
            res = CSL4.Output.Formats[this.opt.mode]["@bibliography/entry"](this, err);
          }
          if (res) {
            ret.push(res);
          }
        }
        var done = false;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          var last_expected_id = input.slice(-1)[0];
          var last_seen_id = processed_item_ids.slice(-1)[0];
          if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {
            done = true;
          }
        }
        this.tmp.disambig_override = false;
        return [processed_item_ids, ret, done];
      };
      CSL4.Engine.prototype.setCitationId = function(citation, force) {
        var ret, id2, direction;
        ret = false;
        if (!citation.citationID || force) {
          id2 = Math.floor(Math.random() * 1e14);
          while (true) {
            direction = 0;
            if (!this.registry.citationreg.citationById[id2]) {
              citation.citationID = "a" + id2.toString(32);
              break;
            } else if (!direction && id2 < 5e13) {
              direction = 1;
            } else {
              direction = -1;
            }
            if (direction === 1) {
              id2 += 1;
            } else {
              id2 += -1;
            }
          }
          ret = "" + id2;
        }
        this.registry.citationreg.citationById[citation.citationID] = citation;
        return ret;
      };
      CSL4.Engine.prototype.rebuildProcessorState = function(citations, mode, uncitedItemIDs) {
        if (!citations) {
          citations = [];
        }
        if (!mode) {
          mode = "html";
        }
        var doneIDs = {};
        var itemIDs = [];
        for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
          for (var j = 0, jlen = citations[i].citationItems.length; j < jlen; j += 1) {
            var itemID = "" + citations[i].citationItems[j].id;
            if (!doneIDs[itemID]) {
              itemIDs.push(itemID);
            }
            doneIDs[itemID] = true;
          }
        }
        this.updateItems(itemIDs);
        var pre = [];
        var post = [];
        var ret = [];
        var oldMode = this.opt.mode;
        this.setOutputFormat(mode);
        for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
          var res = this.processCitationCluster(citations[i], pre, post, CSL4.ASSUME_ALL_ITEMS_REGISTERED);
          pre.push([citations[i].citationID, citations[i].properties.noteIndex]);
          for (var j = 0, jlen = res[1].length; j < jlen; j += 1) {
            var index = res[1][j][0];
            ret[index] = [
              pre[index][0],
              pre[index][1],
              res[1][j][1]
            ];
          }
        }
        this.updateUncitedItems(uncitedItemIDs);
        this.setOutputFormat(oldMode);
        return ret;
      };
      CSL4.Engine.prototype.restoreProcessorState = function(citations) {
        var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;
        citationList = [];
        itemList = [];
        if (!citations) {
          citations = [];
        }
        var indexNumbers = [];
        var citationIds = {};
        for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          if (citationIds[citations[i].citationID]) {
            this.setCitationId(citations[i], true);
          }
          citationIds[citations[i].citationID] = true;
          indexNumbers.push(citations[i].properties.index);
        }
        var oldCitations = citations.slice();
        oldCitations.sort(function(a, b) {
          if (a.properties.index < b.properties.index) {
            return -1;
          } else if (a.properties.index > b.properties.index) {
            return 1;
          } else {
            return 0;
          }
        });
        for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          oldCitations[i].properties.index = i;
        }
        for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          sortedItems = [];
          for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {
            item = oldCitations[i].citationItems[j];
            if (typeof item.sortkeys === "undefined") {
              item.sortkeys = [];
            }
            Item = this.retrieveItem("" + item.id);
            newitem = [Item, item];
            sortedItems.push(newitem);
            oldCitations[i].citationItems[j].item = Item;
            itemList.push("" + item.id);
          }
          if (!oldCitations[i].properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
          oldCitations[i].sortedItems = sortedItems;
          this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];
        }
        this.updateItems(itemList);
        for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          citationList.push(["" + citations[i].citationID, citations[i].properties.noteIndex]);
        }
        var ret = [];
        if (citations && citations.length) {
          ret = this.processCitationCluster(citations[0], [], citationList.slice(1));
        } else {
          this.registry = new CSL4.Registry(this);
          this.tmp = new CSL4.Engine.Tmp();
          this.disambiguate = new CSL4.Disambiguation(this);
        }
        return ret;
      };
      CSL4.Engine.prototype.updateItems = function(idList, nosort, rerun_ambigs, implicitUpdate) {
        var debug = false;
        var oldArea = this.tmp.area;
        var oldRoot = this.tmp.root;
        var oldExtension = this.tmp.extension;
        if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        this.tmp.extension = "";
        if (!implicitUpdate) {
          this.tmp.loadedItemIDs = {};
        }
        if (debug) {
          CSL4.debug("--> init <--");
        }
        this.registry.init(idList);
        if (rerun_ambigs) {
          for (var ambig in this.registry.ambigcites) {
            this.registry.ambigsTouched[ambig] = true;
          }
        }
        this.registry.dodeletes(this.registry.myhash);
        this.registry.doinserts(this.registry.mylist);
        this.registry.dorefreshes();
        this.registry.rebuildlist(nosort);
        this.registry.setsortkeys();
        this.registry.setdisambigs();
        this.registry.sorttokens(nosort);
        this.registry.renumber();
        this.tmp.extension = oldExtension;
        this.tmp.area = oldArea;
        this.tmp.root = oldRoot;
        return this.registry.getSortedIds();
      };
      CSL4.Engine.prototype.updateUncitedItems = function(idList, nosort) {
        var idHash;
        var oldArea = this.tmp.area;
        var oldRoot = this.tmp.root;
        var oldExtension = this.tmp.extension;
        if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        this.tmp.extension = "";
        this.tmp.loadedItemIDs = {};
        if (!idList) {
          idList = [];
        }
        if (typeof idList == "object") {
          if (typeof idList.length == "undefined") {
            idHash = idList;
            idList = [];
            for (var key in idHash) {
              idList.push(key);
            }
          } else if (typeof idList.length == "number") {
            idHash = {};
            for (var i = 0, ilen = idList.length; i < ilen; i += 1) {
              idHash[idList[i]] = true;
            }
          }
        }
        this.registry.init(idList, true);
        this.registry.dopurge(idHash);
        this.registry.doinserts(this.registry.mylist);
        this.registry.dorefreshes();
        this.registry.rebuildlist(nosort);
        this.registry.setsortkeys();
        this.registry.setdisambigs();
        this.registry.sorttokens(nosort);
        this.registry.renumber();
        this.tmp.extension = oldExtension;
        this.tmp.area = oldArea;
        this.tmp.root = oldRoot;
        return this.registry.getSortedIds();
      };
      CSL4.localeResolve = function(langstr, defaultLocale) {
        var ret, langlst;
        if (!defaultLocale) {
          defaultLocale = "en-US";
        }
        if (!langstr) {
          langstr = defaultLocale;
        }
        ret = {};
        langlst = langstr.split(/[\-_]/);
        ret.base = CSL4.LANG_BASES[langlst[0]];
        if (typeof ret.base === "undefined") {
          return { base: defaultLocale, best: langstr, bare: langlst[0] };
        }
        if (langlst.length === 1) {
          ret.generic = true;
        }
        if (langlst.length === 1 || langlst[1] === "x") {
          ret.best = ret.base.replace("_", "-");
        } else {
          ret.best = langlst.slice(0, 2).join("-");
        }
        ret.base = ret.base.replace("_", "-");
        ret.bare = langlst[0];
        return ret;
      };
      CSL4.Engine.prototype.localeConfigure = function(langspec, beShy) {
        var localexml;
        if (beShy && this.locale[langspec.best]) {
          return;
        }
        if (langspec.best === "en-US") {
          localexml = CSL4.setupXml(this.sys.retrieveLocale("en-US"));
          this.localeSet(localexml, "en-US", langspec.best);
        } else if (langspec.best !== "en-US") {
          if (langspec.base !== langspec.best) {
            localexml = CSL4.setupXml(this.sys.retrieveLocale(langspec.base));
            this.localeSet(localexml, langspec.base, langspec.best);
          }
          localexml = CSL4.setupXml(this.sys.retrieveLocale(langspec.best));
          this.localeSet(localexml, langspec.best, langspec.best);
        }
        this.localeSet(this.cslXml, "", langspec.best);
        this.localeSet(this.cslXml, langspec.bare, langspec.best);
        if (langspec.base !== langspec.best) {
          this.localeSet(this.cslXml, langspec.base, langspec.best);
        }
        this.localeSet(this.cslXml, langspec.best, langspec.best);
        if (typeof this.locale[langspec.best].terms["page-range-delimiter"] === "undefined") {
          if (["fr", "pt"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {
            this.locale[langspec.best].terms["page-range-delimiter"] = "-";
          } else {
            this.locale[langspec.best].terms["page-range-delimiter"] = "\u2013";
          }
        }
        if (typeof this.locale[langspec.best].terms["year-range-delimiter"] === "undefined") {
          this.locale[langspec.best].terms["year-range-delimiter"] = "\u2013";
        }
        if (typeof this.locale[langspec.best].terms["citation-range-delimiter"] === "undefined") {
          this.locale[langspec.best].terms["citation-range-delimiter"] = "\u2013";
        }
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          var localeLists = ["default-locale", "locale-sort", "locale-translit", "locale-translat"];
          for (var i = 0, ilen = localeLists.length; i < ilen; i += 1) {
            for (var j = 0, jlen = this.opt[localeLists[i]].length; j < jlen; j += 1) {
              this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();
            }
          }
          this.opt.lang = this.opt.lang.toLowerCase();
        }
      };
      CSL4.Engine.prototype.localeSet = function(myxml, lang_in, lang_out) {
        var blob, locale, nodes, attributes, pos, term, form, termname, styleopts, date2, attrname, len, genderform, target, i, ilen;
        lang_in = lang_in.replace("_", "-");
        lang_out = lang_out.replace("_", "-");
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          lang_in = lang_in.toLowerCase();
          lang_out = lang_out.toLowerCase();
        }
        if (!this.locale[lang_out]) {
          this.locale[lang_out] = {};
          this.locale[lang_out].terms = {};
          this.locale[lang_out].opts = {};
          this.locale[lang_out].opts["skip-words"] = CSL4.SKIP_WORDS;
          if (!this.locale[lang_out].opts["leading-noise-words"]) {
            this.locale[lang_out].opts["leading-noise-words"] = [];
          }
          this.locale[lang_out].dates = {};
          this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
          this.locale[lang_out]["noun-genders"] = {};
        }
        locale = myxml.makeXml();
        if (myxml.nodeNameIs(myxml.dataObj, "locale")) {
          locale = myxml.dataObj;
        } else {
          nodes = myxml.getNodesByName(myxml.dataObj, "locale");
          var foundLocale = false;
          for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            blob = nodes[pos];
            if (!foundLocale && myxml.getAttributeValue(blob, "lang", "xml") === lang_in) {
              locale = blob;
              foundLocale = true;
            } else {
              var lang = myxml.getAttributeValue(blob, "lang", "xml");
              var style_options = myxml.getNodesByName(blob, "style-options");
              if (lang && style_options && style_options.length) {
                var jurispref = myxml.getAttributeValue(style_options[0], "jurisdiction-preference");
                if (jurispref) {
                  if (!this.locale[lang]) {
                    this.locale[lang] = {
                      opts: {}
                    };
                  }
                  this.locale[lang].opts["jurisdiction-preference"] = jurispref.split(/\s+/);
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "type");
        for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {
          var typenode = nodes[i];
          var type2 = myxml.getAttributeValue(typenode, "name");
          var gender = myxml.getAttributeValue(typenode, "gender");
          this.opt.gender[type2] = gender;
        }
        var hasCslOrdinals101 = myxml.getNodesByName(locale, "term", "ordinal").length;
        if (hasCslOrdinals101) {
          for (var key in this.locale[lang_out].ord.keys) {
            delete this.locale[lang_out].terms[key];
          }
          this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
        }
        nodes = myxml.getNodesByName(locale, "term");
        var ordinals101 = { "last-digit": {}, "last-two-digits": {}, "whole-number": {} };
        var ordinals101_toggle = false;
        var genderized_terms = {};
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          term = nodes[pos];
          termname = myxml.getAttributeValue(term, "name");
          if (termname === "sub verbo") {
            termname = "sub-verbo";
          }
          if (termname.slice(0, 7) === "ordinal") {
            if (termname === "ordinal") {
              ordinals101_toggle = true;
            } else {
              var match = myxml.getAttributeValue(term, "match");
              var termstub = termname.slice(8);
              var genderform = myxml.getAttributeValue(term, "gender-form");
              if (!genderform) {
                genderform = "neuter";
              }
              if (!match) {
                match = "last-two-digits";
                if (termstub.slice(0, 1) === "0") {
                  match = "last-digit";
                }
              }
              if (termstub.slice(0, 1) === "0") {
                termstub = termstub.slice(1);
              }
              if (!ordinals101[match][termstub]) {
                ordinals101[match][termstub] = {};
              }
              ordinals101[match][termstub][genderform] = termname;
            }
            this.locale[lang_out].ord.keys[termname] = true;
          }
          if (typeof this.locale[lang_out].terms[termname] === "undefined") {
            this.locale[lang_out].terms[termname] = {};
          }
          form = "long";
          genderform = false;
          if (myxml.getAttributeValue(term, "form")) {
            form = myxml.getAttributeValue(term, "form");
          }
          if (myxml.getAttributeValue(term, "gender-form")) {
            genderform = myxml.getAttributeValue(term, "gender-form");
          }
          if (myxml.getAttributeValue(term, "gender")) {
            this.locale[lang_out]["noun-genders"][termname] = myxml.getAttributeValue(term, "gender");
          }
          if (genderform) {
            this.locale[lang_out].terms[termname][genderform] = {};
            this.locale[lang_out].terms[termname][genderform][form] = [];
            target = this.locale[lang_out].terms[termname][genderform];
            genderized_terms[termname] = true;
          } else {
            this.locale[lang_out].terms[termname][form] = [];
            target = this.locale[lang_out].terms[termname];
          }
          if (myxml.numberofnodes(myxml.getNodesByName(term, "multiple"))) {
            target[form][0] = myxml.getNodeValue(term, "single");
            if (target[form][0].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
            target[form][1] = myxml.getNodeValue(term, "multiple");
            if (target[form][1].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
          } else {
            target[form] = myxml.getNodeValue(term);
            if (target[form].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
          }
        }
        if (!this.locale[lang_out].terms.supplement) {
          this.locale[lang_out].terms.supplement = {};
        }
        if (!this.locale[lang_out].terms.supplement["long"]) {
          this.locale[lang_out].terms.supplement["long"] = ["supplement", "supplements"];
        }
        if (ordinals101_toggle) {
          for (var ikey in genderized_terms) {
            var gender_segments = {};
            var form_segments = 0;
            for (var jkey in this.locale[lang_out].terms[ikey]) {
              if (["masculine", "feminine"].indexOf(jkey) > -1) {
                gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];
              } else {
                form_segments += 1;
              }
            }
            if (!form_segments) {
              if (gender_segments.feminine) {
                for (var jkey in gender_segments.feminine) {
                  this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];
                }
              } else if (gender_segments.masculine) {
                for (var jkey in gender_segments.masculine) {
                  this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];
                }
              }
            }
          }
          this.locale[lang_out].ord["1.0.1"] = ordinals101;
        }
        for (termname in this.locale[lang_out].terms) {
          for (i = 0, ilen = 2; i < ilen; i += 1) {
            genderform = CSL4.GENDERS[i];
            if (this.locale[lang_out].terms[termname][genderform]) {
              for (form in this.locale[lang_out].terms[termname]) {
                if (!this.locale[lang_out].terms[termname][genderform][form]) {
                  this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "style-options");
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
            styleopts = nodes[pos];
            attributes = myxml.attributes(styleopts);
            for (attrname in attributes) {
              if (attributes.hasOwnProperty(attrname)) {
                if (attrname === "@punctuation-in-quote" || attrname === "@limit-day-ordinals-to-day-1") {
                  if (attributes[attrname] === "true") {
                    this.locale[lang_out].opts[attrname.slice(1)] = true;
                  } else {
                    this.locale[lang_out].opts[attrname.slice(1)] = false;
                  }
                } else if (attrname === "@jurisdiction-preference") {
                  var jurisdiction_preference = attributes[attrname].split(/\s+/);
                  this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;
                } else if (attrname === "@skip-words") {
                  var skip_words = attributes[attrname].split(/\s*,\s*/);
                  this.locale[lang_out].opts[attrname.slice(1)] = skip_words;
                } else if (attrname === "@leading-noise-words") {
                  var val = attributes[attrname].split(/\s*,\s*/);
                  this.locale[lang_out].opts["leading-noise-words"] = val;
                } else if (attrname === "@name-as-sort-order") {
                  this.locale[lang_out].opts["name-as-sort-order"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-as-sort-order"][lst[i]] = true;
                  }
                } else if (attrname === "@name-as-reverse-order") {
                  this.locale[lang_out].opts["name-as-reverse-order"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-as-reverse-order"][lst[i]] = true;
                  }
                } else if (attrname === "@name-never-short") {
                  this.locale[lang_out].opts["name-never-short"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-never-short"][lst[i]] = true;
                  }
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "date");
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
            var date2 = nodes[pos];
            this.locale[lang_out].dates[myxml.getAttributeValue(date2, "form")] = date2;
          }
        }
        CSL4.SET_COURT_CLASSES(this, lang_out, myxml, locale);
      };
      CSL4.getLocaleNames = function(myxml, preferredLocale) {
        var stylexml = CSL4.setupXml(myxml);
        function extendLocaleList(localeList, locale) {
          var forms = ["base", "best"];
          if (locale) {
            var normalizedLocale = CSL4.localeResolve(locale);
            for (var i2 = 0, ilen2 = forms.length; i2 < ilen2; i2++) {
              if (normalizedLocale[forms[i2]] && localeList.indexOf(normalizedLocale[forms[i2]]) === -1) {
                localeList.push(normalizedLocale[forms[i2]]);
              }
            }
          }
        }
        var localeIDs = ["en-US"];
        function sniffLocaleOnOneNodeName(nodeName) {
          var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);
          for (var i2 = 0, ilen2 = nodes.length; i2 < ilen2; i2++) {
            var nodeLocales = stylexml.getAttributeValue(nodes[i2], "locale");
            if (nodeLocales) {
              nodeLocales = nodeLocales.split(/ +/);
              for (var j = 0, jlen = nodeLocales.length; j < jlen; j++) {
                this.extendLocaleList(localeIDs, nodeLocales[j]);
              }
            }
          }
        }
        extendLocaleList(localeIDs, preferredLocale);
        var styleNode = stylexml.getNodesByName(stylexml.dataObj, "style")[0];
        var defaultLocale = stylexml.getAttributeValue(styleNode, "default-locale");
        extendLocaleList(localeIDs, defaultLocale);
        var nodeNames = ["layout", "if", "else-if", "condition"];
        for (var i = 0, ilen = nodeNames.length; i < ilen; i++) {
          sniffLocaleOnOneNodeName(stylexml, localeIDs, nodeNames[i]);
        }
        return localeIDs;
      };
      CSL4.Node = {};
      CSL4.Node.bibliography = {
        build: function(state, target) {
          if (this.tokentype === CSL4.START) {
            state.build.area = "bibliography";
            state.build.root = "bibliography";
            state.build.extension = "";
            var func = function(state2) {
              state2.tmp.area = "bibliography";
              state2.tmp.root = "bibliography";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL4.Node.choose = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL4.START) {
            func = function(state2) {
              state2.tmp.jump.push(void 0, CSL4.LITERAL);
            };
          }
          if (this.tokentype === CSL4.END) {
            func = function(state2) {
              state2.tmp.jump.pop();
            };
          }
          this.execs.push(func);
          target.push(this);
        },
        configure: function(state, pos) {
          if (this.tokentype === CSL4.END) {
            state.configure.fail.push(pos);
            state.configure.succeed.push(pos);
          } else {
            state.configure.fail.pop();
            state.configure.succeed.pop();
          }
        }
      };
      CSL4.Node.citation = {
        build: function(state, target) {
          if (this.tokentype === CSL4.START) {
            state.build.area = "citation";
            state.build.root = "citation";
            state.build.extension = "";
            var func = function(state2) {
              state2.tmp.area = "citation";
              state2.tmp.root = "citation";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL4.END) {
            state.opt.grouped_sort = state.opt.xclass === "in-text" && (state.citation.opt.collapse && state.citation.opt.collapse.length) || state.citation.opt.cite_group_delimiter && state.citation.opt.cite_group_delimiter.length && state.opt.update_mode !== CSL4.POSITION && state.opt.update_mode !== CSL4.NUMERIC;
            if (state.opt.grouped_sort && state.citation_sort.opt.sort_directions.length) {
              var firstkey = state.citation_sort.opt.sort_directions[0].slice();
              state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);
            }
            state.citation.srt = new CSL4.Registry.Comparifier(state, "citation_sort");
          }
          target.push(this);
        }
      };
      CSL4.Node["#comment"] = {
        build: function() {
        }
      };
      CSL4.Node.date = {
        build: function(state, target) {
          var func, date_obj, len, pos, part, dpx, parts, mypos, start, end;
          if (this.tokentype === CSL4.START || this.tokentype === CSL4.SINGLETON) {
            state.dateput.string(state, state.dateput.queue);
            state.tmp.date_token = CSL4.Util.cloneToken(this);
            state.tmp.date_token.strings.prefix = "";
            state.tmp.date_token.strings.suffix = "";
            state.dateput.openLevel(this);
            state.build.date_parts = [];
            state.build.date_variables = this.variables;
            if (!state.build.extension) {
              CSL4.Util.substituteStart.call(this, state, target);
            }
            if (state.build.extension) {
              func = CSL4.dateMacroAsSortKey;
            } else {
              func = function(state2, Item, item) {
                var dp;
                state2.tmp.element_rendered_ok = false;
                state2.tmp.donesies = [];
                state2.tmp.dateparts = [];
                dp = [];
                if (this.variables.length && !(state2.tmp.just_looking && this.variables[0] === "accessed")) {
                  date_obj = Item[this.variables[0]];
                  if (typeof date_obj === "undefined") {
                    date_obj = { "date-parts": [[0]] };
                    if (state2.opt.development_extensions.locator_date_and_revision) {
                      if (item && this.variables[0] === "locator-date" && item["locator-date"]) {
                        date_obj = item["locator-date"];
                      }
                    }
                  }
                  state2.tmp.date_object = date_obj;
                  len = this.dateparts.length;
                  for (pos = 0; pos < len; pos += 1) {
                    part = this.dateparts[pos];
                    if (typeof state2.tmp.date_object[part + "_end"] !== "undefined") {
                      dp.push(part);
                    } else if (part === "month" && typeof state2.tmp.date_object.season_end !== "undefined") {
                      dp.push(part);
                    }
                  }
                  dpx = [];
                  parts = ["year", "month", "day"];
                  len = parts.length;
                  for (pos = 0; pos < len; pos += 1) {
                    if (dp.indexOf(parts[pos]) > -1) {
                      dpx.push(parts[pos]);
                    }
                  }
                  dp = dpx.slice();
                  mypos = 2;
                  len = dp.length;
                  for (pos = 0; pos < len; pos += 1) {
                    part = dp[pos];
                    start = state2.tmp.date_object[part];
                    end = state2.tmp.date_object[part + "_end"];
                    if (start !== end) {
                      mypos = pos;
                      break;
                    }
                  }
                  state2.tmp.date_collapse_at = dp.slice(mypos);
                } else {
                  state2.tmp.date_object = false;
                }
              };
            }
            this.execs.push(func);
            func = function(state2, Item) {
              if (!Item[this.variables[0]]) {
                return;
              }
              state2.output.startTag("date", this);
              if (this.variables[0] === "issued" && (Item.type === "legal_case" || Item.type === "legislation") && state2.opt.disable_duplicate_year_suppression.indexOf(Item.country) === -1 && !state2.tmp.extension && "" + Item["collection-number"] === "" + state2.tmp.date_object.year && this.dateparts.length === 1 && this.dateparts[0] === "year") {
                for (var key in state2.tmp.date_object) {
                  if (state2.tmp.date_object.hasOwnProperty(key)) {
                    if (key.slice(0, 4) === "year") {
                      state2.tmp.issued_date = {};
                      var lst = state2.output.current.mystack.slice(-2)[0].blobs;
                      state2.tmp.issued_date.list = lst;
                      state2.tmp.issued_date.pos = lst.length - 1;
                    }
                  }
                }
              }
            };
            this.execs.push(func);
          }
          if (!state.build.extension && (this.tokentype === CSL4.END || this.tokentype === CSL4.SINGLETON)) {
            func = function(state2, Item) {
              if (!Item[this.variables[0]]) {
                return;
              }
              state2.output.endTag();
            };
            this.execs.push(func);
          }
          target.push(this);
          if (this.tokentype === CSL4.END || this.tokentype === CSL4.SINGLETON) {
            if (!state.build.extension) {
              CSL4.Util.substituteEnd.call(this, state, target);
            }
          }
        }
      };
      CSL4.Node["date-part"] = {
        build: function(state, target) {
          var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number2, num, formatter, item;
          if (!this.strings.form) {
            this.strings.form = "long";
          }
          state.build.date_parts.push(this.strings.name);
          var date_variable = state.build.date_variables[0];
          function formatAndStrip(myform, gender, val) {
            if (!val) {
              return val;
            }
            val = "" + CSL4.Util.Dates[this.strings.name][myform](state, val, gender, this.default_locale);
            if (this.strings.name === "month") {
              if (state.tmp.strip_periods) {
                val = val.replace(/\./g, "");
              } else {
                for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                  if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                    val = val.replace(/\./g, "");
                    break;
                  }
                }
              }
            }
            return val;
          }
          func = function(state2, Item) {
            if (!state2.tmp.date_object) {
              return;
            } else {
              state2.tmp.probably_rendered_something = true;
            }
            var last_string_output = "";
            first_date = true;
            value = "";
            value_end = "";
            state2.tmp.donesies.push(this.strings.name);
            if (state2.tmp.date_object.literal && this.strings.name === "year") {
              last_string_output = state2.tmp.date_object.literal;
              state2.output.append(state2.tmp.date_object.literal, this);
            }
            if (state2.tmp.date_object) {
              value = state2.tmp.date_object[this.strings.name];
              value_end = state2.tmp.date_object[this.strings.name + "_end"];
            }
            if (this.strings.name === "year" && value === 0 && !state2.tmp.suppress_decorations) {
              value = false;
            }
            real = !state2.tmp.suppress_decorations;
            have_collapsed = state2.tmp.have_collapsed;
            invoked = state2[state2.tmp.area].opt.collapse === "year-suffix" || state2[state2.tmp.area].opt.collapse === "year-suffix-ranged";
            precondition = state2.opt["disambiguate-add-year-suffix"];
            if (real && precondition && invoked) {
              state2.tmp.years_used.push(value);
              known_year = state2.tmp.last_years_used.length >= state2.tmp.years_used.length;
              if (known_year && have_collapsed) {
                if (state2.tmp.last_years_used[state2.tmp.years_used.length - 1] === value) {
                  value = false;
                }
              }
            }
            if (typeof value !== "undefined") {
              bc = false;
              ad = false;
              bc_end = false;
              ad_end = false;
              if (this.strings.name === "year") {
                if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {
                  ad = state2.getTerm("ad");
                }
                if (parseInt(value, 10) < 0) {
                  bc = state2.getTerm("bc");
                  value = parseInt(value, 10) * -1;
                }
                if (value_end) {
                  if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {
                    ad_end = state2.getTerm("ad");
                  }
                  if (parseInt(value_end, 10) < 0) {
                    bc_end = state2.getTerm("bc");
                    value_end = parseInt(value_end, 10) * -1;
                  }
                }
              }
              var monthnameid = "" + state2.tmp.date_object.month;
              while (monthnameid.length < 2) {
                monthnameid = "0" + monthnameid;
              }
              monthnameid = "month-" + monthnameid;
              var gender = state2.locale[state2.opt.lang]["noun-genders"][monthnameid];
              if (this.strings.form) {
                var myform = this.strings.form;
                var myform_end = this.strings.form;
                if (this.strings.name === "day") {
                  if (myform === "ordinal" && state2.locale[state2.opt.lang].opts["limit-day-ordinals-to-day-1"]) {
                    if (value != 1) {
                      myform = "numeric";
                    }
                    if (value_end != 1) {
                      myform_end = "numeric";
                    }
                  }
                }
                value = formatAndStrip.call(this, myform, gender, value);
                value_end = formatAndStrip.call(this, myform_end, gender, value_end);
              }
              state2.output.openLevel("empty");
              if (state2.tmp.date_collapse_at.length) {
                ready = true;
                len = state2.tmp.date_collapse_at.length;
                for (pos = 0; pos < len; pos += 1) {
                  item = state2.tmp.date_collapse_at[pos];
                  if (state2.tmp.donesies.indexOf(item) === -1) {
                    ready = false;
                    break;
                  }
                }
                if (ready) {
                  if ("" + value_end !== "0") {
                    if (state2.dateput.queue.length === 0) {
                      first_date = true;
                    }
                    if (state2.opt["year-range-format"] && state2.opt["year-range-format"] !== "expanded" && !state2.tmp.date_object.day && !state2.tmp.date_object.month && !state2.tmp.date_object.season && this.strings.name === "year" && value && value_end) {
                      value_end = state2.fun.year_mangler(value + "-" + value_end, true);
                      var range_delimiter = state2.getTerm("year-range-delimiter");
                      value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);
                    }
                    last_string_output = value_end;
                    state2.dateput.append(value_end, this);
                    if (first_date) {
                      state2.dateput.current.value().blobs[0].strings.prefix = "";
                    }
                  }
                  last_string_output = value;
                  state2.output.append(value, this);
                  curr = state2.output.current.value();
                  curr.blobs[curr.blobs.length - 1].strings.suffix = "";
                  if (this.strings["range-delimiter"]) {
                    state2.output.append(this.strings["range-delimiter"]);
                  } else {
                    state2.output.append(state2.getTerm("year-range-delimiter"), "empty");
                  }
                  state2.dateput.closeLevel();
                  dcurr = state2.dateput.current.value();
                  curr.blobs = curr.blobs.concat(dcurr);
                  state2.dateput.string(state2, state2.dateput.queue);
                  state2.dateput.openLevel(state2.tmp.date_token);
                  state2.tmp.date_collapse_at = [];
                } else {
                  last_string_output = value;
                  state2.output.append(value, this);
                  if (state2.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {
                    if ("" + value_end !== "0") {
                      if (state2.dateput.queue.length === 0) {
                        first_date = true;
                      }
                      state2.dateput.openLevel("empty");
                      last_string_output = value_end;
                      state2.dateput.append(value_end, this);
                      if (first_date) {
                        state2.dateput.current.value().blobs[0].strings.prefix = "";
                      }
                      if (bc) {
                        last_string_output = bc;
                        state2.dateput.append(bc);
                      }
                      if (ad) {
                        last_string_output = ad;
                        state2.dateput.append(ad);
                      }
                      state2.dateput.closeLevel();
                    }
                  }
                }
              } else {
                last_string_output = value;
                state2.output.append(value, this);
              }
              if (bc) {
                last_string_output = bc;
                state2.output.append(bc);
              }
              if (ad) {
                last_string_output = ad;
                state2.output.append(ad);
              }
              state2.output.closeLevel();
            } else if (this.strings.name === "month") {
              if (state2.tmp.date_object.season) {
                value = "" + state2.tmp.date_object.season;
                if (value && value.match(/^[1-4]$/)) {
                  state2.tmp.group_context.tip.variable_success = true;
                  last_string_output = "winter";
                  state2.output.append(state2.getTerm("season-0" + value), this);
                } else if (value) {
                  last_string_output = value;
                  state2.output.append(value, this);
                }
              }
            }
            state2.tmp.value = [];
            if (Item[date_variable] && (value || state2.tmp.have_collapsed) && !state2.opt.has_year_suffix && this.strings.name === "year" && !state2.tmp.just_looking) {
              if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.has_done_year_suffix) {
                state2.tmp.has_done_year_suffix = true;
                last_string_output = "x";
                num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                number2 = new CSL4.NumericBlob(false, num, this, Item.id);
                this.successor_prefix = state2[state2.build.area].opt.layout_delimiter;
                this.splice_prefix = state2[state2.build.area].opt.layout_delimiter;
                formatter = new CSL4.Util.Suffixator(CSL4.SUFFIX_CHARS);
                number2.setFormatter(formatter);
                if (state2[state2.tmp.area].opt.collapse === "year-suffix-ranged") {
                  number2.range_prefix = state2.getTerm("citation-range-delimiter");
                }
                if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                  number2.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                } else if (state2[state2.tmp.area].opt["year-suffix-delimiter"]) {
                  number2.successor_prefix = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                } else {
                  number2.successor_prefix = state2[state2.tmp.area].opt.layout_delimiter;
                }
                number2.UGLY_DELIMITER_SUPPRESS_HACK = true;
                state2.output.append(number2, "literal");
              }
            }
            if (last_string_output && !state2.tmp.group_context.tip.condition) {
              state2.tmp.just_did_number = last_string_output.match(/[0-9]$/);
              if (state2.output.current.tip.strings.suffix) {
                state2.tmp.just_did_number = false;
              }
            }
          };
          this.execs.push(func);
          target.push(this);
        }
      };
      CSL4.Node["else-if"] = {
        build: function(state, target) {
          CSL4.Conditions.TopNode.call(this, state, target);
          target.push(this);
        },
        configure: function(state, pos) {
          CSL4.Conditions.Configure.call(this, state, pos);
        }
      };
      CSL4.Node["else"] = {
        build: function(state, target) {
          target.push(this);
        },
        configure: function(state, pos) {
          if (this.tokentype === CSL4.START) {
            state.configure.fail[state.configure.fail.length - 1] = pos;
          }
        }
      };
      CSL4.Node["et-al"] = {
        build: function(state, target) {
          if (state.build.area === "citation" || state.build.area === "bibliography") {
            var func = function(state2) {
              state2.tmp.etal_node = this;
              if (typeof this.strings.term === "string") {
                state2.tmp.etal_term = this.strings.term;
              }
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL4.Node.group = {
        build: function(state, target, realGroup) {
          var func, execs;
          this.realGroup = realGroup;
          if (this.tokentype === CSL4.START) {
            CSL4.Util.substituteStart.call(this, state, target);
            if (state.build.substitute_level.value()) {
              state.build.substitute_level.replace(state.build.substitute_level.value() + 1);
            }
            if (!this.juris) {
              target.push(this);
            }
            func = function(state2) {
              state2.output.startTag("group", this);
              if (this.strings.label_form_override) {
                if (!state2.tmp.group_context.tip.label_form) {
                  state2.tmp.group_context.tip.label_form = this.strings.label_form_override;
                }
              }
              if (this.strings.label_capitalize_if_first_override) {
                if (!state2.tmp.group_context.tip.label_capitalize_if_first) {
                  state2.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;
                }
              }
              if (this.realGroup) {
                if (state2.tmp.group_context.tip.condition) {
                  CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.prefix, null, this);
                }
                var condition = false;
                var force_suppress = false;
                if (state2.tmp.group_context.mystack.length) {
                  state2.output.current.value().parent = state2.tmp.group_context.tip.output_tip;
                }
                var label_form = state2.tmp.group_context.tip.label_form;
                if (!label_form) {
                  label_form = this.strings.label_form_override;
                }
                var label_capitalize_if_first = state2.tmp.group_context.tip.label_capitalize_if_first;
                if (!label_capitalize_if_first) {
                  label_capitalize_if_first = this.strings.label_capitalize_if_first;
                }
                if (state2.tmp.group_context.tip.condition) {
                  condition = state2.tmp.group_context.tip.condition;
                  force_suppress = state2.tmp.group_context.tip.force_suppress;
                } else if (this.strings.reject) {
                  condition = {
                    test: this.strings.reject,
                    not: true
                  };
                } else if (this.strings.require) {
                  condition = {
                    test: this.strings.require,
                    not: false
                  };
                }
                var context = {
                  old_term_predecessor: state2.tmp.term_predecessor,
                  term_intended: false,
                  variable_attempt: false,
                  variable_success: false,
                  variable_success_parent: state2.tmp.group_context.tip.variable_success,
                  output_tip: state2.output.current.tip,
                  label_form,
                  label_static: state2.tmp.group_context.tip.label_static,
                  label_capitalize_if_first,
                  parallel_delimiter_override: this.strings.set_parallel_delimiter_override,
                  parallel_delimiter_override_on_suppress: this.strings.set_parallel_delimiter_override_on_suppress,
                  condition,
                  force_suppress,
                  done_vars: state2.tmp.group_context.tip.done_vars.slice()
                };
                if (this.non_parallel) {
                  var non_parallel = state2.tmp.group_context.tip.non_parallel;
                  if (!non_parallel) {
                    non_parallel = {};
                  }
                  Object.assign(non_parallel, this.non_parallel);
                  context.non_parallel = non_parallel;
                }
                if (this.parallel_first) {
                  var parallel_first = state2.tmp.group_context.tip.parallel_first;
                  if (!parallel_first) {
                    parallel_first = {};
                  }
                  Object.assign(parallel_first, this.parallel_first);
                  context.parallel_first = parallel_first;
                }
                if (this.parallel_last) {
                  var parallel_last = state2.tmp.group_context.tip.parallel_last;
                  if (!parallel_last) {
                    parallel_last = {};
                  }
                  Object.assign(parallel_last, this.parallel_last);
                  context.parallel_last = parallel_last;
                }
                if (state2.tmp.abbrev_trimmer && state2.tmp.abbrev_trimmer.LAST_TO_FIRST && context.parallel_last) {
                  if (!context.parallel_first) {
                    context.parallel_first = {};
                  }
                  for (var varname in state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                    if (context.parallel_last[varname]) {
                      context.parallel_first[varname] = true;
                      delete context.parallel_last[varname];
                    }
                  }
                }
                state2.tmp.group_context.push(context);
                if (state2.tmp.abbrev_trimmer && this.parallel_last_to_first) {
                  if (!state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                    state2.tmp.abbrev_trimmer.LAST_TO_FIRST = {};
                  }
                  for (var varname in this.parallel_last_to_first) {
                    state2.tmp.abbrev_trimmer.LAST_TO_FIRST[varname] = true;
                  }
                }
              }
            };
            execs = [];
            execs.push(func);
            this.execs = execs.concat(this.execs);
            if (this.strings["has-publisher-and-publisher-place"]) {
              state.build["publisher-special"] = true;
              if (this.strings["subgroup-delimiter"]) {
                func = function(state2, Item) {
                  if (Item.publisher && Item["publisher-place"]) {
                    var publisher_lst = Item.publisher.split(/;\s*/);
                    var publisher_place_lst = Item["publisher-place"].split(/;\s*/);
                    if (publisher_lst.length > 1 && publisher_lst.length === publisher_place_lst.length) {
                      state2.publisherOutput = new CSL4.PublisherOutput(state2, this);
                      state2.publisherOutput["publisher-list"] = publisher_lst;
                      state2.publisherOutput["publisher-place-list"] = publisher_place_lst;
                    }
                  }
                };
                this.execs.push(func);
              }
            }
            if (this.juris) {
              var choose_start = new CSL4.Token("choose", CSL4.START);
              CSL4.Node.choose.build.call(choose_start, state, target);
              var if_start = new CSL4.Token("if", CSL4.START);
              func = function(macroName) {
                return function(Item, item) {
                  return CSL4.INIT_JURISDICTION_MACROS(state, Item, item, macroName);
                };
              }(this.juris);
              if_start.tests ? {} : if_start.tests = [];
              if_start.tests.push(func);
              if_start.test = state.fun.match.any(if_start, state, if_start.tests);
              target.push(if_start);
              var text_node = new CSL4.Token("text", CSL4.SINGLETON);
              func = function(state2, Item, item) {
                var itemItem = Item;
                if (item && item["best-jurisdiction"] && this.juris === "juris-locator") {
                  itemItem = item;
                }
                var next = 0;
                if (state2.juris[itemItem["best-jurisdiction"]][this.juris]) {
                  while (next < state2.juris[itemItem["best-jurisdiction"]][this.juris].length) {
                    next = CSL4.tokenExec.call(state2, state2.juris[itemItem["best-jurisdiction"]][this.juris][next], Item, item);
                  }
                }
              };
              text_node.juris = this.juris;
              text_node.execs.push(func);
              target.push(text_node);
              var if_end = new CSL4.Token("if", CSL4.END);
              CSL4.Node["if"].build.call(if_end, state, target);
              var else_start = new CSL4.Token("else", CSL4.START);
              CSL4.Node["else"].build.call(else_start, state, target);
            }
          }
          if (this.tokentype === CSL4.END) {
            if (state.build["publisher-special"]) {
              state.build["publisher-special"] = false;
              func = function(state2) {
                if (state2.publisherOutput) {
                  state2.publisherOutput.render();
                  state2.publisherOutput = false;
                }
              };
              this.execs.push(func);
            }
            func = function(state2, Item, item) {
              if (!state2.tmp.group_context.tip.condition) {
                if (state2.output.current.tip.strings.suffix) {
                  state2.tmp.just_did_number = false;
                }
              }
              state2.output.endTag();
              if (this.realGroup) {
                var flags = state2.tmp.group_context.pop();
                if (flags.parallel_delimiter_override) {
                  state2.tmp.group_context.tip.parallel_delimiter_override = flags.parallel_delimiter_override;
                  if (!state2.tmp.just_looking && state2.registry.registry[Item.id].master) {
                    state2.registry.registry[Item.id].parallel_delimiter_override = flags.parallel_delimiter_override;
                  }
                }
                if (flags.parallel_delimiter_override_on_suppress) {
                  state2.tmp.group_context.tip.parallel_delimiter_override_on_suppress = flags.parallel_delimiter_override_on_suppress;
                }
                if (state2.tmp.area === "bibliography_sort") {
                  var citationNumberIdx = flags.done_vars.indexOf("citation-number");
                  if (this.strings.sort_direction && citationNumberIdx > -1 && state2.tmp.group_context.length() == 1) {
                    if (this.strings.sort_direction === CSL4.DESCENDING) {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL4.DESCENDING;
                    } else {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL4.ASCENDING;
                    }
                    flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1));
                  }
                }
                if (flags.condition) {
                  flags.force_suppress = CSL4.EVALUATE_GROUP_CONDITION(state2, flags);
                }
                if (state2.tmp.group_context.tip.condition) {
                  state2.tmp.group_context.tip.force_suppress = flags.force_suppress;
                }
                if (!flags.force_suppress && (flags.variable_success || flags.term_intended && !flags.variable_attempt)) {
                  if (!this.isJurisLocatorLabel) {
                    state2.tmp.group_context.tip.variable_success = true;
                  }
                  var blobs = state2.output.current.value().blobs;
                  var pos = state2.output.current.value().blobs.length - 1;
                  if (!state2.tmp.just_looking && (flags.non_parallel || flags.parallel_last || flags.parallel_first || flags.parallel_delimiter_override || flags.parallel_delimiter_override_on_suppress)) {
                    var hasRepeat = state2.parallel.checkRepeats(flags);
                    if (hasRepeat) {
                      if (blobs) {
                        blobs.pop();
                      }
                    }
                    if (state2.tmp.cite_index > 0 && (hasRepeat || !flags.parallel_first && !flags.parallel_last && !flags.non_parallel)) {
                      var info = state2.tmp.suppress_repeats[state2.tmp.cite_index - 1];
                      if (hasRepeat && flags.parallel_delimiter_override_on_suppress && (info.SIBLING || info.ORPHAN)) {
                        state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override_on_suppress;
                      } else if (flags.parallel_delimiter_override && info.SIBLING) {
                        state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override;
                      }
                    }
                  }
                } else {
                  state2.tmp.term_predecessor = flags.old_term_predecessor;
                  state2.tmp.group_context.tip.variable_attempt = flags.variable_attempt;
                  if (flags.force_suppress && !state2.tmp.group_context.tip.condition) {
                    state2.tmp.group_context.tip.variable_attempt = true;
                    state2.tmp.group_context.tip.variable_success = flags.variable_success_parent;
                  }
                  if (flags.force_suppress) {
                    for (var i = 0, ilen = flags.done_vars.length; i < ilen; i++) {
                      var doneVar = flags.done_vars[i];
                      for (var j = 0, jlen = state2.tmp.done_vars.length; j < jlen; j++) {
                        if (state2.tmp.done_vars[j] === doneVar) {
                          state2.tmp.done_vars = state2.tmp.done_vars.slice(0, j).concat(state2.tmp.done_vars.slice(j + 1));
                        }
                      }
                    }
                  }
                  if (state2.output.current.value().blobs) {
                    state2.output.current.value().blobs.pop();
                  }
                }
              }
            };
            this.execs.push(func);
            if (this.juris) {
              var else_end = new CSL4.Token("else", CSL4.END);
              CSL4.Node["else"].build.call(else_end, state, target);
              var choose_end = new CSL4.Token("choose", CSL4.END);
              CSL4.Node.choose.build.call(choose_end, state, target);
            }
          }
          if (this.tokentype === CSL4.END) {
            if (!this.juris) {
              target.push(this);
            }
            if (state.build.substitute_level.value()) {
              state.build.substitute_level.replace(state.build.substitute_level.value() - 1);
            }
            CSL4.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL4.Node["if"] = {
        build: function(state, target) {
          CSL4.Conditions.TopNode.call(this, state, target);
          target.push(this);
        },
        configure: function(state, pos) {
          CSL4.Conditions.Configure.call(this, state, pos);
        }
      };
      CSL4.Node["conditions"] = {
        build: function(state) {
          if (this.tokentype === CSL4.START) {
            state.tmp.conditions.addMatch(this.match);
          }
          if (this.tokentype === CSL4.END) {
            state.tmp.conditions.matchCombine();
          }
        }
      };
      CSL4.Node["condition"] = {
        build: function(state) {
          if (this.tokentype === CSL4.SINGLETON) {
            var test = state.fun.match[this.match](this, state, this.tests);
            state.tmp.conditions.addTest(test);
          }
        }
      };
      CSL4.Conditions = {};
      CSL4.Conditions.TopNode = function(state) {
        var func;
        if (this.tokentype === CSL4.START || this.tokentype === CSL4.SINGLETON) {
          if (this.locale) {
            state.opt.lang = this.locale;
          }
          if (!this.tests || !this.tests.length) {
            state.tmp.conditions = new CSL4.Conditions.Engine(state, this);
          } else {
            this.test = state.fun.match[this.match](this, state, this.tests);
          }
          if (state.build.substitute_level.value() === 0) {
            func = function(state2) {
              state2.tmp.condition_counter++;
            };
            this.execs.push(func);
          }
        }
        if (this.tokentype === CSL4.END || this.tokentype === CSL4.SINGLETON) {
          if (state.build.substitute_level.value() === 0) {
            func = function(state2) {
              state2.tmp.condition_counter--;
              if (state2.tmp.condition_lang_counter_arr.length > 0) {
                var counter = state2.tmp.condition_lang_counter_arr.slice(-1)[0];
                if (counter === state2.tmp.condition_counter) {
                  state2.opt.lang = state2.tmp.condition_lang_val_arr.pop();
                  state2.tmp.condition_lang_counter_arr.pop();
                }
              }
              if (this.locale_default) {
                state2.output.current.value().old_locale = this.locale_default;
                state2.output.closeLevel("empty");
                state2.opt.lang = this.locale_default;
              }
            };
            this.execs.push(func);
          }
          func = function(state2) {
            var next = this[state2.tmp.jump.value()];
            return next;
          };
          this.execs.push(func);
          if (this.locale_default) {
            state.opt.lang = this.locale_default;
          }
        }
      };
      CSL4.Conditions.Configure = function(state, pos) {
        if (this.tokentype === CSL4.START) {
          this.fail = state.configure.fail.slice(-1)[0];
          this.succeed = this.next;
          state.configure.fail[state.configure.fail.length - 1] = pos;
        } else if (this.tokentype === CSL4.SINGLETON) {
          this.fail = this.next;
          this.succeed = state.configure.succeed.slice(-1)[0];
          state.configure.fail[state.configure.fail.length - 1] = pos;
        } else {
          this.succeed = state.configure.succeed.slice(-1)[0];
          this.fail = this.next;
        }
      };
      CSL4.Conditions.Engine = function(state, token) {
        this.token = token;
        this.state = state;
      };
      CSL4.Conditions.Engine.prototype.addTest = function(test) {
        this.token.tests ? {} : this.token.tests = [];
        this.token.tests.push(test);
      };
      CSL4.Conditions.Engine.prototype.addMatch = function(match) {
        this.token.match = match;
      };
      CSL4.Conditions.Engine.prototype.matchCombine = function() {
        this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);
      };
      CSL4.Node.info = {
        build: function(state) {
          if (this.tokentype === CSL4.START) {
            state.build.skip = "info";
          } else {
            state.build.skip = false;
          }
        }
      };
      CSL4.Node.institution = {
        build: function(state, target) {
          if ([CSL4.SINGLETON, CSL4.START].indexOf(this.tokentype) > -1) {
            var func = function(state2) {
              if (typeof this.strings.delimiter === "string") {
                state2.tmp.institution_delimiter = this.strings.delimiter;
              } else {
                state2.tmp.institution_delimiter = state2.tmp.name_delimiter;
              }
              if (state2.inheritOpt(this, "and") === "text") {
                this.and_term = state2.getTerm("and", "long", 0);
              } else if (state2.inheritOpt(this, "and") === "symbol") {
                if (state2.opt.development_extensions.expect_and_symbol_form) {
                  this.and_term = state2.getTerm("and", "symbol", 0);
                } else {
                  this.and_term = "&";
                }
              } else if (state2.inheritOpt(this, "and") === "none") {
                this.and_term = state2.tmp.institution_delimiter;
              }
              if (typeof this.and_term === "undefined" && state2.tmp.and_term) {
                this.and_term = state2.tmp.and_term;
              }
              if (CSL4.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                this.and_prefix_single = " ";
                this.and_prefix_multiple = ", ";
                if (typeof state2.tmp.institution_delimiter === "string") {
                  this.and_prefix_multiple = state2.tmp.institution_delimiter;
                }
                this.and_suffix = " ";
              } else {
                this.and_prefix_single = "";
                this.and_prefix_multiple = "";
                this.and_suffix = "";
              }
              if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
                this.and_prefix_single = state2.tmp.institution_delimiter;
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              }
              this.and = {};
              if (typeof this.and_term !== "undefined") {
                state2.output.append(this.and_term, "empty", true);
                this.and.single = state2.output.pop();
                this.and.single.strings.prefix = this.and_prefix_single;
                this.and.single.strings.suffix = this.and_suffix;
                state2.output.append(this.and_term, "empty", true);
                this.and.multiple = state2.output.pop();
                this.and.multiple.strings.prefix = this.and_prefix_multiple;
                this.and.multiple.strings.suffix = this.and_suffix;
              } else if (this.strings.delimiter !== "undefined") {
                this.and.single = new CSL4.Blob(state2.tmp.institution_delimiter);
                this.and.single.strings.prefix = "";
                this.and.single.strings.suffix = "";
                this.and.multiple = new CSL4.Blob(state2.tmp.institution_delimiter);
                this.and.multiple.strings.prefix = "";
                this.and.multiple.strings.suffix = "";
              }
              state2.nameOutput.institution = this;
            };
            this.execs.push(func);
          }
          target.push(this);
        },
        configure: function(state) {
          if ([CSL4.SINGLETON, CSL4.START].indexOf(this.tokentype) > -1) {
            state.build.has_institution = true;
          }
        }
      };
      CSL4.Node["institution-part"] = {
        build: function(state, target) {
          var func;
          if (this.strings.name === "long") {
            if (this.strings["if-short"]) {
              func = function(state2) {
                state2.nameOutput.institutionpart["long-with-short"] = this;
              };
            } else {
              func = function(state2) {
                state2.nameOutput.institutionpart["long"] = this;
              };
            }
          } else if (this.strings.name === "short") {
            func = function(state2) {
              state2.nameOutput.institutionpart["short"] = this;
            };
          }
          this.execs.push(func);
          target.push(this);
        }
      };
      CSL4.Node.key = {
        build: function(state, target) {
          target = state[state.build.root + "_sort"].tokens;
          var func;
          var debug = false;
          var start_key = new CSL4.Token("key", CSL4.START);
          state.tmp.root = state.build.root;
          start_key.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
          start_key.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
          start_key.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
          func = function(state2) {
            state2.tmp.done_vars = [];
          };
          start_key.execs.push(func);
          func = function(state2) {
            state2.output.openLevel("empty");
          };
          start_key.execs.push(func);
          var sort_direction = [];
          if (this.strings.sort_direction === CSL4.DESCENDING) {
            sort_direction.push(1);
            sort_direction.push(-1);
          } else {
            sort_direction.push(-1);
            sort_direction.push(1);
          }
          state[state.build.area].opt.sort_directions.push(sort_direction);
          if (CSL4.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {
            state.build.date_key = true;
          }
          func = function(state2) {
            state2.tmp.sort_key_flag = true;
            if (state2.inheritOpt(this, "et-al-min")) {
              state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
            }
            if (state2.inheritOpt(this, "et-al-use-first")) {
              state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
            }
            if (typeof state2.inheritOpt(this, "et-al-use-last") === "boolean") {
              state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
            }
          };
          start_key.execs.push(func);
          target.push(start_key);
          if (this.variables.length) {
            var variable = this.variables[0];
            if (CSL4.NAME_VARIABLES.indexOf(variable) > -1) {
              var names_start_token = new CSL4.Token("names", CSL4.START);
              names_start_token.tokentype = CSL4.START;
              names_start_token.variables = this.variables;
              CSL4.Node.names.build.call(names_start_token, state, target);
              var name_token = new CSL4.Token("name", CSL4.SINGLETON);
              name_token.tokentype = CSL4.SINGLETON;
              name_token.strings["name-as-sort-order"] = "all";
              name_token.strings["sort-separator"] = " ";
              name_token.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
              name_token.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
              name_token.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
              CSL4.Node.name.build.call(name_token, state, target);
              var institution_token = new CSL4.Token("institution", CSL4.SINGLETON);
              institution_token.tokentype = CSL4.SINGLETON;
              CSL4.Node.institution.build.call(institution_token, state, target);
              var names_end_token = new CSL4.Token("names", CSL4.END);
              names_end_token.tokentype = CSL4.END;
              CSL4.Node.names.build.call(names_end_token, state, target);
            } else {
              var single_text = new CSL4.Token("text", CSL4.SINGLETON);
              single_text.strings.sort_direction = this.strings.sort_direction;
              single_text.dateparts = this.dateparts;
              if (CSL4.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                if (variable === "citation-number") {
                  func = function(state2, Item) {
                    if (state2.tmp.area === "bibliography_sort") {
                      if (this.strings.sort_direction === CSL4.DESCENDING) {
                        state2.bibliography_sort.opt.citation_number_sort_direction = CSL4.DESCENDING;
                      } else {
                        state2.bibliography_sort.opt.citation_number_sort_direction = CSL4.ASCENDING;
                      }
                    }
                    if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                      var num = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                    } else {
                      var num = state2.registry.registry[Item.id].seq;
                    }
                    if (num) {
                      num = CSL4.Util.padding("" + num);
                    }
                    state2.output.append(num, this);
                  };
                } else {
                  func = function(state2, Item) {
                    var num = false;
                    num = Item[variable];
                    if (num) {
                      num = CSL4.Util.padding(num);
                    }
                    state2.output.append(num, this);
                  };
                }
              } else if (variable === "citation-label") {
                func = function(state2, Item) {
                  var trigraph = state2.getCitationLabel(Item);
                  state2.output.append(trigraph, this);
                };
              } else if (CSL4.DATE_VARIABLES.indexOf(variable) > -1) {
                func = CSL4.dateAsSortKey;
                single_text.variables = this.variables;
              } else if (variable === "title") {
                var abbrevfam = "title";
                var abbrfall = false;
                var altvar = false;
                var transfall = true;
                func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
              } else if (variable === "court-class") {
                func = function(state2, Item, item) {
                  CSL4.INIT_JURISDICTION_MACROS(state2, Item, item, "juris-main");
                  var cls = CSL4.GET_COURT_CLASS(state2, Item, true);
                  state2.output.append(cls, "empty");
                };
              } else {
                func = function(state2, Item) {
                  var varval = Item[variable];
                  state2.output.append(varval, "empty");
                };
              }
              single_text.execs.push(func);
              target.push(single_text);
            }
          } else {
            var token = new CSL4.Token("text", CSL4.SINGLETON);
            token.strings.sort_direction = this.strings.sort_direction;
            token.postponed_macro = this.postponed_macro;
            CSL4.expandMacro.call(state, token, target);
          }
          var end_key = new CSL4.Token("key", CSL4.END);
          func = function(state2) {
            var keystring = state2.output.string(state2, state2.output.queue);
            if (state2.sys.normalizeUnicode) {
              keystring = state2.sys.normalizeUnicode(keystring);
            }
            keystring = keystring ? keystring.split(" ").join(state2.opt.sort_sep) + state2.opt.sort_sep : "";
            if (debug) {
              CSL4.debug("keystring: " + keystring + " " + typeof keystring);
            }
            if (keystring === "") {
              keystring = void 0;
            }
            if (typeof keystring !== "string") {
              keystring = void 0;
            }
            state2[state2[state2.tmp.area].root + "_sort"].keys.push(keystring);
            state2.tmp.value = [];
          };
          end_key.execs.push(func);
          if (state.build.date_key) {
            if (state.build.area === "citation" && state.build.extension === "_sort") {
              state[state.build.area].opt.sort_directions.push([-1, 1]);
              func = function(state2, Item) {
                var year_suffix = state2.registry.registry[Item.id].disambig.year_suffix;
                if (!year_suffix) {
                  year_suffix = 0;
                }
                var key = CSL4.Util.padding("" + year_suffix);
                state2[state2.tmp.area].keys.push(key);
              };
              end_key.execs.push(func);
            }
            state.build.date_key = false;
          }
          func = function(state2) {
            state2.tmp["et-al-min"] = void 0;
            state2.tmp["et-al-use-first"] = void 0;
            state2.tmp["et-al-use-last"] = void 0;
            state2.tmp.sort_key_flag = false;
          };
          end_key.execs.push(func);
          target.push(end_key);
        }
      };
      CSL4.Node.label = {
        build: function(state, target) {
          if (this.strings.term) {
            var func = function(state2, Item, item) {
              var termtxt = CSL4.evaluateLabel(this, state2, Item, item);
              if (item && this.strings.term === "locator") {
                item.section_form_override = this.strings.form;
              }
              if (termtxt) {
                state2.tmp.group_context.tip.term_intended = true;
              }
              CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state2, termtxt, null, this);
              if (termtxt.indexOf("%s") === -1) {
                if (this.strings.capitalize_if_first) {
                  if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                    termtxt = CSL4.Output.Formatters["capitalize-first"](state2, termtxt);
                  }
                }
                state2.output.append(termtxt, this);
              }
            };
            this.execs.push(func);
          } else {
            if (!this.strings.form) {
              this.strings.form = "long";
            }
            var namevars = state.build.names_variables[state.build.names_variables.length - 1];
            var namelabels = state.build.name_label[state.build.name_label.length - 1];
            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
              if (!namelabels[namevars[i]]) {
                namelabels[namevars[i]] = {};
              }
            }
            if (!state.build.name_flag) {
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                namelabels[namevars[i]].before = this;
              }
            } else {
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                namelabels[namevars[i]].after = this;
              }
            }
          }
          target.push(this);
        }
      };
      CSL4.Node.layout = {
        build: function(state, target) {
          var func, prefix_token, suffix_token, tok;
          function setSuffix() {
            if (state.build.area === "bibliography") {
              suffix_token = new CSL4.Token("text", CSL4.SINGLETON);
              func = function(state2) {
                if (!state2.tmp.parallel_and_not_last) {
                  var suffix;
                  if (state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale]) {
                    suffix = state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale].suffix;
                  } else {
                    suffix = state2.bibliography.opt.layout_suffix;
                  }
                  var topblob = state2.output.current.value();
                  if (state2.opt.using_display) {
                    topblob.blobs[topblob.blobs.length - 1].strings.suffix = suffix;
                  } else {
                    topblob.strings.suffix = suffix;
                  }
                }
                if (state2.bibliography.opt["second-field-align"]) {
                  state2.output.endTag("bib_other");
                }
              };
              suffix_token.execs.push(func);
              target.push(suffix_token);
            }
          }
          if (this.tokentype === CSL4.START) {
            if (this.locale_raw) {
              state.build.current_default_locale = this.locale_raw;
            } else {
              state.build.current_default_locale = state.opt["default-locale"];
            }
            func = function(state2, Item, item) {
              if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                var cite_entry = new CSL4.Token("group", CSL4.START);
                cite_entry.decorations = [["@cite", "entry"]];
                state2.output.startTag("cite_entry", cite_entry);
                state2.output.current.value().item_id = Item.system_id;
                if (item) {
                  state2.output.current.value().locator_txt = item.locator_txt;
                  state2.output.current.value().suffix_txt = item.suffix_txt;
                }
              }
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL4.START && !state.tmp.cite_affixes[state.build.area]) {
            func = function(state2, Item, item) {
              state2.tmp.done_vars = [];
              if (item && item["author-only"]) {
                state2.tmp.done_vars.push("locator");
              }
              if (state2.opt.suppressedJurisdictions[Item["country"]] && Item["country"] && ["treaty", "patent"].indexOf(Item.type) === -1) {
                state2.tmp.done_vars.push("country");
              }
              if (!state2.tmp.just_looking && state2.registry.registry[Item.id] && state2.registry.registry[Item.id].parallel) {
                state2.tmp.done_vars.push("first-reference-note-number");
              }
              if (!state2.tmp.just_looking && state2.tmp.abbrev_trimmer && Item.jurisdiction) {
                for (var field in state2.tmp.abbrev_trimmer.QUASHES[Item.jurisdiction]) {
                  state2.tmp.done_vars.push(field);
                }
              }
              state2.tmp.rendered_name = false;
            };
            this.execs.push(func);
            func = function(state2) {
              state2.tmp.sort_key_flag = false;
            };
            this.execs.push(func);
            func = function(state2) {
              state2.tmp.nameset_counter = 0;
            };
            this.execs.push(func);
            func = function(state2, Item) {
              var tok2 = new CSL4.Token();
              state2.output.openLevel(tok2);
            };
            this.execs.push(func);
            target.push(this);
            if (state.build.area === "citation") {
              prefix_token = new CSL4.Token("text", CSL4.SINGLETON);
              func = function(state2, Item, item) {
                if (item && item.prefix) {
                  var prefix = CSL4.checkPrefixSpaceAppend(state2, item.prefix);
                  if (!state2.tmp.just_looking) {
                    prefix = state2.output.checkNestedBrace.update(prefix);
                  }
                  var ignorePredecessor = CSL4.checkIgnorePredecessor(state2, prefix);
                  state2.output.append(prefix, this, false, ignorePredecessor);
                }
              };
              prefix_token.execs.push(func);
              target.push(prefix_token);
            }
          }
          var my_tok;
          if (this.locale_raw) {
            my_tok = new CSL4.Token("dummy", CSL4.START);
            my_tok.locale = this.locale_raw;
            my_tok.strings.delimiter = this.strings.delimiter;
            my_tok.strings.suffix = this.strings.suffix;
            if (!state.tmp.cite_affixes[state.build.area]) {
              state.tmp.cite_affixes[state.build.area] = {};
            }
          }
          if (this.tokentype === CSL4.START) {
            state.build.layout_flag = true;
            if (!this.locale_raw) {
              state[state.tmp.area].opt.topdecor = [this.decorations];
              state[state.tmp.area + "_sort"].opt.topdecor = [this.decorations];
              state[state.build.area].opt.layout_prefix = this.strings.prefix;
              state[state.build.area].opt.layout_suffix = this.strings.suffix;
              state[state.build.area].opt.layout_delimiter = this.strings.delimiter;
              state[state.build.area].opt.layout_decorations = this.decorations;
              if (state.tmp.cite_affixes[state.build.area]) {
                tok = new CSL4.Token("else", CSL4.START);
                CSL4.Node["else"].build.call(tok, state, target);
              }
            }
            if (this.locale_raw) {
              if (!state.build.layout_locale_flag) {
                var choose_tok = new CSL4.Token("choose", CSL4.START);
                CSL4.Node.choose.build.call(choose_tok, state, target);
                my_tok.name = "if";
                CSL4.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL4.Node["if"].build.call(my_tok, state, target);
              } else {
                my_tok.name = "else-if";
                CSL4.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL4.Node["else-if"].build.call(my_tok, state, target);
              }
              state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};
              state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;
              state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;
            }
          }
          if (this.tokentype === CSL4.END) {
            if (this.locale_raw) {
              setSuffix();
              if (!state.build.layout_locale_flag) {
                my_tok.name = "if";
                my_tok.tokentype = CSL4.END;
                CSL4.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL4.Node["if"].build.call(my_tok, state, target);
                state.build.layout_locale_flag = true;
              } else {
                my_tok.name = "else-if";
                my_tok.tokentype = CSL4.END;
                CSL4.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL4.Node["else-if"].build.call(my_tok, state, target);
              }
            }
            if (!this.locale_raw) {
              setSuffix();
              if (state.tmp.cite_affixes[state.build.area]) {
                if (state.build.layout_locale_flag) {
                  tok = new CSL4.Token("else", CSL4.END);
                  CSL4.Node["else"].build.call(tok, state, target);
                  tok = new CSL4.Token("choose", CSL4.END);
                  CSL4.Node.choose.build.call(tok, state, target);
                }
              }
              state.build_layout_locale_flag = true;
              if (state.build.area === "citation") {
                suffix_token = new CSL4.Token("text", CSL4.SINGLETON);
                func = function(state2, Item, item) {
                  var sp;
                  if (item && item.suffix) {
                    var suffix = CSL4.checkSuffixSpacePrepend(state2, item.suffix);
                    if (!state2.tmp.just_looking) {
                      suffix = state2.output.checkNestedBrace.update(suffix);
                    }
                    state2.output.append(suffix, this);
                  }
                };
                suffix_token.execs.push(func);
                target.push(suffix_token);
              }
              func = function(state2) {
                state2.output.closeLevel();
              };
              this.execs.push(func);
              func = function(state2, Item) {
                if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                  state2.output.endTag();
                }
              };
              this.execs.push(func);
              target.push(this);
              state.build.layout_flag = false;
              state.build.layout_locale_flag = false;
            }
          }
        }
      };
      CSL4.Node.macro = {
        build: function() {
        }
      };
      CSL4.Node.alternative = {
        build: function(state, target) {
          if (this.tokentype === CSL4.START) {
            var choose_tok = new CSL4.Token("choose", CSL4.START);
            CSL4.Node["choose"].build.call(choose_tok, state, target);
            var if_tok = new CSL4.Token("if", CSL4.START);
            CSL4.Attributes["@alternative-node-internal"].call(if_tok, state);
            CSL4.Node["if"].build.call(if_tok, state, target);
            var func = function(state2, Item) {
              state2.tmp.oldItem = Item;
              state2.tmp.oldLang = state2.opt.lang;
              state2.tmp.abort_alternative = true;
              if (Item["language-name"] && Item["language-name-original"]) {
                var newItem = JSON.parse(JSON.stringify(Item));
                newItem.language = newItem["language-name"];
                var langspec = CSL4.localeResolve(newItem.language, state2.opt["default-locale"][0]);
                if (state2.opt.multi_layout) {
                  for (var i in state2.opt.multi_layout) {
                    var locale_list = state2.opt.multi_layout[i];
                    var gotlang = false;
                    for (var j in locale_list) {
                      var tryspec = locale_list[j];
                      if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {
                        gotlang = locale_list[0].best;
                        break;
                      }
                    }
                    if (!gotlang) {
                      gotlang = state2.opt["default-locale"][0];
                    }
                    state2.opt.lang = gotlang;
                  }
                }
                for (var key in newItem) {
                  if (["id", "type", "language", "multi"].indexOf(key) === -1 && key.slice(0, 4) !== "alt-") {
                    if (newItem.multi && newItem.multi._keys[key]) {
                      var deleteme = true;
                      for (var lang in newItem.multi._keys[key]) {
                        if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, "$1")) {
                          deleteme = false;
                          break;
                        }
                      }
                      if (deleteme) {
                        delete newItem[key];
                      }
                    } else {
                      delete newItem[key];
                    }
                  }
                }
                for (var key in newItem) {
                  if (key.slice(0, 4) === "alt-") {
                    newItem[key.slice(4)] = newItem[key];
                    state2.tmp.abort_alternative = false;
                  } else {
                    if (newItem.multi && newItem.multi._keys) {
                      if (!newItem["alt-" + key] && newItem.multi._keys[key]) {
                        if (newItem.multi._keys[key][langspec.best]) {
                          newItem[key] = newItem.multi._keys[key][langspec.best];
                          state2.tmp.abort_alternative = false;
                        } else if (newItem.multi._keys[key][langspec.base]) {
                          newItem[key] = newItem.multi._keys[key][langspec.base];
                          state2.tmp.abort_alternative = false;
                        } else if (newItem.multi._keys[key][langspec.bare]) {
                          newItem[key] = newItem.multi._keys[key][langspec.bare];
                          state2.tmp.abort_alternative = false;
                        }
                      }
                    }
                  }
                }
              }
              state2.output.openLevel(this);
              state2.registry.refhash[Item.id] = newItem;
              state2.nameOutput = new CSL4.NameOutput(state2, newItem);
            };
            this.execs.push(func);
            target.push(this);
            var choose_tok = new CSL4.Token("choose", CSL4.START);
            CSL4.Node["choose"].build.call(choose_tok, state, target);
            var if_tok = new CSL4.Token("if", CSL4.START);
            CSL4.Attributes["@alternative-node-internal"].call(if_tok, state);
            var func = function(state2) {
              state2.tmp.abort_alternative = true;
            };
            if_tok.execs.push(func);
            CSL4.Node["if"].build.call(if_tok, state, target);
          } else if (this.tokentype === CSL4.END) {
            var if_tok = new CSL4.Token("if", CSL4.END);
            CSL4.Node["if"].build.call(if_tok, state, target);
            var choose_tok = new CSL4.Token("choose", CSL4.END);
            CSL4.Node["choose"].build.call(choose_tok, state, target);
            var func = function(state2, Item) {
              state2.output.closeLevel();
              state2.registry.refhash[Item.id] = state2.tmp.oldItem;
              state2.opt.lang = state2.tmp.oldLang;
              state2.nameOutput = new CSL4.NameOutput(state2, state2.tmp.oldItem);
              state2.tmp.abort_alternative = false;
            };
            this.execs.push(func);
            target.push(this);
            var if_tok = new CSL4.Token("if", CSL4.END);
            CSL4.Node["if"].build.call(if_tok, state, target);
            var choose_tok = new CSL4.Token("choose", CSL4.END);
            CSL4.Node["choose"].build.call(choose_tok, state, target);
          }
        }
      };
      CSL4.Node["alternative-text"] = {
        build: function(state, target) {
          if (this.tokentype === CSL4.SINGLETON) {
            var func = function(state2, Item) {
              var Item = state2.refetchItem(Item.id);
              CSL4.getCite.call(state2, Item);
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL4.NameOutput = function(state, Item, item) {
        this.debug = false;
        if (this.debug) {
          print("(1)");
        }
        this.state = state;
        this.Item = Item;
        this.item = item;
        this.nameset_base = 0;
        this.etal_spec = {};
        this._first_creator_variable = false;
        this._please_chop = false;
      };
      CSL4.NameOutput.prototype.init = function(names2) {
        this.requireMatch = names2.requireMatch;
        if (this.state.tmp.term_predecessor) {
          this.state.tmp.subsequent_author_substitute_ok = false;
        }
        if (this.nameset_offset) {
          this.nameset_base = this.nameset_base + this.nameset_offset;
        }
        this.nameset_offset = 0;
        this.names = names2;
        this.variables = names2.variables;
        this.state.tmp.value = [];
        this.state.tmp.rendered_name = [];
        this.state.tmp.label_blob = false;
        this.state.tmp.etal_node = false;
        this.state.tmp.etal_term = false;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
            this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
          }
        }
        this["et-al"] = void 0;
        this["with"] = void 0;
        this.name = void 0;
        this.institutionpart = {};
        this.state.tmp.group_context.tip.variable_attempt = true;
        this.labelVariable = this.variables[0];
        if (!this.state.tmp.value.length) {
          return;
        }
        var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
        if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
              this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
            }
          }
          this.state.tmp.common_term_match_fail = true;
          this.variables = [];
        }
      };
      CSL4.NameOutput.prototype.reinit = function(names2, labelVariable) {
        this.requireMatch = names2.requireMatch;
        this.labelVariable = labelVariable;
        if (this.state.tmp.can_substitute.value()) {
          this.nameset_offset = 0;
          this.variables = names2.variables;
          var oldval = this.state.tmp.value.slice();
          this.state.tmp.value = [];
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
              this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
            }
          }
          if (this.state.tmp.value.length) {
            this.state.tmp.can_substitute.replace(false, CSL4.LITERAL);
          }
          this.state.tmp.value = oldval;
        }
        var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
        if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
              this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
            }
          }
          this.variables = [];
        }
      };
      CSL4.NameOutput.prototype.outputNames = function() {
        var i, ilen;
        var variables = this.variables;
        if (this.institution.and) {
          if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {
            this.institution.and.single.blobs = this.name.and.single.blobs;
          }
          if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {
            this.institution.and.multiple.blobs = this.name.and.multiple.blobs;
          }
        }
        this.variable_offset = {};
        if (this.family) {
          this.family_decor = CSL4.Util.cloneToken(this.family);
          this.family_decor.strings.prefix = "";
          this.family_decor.strings.suffix = "";
          for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {
            this.family.execs[i].call(this.family_decor, this.state, this.Item);
          }
        } else {
          this.family_decor = false;
        }
        if (this.given) {
          this.given_decor = CSL4.Util.cloneToken(this.given);
          this.given_decor.strings.prefix = "";
          this.given_decor.strings.suffix = "";
          for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {
            this.given.execs[i].call(this.given_decor, this.state, this.Item);
          }
        } else {
          this.given_decor = false;
        }
        if (this.debug) {
          print("(2)");
        }
        this.getEtAlConfig();
        if (this.debug) {
          print("(3)");
        }
        this.divideAndTransliterateNames();
        if (this.debug) {
          print("(4)");
        }
        this.truncatePersonalNameLists();
        if (this.debug) {
          print("(5)");
        }
        if (this.debug) {
          print("(6)");
        }
        this.disambigNames();
        this.constrainNames();
        if (this.debug) {
          print("(7)");
        }
        if (this.name.strings.form === "count") {
          if (this.state.tmp.extension || this.names_count != 0) {
            this.state.output.append(this.names_count, "empty");
            this.state.tmp.group_context.tip.variable_success = true;
          }
          return;
        }
        if (this.debug) {
          print("(8)");
        }
        this.setEtAlParameters();
        if (this.debug) {
          print("(9)");
        }
        this.setCommonTerm(this.requireMatch);
        if (this.debug) {
          print("(10)");
        }
        this.renderAllNames();
        if (this.debug) {
          print("(11)");
        }
        var blob_list = [];
        for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          var institution_sets = [];
          var institutions = false;
          var varblob = null;
          if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
            varblob = this._join([this.freeters[v]], "");
          } else {
            if (this.debug) {
              print("(11a)");
            }
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));
            }
            if (this.debug) {
              print("(11b)");
            }
            if (this.institutions[v].length) {
              var pos = this.nameset_base + this.variable_offset[v];
              if (this.freeters[v].length) {
                pos += 1;
              }
              institutions = this.joinInstitutionSets(institution_sets, pos);
            }
            if (this.debug) {
              print("(11c)");
            }
            var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);
            if (this.debug) {
              print("(11d)");
            }
          }
          if (varblob) {
            if (!this.state.tmp.extension) {
              varblob = this._applyLabels(varblob, v);
            }
            blob_list.push(varblob);
          }
          if (this.debug) {
            print("(11e)");
          }
          if (this.common_term) {
            break;
          }
        }
        if (this.debug) {
          print("(12)");
        }
        this.state.output.openLevel("empty");
        this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, "delimiter", "names-delimiter");
        if (this.debug) {
          print("(13)");
        }
        for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {
          this.state.output.append(blob_list[i], "literal", true);
        }
        if (!this.state.tmp.just_looking && blob_list.length > 0) {
          this.state.tmp.probably_rendered_something = true;
        }
        if (this.debug) {
          print("(14)");
        }
        this.state.output.closeLevel("empty");
        if (this.debug) {
          print("(15)");
        }
        var blob = this.state.output.pop();
        this.state.tmp.name_node.top = blob;
        if (this.debug) {
          print("(16)");
        }
        var namesToken = CSL4.Util.cloneToken(this.names);
        if (this.state.tmp.group_context.tip.condition) {
          CSL4.UPDATE_GROUP_CONTEXT_CONDITION(this.state, this.names.strings.prefix, null, this.names);
        }
        this.state.output.append(blob, namesToken);
        if (this.state.tmp.term_predecessor_name) {
          this.state.tmp.term_predecessor = true;
        }
        if (this.debug) {
          print("(17)");
        }
        if (this.debug) {
          print("(18)");
        }
        if (variables[0] !== "authority") {
          var name_node_string = [];
          var nameobjs = this.Item[variables[0]];
          if (nameobjs) {
            for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {
              var substring = CSL4.Util.Names.getRawName(nameobjs[i]);
              if (substring) {
                name_node_string.push(substring);
              }
            }
          }
          name_node_string = name_node_string.join(", ");
          if (name_node_string) {
            this.state.tmp.name_node.string = name_node_string;
          }
        }
        if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {
          this.state.tmp.first_name_string = this.state.tmp.name_node.string;
        }
        if (this.Item.type === "classic") {
          if (this.state.tmp.first_name_string) {
            var author_title = [];
            author_title.push(this.state.tmp.first_name_string);
            if (this.Item.title) {
              author_title.push(this.Item.title);
            }
            author_title = author_title.join(", ");
            if (author_title && this.state.sys.getAbbreviation) {
              if (this.state.sys.normalizeAbbrevsKey) {
                author_title = this.state.sys.normalizeAbbrevsKey("classic", author_title);
              }
              this.state.transform.loadAbbreviation("default", "classic", author_title, this.Item.language);
              if (this.state.transform.abbrevs["default"].classic[author_title]) {
                this.state.tmp.done_vars.push("title");
                this.state.output.append(this.state.transform.abbrevs["default"].classic[author_title], "empty", true);
                blob = this.state.output.pop();
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.top.blobs.push(blob);
              }
            }
          }
        }
        this._collapseAuthor();
        this.variables = [];
        this.state.tmp.authority_stop_last = 0;
        if (this.debug) {
          print("(19)");
        }
      };
      CSL4.NameOutput.prototype._applyLabels = function(blob, v) {
        var txt;
        if (!this.label || !this.label[this.labelVariable]) {
          return blob;
        }
        var plural = 0;
        var num = this.freeters_count[v] + this.institutions_count[v];
        if (num > 1) {
          plural = 1;
        } else {
          for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
            num += this.persons_count[v][i];
          }
          if (num > 1) {
            plural = 1;
          }
        }
        if (this.label[this.labelVariable].before) {
          if (typeof this.label[this.labelVariable].before.strings.plural === "number") {
            plural = this.label[this.labelVariable].before.strings.plural;
          }
          txt = this._buildLabel(v, plural, "before", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(txt, this.label[this.labelVariable].before, true);
          this.state.output.append(blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
        } else if (this.label[this.labelVariable].after) {
          if (typeof this.label[this.labelVariable].after.strings.plural === "number") {
            plural = this.label[this.labelVariable].after.strings.plural;
          }
          txt = this._buildLabel(v, plural, "after", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(blob, "literal", true);
          this.state.output.append(txt, this.label[this.labelVariable].after, true);
          this.state.tmp.label_blob = this.state.output.pop();
          this.state.output.append(this.state.tmp.label_blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
        }
        return blob;
      };
      CSL4.NameOutput.prototype._buildLabel = function(term, plural, position, v) {
        if (this.common_term) {
          term = this.common_term;
        }
        var ret = false;
        var node = this.label[v][position];
        if (node) {
          ret = CSL4.castLabel(this.state, node, term, plural, CSL4.TOLERANT);
        }
        return ret;
      };
      CSL4.NameOutput.prototype._collapseAuthor = function() {
        var myqueue, mystr, oldchars;
        if (this.state.tmp.name_node.top.blobs.length === 0) {
          return;
        }
        if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {
          this._first_creator_variable = this.variables[0];
        }
        if (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter.length) {
          if (this.state.tmp.authorstring_request) {
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
              mystr = this.state.output.string(this.state, myqueue, false);
            }
            this.state.tmp.offset_characters = oldchars;
            this.state.registry.authorstrings[this.Item.id] = mystr;
          } else if (!this.state.tmp.just_looking && !this.state.tmp.suppress_decorations && (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
              mystr = this.state.output.string(this.state, myqueue, false);
            }
            if (mystr === this.state.tmp.last_primary_names_string) {
              if (this.item["suppress-author"] || this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) {
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.children = [];
                this.state.tmp.offset_characters = oldchars;
              }
              if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                this.state.tmp.use_cite_group_delimiter = true;
              }
            } else {
              this.state.tmp.last_primary_names_string = mystr;
              if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item["suppress-author"] && this.Item.type !== "legal_case") {
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.children = [];
                this.state.tmp.offset_characters = oldchars;
                this.state.tmp.term_predecessor = false;
              }
              this.state.tmp.have_collapsed = false;
              if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                this.state.tmp.use_cite_group_delimiter = false;
              }
            }
          }
        }
      };
      CSL4.NameOutput.prototype.isPerson = function(value) {
        if (value.literal || !value.given && value.family && value.isInstitution) {
          return false;
        } else {
          return true;
        }
      };
      CSL4.NameOutput.prototype.truncatePersonalNameLists = function() {
        var v, i, ilen, j, jlen, chopvar, values;
        this.freeters_count = {};
        this.persons_count = {};
        this.institutions_count = {};
        for (v in this.freeters) {
          if (this.freeters.hasOwnProperty(v)) {
            this.freeters_count[v] = this.freeters[v].length;
            this.freeters[v] = this._truncateNameList(this.freeters, v);
          }
        }
        for (v in this.persons) {
          if (this.persons.hasOwnProperty(v)) {
            this.institutions_count[v] = this.institutions[v].length;
            this._truncateNameList(this.institutions, v);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.persons_count[v] = [];
            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              this.persons_count[v][j] = this.persons[v][j].length;
              this.persons[v][j] = this._truncateNameList(this.persons, v, j);
            }
          }
        }
        if (this.state.opt.development_extensions.etal_min_etal_usefirst_hack && this.etal_min === 1 && this.etal_use_first === 1 && !(this.state.tmp.extension || this.state.tmp.just_looking)) {
          chopvar = v;
        } else {
          chopvar = false;
        }
        if (chopvar || this._please_chop) {
          for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            v = this.variables[i];
            if (this.freeters[v].length) {
              if (this._please_chop === v) {
                this.freeters[v] = this.freeters[v].slice(1);
                this.freeters_count[v] += -1;
                this._please_chop = false;
              } else if (chopvar && !this._please_chop) {
                this.freeters[v] = this.freeters[v].slice(0, 1);
                this.freeters_count[v] = 1;
                this.institutions[v] = [];
                this.persons[v] = [];
                this._please_chop = chopvar;
              }
            }
            for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
              if (this.persons[v][j].length) {
                if (this._please_chop === v) {
                  this.persons[v][j] = this.persons[v][j].slice(1);
                  this.persons_count[v][j] += -1;
                  this._please_chop = false;
                  break;
                } else if (chopvar && !this._please_chop) {
                  this.freeters[v] = this.persons[v][j].slice(0, 1);
                  this.freeters_count[v] = 1;
                  this.institutions[v] = [];
                  this.persons[v] = [];
                  values = [];
                  this._please_chop = chopvar;
                  break;
                }
              }
            }
            if (this.institutions[v].length) {
              if (this._please_chop === v) {
                this.institutions[v] = this.institutions[v].slice(1);
                this.institutions_count[v] += -1;
                this._please_chop = false;
              } else if (chopvar && !this._please_chop) {
                this.institutions[v] = this.institutions[v].slice(0, 1);
                this.institutions_count[v] = 1;
                values = [];
                this._please_chop = chopvar;
              }
            }
          }
        }
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.institutions[v].length) {
            this.nameset_offset += 1;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
            if (this.persons[v][j].length) {
              this.nameset_offset += 1;
            }
          }
        }
      };
      CSL4.NameOutput.prototype._truncateNameList = function(container, variable, index) {
        var lst;
        if (typeof index === "undefined") {
          lst = container[variable];
        } else {
          lst = container[variable][index];
        }
        if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names && lst.length > 50 && lst.length > this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2) {
          var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;
          lst = lst.slice(0, limit + 1).concat(lst.slice(-1));
        }
        return lst;
      };
      CSL4.NameOutput.prototype.divideAndTransliterateNames = function() {
        var i, ilen, j, jlen;
        var Item = this.Item;
        var variables = this.variables;
        this.varnames = variables.slice();
        this.freeters = {};
        this.persons = {};
        this.institutions = {};
        for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          this.variable_offset[v] = this.nameset_offset;
          var values = this._normalizeVariableValue(Item, v);
          if (this.name.strings["suppress-min"] && values.length >= this.name.strings["suppress-min"]) {
            values = [];
          }
          if (this.name.strings["suppress-max"] && values.length <= this.name.strings["suppress-max"]) {
            values = [];
          }
          this._getFreeters(v, values);
          this._getPersonsAndInstitutions(v, values);
          if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
            if (this.name.strings["suppress-min"] === 0) {
              this.freeters[v] = [];
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                this.persons[v][j] = [];
              }
            } else if (this.institution.strings["suppress-min"] === 0) {
              this.institutions[v] = [];
              this.freeters[v] = this.freeters[v].concat(this.persons[v]);
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {
                  this.freeters[v].push(this.persons[v][j][k]);
                }
              }
              this.persons[v] = [];
            }
          }
        }
      };
      CSL4.NameOutput.prototype._normalizeVariableValue = function(Item, variable) {
        var names2;
        if (typeof Item[variable] === "string" || typeof Item[variable] === "number") {
          CSL4.debug('name variable "' + variable + '" is string or number, not array. Attempting to fix.');
          names2 = [{ literal: Item[variable] + "" }];
        } else if (!Item[variable]) {
          names2 = [];
        } else if (typeof Item[variable].length !== "number") {
          CSL4.debug('name variable "' + variable + '" is object, not array. Attempting to fix.');
          Item[variable] = [Item[variable]];
          names2 = Item[variable].slice();
        } else {
          names2 = Item[variable].slice();
        }
        return names2;
      };
      CSL4.NameOutput.prototype._getFreeters = function(v, values) {
        this.freeters[v] = [];
        if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
          for (var i = values.length - 1; i > -1; i--) {
            if (this.isPerson(values[i])) {
              var value = this._checkNickname(values.pop());
              if (value) {
                this.freeters[v].push(value);
              }
            } else {
              break;
            }
          }
        } else {
          for (var i = values.length - 1; i > -1; i--) {
            var value = values.pop();
            if (this.isPerson(value)) {
              var value = this._checkNickname(value);
            }
            this.freeters[v].push(value);
          }
        }
        this.freeters[v].reverse();
        if (this.freeters[v].length) {
          this.nameset_offset += 1;
        }
      };
      CSL4.NameOutput.prototype._getPersonsAndInstitutions = function(v, values) {
        this.persons[v] = [];
        this.institutions[v] = [];
        if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
          return;
        }
        var persons = [];
        var has_affiliates = false;
        var first = true;
        for (var i = values.length - 1; i > -1; i += -1) {
          if (this.isPerson(values[i])) {
            var value = this._checkNickname(values[i]);
            if (value) {
              persons.push(value);
            }
          } else {
            has_affiliates = true;
            this.institutions[v].push(values[i]);
            if (!first) {
              persons.reverse();
              this.persons[v].push(persons);
              persons = [];
            }
            first = false;
          }
        }
        if (has_affiliates) {
          persons.reverse();
          this.persons[v].push(persons);
          this.persons[v].reverse();
          this.institutions[v].reverse();
        }
      };
      CSL4.NameOutput.prototype._clearValues = function(values) {
        for (var i = values.length - 1; i > -1; i += -1) {
          values.pop();
        }
      };
      CSL4.NameOutput.prototype._checkNickname = function(name) {
        if (["interview", "personal_communication"].indexOf(this.Item.type) > -1) {
          var author2 = "";
          author2 = CSL4.Util.Names.getRawName(name);
          if (author2 && this.state.sys.getAbbreviation && !(this.item && this.item["suppress-author"])) {
            var normalizedKey = author2;
            if (this.state.sys.normalizeAbbrevsKey) {
              normalizedKey = this.state.sys.normalizeAbbrevsKey("author", author2);
            }
            this.state.transform.loadAbbreviation("default", "nickname", normalizedKey, this.Item.language);
            var myLocalName = this.state.transform.abbrevs["default"].nickname[normalizedKey];
            if (myLocalName) {
              if (myLocalName === "!here>>>") {
                name = false;
              } else {
                name = { family: myLocalName, given: "" };
              }
            }
          }
        }
        return name;
      };
      CSL4.NameOutput.prototype._purgeEmptyBlobs = function(blobs) {
        for (var i = blobs.length - 1; i > -1; i += -1) {
          if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {
            blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));
          }
        }
        return blobs;
      };
      CSL4.NameOutput.prototype.joinPersons = function(blobs, pos, j, tokenname) {
        var ret;
        blobs = this._purgeEmptyBlobs(blobs);
        if (!tokenname) {
          tokenname = "name";
        }
        if (typeof j === "undefined") {
          if (this.etal_spec[pos].freeters === 1) {
            ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].freeters === 2) {
            ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
          } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
        } else {
          if (this.etal_spec[pos].persons[j] === 1) {
            ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].persons[j] === 2) {
            ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
          } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
        }
        return ret;
      };
      CSL4.NameOutput.prototype.joinInstitutionSets = function(blobs, pos) {
        var ret;
        blobs = this._purgeEmptyBlobs(blobs);
        if (this.etal_spec[pos].institutions === 1) {
          ret = this._joinEtAl(blobs, "institution");
        } else if (this.etal_spec[pos].institutions === 2) {
          ret = this._joinEllipsis(blobs, "institution");
        } else {
          ret = this._joinAnd(blobs);
        }
        return ret;
      };
      CSL4.NameOutput.prototype.joinPersonsAndInstitutions = function(blobs) {
        blobs = this._purgeEmptyBlobs(blobs);
        var ret = this._join(blobs, this.state.tmp.name_delimiter);
        ret.isInstitution = true;
        return ret;
      };
      CSL4.NameOutput.prototype.joinFreetersAndInstitutionSets = function(blobs) {
        blobs = this._purgeEmptyBlobs(blobs);
        var ret = this._join(blobs, "[never here]", this["with"].single, this["with"].multiple);
        return ret;
      };
      CSL4.NameOutput.prototype._getAfterInvertedName = function(blobs, delimiter, finalJoin) {
        if (finalJoin && blobs.length > 1) {
          if (this.state.inheritOpt(this.name, "delimiter-precedes-last") === "after-inverted-name") {
            var prevBlob = blobs[blobs.length - 2];
            if (prevBlob.blobs.length > 0 && prevBlob.blobs[0].isInverted) {
              finalJoin.strings.prefix = delimiter;
            }
          }
        }
        return finalJoin;
      };
      CSL4.NameOutput.prototype._getAndJoin = function(blobs, delimiter) {
        var finalJoin = false;
        if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
            singleOrMultiple = "multiple";
          }
          if (blobs[blobs.length - 1].isInstitution) {
            finalJoin = this.institution.and[singleOrMultiple];
          } else {
            finalJoin = this.name.and[singleOrMultiple];
          }
          finalJoin = JSON.parse(JSON.stringify(finalJoin));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
        }
        return finalJoin;
      };
      CSL4.NameOutput.prototype._joinEtAl = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var blob = this._join(blobs, delimiter);
        this.state.output.openLevel(this._getToken("name"));
        this.state.output.current.value().strings.delimiter = "";
        this.state.output.append(blob, "literal", true);
        if (blobs.length > 1) {
          this.state.output.append(this["et-al"].multiple, "literal", true);
        } else if (blobs.length === 1) {
          this.state.output.append(this["et-al"].single, "literal", true);
        }
        this.state.output.closeLevel();
        return this.state.output.pop();
      };
      CSL4.NameOutput.prototype._joinEllipsis = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var finalJoin = false;
        if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
            singleOrMultiple = "multiple";
          }
          finalJoin = JSON.parse(JSON.stringify(this.name.ellipsis[singleOrMultiple]));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
        }
        return this._join(blobs, delimiter, finalJoin);
      };
      CSL4.NameOutput.prototype._joinAnd = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var finalJoin = this._getAndJoin(blobs, delimiter);
        return this._join(blobs, delimiter, finalJoin);
      };
      CSL4.NameOutput.prototype._join = function(blobs, delimiter, finalJoin) {
        var i, ilen;
        if (!blobs) {
          return false;
        }
        blobs = this._purgeEmptyBlobs(blobs);
        if (!blobs.length) {
          return false;
        }
        if (blobs.length > 1) {
          if (blobs.length === 2) {
            if (!finalJoin) {
              blobs[0].strings.suffix += delimiter;
            } else {
              blobs = [blobs[0], finalJoin, blobs[1]];
            }
          } else {
            var offset;
            if (finalJoin) {
              offset = 1;
            } else {
              offset = 0;
            }
            var blob = blobs.pop();
            for (var i = 0, ilen = blobs.length - offset; i < ilen; i++) {
              blobs[i].strings.suffix += delimiter;
            }
            blobs.push(finalJoin);
            blobs.push(blob);
          }
        }
        this.state.output.openLevel();
        for (i = 0, ilen = blobs.length; i < ilen; i += 1) {
          this.state.output.append(blobs[i], false, true);
        }
        this.state.output.closeLevel();
        return this.state.output.pop();
      };
      CSL4.NameOutput.prototype._getToken = function(tokenname) {
        var token = this[tokenname];
        if (tokenname === "institution") {
          var newtoken = new CSL4.Token();
          return newtoken;
        }
        return token;
      };
      CSL4.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {
        if (!requireMatch) {
          return false;
        }
        var common_term = false;
        if (this.variables.length === 2) {
          var variables = this.variables;
          var varnames = variables.slice();
          varnames.sort();
          common_term = varnames.join("");
        }
        if (!common_term) {
          return false;
        }
        var has_term = false;
        if (this.state.locale[this.state.opt.lang].terms[common_term]) {
          has_term = true;
        }
        if (!has_term) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
          return false;
        }
        var firstSet = this.Item[this.variables[0]];
        var secondSet = this.Item[this.variables[1]];
        var perfectMatch = this._compareNamesets(firstSet, secondSet);
        if (perfectMatch === true) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
        }
        return !perfectMatch;
      };
      CSL4.NameOutput.prototype.setCommonTerm = function() {
        var variables = this.variables;
        var varnames = variables.slice();
        varnames.sort();
        this.common_term = varnames.join("");
        if (!this.common_term) {
          return;
        }
        var has_term = false;
        if (this.label && this.label[this.variables[0]]) {
          if (this.label[this.variables[0]].before) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);
          } else if (this.label[this.variables[0]].after) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);
          }
        }
        if (!this.state.locale[this.state.opt.lang].terms[this.common_term] || !has_term || this.variables.length < 2) {
          this.common_term = false;
          return;
        }
        var freeters_offset = 0;
        for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {
          var v = this.variables[i];
          var vv = this.variables[i + 1];
          if (this.freeters[v].length || this.freeters[vv].length) {
            if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {
              this.common_term = false;
              return;
            }
            freeters_offset += 1;
          }
          if (this.persons[v].length !== this.persons[vv].length) {
            this.common_term = false;
            return;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j] || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {
              this.common_term = false;
              return;
            }
          }
        }
      };
      CSL4.NameOutput.prototype._compareNamesets = function(base_nameset, nameset) {
        if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {
          return false;
        }
        for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {
          for (var j = 0, jlen = CSL4.NAME_PARTS.length; j < jlen; j += 1) {
            var part = CSL4.NAME_PARTS[j];
            if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {
              return false;
            }
          }
        }
        return true;
      };
      CSL4.NameOutput.prototype.constrainNames = function() {
        this.names_count = 0;
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this.state.tmp.names_max.push(this.freeters[v].length, "literal");
            this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);
            this.names_count += this.freeters[v].length;
          }
          if (this.institutions[v].length) {
            this.state.tmp.names_max.push(this.institutions[v].length, "literal");
            this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.names_count += this.institutions[v].length;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
              this.state.tmp.names_max.push(this.persons[v][j].length, "literal");
              this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);
              this.names_count += this.persons[v][j].length;
            }
          }
        }
      };
      CSL4.NameOutput.prototype._imposeNameConstraints = function(lst, count, key, pos) {
        var display_names = lst[key];
        var discretionary_names_length = this.state.tmp["et-al-min"];
        if (this.state.tmp.suppress_decorations) {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {
            discretionary_names_length = this.state.tmp.disambig_request.names[pos];
          } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
          }
        } else {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {
            if (count[key] < this.etal_min) {
              discretionary_names_length = count[key];
            } else {
              discretionary_names_length = this.state.tmp.disambig_request.names[pos];
            }
          } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
          }
          if (this.etal_use_last && discretionary_names_length > this.etal_min - 2) {
            discretionary_names_length = this.etal_min - 2;
          }
        }
        var sane = this.etal_min >= this.etal_use_first;
        var overlength = count[key] > discretionary_names_length;
        if (discretionary_names_length > count[key]) {
          discretionary_names_length = display_names.length;
        }
        if (sane && overlength) {
          if (this.etal_use_last) {
            lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));
          } else {
            lst[key] = display_names.slice(0, discretionary_names_length);
          }
        }
        this.state.tmp.disambig_settings.names[pos] = lst[key].length;
        this.state.disambiguate.padBase(this.state.tmp.disambig_settings);
      };
      CSL4.NameOutput.prototype.disambigNames = function() {
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this._runDisambigNames(this.freeters[v], pos);
          }
          if (this.institutions[v].length) {
            if (typeof this.state.tmp.disambig_settings.givens[pos] === "undefined") {
              this.state.tmp.disambig_settings.givens[pos] = [];
            }
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              if (typeof this.state.tmp.disambig_settings.givens[pos][j] === "undefined") {
                this.state.tmp.disambig_settings.givens[pos].push(2);
              }
            }
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
              this._runDisambigNames(this.persons[v][j], pos);
            }
          }
        }
      };
      CSL4.NameOutput.prototype._runDisambigNames = function(lst, pos) {
        var chk, myform, myinitials, param, i, ilen, paramx;
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          if (!lst[i].given && !lst[i].family) {
            continue;
          }
          myinitials = this.state.inheritOpt(this.name, "initialize-with");
          this.state.registry.namereg.addname("" + this.Item.id, lst[i], i);
          chk = this.state.tmp.disambig_settings.givens[pos];
          if (typeof chk === "undefined") {
            for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {
              if (!this.state.tmp.disambig_settings.givens[j]) {
                this.state.tmp.disambig_settings.givens[j] = [];
              }
            }
          }
          chk = this.state.tmp.disambig_settings.givens[pos][i];
          if (typeof chk === "undefined") {
            myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
            param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
            this.state.tmp.disambig_settings.givens[pos].push(param);
          }
          myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
          paramx = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
          if (this.state.tmp.disambig_request) {
            var val = this.state.tmp.disambig_settings.givens[pos][i];
            if (val === 1 && this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && (typeof this.state.inheritOpt(this.name, "initialize-with") === "undefined" || typeof lst[i].given === "undefined")) {
              val = 2;
            }
            param = val;
            if (this.state.opt["disambiguate-add-givenname"] && lst[i].given) {
              param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, "form", "name-form", "long"), this.state.inheritOpt(this.name, "initialize-with"));
            }
          } else {
            param = paramx;
          }
          if (!this.state.tmp.just_looking && this.item && this.item.position === CSL4.POSITION_FIRST) {
            if (paramx > param) {
              param = paramx;
            }
          }
          if (!this.state.tmp.sort_key_flag) {
            this.state.tmp.disambig_settings.givens[pos][i] = param;
            if (typeof myinitials === "string" && (typeof this.name.strings["initialize"] === "undefined" || this.name.strings["initialize"] === true)) {
              this.state.tmp.disambig_settings.use_initials = true;
            }
          }
        }
      };
      CSL4.NameOutput.prototype.getEtAlConfig = function() {
        var item = this.item;
        this["et-al"] = {};
        this.state.output.append(this.etal_term, this.etal_style, true);
        this["et-al"].single = this.state.output.pop();
        this["et-al"].single.strings.suffix = this.etal_suffix;
        this["et-al"].single.strings.prefix = this.etal_prefix_single;
        this.state.output.append(this.etal_term, this.etal_style, true);
        this["et-al"].multiple = this.state.output.pop();
        this["et-al"].multiple.strings.suffix = this.etal_suffix;
        this["et-al"].multiple.strings.prefix = this.etal_prefix_multiple;
        if (typeof item === "undefined") {
          item = {};
        }
        if (item.position) {
          if (this.state.inheritOpt(this.name, "et-al-subsequent-min")) {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-subsequent-min");
          } else {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.inheritOpt(this.name, "et-al-subsequent-use-first")) {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-subsequent-use-first");
          } else {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
        } else {
          if (this.state.tmp["et-al-min"]) {
            this.etal_min = this.state.tmp["et-al-min"];
          } else {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.tmp["et-al-use-first"]) {
            this.etal_use_first = this.state.tmp["et-al-use-first"];
          } else {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
          if (typeof this.state.tmp["et-al-use-last"] === "boolean") {
            this.etal_use_last = this.state.tmp["et-al-use-last"];
          } else {
            this.etal_use_last = this.state.inheritOpt(this.name, "et-al-use-last");
          }
        }
        if (!this.state.tmp["et-al-min"]) {
          this.state.tmp["et-al-min"] = this.etal_min;
        }
      };
      CSL4.NameOutput.prototype.setEtAlParameters = function() {
        var i, ilen, j, jlen;
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if (typeof this.etal_spec[v] === "undefined") {
            this.etal_spec[v] = { freeters: 0, institutions: 0, persons: [] };
          }
          this.etal_spec[this.nameset_base + i] = this.etal_spec[v];
          if (this.freeters[v].length) {
            this._setEtAlParameter("freeters", v);
          }
          for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (typeof this.etal_spec[v][j] === "undefined") {
              this.etal_spec[v].persons[j] = 0;
            }
            this._setEtAlParameter("persons", v, j);
          }
          if (this.institutions[v].length) {
            this._setEtAlParameter("institutions", v);
          }
        }
      };
      CSL4.NameOutput.prototype._setEtAlParameter = function(type2, v, j) {
        var lst, count;
        if (type2 === "persons") {
          lst = this.persons[v][j];
          count = this.persons_count[v][j];
        } else {
          lst = this[type2][v];
          count = this[type2 + "_count"][v];
        }
        if (lst.length < count && !this.state.tmp.sort_key_flag) {
          if (this.etal_use_last) {
            if (type2 === "persons") {
              this.etal_spec[v].persons[j] = 2;
            } else {
              this.etal_spec[v][type2] = 2;
            }
          } else {
            if (type2 === "persons") {
              this.etal_spec[v].persons[j] = 1;
            } else {
              this.etal_spec[v][type2] = 1;
            }
          }
        } else {
          if (type2 === "persons") {
            this.etal_spec[v].persons[j] = 0;
          } else {
            this.etal_spec[v][type2] = 0;
          }
        }
      };
      CSL4.NameOutput.prototype.renderAllNames = function() {
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if (this.freeters[v].length || this.institutions[v].length) {
            if (!this.state.tmp.group_context.tip.condition) {
              this.state.tmp.just_did_number = false;
            }
          }
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this.freeters[v] = this._renderNames(v, this.freeters[v], pos);
          }
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);
          }
        }
        this.renderInstitutionNames();
      };
      CSL4.NameOutput.prototype.renderInstitutionNames = function() {
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            var institution2;
            var name = this.institutions[v][j];
            var j, jlen, localesets;
            if (this.state.tmp.extension) {
              localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
              localesets = this.state.opt["cite-lang-prefs"].institutions;
            } else {
              localesets = this.state.opt["cite-lang-prefs"].persons;
            }
            var slot = { primary: "locale-orig", secondary: false, tertiary: false };
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 < k) {
                  break;
                }
                if (localesets[k]) {
                  slot[slotnames[k]] = "locale-" + localesets[k];
                }
              }
            } else {
              slot.primary = "locale-translat";
            }
            if (this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            this.setRenderedName(name);
            var institution2 = this._renderInstitutionName(v, name, slot, j);
            this.institutions[v][j] = institution2;
          }
        }
      };
      CSL4.NameOutput.prototype._renderInstitutionName = function(v, name, slot, j) {
        var secondary, tertiary, long_style, short_style, institution2, institution_short, institution_long;
        var res = this.getName(name, slot.primary, true);
        var primary = res.name;
        var usedOrig = res.usedOrig;
        if (primary) {
          primary = this.fixupInstitution(primary, v, j);
        }
        secondary = false;
        if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, usedOrig);
          var secondary = res.name;
          usedOrig = res.usedOrig;
          if (secondary) {
            secondary = this.fixupInstitution(secondary, v, j);
          }
        }
        tertiary = false;
        if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, usedOrig);
          tertiary = res.name;
          if (tertiary) {
            tertiary = this.fixupInstitution(tertiary, v, j);
          }
        }
        var n = {
          l: {
            pri: false,
            sec: false,
            ter: false
          },
          s: {
            pri: false,
            sec: false,
            ter: false
          }
        };
        if (primary) {
          n.l.pri = primary["long"];
          n.s.pri = primary["short"].length ? primary["short"] : primary["long"];
        }
        if (secondary) {
          n.l.sec = secondary["long"];
          n.s.sec = secondary["short"].length ? secondary["short"] : secondary["long"];
        }
        if (tertiary) {
          n.l.ter = tertiary["long"];
          n.s.ter = tertiary["short"].length ? tertiary["short"] : tertiary["long"];
        }
        switch (this.institution.strings["institution-parts"]) {
          case "short":
            if (primary["short"].length) {
              short_style = this._getShortStyle();
              institution2 = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];
            } else {
              long_style = this._getLongStyle(primary, v, j);
              institution2 = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
            }
            break;
          case "short-long":
            long_style = this._getLongStyle(primary, v, j);
            short_style = this._getShortStyle();
            institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
            institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
            institution2 = [institution_short, institution_long];
            break;
          case "long-short":
            long_style = this._getLongStyle(primary, v, j);
            short_style = this._getShortStyle();
            institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
            institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
            institution2 = [institution_long, institution_short];
            break;
          default:
            long_style = this._getLongStyle(primary, v, j);
            institution2 = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
            break;
        }
        var blob = this._join(institution2, " ");
        if (blob) {
          blob.isInstitution = true;
        }
        this.state.tmp.name_node.children.push(blob);
        return blob;
      };
      CSL4.NameOutput.prototype._composeOneInstitutionPart = function(names2, slot, style) {
        var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;
        if (names2[0]) {
          primary_tok = CSL4.Util.cloneToken(style);
          if (this.state.opt.citeAffixes[slot.primary]) {
            if (this.state.opt.citeAffixes.institutions[slot.primary].prefix === "<i>") {
              var hasItalic = false;
              for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                if (style.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                  hasItalic = true;
                }
              }
              if (!hasItalic) {
                primary_tok.decorations.push(["@font-style", "italic"]);
              }
            }
          }
          primary = this._renderOneInstitutionPart(names2[0], primary_tok);
        }
        if (names2[1]) {
          secondary = this._renderOneInstitutionPart(names2[1], style);
        }
        if (names2[2]) {
          tertiary = this._renderOneInstitutionPart(names2[2], style);
        }
        var institutionblob;
        if (secondary || tertiary) {
          this.state.output.openLevel("empty");
          this.state.output.append(primary);
          secondary_tok = CSL4.Util.cloneToken(style);
          if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;
            if (!secondary_tok.strings.prefix) {
              secondary_tok.strings.prefix = " ";
            }
          }
          var secondary_outer = new CSL4.Token();
          secondary_outer.decorations.push(["@font-style", "normal"]);
          secondary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(secondary_outer);
          this.state.output.append(secondary, secondary_tok);
          this.state.output.closeLevel();
          tertiary_tok = CSL4.Util.cloneToken(style);
          if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;
            if (!tertiary_tok.strings.prefix) {
              tertiary_tok.strings.prefix = " ";
            }
          }
          var tertiary_outer = new CSL4.Token();
          tertiary_outer.decorations.push(["@font-style", "normal"]);
          tertiary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(tertiary_outer);
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
          this.state.output.closeLevel();
          institutionblob = this.state.output.pop();
        } else {
          institutionblob = primary;
        }
        return institutionblob;
      };
      CSL4.NameOutput.prototype._renderOneInstitutionPart = function(blobs, style) {
        for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          if (blobs[i]) {
            var str = blobs[i];
            if (this.state.tmp.strip_periods) {
              str = str.replace(/\./g, "");
            } else {
              for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {
                if (style.decorations[j][0] === "@strip-periods" && style.decorations[j][1] === "true") {
                  str = str.replace(/\./g, "");
                  break;
                }
              }
            }
            this.state.tmp.group_context.tip.variable_success = true;
            this.state.tmp.can_substitute.replace(false, CSL4.LITERAL);
            if (str === "!here>>>") {
              blobs[i] = false;
            } else {
              this.state.output.append(str, style, true);
              blobs[i] = this.state.output.pop();
            }
          }
        }
        if (typeof this.institution.strings["part-separator"] === "undefined") {
          this.institution.strings["part-separator"] = this.state.tmp.name_delimiter;
        }
        return this._join(blobs, this.institution.strings["part-separator"]);
      };
      CSL4.NameOutput.prototype._renderNames = function(v, values, pos, j) {
        var ret = false;
        if (values.length) {
          var names2 = [];
          for (var i = 0, ilen = values.length; i < ilen; i += 1) {
            var name = values[i];
            var ret, localesets;
            if (this.state.tmp.extension) {
              localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
              localesets = this.state.opt["cite-lang-prefs"].institutions;
            } else {
              localesets = this.state.opt["cite-lang-prefs"].persons;
            }
            var slot = { primary: "locale-orig", secondary: false, tertiary: false };
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 < k) {
                  break;
                }
                slot[slotnames[k]] = "locale-" + localesets[k];
              }
            } else {
              slot.primary = "locale-translat";
            }
            if (this.state.tmp.sort_key_flag || this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            this.setRenderedName(name);
            if (!name.literal && !name.isInstitution) {
              var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);
              var nameToken = CSL4.Util.cloneToken(this.name);
              this.state.output.append(nameBlob, nameToken, true);
              names2.push(this.state.output.pop());
            } else {
              names2.push(this._renderInstitutionName(v, name, slot, j));
            }
          }
          ret = this.joinPersons(names2, pos, j);
        }
        return ret;
      };
      CSL4.NameOutput.prototype._renderPersonalName = function(v, name, slot, pos, i, j) {
        var res = this.getName(name, slot.primary, true);
        var primary = this._renderOnePersonalName(res.name, pos, i, j);
        var secondary = false;
        if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, res.usedOrig);
          if (res.name) {
            secondary = this._renderOnePersonalName(res.name, pos, i, j);
          }
        }
        var tertiary = false;
        if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, res.usedOrig);
          if (res.name) {
            tertiary = this._renderOnePersonalName(res.name, pos, i, j);
          }
        }
        var personblob;
        if (secondary || tertiary) {
          this.state.output.openLevel("empty");
          this.state.output.append(primary);
          var secondary_tok = new CSL4.Token();
          if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;
            if (!secondary_tok.strings.prefix) {
              secondary_tok.strings.prefix = " ";
            }
          }
          this.state.output.append(secondary, secondary_tok);
          var tertiary_tok = new CSL4.Token();
          if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;
            if (!tertiary_tok.strings.prefix) {
              tertiary_tok.strings.prefix = " ";
            }
          }
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
          personblob = this.state.output.pop();
        } else {
          personblob = primary;
        }
        return personblob;
      };
      CSL4.NameOutput.prototype._isRomanesque = function(name) {
        var ret = 2;
        if (!name.family.replace(/\"/g, "").match(CSL4.ROMANESQUE_REGEXP)) {
          ret = 0;
        }
        if (!ret && name.given && name.given.match(CSL4.STARTSWITH_ROMANESQUE_REGEXP)) {
          ret = 1;
        }
        var top_locale;
        if (ret == 2) {
          if (name.multi && name.multi.main) {
            top_locale = name.multi.main.slice(0, 2);
          } else if (this.Item.language) {
            top_locale = this.Item.language.slice(0, 2);
          }
          if (["ja", "zh"].indexOf(top_locale) > -1) {
            ret = 1;
          }
        }
        return ret;
      };
      CSL4.NameOutput.prototype._renderOnePersonalName = function(value, pos, i, j) {
        var name = value;
        var dropping_particle = this._droppingParticle(name, pos, j);
        var family = this._familyName(name);
        var non_dropping_particle = this._nonDroppingParticle(name);
        var givenInfo = this._givenName(name, pos, i);
        var given = givenInfo.blob;
        var suffix = this._nameSuffix(name);
        if (given === false) {
          dropping_particle = false;
          suffix = false;
        }
        var sort_sep = this.state.inheritOpt(this.name, "sort-separator");
        if (!sort_sep) {
          sort_sep = "";
        }
        var suffix_sep;
        if (name["comma-suffix"]) {
          suffix_sep = ", ";
        } else {
          suffix_sep = " ";
        }
        var romanesque = this._isRomanesque(name);
        function hasJoiningPunctuation(blob2) {
          if (!blob2) {
            return false;
          } else if (typeof blob2.blobs === "string") {
            if (["\u2019", "'", "-", " "].indexOf(blob2.blobs.slice(-1)) > -1) {
              return true;
            } else {
              return false;
            }
          } else {
            return hasJoiningPunctuation(blob2.blobs[blob2.blobs.length - 1]);
          }
        }
        var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);
        var nbspace;
        if (["fr", "ru", "cs"].indexOf(this.state.opt["default-locale"][0].slice(0, 2)) > -1) {
          nbspace = "\xA0";
        } else {
          nbspace = " ";
        }
        var blob, merged, first, second;
        if (romanesque === 0) {
          blob = this._join([non_dropping_particle, family, given], "");
        } else if (romanesque === 1 || name["static-ordering"]) {
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([merged, given], " ");
        } else if (name["reverse-ordering"]) {
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([given, merged], " ");
        } else if (this.state.tmp.sort_key_flag) {
          if (this.state.opt["demote-non-dropping-particle"] === "never") {
            merged = this._join([non_dropping_particle, family], nbspace);
            merged = this._join([merged, dropping_particle], " ");
            merged = this._join([merged, given], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
          } else {
            second = this._join([given, dropping_particle, non_dropping_particle], " ");
            merged = this._join([family, second], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
          }
        } else if (this.state.inheritOpt(this.name, "name-as-sort-order") === "all" || this.state.inheritOpt(this.name, "name-as-sort-order") === "first" && i === 0 && (j === 0 || typeof j === "undefined")) {
          if (["Lord", "Lady"].indexOf(name.given) > -1) {
            sort_sep = ", ";
          }
          if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1) {
            second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
            second = this._join([second, non_dropping_particle], " ");
            if (second && this.given) {
              second.strings.prefix = this.given.strings.prefix;
              second.strings.suffix = this.given.strings.suffix;
            }
            if (family && this.family) {
              family.strings.prefix = this.family.strings.prefix;
              family.strings.suffix = this.family.strings.suffix;
            }
            merged = this._join([family, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
          } else {
            if (has_hyphenated_non_dropping_particle) {
              first = this._join([non_dropping_particle, family], "");
            } else {
              first = this._join([non_dropping_particle, family], nbspace);
            }
            if (first && this.family) {
              first.strings.prefix = this.family.strings.prefix;
              first.strings.suffix = this.family.strings.suffix;
            }
            second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
            if (second && this.given) {
              second.strings.prefix = this.given.strings.prefix;
              second.strings.suffix = this.given.strings.suffix;
            }
            merged = this._join([first, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
          }
          blob.isInverted = true;
        } else {
          if (name["dropping-particle"] && name.family && !name["non-dropping-particle"]) {
            var dp = name["dropping-particle"];
            var apostrophes = ["'", "\u02BC", "\u2019", "-"];
            if (apostrophes.indexOf(dp.slice(-1)) > -1 && dp.slice(0, -1) !== "de") {
              family = this._join([dropping_particle, family], "");
              dropping_particle = false;
            }
          }
          if (has_hyphenated_non_dropping_particle) {
            second = this._join([non_dropping_particle, family], "");
            second = this._join([dropping_particle, second], nbspace);
          } else {
            second = this._join([dropping_particle, non_dropping_particle, family], nbspace);
          }
          second = this._join([second, suffix], suffix_sep);
          if (second && this.family) {
            second.strings.prefix = this.family.strings.prefix;
            second.strings.suffix = this.family.strings.suffix;
          }
          if (given && this.given) {
            given.strings.prefix = this.given.strings.prefix;
            given.strings.suffix = this.given.strings.suffix;
          }
          if (second.strings.prefix) {
            name["comma-dropping-particle"] = "";
          }
          var space;
          if (this.state.inheritOpt(this.name, "initialize-with") && this.state.inheritOpt(this.name, "initialize-with").match(/[\u00a0\ufeff]/) && givenInfo.initializationLevel === 1) {
            space = nbspace;
          } else {
            space = " ";
          }
          blob = this._join([given, second], name["comma-dropping-particle"] + space);
        }
        this.state.tmp.group_context.tip.variable_success = true;
        this.state.tmp.can_substitute.replace(false, CSL4.LITERAL);
        this.state.tmp.term_predecessor = true;
        this.state.tmp.name_node.children.push(blob);
        return blob;
      };
      CSL4.NameOutput.prototype._normalizeNameInput = function(value) {
        var name = {
          literal: value.literal,
          family: value.family,
          isInstitution: value.isInstitution,
          given: value.given,
          suffix: value.suffix,
          "comma-suffix": value["comma-suffix"],
          "non-dropping-particle": value["non-dropping-particle"],
          "dropping-particle": value["dropping-particle"],
          "static-ordering": value["static-ordering"],
          "static-particles": value["static-particles"],
          "reverse-ordering": value["reverse-ordering"],
          "full-form-always": value["full-form-always"],
          "parse-names": value["parse-names"],
          "comma-dropping-particle": "",
          block_initialize: value.block_initialize,
          multi: value.multi
        };
        this._parseName(name);
        return name;
      };
      CSL4.NameOutput.prototype._stripPeriods = function(tokname, str) {
        var decor_tok = this[tokname + "_decor"];
        if (str) {
          if (this.state.tmp.strip_periods) {
            str = str.replace(/\./g, "");
          } else if (decor_tok) {
            for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {
              if (decor_tok.decorations[i][0] === "@strip-periods" && decor_tok.decorations[i][1] === "true") {
                str = str.replace(/\./g, "");
                break;
              }
            }
          }
        }
        return str;
      };
      CSL4.NameOutput.prototype._nonDroppingParticle = function(name) {
        var ndp = name["non-dropping-particle"];
        if (ndp && this.state.tmp.sort_key_flag) {
          ndp = ndp.replace(/[\'\u2019]/, "");
        }
        var str = this._stripPeriods("family", ndp);
        if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL4.NameOutput.prototype._droppingParticle = function(name, pos, j) {
        var dp = name["dropping-particle"];
        if (dp && this.state.tmp.sort_key_flag) {
          dp = dp.replace(/[\'\u2019]/, "");
        }
        var str = this._stripPeriods("given", dp);
        if (name["dropping-particle"] && name["dropping-particle"].match(/^et.?al[^a-z]$/)) {
          if (this.state.inheritOpt(this.name, "et-al-use-last")) {
            if (typeof j === "undefined") {
              this.etal_spec[pos].freeters = 2;
            } else {
              this.etal_spec[pos].persons = 2;
            }
          } else {
            if (typeof j === "undefined") {
              this.etal_spec[pos].freeters = 1;
            } else {
              this.etal_spec[pos].persons = 1;
            }
          }
          name["comma-dropping-particle"] = "";
        } else if (this.state.output.append(str, this.given_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL4.NameOutput.prototype._familyName = function(name) {
        var str = this._stripPeriods("family", name.family);
        if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL4.NameOutput.prototype._givenName = function(name, pos, i) {
        var ret;
        var formIsShort = this.state.inheritOpt(this.name, "form", "name-form", "long") !== "long";
        var initializeIsTurnedOn = this.state.inheritOpt(this.name, "initialize") !== false;
        var hasInitializeWith = typeof this.state.inheritOpt(this.name, "initialize-with") === "string" && !name.block_initialize;
        var defaultLevel;
        var useLevel;
        if (name["full-form-always"]) {
          useLevel = 2;
        } else {
          if (formIsShort) {
            defaultLevel = 0;
          } else if (hasInitializeWith) {
            defaultLevel = 1;
          } else {
            defaultLevel = 2;
          }
          var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];
          if (requestedLevel > defaultLevel) {
            useLevel = requestedLevel;
          } else {
            useLevel = defaultLevel;
          }
        }
        var gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
        if (gdropt && gdropt.slice(-14) === "-with-initials") {
          hasInitializeWith = true;
        }
        if (name.family && useLevel === 1) {
          if (hasInitializeWith) {
            var initialize_with = this.state.inheritOpt(this.name, "initialize-with", false, "");
            name.given = CSL4.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);
          } else {
            name.given = CSL4.Util.Names.unInitialize(this.state, name.given);
          }
        } else if (useLevel === 0) {
          return {
            blob: false
          };
        } else if (useLevel === 2) {
          name.given = CSL4.Util.Names.unInitialize(this.state, name.given);
        }
        var str = this._stripPeriods("given", name.given);
        var rendered = this.state.output.append(str, this.given_decor, true);
        if (rendered) {
          ret = this.state.output.pop();
          return {
            blob: ret,
            initializationLevel: useLevel
          };
        }
        return {
          blob: false
        };
      };
      CSL4.NameOutput.prototype._nameSuffix = function(name) {
        var str = name.suffix, ret;
        if (str && typeof this.state.inheritOpt(this.name, "initialize-with") === "string") {
          str = CSL4.Util.Names.initializeWith(this.state, str, this.state.inheritOpt(this.name, "initialize-with"), true);
        }
        str = this._stripPeriods("family", str);
        var toSuffix = "";
        if (str && str.slice(-1) === ".") {
          str = str.slice(0, -1);
          toSuffix = ".";
        }
        var rendered = this.state.output.append(str, "empty", true);
        if (rendered) {
          ret = this.state.output.pop();
          ret.strings.suffix = toSuffix + ret.strings.suffix;
          return ret;
        }
        return false;
      };
      CSL4.NameOutput.prototype._getLongStyle = function(name) {
        var long_style;
        if (name["short"].length) {
          if (this.institutionpart["long-with-short"]) {
            long_style = this.institutionpart["long-with-short"];
          } else {
            long_style = this.institutionpart["long"];
          }
        } else {
          long_style = this.institutionpart["long"];
        }
        if (!long_style) {
          long_style = new CSL4.Token();
        }
        return long_style;
      };
      CSL4.NameOutput.prototype._getShortStyle = function() {
        var short_style;
        if (this.institutionpart["short"]) {
          short_style = this.institutionpart["short"];
        } else {
          short_style = new CSL4.Token();
        }
        return short_style;
      };
      CSL4.NameOutput.prototype._parseName = function(name) {
        if (!name["parse-names"] && typeof name["parse-names"] !== "undefined") {
          return name;
        }
        if (name.family && !name.given && name.isInstitution) {
          name.literal = name.family;
          name.family = void 0;
          name.isInstitution = void 0;
        }
        var noparse;
        if (name.family && (name.family.slice(0, 1) === '"' && name.family.slice(-1) === '"') || !name["parse-names"] && typeof name["parse-names"] !== "undefined") {
          name.family = name.family.slice(1, -1);
          noparse = true;
          name["parse-names"] = 0;
        } else {
          noparse = false;
        }
        if (this.state.opt.development_extensions.parse_names) {
          if (!name["non-dropping-particle"] && name.family && !noparse && name.given) {
            if (!name["static-particles"]) {
              CSL4.parseParticles(name, true);
            }
          }
        }
      };
      CSL4.NameOutput.prototype.getName = function(name, slotLocaleset, fallback, stopOrig) {
        if (stopOrig && slotLocaleset === "locale-orig") {
          return { name: false, usedOrig: stopOrig };
        }
        if (!name.family) {
          name.family = "";
        }
        if (!name.given) {
          name.given = "";
        }
        var name_params = {};
        name_params["static-ordering"] = this.getStaticOrder(name);
        var foundTag = true;
        var langTag;
        if (slotLocaleset !== "locale-orig") {
          foundTag = false;
          if (name.multi) {
            var langTags = this.state.opt[slotLocaleset];
            for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {
              langTag = langTags[i];
              if (name.multi._key[langTag]) {
                foundTag = true;
                var isInstitution = name.isInstitution;
                name = name.multi._key[langTag];
                name.isInstitution = isInstitution;
                name_params = this.getNameParams(langTag);
                name_params.transliterated = true;
                break;
              }
            }
          }
        }
        if (!foundTag) {
          langTag = false;
          if (name.multi && name.multi.main) {
            langTag = name.multi.main;
          } else if (this.Item.language) {
            langTag = this.Item.language;
          }
          if (langTag) {
            name_params = this.getNameParams(langTag);
          }
        }
        if (!fallback && !foundTag) {
          return { name: false, usedOrig: stopOrig };
        }
        if (!name.family) {
          name.family = "";
        }
        if (!name.given) {
          name.given = "";
        }
        if (name.literal) {
          delete name.family;
          delete name.given;
        }
        name = {
          family: name.family,
          given: name.given,
          "non-dropping-particle": name["non-dropping-particle"],
          "dropping-particle": name["dropping-particle"],
          suffix: name.suffix,
          "static-ordering": name_params["static-ordering"],
          "static-particles": name["static-particles"],
          "reverse-ordering": name_params["reverse-ordering"],
          "full-form-always": name_params["full-form-always"],
          "parse-names": name["parse-names"],
          "comma-suffix": name["comma-suffix"],
          "comma-dropping-particle": name["comma-dropping-particle"],
          transliterated: name_params.transliterated,
          block_initialize: name_params["block-initialize"],
          literal: name.literal,
          isInstitution: name.isInstitution,
          multi: name.multi
        };
        if (!name.literal && (!name.given && name.family && name.isInstitution)) {
          name.literal = name.family;
        }
        if (name.literal) {
          delete name.family;
          delete name.given;
        }
        name = this._normalizeNameInput(name);
        var usedOrig;
        if (stopOrig) {
          usedOrig = stopOrig;
        } else {
          usedOrig = !foundTag;
        }
        return { name, usedOrig };
      };
      CSL4.NameOutput.prototype.getNameParams = function(langTag) {
        var ret = {};
        var langspec = CSL4.localeResolve(this.Item.language, this.state.opt["default-locale"][0]);
        var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt["default-locale"][0];
        var name_as_sort_order = this.state.locale[try_locale].opts["name-as-sort-order"];
        var name_as_reverse_order = this.state.locale[try_locale].opts["name-as-reverse-order"];
        var name_never_short = this.state.locale[try_locale].opts["name-never-short"];
        var field_lang_bare = langTag.split("-")[0];
        if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {
          ret["static-ordering"] = true;
          ret["reverse-ordering"] = false;
        }
        if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {
          ret["reverse-ordering"] = true;
          ret["static-ordering"] = false;
        }
        if (name_never_short && name_never_short[field_lang_bare]) {
          ret["full-form-always"] = true;
        }
        if (ret["static-ordering"]) {
          ret["block-initialize"] = true;
        }
        return ret;
      };
      CSL4.NameOutput.prototype.setRenderedName = function(name) {
        if (this.state.tmp.area === "bibliography") {
          var strname = "";
          for (var j = 0, jlen = CSL4.NAME_PARTS.length; j < jlen; j += 1) {
            if (name[CSL4.NAME_PARTS[j]]) {
              strname += name[CSL4.NAME_PARTS[j]];
            }
          }
          this.state.tmp.rendered_name.push(strname);
        }
      };
      CSL4.NameOutput.prototype.fixupInstitution = function(name, varname, listpos) {
        if (!name.literal && name.family) {
          name.literal = name.family;
          delete name.family;
        }
        var longNameStr = name.literal;
        var shortNameStr = longNameStr;
        var ret = {
          "long": longNameStr.split(/\s*\|\s*/),
          "short": shortNameStr.split(/\s*\|\s*/)
        };
        if (this.state.sys.getAbbreviation) {
          if (this.institution.strings.form === "short") {
            let jurisdiction2 = this.Item.jurisdiction;
            jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-entire", longNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction2]["institution-entire"][longNameStr]) {
              longNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-entire"][longNameStr];
            } else {
              jurisdiction2 = this.Item.jurisdiction;
              jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", longNameStr, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][longNameStr]) {
                longNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-part"][longNameStr];
              }
            }
            longNameStr = this._quashChecks(jurisdiction2, longNameStr);
          }
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            let jurisdiction2 = this.Item.jurisdiction;
            jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", shortNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][shortNameStr]) {
              shortNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-part"][shortNameStr];
            }
            shortNameStr = this._quashChecks(jurisdiction2, shortNameStr);
            if (["short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
              if (shortNameStr === longNameStr) {
                shortNameStr = "";
              }
            }
          }
          ret["long"] = longNameStr.split(/\s*\|\s*/);
          ret["short"] = shortNameStr.split(/\s*\|\s*/);
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            for (var j = ret["short"].length - 1; j > -1; j--) {
              let jurisdiction2 = this.Item.jurisdiction;
              var abbrevKey = ret["short"][j];
              jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", abbrevKey, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][abbrevKey]) {
                ret["short"][j] = this.state.transform.abbrevs[jurisdiction2]["institution-part"][abbrevKey];
              }
              if (ret["short"][j].indexOf("|") > -1) {
                let retShort = ret["short"];
                let splitShort = retShort[j].split(/\s*\|\s*/);
                ret["short"] = retShort.slice(0, j).concat(splitShort).concat(retShort.slice(j + 1));
              }
            }
          }
          if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
            ret["short"].reverse();
          }
          ret["short"] = this._trimInstitution(ret["short"]);
          if (this.institution.strings["reverse-order"]) {
            ret["short"].reverse();
          }
          if (!this.state.tmp.just_looking) {
            if (this.Item.jurisdiction) {
              let jurisdiction2 = this.Item.jurisdiction;
              var trimmer = this.state.tmp.abbrev_trimmer;
              if (trimmer && trimmer[jurisdiction2] && trimmer[jurisdiction2][varname]) {
                for (var i = 0, ilen = ret["short"].length; i < ilen; i++) {
                  var frag = ret["short"][i];
                  ret["short"][i] = frag.replace(trimmer[jurisdiction2][varname], "").trim();
                }
              }
            }
          }
        }
        if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
          ret["long"].reverse();
        }
        ret["long"] = this._trimInstitution(ret["long"]);
        if (this.institution.strings["reverse-order"]) {
          ret["long"].reverse();
        }
        return ret;
      };
      CSL4.NameOutput.prototype.getStaticOrder = function(name, refresh) {
        var static_ordering_val = false;
        if (!refresh && name["static-ordering"]) {
          static_ordering_val = true;
        } else if (this._isRomanesque(name) === 0) {
          static_ordering_val = true;
        } else if ((!name.multi || !name.multi.main) && this.Item.language && ["vi", "hu"].indexOf(this.Item.language) > -1) {
          static_ordering_val = true;
        } else if (name.multi && name.multi.main && ["vi", "hu"].indexOf(name.multi.main.slice(0, 2)) > -1) {
          static_ordering_val = true;
        } else {
          if (this.state.opt["auto-vietnamese-names"] && (CSL4.VIETNAMESE_NAMES.exec(name.family + " " + name.given) && CSL4.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {
            static_ordering_val = true;
          }
        }
        return static_ordering_val;
      };
      CSL4.NameOutput.prototype._quashChecks = function(jurisdiction2, str) {
        var str = this.state.transform.quashCheck(jurisdiction2, str);
        var lst = str.split(/>>[0-9]{4}>>/);
        var m = str.match(/>>([0-9]{4})>>/);
        str = lst.pop();
        var date2 = this.Item["original-date"] ? this.Item["original-date"] : this.Item["issued"];
        if (date2) {
          date2 = parseInt(date2.year, 10);
          date2 = isNaN(date2) ? false : date2;
        }
        if (date2) {
          if (lst.length > 0) {
            for (var k = m.length - 1; k > 0; k--) {
              if (date2 >= parseInt(m[k], 10)) {
                break;
              }
              str = lst.pop();
            }
          }
          str = str.replace(/\s*\|\s*/g, "|");
        }
        return str;
      };
      CSL4.NameOutput.prototype._trimInstitution = function(subunits) {
        var use_first = false;
        var stop_last = false;
        var use_last = false;
        var stop_first = false;
        var s = subunits.slice();
        if (this.institution) {
          if (typeof this.institution.strings["use-first"] !== "undefined") {
            use_first = this.institution.strings["use-first"];
          }
          if (typeof this.institution.strings["use-last"] !== "undefined") {
            use_last = this.institution.strings["use-last"];
          }
          if (typeof this.institution.strings["stop-first"] !== "undefined") {
            stop_first = this.institution.strings["stop-first"];
          }
          if (typeof this.institution.strings["stop-last"] !== "undefined") {
            stop_last = this.institution.strings["stop-last"];
          }
          if (use_first) {
            if (stop_last) {
              s = s.slice(0, stop_last * -1);
            }
            s = s.slice(0, use_first);
          }
          if (use_last) {
            var ss = subunits.slice();
            if (use_first) {
              stop_first = use_first;
            } else {
              s = [];
            }
            if (stop_first) {
              ss = ss.slice(stop_first);
            }
            ss = ss.slice(use_last * -1);
            s = s.concat(ss);
          }
          subunits = s;
        }
        return subunits;
      };
      CSL4.PublisherOutput = function(state, group_tok) {
        this.state = state;
        this.group_tok = group_tok;
        this.varlist = [];
      };
      CSL4.PublisherOutput.prototype.render = function() {
        this.clearVars();
        this.composeAndBlob();
        this.composeElements();
        this.composePublishers();
        this.joinPublishers();
      };
      CSL4.PublisherOutput.prototype.composeAndBlob = function() {
        this.and_blob = {};
        var and_term = false;
        if (this.group_tok.strings.and === "text") {
          and_term = this.state.getTerm("and");
        } else if (this.group_tok.strings.and === "symbol") {
          and_term = "&";
        }
        var tok = new CSL4.Token();
        tok.strings.suffix = " ";
        tok.strings.prefix = " ";
        this.state.output.append(and_term, tok, true);
        var no_delim = this.state.output.pop();
        tok.strings.prefix = this.group_tok.strings["subgroup-delimiter"];
        this.state.output.append(and_term, tok, true);
        var with_delim = this.state.output.pop();
        this.and_blob.single = false;
        this.and_blob.multiple = false;
        if (and_term) {
          if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "always") {
            this.and_blob.single = with_delim;
          } else if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "never") {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = no_delim;
          } else {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = with_delim;
          }
        }
      };
      CSL4.PublisherOutput.prototype.composeElements = function() {
        for (var i = 0, ilen = 2; i < ilen; i += 1) {
          var varname = ["publisher", "publisher-place"][i];
          for (var j = 0, jlen = this["publisher-list"].length; j < jlen; j += 1) {
            var str = this[varname + "-list"][j];
            var tok = this[varname + "-token"];
            this.state.output.append(str, tok, true);
            this[varname + "-list"][j] = this.state.output.pop();
          }
        }
      };
      CSL4.PublisherOutput.prototype.composePublishers = function() {
        var blobs;
        for (var i = 0, ilen = this["publisher-list"].length; i < ilen; i += 1) {
          blobs = [this[this.varlist[0] + "-list"][i], this[this.varlist[1] + "-list"][i]];
          this["publisher-list"][i] = this._join(blobs, this.group_tok.strings.delimiter);
        }
      };
      CSL4.PublisherOutput.prototype.joinPublishers = function() {
        var blobs = this["publisher-list"];
        var publishers = this._join(blobs, this.group_tok.strings["subgroup-delimiter"], this.and_blob.single, this.and_blob.multiple, this.group_tok);
        this.state.output.append(publishers, "literal");
      };
      CSL4.PublisherOutput.prototype._join = CSL4.NameOutput.prototype._join;
      CSL4.PublisherOutput.prototype._getToken = CSL4.NameOutput.prototype._getToken;
      CSL4.PublisherOutput.prototype.clearVars = function() {
        this.state.tmp["publisher-list"] = false;
        this.state.tmp["publisher-place-list"] = false;
        this.state.tmp["publisher-group-token"] = false;
        this.state.tmp["publisher-token"] = false;
        this.state.tmp["publisher-place-token"] = false;
      };
      CSL4.evaluateLabel = function(node, state, Item, item) {
        var myterm;
        if (node.strings.term === "locator") {
          if (item && item.label) {
            if (item.label === "sub verbo") {
              myterm = "sub-verbo";
            } else {
              myterm = item.label;
            }
          }
          if (!myterm) {
            myterm = "page";
          }
        } else {
          myterm = node.strings.term;
        }
        var plural = node.strings.plural;
        if (typeof plural !== "number") {
          var theItem = item && node.strings.term === "locator" ? item : Item;
          if (theItem[node.strings.term]) {
            state.processNumber(false, theItem, node.strings.term, Item.type);
            plural = state.tmp.shadow_numbers[node.strings.term].plural;
            if (!state.tmp.shadow_numbers[node.strings.term].labelForm && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {
              if (node.strings.form) {
                state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;
              } else if (state.tmp.group_context.tip.label_form) {
                state.tmp.shadow_numbers[node.strings.term].labelForm = state.tmp.group_context.tip.label_form;
              }
              state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;
              state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();
            }
            if (["locator", "number", "page"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {
              myterm = state.tmp.shadow_numbers[node.strings.term].label;
            }
            if (node.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
              node.decorations.reverse();
              node.decorations.push(["@showid", "true", node.cslid]);
              node.decorations.reverse();
            }
          }
        }
        return CSL4.castLabel(state, node, myterm, plural, CSL4.TOLERANT);
      };
      CSL4.castLabel = function(state, node, term, plural, mode) {
        var label_form = node.strings.form;
        var label_capitalize_if_first = node.strings.capitalize_if_first;
        if (state.tmp.group_context.tip.label_form) {
          if (label_form === "static") {
            state.tmp.group_context.tip.label_static = true;
          } else {
            label_form = state.tmp.group_context.tip.label_form;
          }
        }
        if (state.tmp.group_context.tip.label_capitalize_if_first) {
          label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
        }
        var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);
        if (label_capitalize_if_first) {
          ret = CSL4.Output.Formatters["capitalize-first"](state, ret);
        }
        if (state.tmp.strip_periods) {
          ret = ret.replace(/\./g, "");
        } else {
          for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {
            if (node.decorations[i][0] === "@strip-periods" && node.decorations[i][1] === "true") {
              ret = ret.replace(/\./g, "");
              break;
            }
          }
        }
        return ret;
      };
      CSL4.Node.name = {
        build: function(state, target) {
          var func;
          if ([CSL4.SINGLETON, CSL4.START].indexOf(this.tokentype) > -1) {
            var oldTmpRoot;
            if (typeof state.tmp.root === "undefined") {
              oldTmpRoot = void 0;
              state.tmp.root = "citation";
            } else {
              oldTmpRoot = state.tmp.root;
            }
            if (state.inheritOpt(this, "et-al-subsequent-min") && state.inheritOpt(this, "et-al-subsequent-min") !== state.inheritOpt(this, "et-al-min")) {
              state.opt.update_mode = CSL4.POSITION;
            }
            if (state.inheritOpt(this, "et-al-subsequent-use-first") && state.inheritOpt(this, "et-al-subsequent-use-first") !== state.inheritOpt(this, "et-al-use-first")) {
              state.opt.update_mode = CSL4.POSITION;
            }
            state.tmp.root = oldTmpRoot;
            func = function(state2) {
              state2.tmp.etal_term = "et-al";
              state2.tmp.name_delimiter = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
              state2.tmp["delimiter-precedes-et-al"] = state2.inheritOpt(this, "delimiter-precedes-et-al");
              if (state2.inheritOpt(this, "and") === "text") {
                this.and_term = state2.getTerm("and", "long", 0);
              } else if (state2.inheritOpt(this, "and") === "symbol") {
                if (state2.opt.development_extensions.expect_and_symbol_form) {
                  this.and_term = state2.getTerm("and", "symbol", 0);
                } else {
                  this.and_term = "&";
                }
              }
              state2.tmp.and_term = this.and_term;
              if (CSL4.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                this.and_prefix_single = " ";
                this.and_prefix_multiple = ", ";
                if (typeof state2.tmp.name_delimiter === "string") {
                  this.and_prefix_multiple = state2.tmp.name_delimiter;
                }
                this.and_suffix = " ";
              } else {
                this.and_prefix_single = "";
                this.and_prefix_multiple = "";
                this.and_suffix = "";
              }
              if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
                this.and_prefix_single = state2.tmp.name_delimiter;
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "after-inverted-name") {
                if (this.and_prefix_single) {
                  this.and_prefix_single = state2.tmp.name_delimiter;
                }
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              }
              this.and = {};
              if (state2.inheritOpt(this, "and")) {
                state2.output.append(this.and_term, "empty", true);
                this.and.single = state2.output.pop();
                this.and.single.strings.prefix = this.and_prefix_single;
                this.and.single.strings.suffix = this.and_suffix;
                state2.output.append(this.and_term, "empty", true);
                this.and.multiple = state2.output.pop();
                this.and.multiple.strings.prefix = this.and_prefix_multiple;
                this.and.multiple.strings.suffix = this.and_suffix;
              } else if (state2.tmp.name_delimiter) {
                this.and.single = new CSL4.Blob(state2.tmp.name_delimiter);
                this.and.single.strings.prefix = "";
                this.and.single.strings.suffix = "";
                this.and.multiple = new CSL4.Blob(state2.tmp.name_delimiter);
                this.and.multiple.strings.prefix = "";
                this.and.multiple.strings.suffix = "";
              }
              this.ellipsis = {};
              if (state2.inheritOpt(this, "et-al-use-last")) {
                this.ellipsis_term = "\u2026";
                this.ellipsis_prefix_single = " ";
                this.ellipsis_prefix_multiple = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                this.ellipsis_suffix = " ";
                this.ellipsis.single = new CSL4.Blob(this.ellipsis_term);
                this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;
                this.ellipsis.single.strings.suffix = this.ellipsis_suffix;
                this.ellipsis.multiple = new CSL4.Blob(this.ellipsis_term);
                this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;
                this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;
              }
              if (typeof state2.tmp["et-al-min"] === "undefined") {
                state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
              }
              if (typeof state2.tmp["et-al-use-first"] === "undefined") {
                state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
              }
              if (typeof state2.tmp["et-al-use-last"] === "undefined") {
                state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
              }
              state2.nameOutput.name = this;
            };
            state.build.name_flag = true;
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL4.Node["name-part"] = {
        build: function(state) {
          state.build[this.strings.name] = this;
        }
      };
      CSL4.Node.names = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL4.START || this.tokentype === CSL4.SINGLETON) {
            CSL4.Util.substituteStart.call(this, state, target);
            state.build.substitute_level.push(1);
          }
          if (this.tokentype === CSL4.SINGLETON) {
            state.build.names_variables[state.build.names_variables.length - 1].concat(this.variables);
            for (var i in this.variables) {
              var variable = this.variables[i];
              var name_labels = state.build.name_label[state.build.name_label.length - 1];
              if (Object.keys(name_labels).length) {
                name_labels[variable] = name_labels[Object.keys(name_labels)[0]];
              }
            }
            func = function(state2) {
              state2.nameOutput.reinit(this, this.variables_real[0]);
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL4.START) {
            state.build.names_flag = true;
            state.build.name_flag = false;
            state.build.names_level += 1;
            state.build.names_variables.push(this.variables);
            state.build.name_label.push({});
            func = function(state2) {
              state2.tmp.can_substitute.push(true);
              state2.tmp.name_node = {};
              state2.tmp.name_node.children = [];
              state2.nameOutput.init(this);
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL4.END) {
            for (var i = 0, ilen = 3; i < ilen; i += 1) {
              var key = ["family", "given", "et-al"][i];
              this[key] = state.build[key];
              if (state.build.names_level === 1) {
                state.build[key] = void 0;
              }
            }
            this.label = state.build.name_label[state.build.name_label.length - 1];
            state.build.names_level += -1;
            state.build.names_variables.pop();
            state.build.name_label.pop();
            func = function(state2) {
              if (state2.tmp.etal_node) {
                this.etal_style = state2.tmp.etal_node;
              } else {
                this.etal_style = "empty";
              }
              this.etal_term = state2.getTerm(state2.tmp.etal_term, "long", 0);
              this.etal_prefix_single = " ";
              this.etal_prefix_multiple = state2.tmp.name_delimiter;
              if (state2.tmp["delimiter-precedes-et-al"] === "always") {
                this.etal_prefix_single = state2.tmp.name_delimiter;
              } else if (state2.tmp["delimiter-precedes-et-al"] === "never") {
                this.etal_prefix_multiple = " ";
              } else if (state2.tmp["delimiter-precedes-et-al"] === "after-inverted-name") {
                this.etal_prefix_single = state2.tmp.name_delimiter;
                this.etal_prefix_multiple = " ";
              }
              this.etal_suffix = "";
              if (!CSL4.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {
                if (this.etal_prefix_single === " ") {
                  this.etal_prefix_single = "";
                }
                if (this.etal_prefix_multiple === " ") {
                  this.etal_prefix_multiple = "";
                }
                if (this.etal_suffix === " ") {
                  this.etal_suffix = "";
                }
              }
              for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
                var key2 = ["family", "given"][i2];
                state2.nameOutput[key2] = this[key2];
              }
              state2.nameOutput["with"] = this["with"];
              var mywith = "with";
              var with_default_prefix = "";
              var with_suffix = "";
              if (CSL4.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {
                with_default_prefix = " ";
                with_suffix = " ";
              }
              var thewith = {};
              thewith.single = new CSL4.Blob(mywith);
              thewith.single.strings.suffix = with_suffix;
              thewith.multiple = new CSL4.Blob(mywith);
              thewith.multiple.strings.suffix = with_suffix;
              if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "always") {
                thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
                thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "contextual") {
                thewith.single.strings.prefix = with_default_prefix;
                thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "after-inverted-name") {
                thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
                thewith.multiple.strings.prefix = with_default_prefix;
              } else {
                thewith.single.strings.prefix = with_default_prefix;
                thewith.multiple.strings.prefix = with_default_prefix;
              }
              state2.nameOutput["with"] = thewith;
              state2.nameOutput.label = this.label;
              state2.nameOutput.etal_style = this.etal_style;
              state2.nameOutput.etal_term = this.etal_term;
              state2.nameOutput.etal_prefix_single = this.etal_prefix_single;
              state2.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;
              state2.nameOutput.etal_suffix = this.etal_suffix;
              state2.nameOutput.outputNames();
              state2.tmp["et-al-use-first"] = void 0;
              state2.tmp["et-al-min"] = void 0;
              state2.tmp["et-al-use-last"] = void 0;
            };
            this.execs.push(func);
            func = function(state2) {
              if (!state2.tmp.can_substitute.pop()) {
                state2.tmp.can_substitute.replace(false, CSL4.LITERAL);
              }
              if (state2.tmp.can_substitute.mystack.length === 1) {
                state2.tmp.can_block_substitute = false;
              }
            };
            this.execs.push(func);
            state.build.name_flag = false;
          }
          target.push(this);
          if (this.tokentype === CSL4.END || this.tokentype === CSL4.SINGLETON) {
            state.build.substitute_level.pop();
            CSL4.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL4.Node.number = {
        build: function(state, target) {
          var func;
          CSL4.Util.substituteStart.call(this, state, target);
          if (this.strings.form === "roman") {
            this.formatter = state.fun.romanizer;
          } else if (this.strings.form === "ordinal") {
            this.formatter = state.fun.ordinalizer;
          } else if (this.strings.form === "long-ordinal") {
            this.formatter = state.fun.long_ordinalizer;
          }
          if (typeof this.successor_prefix === "undefined") {
            this.successor_prefix = state[state.build.area].opt.layout_delimiter;
          }
          if (typeof this.splice_prefix === "undefined") {
            this.splice_prefix = state[state.build.area].opt.layout_delimiter;
          }
          func = function(state2, Item, item) {
            if (this.variables.length === 0) {
              return;
            }
            var varname;
            varname = this.variables[0];
            if (typeof item === "undefined") {
              var item = {};
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
              if (state2.tmp.just_looking) {
                return;
              }
              if (!item[varname]) {
                return;
              }
            } else {
              if (!Item[varname]) {
                return;
              }
            }
            if (varname === "collection-number" && Item.type === "legal_case") {
              state2.tmp.renders_collection_number = true;
            }
            var node = this;
            if (state2.tmp.group_context.tip.force_suppress) {
              return false;
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
              state2.processNumber.call(state2, node, item, varname, Item.type);
            } else {
              if (!state2.tmp.group_context.tip.condition && Item[varname]) {
                state2.tmp.just_did_number = ("" + Item[varname]).match(/[0-9]$/);
              }
              state2.processNumber.call(state2, node, Item, varname, Item.type);
            }
            if (this.substring) {
              var val = Item[varname].slice(this.substring);
              state2.output.append(val, node);
            } else {
              CSL4.Util.outputNumericField(state2, varname, Item.id);
            }
            if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
              state2.tmp.done_vars.push(this.variables_real[0]);
              state2.tmp.group_context.tip.done_vars.push(this.variables_real[0]);
            }
          };
          this.execs.push(func);
          target.push(this);
          CSL4.Util.substituteEnd.call(this, state, target);
        }
      };
      CSL4.Node.sort = {
        build: function(state, target) {
          target = state[state.build.root + "_sort"].tokens;
          if (this.tokentype === CSL4.START) {
            if (state.build.area === "citation") {
              state.opt.sort_citations = true;
            }
            state.build.area = state.build.root + "_sort";
            state.build.extension = "_sort";
            var func = function(state2, Item) {
              if (state2.opt.has_layout_locale) {
                var langspec = CSL4.localeResolve(Item.language, state2.opt["default-locale"][0]);
                var sort_locales = state2[state2.tmp.area.slice(0, -5)].opt.sort_locales;
                var langForItem;
                for (var i = 0, ilen = sort_locales.length; i < ilen; i += 1) {
                  langForItem = sort_locales[i][langspec.bare];
                  if (!langForItem) {
                    langForItem = sort_locales[i][langspec.best];
                  }
                  if (langForItem) {
                    break;
                  }
                }
                if (!langForItem) {
                  langForItem = state2.opt["default-locale"][0];
                }
                state2.tmp.lang_sort_hold = state2.opt.lang;
                state2.opt.lang = langForItem;
              }
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL4.END) {
            state.build.area = state.build.root;
            state.build.extension = "";
            var func = function(state2) {
              if (state2.opt.has_layout_locale) {
                state2.opt.lang = state2.tmp.lang_sort_hold;
                delete state2.tmp.lang_sort_hold;
              }
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL4.Node.substitute = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL4.START) {
            var choose_start = new CSL4.Token("choose", CSL4.START);
            CSL4.Node.choose.build.call(choose_start, state, target);
            var if_singleton = new CSL4.Token("if", CSL4.SINGLETON);
            func = function() {
              if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                return true;
              }
              return false;
            };
            if_singleton.tests = [func];
            if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);
            target.push(if_singleton);
            func = function(state2) {
              state2.tmp.can_block_substitute = true;
              if (state2.tmp.value.length && !state2.tmp.common_term_match_fail) {
                state2.tmp.can_substitute.replace(false, CSL4.LITERAL);
              }
              state2.tmp.common_term_match_fail = false;
            };
            this.execs.push(func);
            target.push(this);
          }
          if (this.tokentype === CSL4.END) {
            target.push(this);
            var choose_end = new CSL4.Token("choose", CSL4.END);
            CSL4.Node.choose.build.call(choose_end, state, target);
          }
        }
      };
      CSL4.Node.text = {
        build: function(state, target) {
          var func, form, plural, id2, num, number2, formatter, firstoutput, specialdelimiter, label2, suffix, term;
          if (this.postponed_macro) {
            var group_start = CSL4.Util.cloneToken(this);
            group_start.name = "group";
            group_start.tokentype = CSL4.START;
            CSL4.Node.group.build.call(group_start, state, target);
            CSL4.expandMacro.call(state, this, target);
            var group_end = CSL4.Util.cloneToken(this);
            group_end.name = "group";
            group_end.tokentype = CSL4.END;
            if (this.postponed_macro === "juris-locator-label") {
              group_end.isJurisLocatorLabel = true;
            }
            CSL4.Node.group.build.call(group_end, state, target);
          } else {
            CSL4.Util.substituteStart.call(this, state, target);
            if (!this.variables_real) {
              this.variables_real = [];
            }
            if (!this.variables) {
              this.variables = [];
            }
            form = "long";
            plural = 0;
            if (this.strings.form) {
              form = this.strings.form;
            }
            if (this.strings.plural) {
              plural = this.strings.plural;
            }
            if (this.variables_real[0] === "citation-number" || this.variables_real[0] === "year-suffix" || this.variables_real[0] === "citation-label") {
              if (this.variables_real[0] === "citation-number") {
                if (state.build.root === "citation") {
                  state.opt.update_mode = CSL4.NUMERIC;
                }
                if (state.build.root === "bibliography") {
                  state.opt.bib_mode = CSL4.NUMERIC;
                }
                if (state[state.tmp.area].opt.collapse === "citation-number") {
                  this.range_prefix = state.getTerm("citation-range-delimiter");
                }
                this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                func = function(state2, Item, item) {
                  id2 = "" + Item.id;
                  if (!state2.tmp.just_looking) {
                    if (state2.tmp.area.slice(-5) === "_sort" && this.variables[0] === "citation-number") {
                      if (state2.tmp.area === "bibliography_sort") {
                        state2.tmp.group_context.tip.done_vars.push("citation-number");
                      }
                      if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                        var num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                      } else {
                        var num2 = state2.registry.registry[Item.id].seq;
                      }
                      if (num2) {
                        num2 = CSL4.Util.padding("" + num2);
                      }
                      state2.output.append(num2, this);
                      return;
                    }
                    if (item && item["author-only"]) {
                      state2.tmp.element_trace.replace("suppress-me");
                    }
                    if (state2.tmp.area !== "bibliography_sort" && state2.bibliography_sort.tmp.citation_number_map && state2.bibliography_sort.opt.citation_number_sort_direction === CSL4.DESCENDING) {
                      num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[id2].seq];
                    } else {
                      num2 = state2.registry.registry[id2].seq;
                    }
                    if (state2.opt.citation_number_slug) {
                      state2.output.append(state2.opt.citation_number_slug, this);
                    } else {
                      number2 = new CSL4.NumericBlob(false, num2, this, Item.id);
                      if (state2.tmp.in_cite_predecessor) {
                        number2.suppress_splice_prefix = true;
                      }
                      state2.output.append(number2, "literal");
                    }
                  }
                };
                this.execs.push(func);
              } else if (this.variables_real[0] === "year-suffix") {
                state.opt.has_year_suffix = true;
                if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                  this.range_prefix = state.getTerm("citation-range-delimiter");
                }
                this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                  this.successor_prefix = state[state.build.area].opt["year-suffix-delimiter"];
                }
                func = function(state2, Item) {
                  if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.just_looking) {
                    num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                    if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                      this.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                    }
                    number2 = new CSL4.NumericBlob(false, num, this, Item.id);
                    formatter = new CSL4.Util.Suffixator(CSL4.SUFFIX_CHARS);
                    number2.setFormatter(formatter);
                    state2.output.append(number2, "literal");
                    firstoutput = false;
                    for (var i = 0, ilen = state2.tmp.group_context.mystack.length; i < ilen; i++) {
                      var flags = state2.tmp.group_context.mystack[i];
                      if (!flags.variable_success && (flags.variable_attempt || !flags.variable_attempt && !flags.term_intended)) {
                        firstoutput = true;
                        break;
                      }
                    }
                    specialdelimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                    if (firstoutput && specialdelimiter && !state2.tmp.sort_key_flag) {
                      state2.tmp.splice_delimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                    }
                  }
                };
                this.execs.push(func);
              } else if (this.variables_real[0] === "citation-label") {
                if (state.build.root === "bibliography") {
                  state.opt.bib_mode = CSL4.TRIGRAPH;
                }
                state.opt.has_year_suffix = true;
                func = function(state2, Item) {
                  label2 = Item["citation-label"];
                  if (!label2) {
                    label2 = state2.getCitationLabel(Item);
                  }
                  if (!state2.tmp.just_looking) {
                    suffix = "";
                    if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false) {
                      num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                      suffix = state2.fun.suffixator.format(num);
                    }
                    label2 += suffix;
                  }
                  state2.output.append(label2, this);
                };
                this.execs.push(func);
              }
            } else {
              if (this.strings.term) {
                func = function(state2, Item) {
                  var gender = state2.opt.gender[Item.type];
                  var term2 = this.strings.term;
                  term2 = state2.getTerm(term2, form, plural, gender, CSL4.TOLERANT, this.default_locale);
                  var myterm;
                  if (term2 !== "") {
                    state2.tmp.group_context.tip.term_intended = true;
                  }
                  CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state2, term2, null, this);
                  if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                    myterm = CSL4.Output.Formatters["capitalize-first"](state2, term2);
                  } else {
                    myterm = term2;
                  }
                  if (state2.tmp.strip_periods) {
                    myterm = myterm.replace(/\./g, "");
                  } else {
                    for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                      if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                        myterm = myterm.replace(/\./g, "");
                        break;
                      }
                    }
                  }
                  state2.output.append(myterm, this);
                  if (state2.tmp.can_block_substitute) {
                    state2.tmp.can_substitute.replace(false, CSL4.LITERAL);
                  }
                };
                this.execs.push(func);
                state.build.term = false;
                state.build.form = false;
                state.build.plural = false;
              } else if (this.variables_real.length) {
                func = function(state2, Item) {
                  if (this.variables_real[0] !== "locator") {
                    state2.tmp.have_collapsed = false;
                  }
                  if (!state2.tmp.group_context.tip.condition && Item[this.variables[0]]) {
                    state2.tmp.just_did_number = false;
                  }
                  var val = Item[this.variables[0]];
                  if (val && !state2.tmp.group_context.tip.condition) {
                    if (("" + val).slice(-1).match(/[0-9]/)) {
                      state2.tmp.just_did_number = true;
                    } else {
                      state2.tmp.just_did_number = false;
                    }
                  }
                };
                this.execs.push(func);
                if (CSL4.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1 || this.variables_real[0].indexOf("-main") > -1 || this.variables_real[0].indexOf("-sub") > -1 || ["language-name", "language-name-original"].indexOf(this.variables_real[0]) > -1) {
                  var abbrevfam = this.variables[0];
                  var abbrfall = false;
                  var altvar = false;
                  var transfall = false;
                  if (form === "short") {
                    if (this.variables_real[0].slice(-6) !== "-short") {
                      altvar = this.variables_real[0] + "-short";
                    }
                  } else {
                    abbrevfam = false;
                  }
                  if (state.build.extension) {
                    transfall = true;
                  } else {
                    transfall = true;
                    abbrfall = true;
                  }
                  func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                } else {
                  if (CSL4.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item, item) {
                      if (item && item[this.variables[0]]) {
                        state2.processNumber(this, item, this.variables[0], Item.type);
                        CSL4.Util.outputNumericField(state2, this.variables[0], Item.id);
                        if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
                          state2.tmp.done_vars.push(this.variables_real[0]);
                        }
                      }
                    };
                  } else if (["page", "page-first", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume"].indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item) {
                      state2.processNumber(this, Item, this.variables[0], Item.type);
                      CSL4.Util.outputNumericField(state2, this.variables[0], Item.id);
                    };
                  } else if (["URL", "DOI"].indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item) {
                      var value;
                      if (this.variables[0]) {
                        value = state2.getVariable(Item, this.variables[0], form);
                        if (value) {
                          if (this.variables[0] === "URL" && form === "short") {
                            value = value.replace(/(.*\.[^\/]+)\/.*/, "$1");
                            if (value.match(/\/\/www\./)) {
                              value = value.replace(/https?:\/\//, "");
                            }
                          }
                          if (state2.opt.development_extensions.wrap_url_and_doi) {
                            if (!this.decorations.length || this.decorations[0][0] !== "@" + this.variables[0]) {
                              var clonetoken = CSL4.Util.cloneToken(this);
                              var groupblob = new CSL4.Blob(null, null, "url-wrapper");
                              groupblob.decorations.push(["@DOI", "true"]);
                              if (this.variables_real[0] === "DOI") {
                                var prefix;
                                if (this.strings.prefix && this.strings.prefix.match(/^.*https:\/\/doi\.org\/$/)) {
                                  value = value.replace(/^https?:\/\/doi\.org\//, "");
                                  if (value.match(/^https?:\/\//)) {
                                    prefix = "";
                                  } else {
                                    prefix = "https://doi.org/";
                                  }
                                  clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length - 16);
                                }
                                var prefixblob = new CSL4.Blob(prefix);
                                var valueblob = new CSL4.Blob(value);
                                groupblob.push(prefixblob);
                                groupblob.push(valueblob);
                                state2.output.append(groupblob, clonetoken, false, false, true);
                              } else {
                                var valueblob = new CSL4.Blob(value);
                                groupblob.push(valueblob);
                                state2.output.append(groupblob, clonetoken, false, false, true);
                              }
                            } else {
                              state2.output.append(value, this, false, false, true);
                            }
                          } else {
                            if (this.decorations.length) {
                              for (var i = this.decorations.length - 1; i > -1; i--) {
                                if (this.decorations[i][0] === "@" + this.variables[0]) {
                                  this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i + 1));
                                }
                              }
                            }
                            state2.output.append(value, this, false, false, true);
                          }
                        }
                      }
                    };
                  } else if (this.variables_real[0] === "section") {
                    func = function(state2, Item) {
                      var value;
                      value = state2.getVariable(Item, this.variables[0], form);
                      if (value) {
                        state2.output.append(value, this);
                      }
                    };
                  } else if (this.variables_real[0] === "hereinafter") {
                    func = function(state2, Item) {
                      var value = state2.transform.abbrevs["default"]["hereinafter"][Item.id];
                      if (value) {
                        state2.output.append(value, this);
                        state2.tmp.group_context.tip.variable_success = true;
                      }
                    };
                  } else {
                    func = function(state2, Item) {
                      var value;
                      if (this.variables[0]) {
                        value = state2.getVariable(Item, this.variables[0], form);
                        if (value) {
                          value = "" + value;
                          value = value.split("\\").join("");
                          state2.output.append(value, this);
                        }
                      }
                    };
                  }
                }
                this.execs.push(func);
              } else if (this.strings.value) {
                func = function(state2) {
                  state2.tmp.group_context.tip.term_intended = true;
                  CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.value, true, this);
                  state2.output.append(this.strings.value, this);
                  if (state2.tmp.can_block_substitute) {
                    state2.tmp.can_substitute.replace(false, CSL4.LITERAL);
                  }
                };
                this.execs.push(func);
              }
            }
            target.push(this);
            CSL4.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL4.Node.intext = {
        build: function(state, target) {
          if (this.tokentype === CSL4.START) {
            state.build.area = "intext";
            state.build.root = "intext";
            state.build.extension = "";
            var func = function(state2, Item) {
              state2.tmp.area = "intext";
              state2.tmp.root = "intext";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL4.END) {
            state.intext_sort = {
              opt: {
                sort_directions: state.citation_sort.opt.sort_directions
              }
            };
            state.intext.srt = state.citation.srt;
          }
          target.push(this);
        }
      };
      CSL4.Attributes = {};
      CSL4.Attributes["@disambiguate"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        if (arg === "true") {
          state.opt.has_disambiguate = true;
          var func = function(Item) {
            if (state.tmp.area === "bibliography") {
              if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {
                state.tmp.disambiguate_count += 1;
                return true;
              }
            } else {
              state.tmp.disambiguate_maxMax += 1;
              if (state.tmp.disambig_settings.disambiguate && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {
                state.tmp.disambiguate_count += 1;
                return true;
              }
            }
            return false;
          };
          this.tests.push(func);
        } else if (arg === "check-ambiguity-and-backreference") {
          var func = function(Item) {
            if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id]["citation-count"] > 1) {
              return true;
            }
            return false;
          };
          this.tests.push(func);
        }
      };
      CSL4.Attributes["@is-numeric"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var variables = arg.split(/\s+/);
        var maketest = function(variable) {
          return function(Item, item) {
            var myitem = Item;
            if (item && ["locator", "locator-extra"].indexOf(variable) > -1) {
              myitem = item;
            }
            if (!myitem[variable]) {
              return false;
            }
            if (CSL4.NUMERIC_VARIABLES.indexOf(variable) > -1) {
              if (!state.tmp.shadow_numbers[variable]) {
                state.processNumber(false, myitem, variable, Item.type);
              }
              if (state.tmp.shadow_numbers[variable].numeric) {
                return true;
              }
            } else if (["title", "version"].indexOf(variable) > -1) {
              if (myitem[variable].slice(-1) === "" + parseInt(myitem[variable].slice(-1), 10)) {
                return true;
              }
            }
            return false;
          };
        };
        for (var i = 0; i < variables.length; i += 1) {
          this.tests.push(maketest(variables[i]));
        }
      };
      CSL4.Attributes["@is-uncertain-date"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var variables = arg.split(/\s+/);
        var maketest = function(myvariable) {
          return function(Item) {
            if (Item[myvariable] && Item[myvariable].circa) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = variables.length; i < ilen; i += 1) {
          this.tests.push(maketest(variables[i]));
        }
      };
      CSL4.Attributes["@locator"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.replace("sub verbo", "sub-verbo");
        trylabels = trylabels.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item, item) {
            var label2;
            state.processNumber(false, item, "locator");
            label2 = state.tmp.shadow_numbers.locator.label;
            if (label2 && trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL4.Attributes["@position"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryposition;
        state.opt.update_mode = CSL4.POSITION;
        var trypositions = arg.split(/\s+/);
        var testSubsequentNear = function(Item, item) {
          if (item && CSL4.POSITION_MAP[item.position] >= CSL4.POSITION_MAP[CSL4.POSITION_SUBSEQUENT] && item["near-note"]) {
            return true;
          }
          return false;
        };
        var testSubsequentNotNear = function(Item, item) {
          if (item && CSL4.POSITION_MAP[item.position] == CSL4.POSITION_MAP[CSL4.POSITION_SUBSEQUENT] && !item["near-note"]) {
            return true;
          }
          return false;
        };
        var maketest = function(tryposition2) {
          return function(Item, item) {
            if (state.tmp.area === "bibliography") {
              return false;
            }
            if (item && typeof item.position === "undefined") {
              item.position = 0;
            }
            if (item && typeof item.position === "number") {
              if (item.position === 0 && tryposition2 === 0) {
                return true;
              } else if (tryposition2 > 0 && CSL4.POSITION_MAP[item.position] >= CSL4.POSITION_MAP[tryposition2]) {
                return true;
              }
            } else if (tryposition2 === 0) {
              return true;
            }
            return false;
          };
        };
        for (var i = 0, ilen = trypositions.length; i < ilen; i += 1) {
          var tryposition = trypositions[i];
          if (tryposition === "first") {
            tryposition = CSL4.POSITION_FIRST;
          } else if (tryposition === "container-subsequent") {
            tryposition = CSL4.POSITION_CONTAINER_SUBSEQUENT;
          } else if (tryposition === "subsequent") {
            tryposition = CSL4.POSITION_SUBSEQUENT;
          } else if (tryposition === "ibid") {
            tryposition = CSL4.POSITION_IBID;
          } else if (tryposition === "ibid-with-locator") {
            tryposition = CSL4.POSITION_IBID_WITH_LOCATOR;
          }
          if (tryposition === "near-note") {
            this.tests.push(testSubsequentNear);
          } else if (tryposition === "far-note") {
            this.tests.push(testSubsequentNotNear);
          } else {
            this.tests.push(maketest(tryposition));
          }
        }
      };
      CSL4.Attributes["@type"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var types = arg.split(/\s+/);
        var maketest = function(mytype) {
          return function(Item) {
            var ret = Item.type === mytype;
            if (ret) {
              return true;
            } else {
              return false;
            }
          };
        };
        var tests = [];
        for (var i = 0, ilen = types.length; i < ilen; i += 1) {
          tests.push(maketest(types[i]));
        }
        this.tests.push(state.fun.match.any(this, state, tests));
      };
      CSL4.Attributes["@variable"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func;
        this.variables = arg.split(/\s+/);
        this.variables_real = this.variables.slice();
        if (this.name === "label" && this.variables[0]) {
          this.strings.term = this.variables[0];
        } else if (["names", "date", "text", "number"].indexOf(this.name) > -1) {
          func = function(state2, Item, item) {
            for (var i2 = this.variables.length - 1; i2 > -1; i2 += -1) {
              this.variables.pop();
            }
            for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
              if (state2.tmp.done_vars.indexOf(this.variables_real[i2]) === -1) {
                this.variables.push(this.variables_real[i2]);
              }
              if (state2.tmp.can_block_substitute) {
                state2.tmp.done_vars.push(this.variables_real[i2]);
              }
            }
          };
          this.execs.push(func);
          func = function(state2, Item, item) {
            var output = false;
            for (var i2 = 0, ilen2 = this.variables.length; i2 < ilen2; i2++) {
              var variable = this.variables[i2];
              if (["authority", "committee"].indexOf(variable) > -1 && typeof Item[variable] === "string" && this.name === "names") {
                var isValid = true;
                var rawNames = Item[variable].split(/\s*;\s*/);
                var rawMultiNames = {};
                if (Item.multi && Item.multi._keys[variable]) {
                  for (var langTag in Item.multi._keys[variable]) {
                    rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\s*;\s*/);
                    if (rawMultiNames[langTag].length !== rawNames.length) {
                      isValid = false;
                      break;
                    }
                  }
                }
                if (!isValid) {
                  rawNames = [Item[variable]];
                  rawMultiNames = Item.multi._keys[variable];
                }
                for (var j = 0, jlen = rawNames.length; j < jlen; j++) {
                  var creatorParent = {
                    literal: rawNames[j],
                    multi: {
                      _key: {}
                    }
                  };
                  for (var langTag in rawMultiNames) {
                    var creatorChild = {
                      literal: rawMultiNames[langTag][j]
                    };
                    creatorParent.multi._key[langTag] = creatorChild;
                  }
                  rawNames[j] = creatorParent;
                }
                Item[variable] = rawNames;
              }
              if (this.strings.form === "short" && !Item[variable]) {
                if (variable === "title") {
                  variable = "title-short";
                } else if (variable === "container-title") {
                  variable = "container-title-short";
                }
              }
              if (variable === "year-suffix") {
                output = true;
                break;
              } else if (CSL4.DATE_VARIABLES.indexOf(variable) > -1) {
                if (state2.opt.development_extensions.locator_date_and_revision && variable === "locator-date") {
                  output = true;
                  break;
                }
                if (Item[variable]) {
                  for (var key in Item[variable]) {
                    if (this.dateparts.indexOf(key) === -1 && key !== "literal") {
                      continue;
                    }
                    if (Item[variable][key]) {
                      output = true;
                      break;
                    }
                  }
                  if (output) {
                    break;
                  }
                }
              } else if (variable === "locator") {
                if (item && item.locator) {
                  output = true;
                }
                break;
              } else if (variable === "locator-extra") {
                if (item && item["locator-extra"]) {
                  output = true;
                }
                break;
              } else if (["citation-number", "citation-label"].indexOf(variable) > -1) {
                output = true;
                break;
              } else if (variable === "first-reference-note-number") {
                if (item && item["first-reference-note-number"]) {
                  output = true;
                }
                break;
              } else if (variable === "first-container-reference-note-number") {
                if (item && item["first-container-reference-note-number"]) {
                  output = true;
                }
                break;
              } else if (variable === "hereinafter") {
                if (state2.transform.abbrevs["default"].hereinafter[Item.id] && state2.sys.getAbbreviation && Item.id) {
                  output = true;
                }
                break;
              } else if (typeof Item[variable] === "object") {
                break;
              } else if (typeof Item[variable] === "string" && Item[variable]) {
                output = true;
                break;
              } else if (typeof Item[variable] === "number") {
                output = true;
                break;
              }
              if (output) {
                break;
              }
            }
            if (output) {
              for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
                var variable = this.variables_real[i2];
                if (variable !== "citation-number" || state2.tmp.area !== "bibliography") {
                  state2.tmp.cite_renders_content = true;
                }
                state2.tmp.group_context.tip.variable_success = true;
                if (state2.tmp.can_substitute.value() && state2.tmp.area === "bibliography" && typeof Item[variable] === "string") {
                  state2.tmp.name_node.top = state2.output.current.value();
                  state2.tmp.rendered_name.push(Item[variable]);
                }
              }
              state2.tmp.can_substitute.replace(false, CSL4.LITERAL);
            } else {
              state2.tmp.group_context.tip.variable_attempt = true;
            }
          };
          this.execs.push(func);
        } else if (["if", "else-if", "condition"].indexOf(this.name) > -1) {
          var maketest = function(variable) {
            return function(Item, item) {
              var myitem = Item;
              if (item && ["locator", "locator-extra", "first-reference-note-number", "first-container-reference-note-number", "locator-date"].indexOf(variable) > -1) {
                myitem = item;
              }
              if (variable === "hereinafter" && state.sys.getAbbreviation && myitem.id) {
                if (state.transform.abbrevs["default"].hereinafter[myitem.id]) {
                  return true;
                }
              } else if (myitem[variable]) {
                if (typeof myitem[variable] === "number" || typeof myitem[variable] === "string") {
                  return true;
                } else if (typeof myitem[variable] === "object") {
                  for (var key in myitem[variable]) {
                    if (myitem[variable][key]) {
                      return true;
                    }
                  }
                }
              }
              return false;
            };
          };
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            this.tests.push(maketest(this.variables[i]));
          }
        }
      };
      CSL4.Attributes["@page"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.replace("sub verbo", "sub-verbo");
        trylabels = trylabels.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item) {
            var label2;
            state.processNumber(false, Item, "page", Item.type);
            if (!state.tmp.shadow_numbers.page.label) {
              label2 = "page";
            } else if (state.tmp.shadow_numbers.page.label === "sub verbo") {
              label2 = "sub-verbo";
            } else {
              label2 = state.tmp.shadow_numbers.page.label;
            }
            if (state.tmp.shadow_numbers.page.values.length > 0) {
              if (state.tmp.shadow_numbers.page.values[0].gotosleepability) {
                state.tmp.shadow_numbers.page.values[0].labelVisibility = false;
              }
            }
            if (trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL4.Attributes["@number"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item) {
            var label2;
            state.processNumber(false, Item, "number", Item.type);
            if (!state.tmp.shadow_numbers.number.label) {
              label2 = "number";
            } else {
              label2 = state.tmp.shadow_numbers.number.label;
            }
            if (trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL4.Attributes["@jurisdiction"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryjurisdictions = arg.split(/\s+/);
        var maketests = function(tryjurisdictions2) {
          return function(Item) {
            if (!Item.jurisdiction) {
              return false;
            }
            var jurisdiction2 = Item.jurisdiction;
            for (var i = 0, ilen = tryjurisdictions2.length; i < ilen; i++) {
              if (jurisdiction2 === tryjurisdictions2[i]) {
                return true;
              }
            }
            return false;
          };
        };
        this.tests.push(maketests(tryjurisdictions));
      };
      CSL4.Attributes["@country"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trycountries = arg.split(/\s+/);
        var maketests = function(trycountries2) {
          return function(Item) {
            if (!Item.country) {
              return false;
            }
            var country2 = Item.country;
            for (var i = 0, ilen = trycountries2.length; i < ilen; i++) {
              if (country2 === trycountries2[i]) {
                return true;
              }
            }
            return false;
          };
        };
        this.tests.push(maketests(trycountries));
      };
      CSL4.Attributes["@context"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function() {
          if (["bibliography", "citation"].indexOf(arg) > -1) {
            var area = state.tmp.area.slice(0, arg.length);
            if (area === arg) {
              return true;
            }
            return false;
          } else if (arg === "alternative") {
            return !!state.tmp.abort_alternative;
          }
        };
        this.tests.push(func);
      };
      CSL4.Attributes["@has-year-only"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || date2.month || date2.season) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL4.Attributes["@has-to-month-or-season"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || !date2.month && !date2.season || date2.day) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL4.Attributes["@has-day"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || !date2.day) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL4.Attributes["@is-plural"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function(Item) {
          var nameList = Item[arg];
          if (nameList && nameList.length) {
            var persons = 0;
            var institutions = 0;
            var last_is_person = false;
            for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {
              if (state.opt.development_extensions.spoof_institutional_affiliations && (nameList[i].literal || nameList[i].isInstitution && nameList[i].family && !nameList[i].given)) {
                institutions += 1;
                last_is_person = false;
              } else {
                persons += 1;
                last_is_person = true;
              }
            }
            if (persons > 1) {
              return true;
            } else if (institutions > 1) {
              return true;
            } else if (institutions && last_is_person) {
              return true;
            }
          }
          return false;
        };
        this.tests.push(func);
      };
      CSL4.Attributes["@is-multiple"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function(Item) {
          var val = "" + Item[arg];
          var lst = val.split(/(?:,\s|\s(?:tot\sen\smet|līdz|oraz|and|bis|έως|και|och|až|do|en|et|in|ir|ja|og|sa|to|un|und|és|și|i|u|y|à|e|a|и|-|–)\s|—|\&)/);
          if (lst.length > 1) {
            return true;
          }
          return false;
        };
        this.tests.push(func);
      };
      CSL4.Attributes["@locale"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var ret, langspec, lang, lst, i, ilen;
        var locale_default = state.opt["default-locale"][0];
        if (this.name === "layout") {
          this.locale_raw = arg;
          if (this.tokentype === CSL4.START) {
            if (!state.opt.multi_layout) {
              state.opt.multi_layout = [];
            }
            var locale_data = [];
            var locales = arg.split(/\s+/);
            var sort_locale = {};
            var localeMaster = CSL4.localeResolve(locales[0], locale_default);
            locale_data.push(localeMaster);
            if (localeMaster.generic) {
              sort_locale[localeMaster.generic] = localeMaster.best;
            } else {
              sort_locale[localeMaster.best] = localeMaster.best;
            }
            for (var i = 1, ilen = locales.length; i < ilen; i += 1) {
              var localeServant = CSL4.localeResolve(locales[i], locale_default);
              locale_data.push(localeServant);
              if (localeServant.generic) {
                sort_locale[localeServant.generic] = localeMaster.best;
              } else {
                sort_locale[localeServant.best] = localeMaster.best;
              }
            }
            state[state.build.area].opt.sort_locales.push(sort_locale);
            state.opt.multi_layout.push(locale_data);
          }
          state.opt.has_layout_locale = true;
        } else {
          lst = arg.split(/\s+/);
          var locale_bares = [];
          for (i = 0, ilen = lst.length; i < ilen; i += 1) {
            lang = lst[i];
            langspec = CSL4.localeResolve(lang, locale_default);
            if (lst[i].length === 2) {
              locale_bares.push(langspec.bare);
            }
            state.localeConfigure(langspec, true);
            lst[i] = langspec;
          }
          var locale_list = lst.slice();
          var maketest = function(locale_list2, locale_default2, locale_bares2) {
            return function(Item) {
              var res;
              ret = [];
              res = false;
              var langspec2 = false;
              var lang2;
              if (!Item.language) {
                lang2 = locale_default2;
              } else {
                lang2 = Item.language;
              }
              langspec2 = CSL4.localeResolve(lang2, locale_default2);
              for (i = 0, ilen = locale_list2.length; i < ilen; i += 1) {
                if (langspec2.best === locale_list2[i].best) {
                  state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                  state.tmp.condition_lang_val_arr.push(state.opt.lang);
                  state.opt.lang = locale_list2[0].best;
                  res = true;
                  break;
                }
              }
              if (!res && locale_bares2.indexOf(langspec2.bare) > -1) {
                state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                state.tmp.condition_lang_val_arr.push(state.opt.lang);
                state.opt.lang = locale_list2[0].best;
                res = true;
              }
              return res;
            };
          };
          this.tests.push(maketest(locale_list, locale_default, locale_bares));
        }
      };
      CSL4.Attributes["@alternative-node-internal"] = function(state) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function() {
          return function() {
            return !state.tmp.abort_alternative;
          };
        };
        var me = this;
        this.tests.push(maketest(me));
      };
      CSL4.Attributes["@locale-internal"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var langspec, lang, lst, i, ilen;
        lst = arg.split(/\s+/);
        this.locale_bares = [];
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          lang = lst[i];
          langspec = CSL4.localeResolve(lang, state.opt["default-locale"][0]);
          if (lst[i].length === 2) {
            this.locale_bares.push(langspec.bare);
          }
          state.localeConfigure(langspec);
          lst[i] = langspec;
        }
        this.locale_default = state.opt["default-locale"][0];
        this.locale = lst[0].best;
        this.locale_list = lst.slice();
        var maketest = function(me2) {
          return function(Item) {
            var ret, res;
            ret = [];
            res = false;
            var langspec2 = false;
            if (Item.language) {
              lang = Item.language;
              langspec2 = CSL4.localeResolve(lang, state.opt["default-locale"][0]);
              if (langspec2.best === state.opt["default-locale"][0]) {
                langspec2 = false;
              }
            }
            if (langspec2) {
              for (i = 0, ilen = me2.locale_list.length; i < ilen; i += 1) {
                if (langspec2.best === me2.locale_list[i].best) {
                  state.opt.lang = me2.locale;
                  state.tmp.last_cite_locale = me2.locale;
                  state.output.openLevel("empty");
                  state.output.current.value().new_locale = me2.locale;
                  res = true;
                  break;
                }
              }
              if (!res && me2.locale_bares.indexOf(langspec2.bare) > -1) {
                state.opt.lang = me2.locale;
                state.tmp.last_cite_locale = me2.locale;
                state.output.openLevel("empty");
                state.output.current.value().new_locale = me2.locale;
                res = true;
              }
            }
            return res;
          };
        };
        var me = this;
        this.tests.push(maketest(me));
      };
      CSL4.Attributes["@court-class"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryclasses = arg.split(/\s+/);
        var maketest = function(tryclass) {
          return function(Item) {
            var cls = CSL4.GET_COURT_CLASS(state, Item);
            if (cls === tryclass) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = tryclasses.length; i < ilen; i++) {
          this.tests.push(maketest(tryclasses[i]));
        }
      };
      CSL4.Attributes["@container-multiple"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var retval = arg === "true" ? true : false;
        var maketest = function(retval2) {
          return function(Item) {
            if (!state.tmp.container_item_count[Item.container_id]) {
              return !retval2;
            } else if (state.tmp.container_item_count[Item.container_id] > 1) {
              return retval2;
            }
            return !retval2;
          };
        };
        this.tests.push(maketest(retval));
      };
      CSL4.Attributes["@container-subsequent"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var retval = arg === "true" ? true : false;
        var maketest = function(retval2) {
          return function(Item) {
            if (state.tmp.container_item_pos[Item.container_id] > 1) {
              return retval2;
            }
            return !retval2;
          };
        };
        this.tests.push(maketest(retval));
      };
      CSL4.Attributes["@has-subunit"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function(namevar) {
          return function(Item) {
            var subunit_count = 0;
            for (var i in Item[namevar]) {
              var name = Item[namevar][i];
              if (!name.given) {
                var institution2 = name.literal ? name.literal : name.family;
                var length = institution2.split("|").length;
                if (subunit_count === 0 || length < subunit_count) {
                  subunit_count = length;
                }
              }
            }
            return subunit_count > 1;
          };
        };
        this.tests.push(maketest(arg));
      };
      CSL4.Attributes["@cite-form"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function(citeForm) {
          return function(Item) {
            if (Item["cite-form"] === citeForm) {
              return true;
            }
            return false;
          };
        };
        this.tests.push(maketest(arg));
      };
      CSL4.Attributes["@disable-duplicate-year-suppression"] = function(state, arg) {
        state.opt.disable_duplicate_year_suppression = arg.split(/\s+/);
      };
      CSL4.Attributes["@consolidate-containers"] = function(state, arg) {
        CSL4.Attributes["@track-containers"](state, arg);
        var args = arg.split(/\s+/);
        state.bibliography.opt.consolidate_containers = args;
      };
      CSL4.Attributes["@track-containers"] = function(state, arg) {
        var args = arg.split(/\s+/);
        if (!state.bibliography.opt.track_container_items) {
          state.bibliography.opt.track_container_items = [];
        }
        if (!state.bibliography.opt.consolidate_containers) {
          state.bibliography.opt.consolidate_containers = [];
        }
        state.bibliography.opt.track_container_items = state.bibliography.opt.track_container_items.concat(args);
      };
      CSL4.Attributes["@parallel-first"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.parallel_first = {};
        for (var i in vars) {
          var v = vars[i];
          this.parallel_first[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL4.Attributes["@parallel-last"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.parallel_last = {};
        for (var i in vars) {
          var v = vars[i];
          this.parallel_last[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL4.Attributes["@parallel-last-to-first"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        this.parallel_last_to_first = {};
        for (var i = 0, ilen = vars.length; i < ilen; i++) {
          this.parallel_last_to_first[vars[i]] = true;
        }
      };
      CSL4.Attributes["@parallel-delimiter-override"] = function(state, arg) {
        state.opt.parallel.enable = true;
        this.strings.set_parallel_delimiter_override = arg;
      };
      CSL4.Attributes["@parallel-delimiter-override-on-suppress"] = function(state, arg) {
        state.opt.parallel.enable = true;
        this.strings.set_parallel_delimiter_override_on_suppress = arg;
      };
      CSL4.Attributes["@no-repeat"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.non_parallel = {};
        for (var i in vars) {
          var v = vars[i];
          this.non_parallel[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL4.Attributes["@require"] = function(state, arg) {
        state.opt.use_context_condition = true;
        this.strings.require = arg;
      };
      CSL4.Attributes["@reject"] = function(state, arg) {
        state.opt.use_context_condition = true;
        this.strings.reject = arg;
      };
      CSL4.Attributes["@require-comma-on-symbol"] = function(state, arg) {
        state.opt.require_comma_on_symbol = arg;
      };
      CSL4.Attributes["@gender"] = function(state, arg) {
        this.gender = arg;
      };
      CSL4.Attributes["@cslid"] = function(state, arg) {
        this.cslid = parseInt(arg, 10);
      };
      CSL4.Attributes["@capitalize-if-first"] = function(state, arg) {
        this.strings.capitalize_if_first_override = arg;
      };
      CSL4.Attributes["@label-capitalize-if-first"] = function(state, arg) {
        this.strings.label_capitalize_if_first_override = arg;
      };
      CSL4.Attributes["@label-form"] = function(state, arg) {
        this.strings.label_form_override = arg;
      };
      CSL4.Attributes["@part-separator"] = function(state, arg) {
        this.strings["part-separator"] = arg;
      };
      CSL4.Attributes["@leading-noise-words"] = function(state, arg) {
        this["leading-noise-words"] = arg;
      };
      CSL4.Attributes["@name-never-short"] = function(state, arg) {
        this["name-never-short"] = arg;
      };
      CSL4.Attributes["@class"] = function(state, arg) {
        state.opt["class"] = arg;
      };
      CSL4.Attributes["@version"] = function(state, arg) {
        state.opt.version = arg;
      };
      CSL4.Attributes["@value"] = function(state, arg) {
        this.strings.value = arg;
      };
      CSL4.Attributes["@name"] = function(state, arg) {
        this.strings.name = arg;
      };
      CSL4.Attributes["@form"] = function(state, arg) {
        this.strings.form = arg;
      };
      CSL4.Attributes["@date-parts"] = function(state, arg) {
        this.strings["date-parts"] = arg;
      };
      CSL4.Attributes["@range-delimiter"] = function(state, arg) {
        this.strings["range-delimiter"] = arg;
      };
      CSL4.Attributes["@macro"] = function(state, arg) {
        this.postponed_macro = arg;
      };
      CSL4.Attributes["@term"] = function(state, arg) {
        if (arg === "sub verbo") {
          this.strings.term = "sub-verbo";
        } else {
          this.strings.term = arg;
        }
      };
      CSL4.Attributes["@xmlns"] = function() {
      };
      CSL4.Attributes["@lang"] = function(state, arg) {
        if (arg) {
          state.build.lang = arg;
        }
      };
      CSL4.Attributes["@lingo"] = function() {
      };
      CSL4.Attributes["@macro-has-date"] = function() {
        this["macro-has-date"] = true;
      };
      CSL4.Attributes["@suffix"] = function(state, arg) {
        this.strings.suffix = arg;
      };
      CSL4.Attributes["@prefix"] = function(state, arg) {
        this.strings.prefix = arg;
      };
      CSL4.Attributes["@delimiter"] = function(state, arg) {
        this.strings.delimiter = arg;
      };
      CSL4.Attributes["@match"] = function(state, arg) {
        this.match = arg;
      };
      CSL4.Attributes["@names-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        this.strings["et-al-min"] = val;
      };
      CSL4.Attributes["@names-use-first"] = function(state, arg) {
        this.strings["et-al-use-first"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@names-use-last"] = function(state, arg) {
        if (arg === "true") {
          this.strings["et-al-use-last"] = true;
        } else {
          this.strings["et-al-use-last"] = false;
        }
      };
      CSL4.Attributes["@sort"] = function(state, arg) {
        if (arg === "descending") {
          this.strings.sort_direction = CSL4.DESCENDING;
        }
      };
      CSL4.Attributes["@plural"] = function(state, arg) {
        if (arg === "always" || arg === "true") {
          this.strings.plural = 1;
        } else if (arg === "never" || arg === "false") {
          this.strings.plural = 0;
        } else if (arg === "contextual") {
          this.strings.plural = false;
        }
      };
      CSL4.Attributes["@has-publisher-and-publisher-place"] = function() {
        this.strings["has-publisher-and-publisher-place"] = true;
      };
      CSL4.Attributes["@publisher-delimiter-precedes-last"] = function(state, arg) {
        this.strings["publisher-delimiter-precedes-last"] = arg;
      };
      CSL4.Attributes["@publisher-delimiter"] = function(state, arg) {
        this.strings["publisher-delimiter"] = arg;
      };
      CSL4.Attributes["@publisher-and"] = function(state, arg) {
        this.strings["publisher-and"] = arg;
      };
      CSL4.Attributes["@givenname-disambiguation-rule"] = function(state, arg) {
        if (CSL4.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {
          state.citation.opt["givenname-disambiguation-rule"] = arg;
        }
      };
      CSL4.Attributes["@collapse"] = function(state, arg) {
        if (arg) {
          state[this.name].opt.collapse = arg;
        }
      };
      CSL4.Attributes["@cite-group-delimiter"] = function(state, arg) {
        if (arg) {
          state[state.tmp.area].opt.cite_group_delimiter = arg;
        }
      };
      CSL4.Attributes["@names-delimiter"] = function(state, arg) {
        state.setOpt(this, "names-delimiter", arg);
      };
      CSL4.Attributes["@name-form"] = function(state, arg) {
        state.setOpt(this, "name-form", arg);
      };
      CSL4.Attributes["@subgroup-delimiter"] = function(state, arg) {
        this.strings["subgroup-delimiter"] = arg;
      };
      CSL4.Attributes["@subgroup-delimiter-precedes-last"] = function(state, arg) {
        this.strings["subgroup-delimiter-precedes-last"] = arg;
      };
      CSL4.Attributes["@name-delimiter"] = function(state, arg) {
        state.setOpt(this, "name-delimiter", arg);
      };
      CSL4.Attributes["@et-al-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        state.setOpt(this, "et-al-min", val);
      };
      CSL4.Attributes["@et-al-use-first"] = function(state, arg) {
        state.setOpt(this, "et-al-use-first", parseInt(arg, 10));
      };
      CSL4.Attributes["@et-al-use-last"] = function(state, arg) {
        if (arg === "true") {
          state.setOpt(this, "et-al-use-last", true);
        } else {
          state.setOpt(this, "et-al-use-last", false);
        }
      };
      CSL4.Attributes["@et-al-subsequent-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        state.setOpt(this, "et-al-subsequent-min", val);
      };
      CSL4.Attributes["@et-al-subsequent-use-first"] = function(state, arg) {
        state.setOpt(this, "et-al-subsequent-use-first", parseInt(arg, 10));
      };
      CSL4.Attributes["@suppress-min"] = function(state, arg) {
        this.strings["suppress-min"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@suppress-max"] = function(state, arg) {
        this.strings["suppress-max"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@and"] = function(state, arg) {
        state.setOpt(this, "and", arg);
      };
      CSL4.Attributes["@delimiter-precedes-last"] = function(state, arg) {
        state.setOpt(this, "delimiter-precedes-last", arg);
      };
      CSL4.Attributes["@delimiter-precedes-et-al"] = function(state, arg) {
        state.setOpt(this, "delimiter-precedes-et-al", arg);
      };
      CSL4.Attributes["@initialize-with"] = function(state, arg) {
        state.setOpt(this, "initialize-with", arg);
      };
      CSL4.Attributes["@initialize"] = function(state, arg) {
        if (arg === "false") {
          state.setOpt(this, "initialize", false);
        }
      };
      CSL4.Attributes["@name-as-reverse-order"] = function(state, arg) {
        this["name-as-reverse-order"] = arg;
      };
      CSL4.Attributes["@name-as-sort-order"] = function(state, arg) {
        if (this.name === "style-options") {
          this["name-as-sort-order"] = arg;
        } else {
          state.setOpt(this, "name-as-sort-order", arg);
        }
      };
      CSL4.Attributes["@sort-separator"] = function(state, arg) {
        state.setOpt(this, "sort-separator", arg);
      };
      CSL4.Attributes["@require-match"] = function(state, arg) {
        if (arg === "true") {
          this.requireMatch = true;
        }
      };
      CSL4.Attributes["@exclude-types"] = function(state, arg) {
        state.bibliography.opt.exclude_types = arg.split(/\s+/);
      };
      CSL4.Attributes["@exclude-with-fields"] = function(state, arg) {
        state.bibliography.opt.exclude_with_fields = arg.split(/\s+/);
      };
      CSL4.Attributes["@year-suffix-delimiter"] = function(state, arg) {
        state[this.name].opt["year-suffix-delimiter"] = arg;
      };
      CSL4.Attributes["@after-collapse-delimiter"] = function(state, arg) {
        state[this.name].opt["after-collapse-delimiter"] = arg;
      };
      CSL4.Attributes["@subsequent-author-substitute"] = function(state, arg) {
        state[this.name].opt["subsequent-author-substitute"] = arg;
      };
      CSL4.Attributes["@subsequent-author-substitute-rule"] = function(state, arg) {
        state[this.name].opt["subsequent-author-substitute-rule"] = arg;
      };
      CSL4.Attributes["@disambiguate-add-names"] = function(state, arg) {
        if (arg === "true") {
          state.opt["disambiguate-add-names"] = true;
        }
      };
      CSL4.Attributes["@disambiguate-add-givenname"] = function(state, arg) {
        if (arg === "true") {
          state.opt["disambiguate-add-givenname"] = true;
        }
      };
      CSL4.Attributes["@disambiguate-add-year-suffix"] = function(state, arg) {
        if (arg === "true" && state.opt.xclass !== "numeric") {
          state.opt["disambiguate-add-year-suffix"] = true;
        }
      };
      CSL4.Attributes["@second-field-align"] = function(state, arg) {
        if (arg === "flush" || arg === "margin") {
          state[this.name].opt["second-field-align"] = arg;
        }
      };
      CSL4.Attributes["@hanging-indent"] = function(state, arg) {
        if (arg === "true") {
          if (state.opt.development_extensions.hanging_indent_legacy_number) {
            state[this.name].opt.hangingindent = 2;
          } else {
            state[this.name].opt.hangingindent = true;
          }
        }
      };
      CSL4.Attributes["@line-spacing"] = function(state, arg) {
        if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["line-spacing"] = parseFloat(arg, 10);
        }
      };
      CSL4.Attributes["@entry-spacing"] = function(state, arg) {
        if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["entry-spacing"] = parseFloat(arg, 10);
        }
      };
      CSL4.Attributes["@near-note-distance"] = function(state, arg) {
        state[this.name].opt["near-note-distance"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@substring"] = function(state, arg) {
        this.substring = parseInt(arg, 10);
      };
      CSL4.Attributes["@text-case"] = function(state, arg) {
        var func = function(state2, Item) {
          if (arg === "normal") {
            this.text_case_normal = true;
          } else {
            this.strings["text-case"] = arg;
            if (arg === "title") {
              if (Item.jurisdiction) {
                this.strings["text-case"] = "passthrough";
              }
            }
          }
        };
        this.execs.push(func);
      };
      CSL4.Attributes["@page-range-format"] = function(state, arg) {
        state.opt["page-range-format"] = arg;
      };
      CSL4.Attributes["@year-range-format"] = function(state, arg) {
        state.opt["year-range-format"] = arg;
      };
      CSL4.Attributes["@default-locale"] = function(state, arg) {
        if (this.name === "style") {
          var lst, len, pos, m, ret;
          var m = arg.match(/-x-(sort|translit|translat)-/g);
          if (m) {
            for (pos = 0, len = m.length; pos < len; pos += 1) {
              m[pos] = m[pos].replace(/^-x-/, "").replace(/-$/, "");
            }
          }
          lst = arg.split(/-x-(?:sort|translit|translat)-/);
          ret = [lst[0]];
          for (pos = 1, len = lst.length; pos < len; pos += 1) {
            ret.push(m[pos - 1]);
            ret.push(lst[pos]);
          }
          lst = ret.slice();
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
            state.opt["locale-" + lst[pos]].push(lst[pos + 1].replace(/^\s*/g, "").replace(/\s*$/g, ""));
          }
          if (lst.length) {
            state.opt["default-locale"] = lst.slice(0, 1);
          } else {
            state.opt["default-locale"] = ["en"];
          }
        } else if (arg === "true") {
          this.default_locale = true;
        }
      };
      CSL4.Attributes["@default-locale-sort"] = function(state, arg) {
        state.opt["default-locale-sort"] = arg;
      };
      CSL4.Attributes["@demote-non-dropping-particle"] = function(state, arg) {
        state.opt["demote-non-dropping-particle"] = arg;
      };
      CSL4.Attributes["@initialize-with-hyphen"] = function(state, arg) {
        if (arg === "false") {
          state.opt["initialize-with-hyphen"] = false;
        }
      };
      CSL4.Attributes["@institution-parts"] = function(state, arg) {
        this.strings["institution-parts"] = arg;
      };
      CSL4.Attributes["@if-short"] = function(state, arg) {
        if (arg === "true") {
          this.strings["if-short"] = true;
        }
      };
      CSL4.Attributes["@substitute-use-first"] = function(state, arg) {
        this.strings["substitute-use-first"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@use-first"] = function(state, arg) {
        this.strings["use-first"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@use-last"] = function(state, arg) {
        this.strings["use-last"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@stop-first"] = function(state, arg) {
        this.strings["stop-first"] = parseInt(arg, 10);
      };
      CSL4.Attributes["@stop-last"] = function(state, arg) {
        this.strings["stop-last"] = parseInt(arg, 10) * -1;
      };
      CSL4.Attributes["@reverse-order"] = function(state, arg) {
        if (arg === "true") {
          this.strings["reverse-order"] = true;
        }
      };
      CSL4.Attributes["@display"] = function(state, arg) {
        if (state.bibliography.tokens.length === 2) {
          state.opt.using_display = true;
        }
        this.strings.cls = arg;
      };
      CSL4.Stack = function(val, literal) {
        this.mystack = [];
        if (literal || val) {
          this.mystack.push(val);
        }
        this.tip = this.mystack[0];
      };
      CSL4.Stack.prototype.push = function(val, literal) {
        if (literal || val) {
          this.mystack.push(val);
        } else {
          this.mystack.push("");
        }
        this.tip = this.mystack[this.mystack.length - 1];
      };
      CSL4.Stack.prototype.clear = function() {
        this.mystack = [];
        this.tip = {};
      };
      CSL4.Stack.prototype.replace = function(val, literal) {
        if (this.mystack.length === 0) {
          CSL4.error("Internal CSL processor error: attempt to replace nonexistent stack item with " + val);
        }
        if (literal || val) {
          this.mystack[this.mystack.length - 1] = val;
        } else {
          this.mystack[this.mystack.length - 1] = "";
        }
        this.tip = this.mystack[this.mystack.length - 1];
      };
      CSL4.Stack.prototype.pop = function() {
        var ret = this.mystack.pop();
        if (this.mystack.length) {
          this.tip = this.mystack[this.mystack.length - 1];
        } else {
          this.tip = {};
        }
        return ret;
      };
      CSL4.Stack.prototype.value = function() {
        return this.mystack.slice(-1)[0];
      };
      CSL4.Stack.prototype.length = function() {
        return this.mystack.length;
      };
      CSL4.Parallel = function(state) {
        this.state = state;
      };
      CSL4.Parallel.prototype.StartCitation = function(sortedItems, out) {
        this.state.tmp.suppress_repeats = [];
        if (sortedItems.length < 2)
          return;
        var idxEnd = 0;
        var parallelMatchList = false;
        var siblingRanges = [];
        for (var i = 0, ilen = sortedItems.length - 1; i < ilen; i++) {
          var currItem = sortedItems[i][0];
          var nextItem = sortedItems[i + 1][0];
          var freshMatchList = false;
          var info = {};
          if (sortedItems[i][0].seeAlso && sortedItems[i][0].seeAlso.length > 0 && !parallelMatchList) {
            freshMatchList = true;
            parallelMatchList = [sortedItems[i][0].id].concat(sortedItems[i][0].seeAlso);
            var tempMatchList = parallelMatchList.slice();
            var remainder = sortedItems.slice(i);
            remainder[0][1].parallel = "first";
            for (var j = 0, jlen = remainder.length; j < jlen; j++) {
              var itemID = remainder[j][0].id;
              var ididx = tempMatchList.indexOf(itemID);
              idxEnd = false;
              if (ididx === -1) {
                idxEnd = i + j - 1;
              } else if (i + j === sortedItems.length - 1) {
                idxEnd = i + j;
              }
              if (idxEnd) {
                siblingRanges.push([i, idxEnd]);
                break;
              } else {
                tempMatchList = tempMatchList.slice(0, ididx).concat(tempMatchList.slice(ididx + 1));
              }
            }
          }
          if (i > 0 && freshMatchList) {
            this.state.tmp.suppress_repeats[i - 1].START = true;
            freshMatchList = false;
          }
          for (var varname in this.state.opt.track_repeat) {
            if (!currItem[varname] || !nextItem[varname]) {
              info[varname] = false;
            } else if (typeof nextItem[varname] === "string" || typeof nextItem[varname] === "number") {
              if (varname === "title" && currItem["title-short"] && nextItem["title-short"]) {
                var currVal = currItem["title-short"];
                var nextVal = nextItem["title-short"];
              } else {
                var currVal = currItem[varname];
                var nextVal = nextItem[varname];
              }
              if (currVal == nextVal) {
                info[varname] = true;
              } else {
                info[varname] = false;
              }
            } else if (typeof currItem[varname].length === "undefined") {
              info[varname] = false;
              var currYear = currItem[varname].year;
              var nextYear = nextItem[varname].year;
              if (currYear && nextYear) {
                if (currYear == nextYear) {
                  info[varname] = true;
                }
              }
            } else {
              var currVal = JSON.stringify(currItem[varname]);
              var nextVal = JSON.stringify(nextItem[varname]);
              if (currVal === nextVal) {
                info[varname] = true;
              } else {
                info[varname] = false;
              }
            }
          }
          if (!parallelMatchList) {
            info.ORPHAN = true;
          }
          if (idxEnd === i) {
            info.END = true;
            parallelMatchList = false;
          }
          this.state.tmp.suppress_repeats.push(info);
        }
        for (var j = 0, jlen = siblingRanges.length; j < jlen; j++) {
          var masterID = sortedItems[siblingRanges[j][0]][0].id;
          this.state.registry.registry[masterID].master = true;
          this.state.registry.registry[masterID].siblings = [];
          var start = siblingRanges[j][0];
          var end = siblingRanges[j][1];
          for (var k = start; k < end; k++) {
            this.state.tmp.suppress_repeats[k].SIBLING = true;
            var siblingID = sortedItems[k + 1][0].id;
            sortedItems[k + 1][1].parallel = "other";
            this.state.registry.registry[masterID].siblings.push(siblingID);
          }
        }
      };
      CSL4.Parallel.prototype.checkRepeats = function(params) {
        var idx = this.state.tmp.cite_index;
        if (this.state.tmp.suppress_repeats) {
          if (params.parallel_first && Object.keys(params.parallel_first).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.parallel_first) {
              if (!arr[idx][varname] || arr[idx].START) {
                ret = false;
              }
            }
            return ret;
          }
          if (params.parallel_last && Object.keys(params.parallel_last).length > 0) {
            var arr = this.state.tmp.suppress_repeats.concat([{}]);
            var ret = Object.keys(params.parallel_last).length > 0 ? true : false;
            for (var varname in params.parallel_last) {
              if (!arr[idx][varname] || arr[idx].END) {
                ret = false;
              }
            }
            return ret;
          }
          if (params.non_parallel && Object.keys(params.non_parallel).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.non_parallel) {
              if (!arr[idx][varname]) {
                ret = false;
              }
            }
            return ret;
          }
        }
        return false;
      };
      CSL4.Util = {};
      CSL4.Util.Match = function() {
        this.any = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (result) {
                return true;
              }
            }
            return false;
          };
        };
        this.none = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (result) {
                return false;
              }
            }
            return true;
          };
        };
        this.all = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (!result) {
                return false;
              }
            }
            return true;
          };
        };
        this[void 0] = this.all;
        this.nand = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (!result) {
                return true;
              }
            }
            return false;
          };
        };
      };
      CSL4.Transform = function(state) {
        this.abbrevs = {};
        this.abbrevs["default"] = new state.sys.AbbreviationSegments();
        function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {
          var value = "";
          if (state.sys.getHumanForm) {
            if (variable === "country") {
              value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
              value = value.split("|")[0];
            } else if (variable === "jurisdiction") {
              value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
              if (!quashCountry) {
                value = value.split("|").slice(1).join(", ");
              } else {
                value = "";
              }
            }
          }
          return value;
        }
        function abbreviate(state2, tok, Item, altvar, basevalue, family_var, use_field) {
          var value = "";
          var myabbrev_family = CSL4.FIELD_CATEGORY_REMAP[family_var];
          var preferredJurisdiction;
          if (!myabbrev_family) {
            return basevalue;
          }
          var variable = family_var;
          var normalizedKey = basevalue;
          if (state2.sys.normalizeAbbrevsKey) {
            normalizedKey = state2.sys.normalizeAbbrevsKey(family_var, basevalue);
          }
          var quashCountry = false;
          if (variable === "jurisdiction" && normalizedKey) {
            quashCountry = normalizedKey.indexOf(":") === -1;
          }
          if (["jurisdiction", "country"].indexOf(family_var) > -1 && basevalue === basevalue.toLowerCase()) {
            normalizedKey = basevalue.toUpperCase();
          }
          if (state2.sys.getAbbreviation) {
            if (["jurisdiction", "country", "language-name", "language-name-original"].indexOf(variable) > -1) {
              preferredJurisdiction = "default";
            } else if (Item.jurisdiction) {
              preferredJurisdiction = Item.jurisdiction;
            } else {
              preferredJurisdiction = "default";
            }
            var jurisdiction2 = state2.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.language);
            if (state2.transform.abbrevs[jurisdiction2][myabbrev_family] && normalizedKey) {
              var abbrev = state2.transform.abbrevs[jurisdiction2][myabbrev_family][normalizedKey];
              if (tok.strings.form === "short" && abbrev) {
                if (quashCountry) {
                  value = "";
                } else {
                  value = abbrev;
                }
              } else {
                value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
              }
            }
          }
          if (!value && (!state2.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== "legal_case") && altvar && Item[altvar] && use_field) {
            value = Item[altvar];
          }
          if (!value && !state2.sys.getAbbreviation && state2.sys.getHumanForm) {
            value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
          }
          if (!value && !quashCountry && (!state2.sys.getHumanForm || variable !== "jurisdiction")) {
            value = basevalue;
          }
          if (state2.opt.development_extensions.force_title_abbrev_fallback) {
            if (variable === "title" && value === basevalue && Item["title-short"]) {
              value = Item["title-short"];
            }
          }
          return value;
        }
        function getFieldLocale(Item, field) {
          var ret = state.opt["default-locale"][0].slice(0, 2);
          var localeRex;
          if (state.opt.development_extensions.strict_text_case_locales) {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*| .*)");
          } else {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*|.*)");
          }
          if (Item.language) {
            var m = ("" + Item.language).match(localeRex);
            if (m) {
              ret = m[1];
            } else {
              ret = "tlh";
            }
          }
          if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {
            ret = Item.multi.main[field];
          }
          if (!state.opt.development_extensions.strict_text_case_locales || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {
            ret = ret.toLowerCase();
          }
          return ret;
        }
        function getTextSubField(Item, field, locale_type, use_default, stopOrig, family_var) {
          var opt, o, ret, opts;
          var usedOrig = stopOrig;
          var usingOrig = false;
          if (!Item[field]) {
            return {
              name: "",
              usedOrig: stopOrig,
              token: CSL4.Util.cloneToken(this)
            };
          }
          var stickyLongForm = false;
          if (CSL4.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1 && family_var) {
            field = field + "-short";
            stickyLongForm = true;
          }
          var breakMe = false;
          var firstValue = null;
          var fieldsToTry = [];
          if (field.slice(-6) === "-short") {
            fieldsToTry.push(field);
            fieldsToTry.push(field.slice(0, -6));
          } else {
            fieldsToTry.push(field);
          }
          for (var h = 0, hlen = fieldsToTry.length; h < hlen; h++) {
            var variantMatch = false;
            var field = fieldsToTry[h];
            ret = { name: "", usedOrig: stopOrig, locale: getFieldLocale(Item, field) };
            opts = state.opt[locale_type] ? state.opt[locale_type].slice() : [];
            var hasVal = false;
            if (locale_type === "locale-orig") {
              if (!stopOrig) {
                ret.name = Item[field];
                ret.usedOrig = false;
              }
              hasVal = true;
              usingOrig = true;
            } else if (use_default && (typeof opts === "undefined" || opts.length === 0)) {
              ret.name = Item[field];
              ret.usedOrig = true;
              hasVal = true;
              usingOrig = true;
            }
            if (!hasVal) {
              for (var i = 0, ilen = opts.length; i < ilen; i += 1) {
                opt = opts[i];
                o = opt.split(/[\-_]/)[0];
                if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {
                  ret.name = Item.multi._keys[field][opt];
                  ret.locale = opt;
                  hasVal = true;
                  variantMatch = true;
                  usingOrig = false;
                  break;
                } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {
                  ret.name = Item.multi._keys[field][o];
                  ret.locale = o;
                  hasVal = true;
                  variantMatch = true;
                  usingOrig = false;
                  break;
                }
              }
              if (!ret.name && use_default) {
                ret = { name: Item[field], usedOrig: true, locale: getFieldLocale(Item, field) };
                usingOrig = true;
              }
            }
            ret.token = CSL4.Util.cloneToken(this);
            if (h === 0) {
              if (variantMatch) {
                ret.found_variant_ok = true;
              }
              firstValue = ret;
              if (!stickyLongForm && (typeof opts === "undefined" || opts.length === 0)) {
                breakMe = true;
              }
              if (variantMatch) {
                breakMe = true;
              }
            } else {
              if (!stickyLongForm && !variantMatch && firstValue) {
                ret = firstValue;
                field = fieldsToTry[0];
              } else if (variantMatch) {
                ret.found_variant_ok = true;
              }
            }
            if (["title", "container-title"].indexOf(field) > -1) {
              if (!usedOrig && (!ret.token.strings["text-case"] || ret.token.strings["text-case"] === "sentence" || ret.token.strings["text-case"] === "normal")) {
                var locale = state.opt.lang;
                var lang;
                if (usingOrig) {
                  lang = false;
                } else {
                  lang = ret.locale;
                }
                var seg = field.slice(0, -5);
                var sentenceCase = ret.token.strings["text-case"] === "sentence" ? true : false;
                ret.name = CSL4.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);
                delete ret.token.strings["text-case"];
              }
            }
            if (breakMe) {
              break;
            }
          }
          return ret;
        }
        this.getTextSubField = getTextSubField;
        function loadAbbreviation(jurisdiction2, category, orig, lang) {
          if (!jurisdiction2) {
            jurisdiction2 = "default";
          }
          var country2 = jurisdiction2.split(":")[0];
          var domain = CSL4.getAbbrevsDomain(state, country2, lang);
          if (domain) {
            jurisdiction2 += "@" + domain;
          }
          if (!orig) {
            if (!state.transform.abbrevs[jurisdiction2]) {
              state.transform.abbrevs[jurisdiction2] = new state.sys.AbbreviationSegments();
            }
            if (!state.transform.abbrevs[jurisdiction2][category]) {
              state.transform.abbrevs[jurisdiction2][category] = {};
            }
            return jurisdiction2;
          }
          if (state.sys.getAbbreviation) {
            jurisdiction2 = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction2, category, orig);
            if (!jurisdiction2) {
              jurisdiction2 = "default";
              if (domain) {
                jurisdiction2 += "@" + domain;
              }
            }
          }
          return jurisdiction2;
        }
        this.loadAbbreviation = loadAbbreviation;
        function publisherCheck(tok, Item, primary, family_var) {
          var varname = tok.variables[0];
          if (state.publisherOutput && primary) {
            if (["publisher", "publisher-place"].indexOf(varname) === -1) {
              return false;
            } else {
              state.publisherOutput[varname + "-token"] = tok;
              state.publisherOutput.varlist.push(varname);
              var lst = primary.split(/;\s*/);
              if (lst.length === state.publisherOutput[varname + "-list"].length) {
                state.publisherOutput[varname + "-list"] = lst;
              }
              for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);
              }
              state.tmp[varname + "-token"] = tok;
              return true;
            }
          }
          return false;
        }
        function citeFormCheck(Item, value) {
          var m = value.match(/^#([0-9]+).*>>>/);
          if (m && m[1]) {
            Item["cite-form"] = m[1];
          }
        }
        function quashCheck(jurisdiction2, value) {
          var m = value.match(/^(?:#[0-9]+)*(?:!((?:[-_a-z]+(?:(?:.*)))(?:,(?:[-_a-z]+(?:(?:.*))))*))*>>>/);
          if (m) {
            value = value.slice(m[0].length);
            if (m[1]) {
              var fields = m[1].split(",");
              for (var i = 0, ilen = fields.length; i < ilen; i += 1) {
                var rawField = fields[i];
                var mm = rawField.match(/^([-_a-z]+)(?:\:(.*))*$/);
                var field = mm[1];
                var trimmer = state.tmp.abbrev_trimmer;
                if (mm[2]) {
                  if (trimmer && jurisdiction2) {
                    if (!trimmer[jurisdiction2]) {
                      trimmer[jurisdiction2] = {};
                    }
                    trimmer[jurisdiction2][field] = mm[2];
                  }
                } else if (state.tmp.done_vars.indexOf(field) === -1) {
                  if (trimmer && jurisdiction2) {
                    if (!trimmer.QUASHES[jurisdiction2]) {
                      trimmer.QUASHES[jurisdiction2] = {};
                    }
                    trimmer.QUASHES[jurisdiction2][field] = true;
                  }
                  state.tmp.done_vars.push(field);
                }
              }
            }
          }
          return value;
        }
        this.quashCheck = quashCheck;
        function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {
          var localesets;
          var langPrefs = CSL4.LangPrefsMap[variables[0]];
          if (!langPrefs) {
            localesets = false;
          } else {
            localesets = state.opt["cite-lang-prefs"][langPrefs];
          }
          return function(state2, Item, item) {
            var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;
            if (!variables[0] || !Item[variables[0]] && !Item[alternative_varname]) {
              return null;
            }
            if (!state2.tmp.just_looking && item && item["suppress-author"]) {
              if (!state2.tmp.probably_rendered_something && state2.tmp.can_substitute.length() > 1) {
                return null;
              }
            }
            var slot = { primary: false, secondary: false, tertiary: false };
            if (state2.tmp.area.slice(-5) === "_sort") {
              slot.primary = "locale-sort";
            } else {
              if (localesets && localesets.length === 1 && localesets[0] === "locale-orig") {
                slot.primary = "locale-orig";
                localesets = false;
              } else if (localesets && !state2.tmp.multi_layout) {
                var slotnames = ["primary", "secondary", "tertiary"];
                for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {
                  if (localesets.length - 1 < i) {
                    break;
                  }
                  if (localesets[i]) {
                    slot[slotnames[i]] = "locale-" + localesets[i];
                  }
                }
              } else {
                slot.primary = "locale-orig";
              }
            }
            if (variables[0] === "title-short" || state2.tmp.area !== "bibliography" && !(state2.tmp.area === "citation" && state2.opt.xclass === "note" && item && !item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            if (state2.tmp.multi_layout) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            if (state2.tmp["publisher-list"]) {
              if (variables[0] === "publisher") {
                state2.tmp["publisher-token"] = this;
              } else if (variables[0] === "publisher-place") {
                state2.tmp["publisher-place-token"] = this;
              }
              return null;
            }
            var oldLangArray = state2.tmp.lang_array.slice();
            var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);
            primary = res.name;
            primary_locale = res.locale;
            var primary_tok = res.token;
            var primaryUsedOrig = res.usedOrig;
            if (family_var && !res.found_variant_ok) {
              primary = abbreviate(state2, primary_tok, Item, alternative_varname, primary, family_var, true);
              if (primary) {
                citeFormCheck(Item, primary);
                if (!state2.tmp.just_looking) {
                  primary = quashCheck(Item.jurisdiction, primary);
                }
              }
            }
            if (publisherCheck(this, Item, primary, family_var)) {
              state2.tmp.lang_array = oldLangArray;
              return null;
            }
            secondary = false;
            tertiary = false;
            var secondary_tok;
            var tertiary_tok;
            if (slot.secondary) {
              res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);
              secondary = res.name;
              secondary_locale = res.locale;
              secondary_tok = res.token;
              if (family_var && !res.found_variant_ok) {
                if (secondary) {
                  secondary = abbreviate(state2, secondary_tok, Item, false, secondary, family_var, true);
                }
              }
            }
            if (slot.tertiary) {
              res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);
              tertiary = res.name;
              tertiary_locale = res.locale;
              tertiary_tok = res.token;
              if (family_var && !res.found_variant_ok) {
                if (tertiary) {
                  tertiary = abbreviate(state2, tertiary_tok, Item, false, tertiary, family_var, true);
                }
              }
            }
            var primaryPrefix;
            if (slot.primary === "locale-translit") {
              primaryPrefix = state2.opt.citeAffixes[langPrefs][slot.primary].prefix;
            }
            if (primaryPrefix === "<i>" && variables[0] === "title" && !primaryUsedOrig) {
              var hasItalic = false;
              for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                if (primary_tok.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                  hasItalic = true;
                }
              }
              if (!hasItalic) {
                primary_tok.decorations.push(["@font-style", "italic"]);
              }
            }
            if (primary_locale !== "en" && primary_tok.strings["text-case"] === "title") {
              primary_tok.strings["text-case"] = "passthrough";
            }
            if (variables[0] === "title") {
              primary = CSL4.demoteNoiseWords(state2, primary, this["leading-noise-words"]);
            }
            if (secondary || tertiary) {
              state2.output.openLevel("empty");
              primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/, "");
              if (primary_locale) {
                state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
              }
              CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
              state2.output.append(primary, primary_tok);
              state2.tmp.probably_rendered_something = true;
              if (primary === secondary) {
                secondary = false;
              }
              if (secondary) {
                secondary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.secondary].prefix;
                secondary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.secondary].suffix;
                if (!secondary_tok.strings.prefix) {
                  secondary_tok.strings.prefix = " ";
                }
                for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {
                  if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(secondary_tok.decorations[i].join("/")) > -1) {
                    secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));
                  }
                }
                if (secondary_locale !== "en" && secondary_tok.strings["text-case"] === "title") {
                  secondary_tok.strings["text-case"] = "passthrough";
                }
                if (secondary_locale) {
                  state2.tmp.lang_array = [secondary_locale].concat(oldLangArray);
                }
                var secondary_outer = new CSL4.Token();
                secondary_outer.decorations.push(["@font-style", "normal"]);
                secondary_outer.decorations.push(["@font-weight", "normal"]);
                state2.output.openLevel(secondary_outer);
                state2.output.append(secondary, secondary_tok);
                state2.output.closeLevel();
                var blob_obj = state2.output.current.value();
                var blobs_pos = state2.output.current.value().blobs.length - 1;
              }
              if (primary === tertiary) {
                tertiary = false;
              }
              if (tertiary) {
                tertiary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.tertiary].prefix;
                tertiary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.tertiary].suffix;
                if (!tertiary_tok.strings.prefix) {
                  tertiary_tok.strings.prefix = " ";
                }
                for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {
                  if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(tertiary_tok.decorations[i].join("/")) > -1) {
                    tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));
                  }
                }
                if (tertiary_locale !== "en" && tertiary_tok.strings["text-case"] === "title") {
                  tertiary_tok.strings["text-case"] = "passthrough";
                }
                if (tertiary_locale) {
                  state2.tmp.lang_array = [tertiary_locale].concat(oldLangArray);
                }
                var tertiary_outer = new CSL4.Token();
                tertiary_outer.decorations.push(["@font-style", "normal"]);
                tertiary_outer.decorations.push(["@font-weight", "normal"]);
                state2.output.openLevel(tertiary_outer);
                state2.output.append(tertiary, tertiary_tok);
                state2.output.closeLevel();
                var blob_obj = state2.output.current.value();
                var blobs_pos = state2.output.current.value().blobs.length - 1;
              }
              state2.output.closeLevel();
            } else {
              if (primary_locale) {
                state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
              }
              CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
              state2.output.append(primary, primary_tok);
              state2.tmp.probably_rendered_something = true;
            }
            state2.tmp.lang_array = oldLangArray;
            if (state2.tmp.can_block_substitute) {
              state2.tmp.name_node.children.push(state2.output.current.value());
            }
            return null;
          };
        }
        this.getOutputFunction = getOutputFunction;
      };
      CSL4.Token = function(name, tokentype, conditional) {
        this.name = name;
        this.strings = {};
        this.strings.delimiter = void 0;
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.decorations = [];
        this.variables = [];
        this.execs = [];
        this.tokentype = tokentype;
      };
      CSL4.Util.cloneToken = function(token) {
        var newtok, key, pos, len;
        if (typeof token === "string") {
          return token;
        }
        newtok = new CSL4.Token(token.name, token.tokentype);
        for (var key in token.strings) {
          if (token.strings.hasOwnProperty(key)) {
            newtok.strings[key] = token.strings[key];
          }
        }
        if (token.decorations) {
          newtok.decorations = [];
          for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {
            newtok.decorations.push(token.decorations[pos].slice());
          }
        }
        if (token.variables) {
          newtok.variables = token.variables.slice();
        }
        if (token.execs) {
          newtok.execs = token.execs.slice();
          if (token.tests) {
            newtok.tests = token.tests.slice();
          }
        }
        return newtok;
      };
      CSL4.AmbigConfig = function() {
        this.maxvals = [];
        this.minval = 1;
        this.names = [];
        this.givens = [];
        this.year_suffix = false;
        this.disambiguate = 0;
      };
      CSL4.Blob = function(str, token, levelname) {
        var len, pos, key;
        this.levelname = levelname;
        if (token) {
          this.strings = { "prefix": "", "suffix": "" };
          for (var key in token.strings) {
            if (token.strings.hasOwnProperty(key)) {
              this.strings[key] = token.strings[key];
            }
          }
          this.decorations = [];
          if (token.decorations === void 0) {
            len = 0;
          } else {
            len = token.decorations.length;
          }
          for (pos = 0; pos < len; pos += 1) {
            this.decorations.push(token.decorations[pos].slice());
          }
        } else {
          this.strings = {};
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.strings.delimiter = "";
          this.decorations = [];
        }
        if (typeof str === "string") {
          this.blobs = str;
        } else if (str) {
          this.blobs = [str];
        } else {
          this.blobs = [];
        }
        this.alldecor = [this.decorations];
      };
      CSL4.Blob.prototype.push = function(blob) {
        if (typeof this.blobs === "string") {
          CSL4.error("Attempt to push blob onto string object");
        } else if (blob !== false) {
          blob.alldecor = blob.alldecor.concat(this.alldecor);
          this.blobs.push(blob);
        }
      };
      CSL4.NumericBlob = function(particle, num, mother_token, id2) {
        this.id = id2;
        this.alldecor = [];
        this.num = num;
        this.particle = particle;
        this.blobs = num.toString();
        this.status = CSL4.START;
        this.strings = {};
        if (mother_token) {
          this.gender = mother_token.gender;
          this.decorations = mother_token.decorations;
          this.strings.prefix = mother_token.strings.prefix;
          this.strings.suffix = mother_token.strings.suffix;
          this.strings["text-case"] = mother_token.strings["text-case"];
          this.successor_prefix = mother_token.successor_prefix;
          this.range_prefix = mother_token.range_prefix;
          this.splice_prefix = mother_token.splice_prefix;
          this.formatter = mother_token.formatter;
          if (!this.formatter) {
            this.formatter = new CSL4.Output.DefaultFormatter();
          }
          if (this.formatter) {
            this.type = this.formatter.format(1);
          }
        } else {
          this.decorations = [];
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.successor_prefix = "";
          this.range_prefix = "";
          this.splice_prefix = "";
          this.formatter = new CSL4.Output.DefaultFormatter();
        }
      };
      CSL4.NumericBlob.prototype.setFormatter = function(formatter) {
        this.formatter = formatter;
        this.type = this.formatter.format(1);
      };
      CSL4.Output.DefaultFormatter = function() {
      };
      CSL4.Output.DefaultFormatter.prototype.format = function(num) {
        return num.toString();
      };
      CSL4.NumericBlob.prototype.checkNext = function(next, start) {
        if (start) {
          this.status = CSL4.START;
          if (typeof next === "object") {
            if (next.num === this.num + 1) {
              next.status = CSL4.SUCCESSOR;
            } else {
              next.status = CSL4.SEEN;
            }
          }
        } else if (!next || !next.num || this.type !== next.type || next.num !== this.num + 1) {
          if (this.status === CSL4.SUCCESSOR_OF_SUCCESSOR) {
            this.status = CSL4.END;
          }
          if (typeof next === "object") {
            next.status = CSL4.SEEN;
          }
        } else {
          if (this.status === CSL4.START || this.status === CSL4.SEEN) {
            next.status = CSL4.SUCCESSOR;
          } else if (this.status === CSL4.SUCCESSOR || this.status === CSL4.SUCCESSOR_OF_SUCCESSOR) {
            if (this.range_prefix) {
              next.status = CSL4.SUCCESSOR_OF_SUCCESSOR;
              this.status = CSL4.SUPPRESS;
            } else {
              next.status = CSL4.SUCCESSOR;
            }
          }
        }
      };
      CSL4.NumericBlob.prototype.checkLast = function(last) {
        if (this.status === CSL4.SEEN || last.num !== this.num - 1 && this.status === CSL4.SUCCESSOR) {
          this.status = CSL4.SUCCESSOR;
          return true;
        }
        return false;
      };
      CSL4.Util.fixDateNode = function(parent, pos, node) {
        var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children, subchildren, display, cslid;
        var lingo = this.cslXml.getAttributeValue(node, "lingo");
        var default_locale = this.cslXml.getAttributeValue(node, "default-locale");
        this.build.date_key = true;
        form = this.cslXml.getAttributeValue(node, "form");
        var lingo;
        if (default_locale) {
          lingo = this.opt["default-locale"][0];
        } else {
          lingo = this.cslXml.getAttributeValue(node, "lingo");
        }
        if (!this.getDate(form, default_locale)) {
          return parent;
        }
        var dateparts = this.cslXml.getAttributeValue(node, "date-parts");
        variable = this.cslXml.getAttributeValue(node, "variable");
        prefix = this.cslXml.getAttributeValue(node, "prefix");
        suffix = this.cslXml.getAttributeValue(node, "suffix");
        display = this.cslXml.getAttributeValue(node, "display");
        cslid = this.cslXml.getAttributeValue(node, "cslid");
        datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));
        this.cslXml.setAttribute(datexml, "lingo", this.opt.lang);
        this.cslXml.setAttribute(datexml, "form", form);
        this.cslXml.setAttribute(datexml, "date-parts", dateparts);
        this.cslXml.setAttribute(datexml, "cslid", cslid);
        this.cslXml.setAttribute(datexml, "variable", variable);
        this.cslXml.setAttribute(datexml, "default-locale", default_locale);
        if (prefix) {
          this.cslXml.setAttribute(datexml, "prefix", prefix);
        }
        if (suffix) {
          this.cslXml.setAttribute(datexml, "suffix", suffix);
        }
        if (display) {
          this.cslXml.setAttribute(datexml, "display", display);
        }
        children = this.cslXml.children(datexml);
        for (var key in children) {
          subnode = children[key];
          if (this.cslXml.nodename(subnode) === "date-part") {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            if (default_locale) {
              this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, "@default-locale", "true");
            }
          }
        }
        children = this.cslXml.children(node);
        for (var key in children) {
          subnode = children[key];
          if (this.cslXml.nodename(subnode) === "date-part") {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            subchildren = this.cslXml.attributes(subnode);
            for (attr in subchildren) {
              if (attr === "@name") {
                continue;
              }
              if (lingo && lingo !== this.opt.lang) {
                if (["@suffix", "@prefix", "@form"].indexOf(attr) > -1) {
                  continue;
                }
              }
              val = subchildren[attr];
              this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, attr, val);
            }
          }
        }
        if (this.cslXml.getAttributeValue(node, "date-parts") === "year") {
          this.cslXml.deleteNodeByNameAttribute(datexml, "month");
          this.cslXml.deleteNodeByNameAttribute(datexml, "day");
        } else if (this.cslXml.getAttributeValue(node, "date-parts") === "year-month") {
          this.cslXml.deleteNodeByNameAttribute(datexml, "day");
        } else if (this.cslXml.getAttributeValue(node, "date-parts") === "month-day") {
          var childNodes = this.cslXml.children(datexml);
          for (var i = 1, ilen = this.cslXml.numberofnodes(childNodes); i < ilen; i++) {
            if (this.cslXml.getAttributeValue(childNodes[i], "name") === "year") {
              this.cslXml.setAttribute(childNodes[i - 1], "suffix", "");
              break;
            }
          }
          this.cslXml.deleteNodeByNameAttribute(datexml, "year");
        }
        return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);
      };
      CSL4.dateMacroAsSortKey = function(state, Item) {
        CSL4.dateAsSortKey.call(this, state, Item, true);
      };
      CSL4.dateAsSortKey = function(state, Item, isMacro) {
        var dp, elem, value, e, yr, prefix, i, ilen;
        var variable = this.variables[0];
        var macroFlag = "empty";
        if (isMacro && state.tmp.extension) {
          macroFlag = "macro-with-date";
        }
        dp = Item[variable];
        if (typeof dp === "undefined") {
          dp = { "date-parts": [[0]] };
        }
        if (typeof this.dateparts === "undefined") {
          this.dateparts = ["year", "month", "day"];
        }
        if (dp.raw) {
          dp = state.fun.dateparser.parseDateToArray(dp.raw);
        } else if (dp["date-parts"]) {
          dp = state.dateParseArray(dp);
        }
        if (typeof dp === "undefined") {
          dp = {};
        }
        if (dp.year) {
          for (i = 0, ilen = CSL4.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {
            elem = CSL4.DATE_PARTS_INTERNAL[i];
            value = 0;
            e = elem;
            if (e.slice(-4) === "_end") {
              e = e.slice(0, -4);
            }
            if (dp[elem] && this.dateparts.indexOf(e) > -1) {
              value = dp[elem];
            }
            if (elem.slice(0, 4) === "year") {
              yr = CSL4.Util.Dates[e].numeric(state, value);
              var prefix = "1";
              if (yr[0] === "-") {
                prefix = "0";
                yr = yr.slice(1);
                yr = 9999 - parseInt(yr, 10);
              }
              state.output.append(CSL4.Util.Dates[elem.slice(0, 4)].numeric(state, prefix + yr), macroFlag);
            } else {
              value = CSL4.Util.Dates[e]["numeric-leading-zeros"](state, value);
              if (!value) {
                value = "00";
              }
              state.output.append(value, macroFlag);
            }
          }
        }
      };
      CSL4.Engine.prototype.dateParseArray = function(date_obj) {
        var ret, field, dp, exts;
        ret = {};
        for (field in date_obj) {
          if (field === "date-parts") {
            dp = date_obj["date-parts"];
            if (dp.length > 1) {
              if (dp[0].length !== dp[1].length) {
                CSL4.error("CSL data error: element mismatch in date range input.");
              }
            }
            exts = ["", "_end"];
            for (var i = 0, ilen = dp.length; i < ilen; i += 1) {
              for (var j = 0, jlen = CSL4.DATE_PARTS.length; j < jlen; j += 1) {
                if (isNaN(parseInt(dp[i][j], 10))) {
                  ret[CSL4.DATE_PARTS[j] + exts[i]] = void 0;
                } else {
                  ret[CSL4.DATE_PARTS[j] + exts[i]] = parseInt(dp[i][j], 10);
                }
              }
            }
          } else if (date_obj.hasOwnProperty(field)) {
            if (field === "literal" && typeof date_obj.literal === "object" && typeof date_obj.literal.part === "string") {
              CSL4.debug("Warning: fixing up weird literal date value");
              ret.literal = date_obj.literal.part;
            } else {
              ret[field] = date_obj[field];
            }
          }
        }
        return ret;
      };
      CSL4.Util.Names = {};
      CSL4.Util.Names.compareNamesets = CSL4.NameOutput.prototype._compareNamesets;
      CSL4.Util.Names.unInitialize = function(state, name) {
        var i, ilen, namelist, punctlist, ret;
        if (!name) {
          return "";
        }
        namelist = name.split(/(?:\-|\s+)/);
        punctlist = name.match(/(\-|\s+)/g);
        ret = "";
        for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          ret += namelist[i];
          if (i < ilen - 1) {
            ret += punctlist[i];
          }
        }
        return ret;
      };
      CSL4.Util.Names.initializeWith = function(state, name, terminator, normalizeOnly) {
        var i, ilen, mm, lst, ret;
        if (!name) {
          return "";
        }
        if (!terminator) {
          terminator = "";
        }
        if (["Lord", "Lady"].indexOf(name) > -1 || !name.replace(/^(?:<[^>]+>)*/, "").match(CSL4.STARTSWITH_ROMANESQUE_REGEXP) && !terminator.match("%s")) {
          return name;
        }
        if (state.opt["initialize-with-hyphen"] === false) {
          name = name.replace(/\-/g, " ");
        }
        name = name.replace(/\s*\-\s*/g, "-").replace(/\s+/g, " ");
        name = name.replace(/-([a-z])/g, "\u2013$1");
        for (var i = name.length - 2; i > -1; i += -1) {
          if (name.slice(i, i + 1) === "." && name.slice(i + 1, i + 2) !== " ") {
            name = name.slice(0, i) + ". " + name.slice(i + 1);
          }
        }
        var nameSplits = CSL4.Output.Formatters.nameDoppel.split(name);
        var namelist = [];
        namelist = [nameSplits.strings[0]];
        if (nameSplits.tags.length === 0) {
          var mmm = namelist[0].match(/[^\.]+$/);
          if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {
            namelist[0] += ".";
          }
        }
        for (i = 1, ilen = nameSplits.strings.length; i < ilen; i += 1) {
          namelist.push(nameSplits.tags[i - 1]);
          namelist.push(nameSplits.strings[i]);
        }
        if (normalizeOnly) {
          ret = this.doNormalize(state, namelist, terminator);
        } else {
          ret = this.doInitialize(state, namelist, terminator);
        }
        ret = ret.replace(/\u2013([a-z])/g, "-$1");
        return ret;
      };
      CSL4.Util.Names.notag = function(str) {
        return str.replace(/^(?:<[^>]+>)*/, "");
      };
      CSL4.Util.Names.mergetag = function(state, tagstr, newstr) {
        var m = tagstr.match(/(?:-*<[^>]+>-*)/g);
        if (!m) {
          return newstr;
        } else {
          tagstr = m.join("");
        }
        m = newstr.match(/^(.*[^\s])*(\s+)$/);
        if (m) {
          m[1] = m[1] ? m[1] : "";
          newstr = m[1] + tagstr + m[2];
        } else {
          newstr = newstr + tagstr;
        }
        return newstr;
      };
      CSL4.Util.Names.tagonly = function(state, str) {
        var m = str.match(/(?:<[^>]+>)+/);
        if (!m) {
          return str;
        } else {
          return m.join("");
        }
      };
      CSL4.Util.Names.doNormalize = function(state, namelist, terminator) {
        var i, ilen;
        terminator = terminator ? terminator : "";
        var isAbbrev = [];
        for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          if (this.notag(namelist[i]).length > 1 && this.notag(namelist[i]).slice(-1) === ".") {
            namelist[i] = namelist[i].replace(/^(.*)\.(.*)$/, "$1$2");
            isAbbrev.push(true);
          } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {
            isAbbrev.push(true);
          } else {
            isAbbrev.push(false);
          }
        }
        for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          if (isAbbrev[i]) {
            if (i < namelist.length - 2) {
              namelist[i + 1] = this.tagonly(state, namelist[i + 1]);
              if (!isAbbrev[i + 2]) {
                namelist[i + 1] = this.tagonly(state, namelist[i + 1]) + " ";
              }
              if (namelist[i + 2].length > 1) {
                namelist[i + 1] = terminator.replace(/\ufeff$/, "") + namelist[i + 1];
              } else {
                namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
              }
            }
            if (i === namelist.length - 1) {
              namelist[i] = namelist[i] + terminator;
            }
          }
        }
        return namelist.join("").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
      };
      CSL4.Util.Names.doInitialize = function(state, namelist, terminator) {
        var i, ilen, m, j, jlen, lst, n;
        for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          n = namelist[i];
          if (!n) {
            continue;
          }
          m = n.match(CSL4.NAME_INITIAL_REGEXP);
          if (!m && (!n.match(CSL4.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match("%s"))) {
            m = n.match(/(.)(.*)/);
          }
          if (m && m[2] && m[3]) {
            m[1] = m[1] + m[2];
            m[2] = "";
          }
          if (m && m[1].slice(0, 1) === m[1].slice(0, 1).toUpperCase()) {
            var extra = "";
            if (m[2]) {
              var s = "";
              lst = m[2].split("");
              for (j = 0, jlen = lst.length; j < jlen; j += 1) {
                var c = lst[j];
                if (c === c.toUpperCase()) {
                  s += c;
                } else {
                  break;
                }
              }
              if (s.length < m[2].length) {
                extra = CSL4.toLocaleLowerCase.call(state, s);
              }
            }
            namelist[i] = m[1] + extra;
            if (i < ilen - 1) {
              if (terminator.match("%s")) {
                namelist[i] = terminator.replace("%s", namelist[i]);
              } else {
                if (namelist[i + 1].indexOf("-") > -1) {
                  namelist[i + 1] = this.mergetag(state, namelist[i + 1].replace("-", ""), terminator) + "-";
                } else {
                  namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
                }
              }
            } else {
              if (terminator.match("%s")) {
                namelist[i] = terminator.replace("%s", namelist[i]);
              } else {
                namelist.push(terminator);
              }
            }
          } else if (n.match(CSL4.ROMANESQUE_REGEXP) && (!m || !m[3])) {
            namelist[i] = " " + n;
          }
        }
        var ret = namelist.join("");
        ret = ret.replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
        return ret;
      };
      CSL4.Util.Names.getRawName = function(name) {
        var ret = [];
        if (name.literal) {
          ret.push(name.literal);
        } else {
          if (name.given) {
            ret.push(name.given);
          }
          if (name.family) {
            ret.push(name.family);
          }
        }
        return ret.join(" ");
      };
      CSL4.Util.Dates = {};
      CSL4.Util.Dates.year = {};
      CSL4.Util.Dates.year["long"] = function(state, num) {
        if (!num) {
          if (typeof num === "boolean") {
            num = "";
          } else {
            num = 0;
          }
        }
        return num.toString();
      };
      CSL4.Util.Dates.year.imperial = function(state, num, end) {
        var year2 = "";
        if (!num) {
          if (typeof num === "boolean") {
            num = "";
          } else {
            num = 0;
          }
        }
        end = end ? "_end" : "";
        var month = state.tmp.date_object["month" + end];
        month = month ? "" + month : "1";
        while (month.length < 2) {
          month = "0" + month;
        }
        var day = state.tmp.date_object["day" + end];
        day = day ? "" + day : "1";
        while (day.length < 2) {
          day = "0" + day;
        }
        var date2 = parseInt(num + month + day, 10);
        var label2;
        var offset;
        if (date2 >= 18680908 && date2 < 19120730) {
          label2 = "\u660E\u6CBB";
          offset = 1867;
        } else if (date2 >= 19120730 && date2 < 19261225) {
          label2 = "\u5927\u6B63";
          offset = 1911;
        } else if (date2 >= 19261225 && date2 < 19890108) {
          label2 = "\u662D\u548C";
          offset = 1925;
        } else if (date2 >= 19890108) {
          label2 = "\u5E73\u6210";
          offset = 1988;
        }
        if (label2 && offset) {
          var normalizedKey = label2;
          if (state.sys.normalizeAbbrevsKey) {
            normalizedKey = state.sys.normalizeAbbrevsKey("number", label2);
          }
          if (!state.transform.abbrevs["default"]["number"][normalizedKey]) {
            state.transform.loadAbbreviation("default", "number", normalizedKey, null);
          }
          if (state.transform.abbrevs["default"]["number"][normalizedKey]) {
            label2 = state.transform.abbrevs["default"]["number"][normalizedKey];
          }
          year2 = label2 + (num - offset);
        }
        return year2;
      };
      CSL4.Util.Dates.year["short"] = function(state, num) {
        num = num.toString();
        if (num && num.length === 4) {
          return num.substr(2);
        }
      };
      CSL4.Util.Dates.year.numeric = function(state, num) {
        var m, pre;
        num = "" + num;
        var m = num.match(/([0-9]*)$/);
        if (m) {
          pre = num.slice(0, m[1].length * -1);
          num = m[1];
        } else {
          pre = num;
          num = "";
        }
        while (num.length < 4) {
          num = "0" + num;
        }
        return pre + num;
      };
      CSL4.Util.Dates.normalizeMonth = function(num, useSeason) {
        var ret;
        if (!num) {
          num = 0;
        }
        num = "" + num;
        if (!num.match(/^[0-9]+$/)) {
          num = 0;
        }
        num = parseInt(num, 10);
        if (useSeason) {
          var res = { stub: "month-", num };
          if (res.num < 1 || res.num > 24) {
            res.num = 0;
          } else {
            while (res.num > 16) {
              res.num = res.num - 4;
            }
            if (res.num > 12) {
              res.stub = "season-";
              res.num = res.num - 12;
            }
          }
          ret = res;
        } else {
          if (num < 1 || num > 12) {
            num = 0;
          }
          ret = num;
        }
        return ret;
      };
      CSL4.Util.Dates.month = {};
      CSL4.Util.Dates.month.numeric = function(state, num) {
        var num = CSL4.Util.Dates.normalizeMonth(num);
        if (!num) {
          num = "";
        }
        return num;
      };
      CSL4.Util.Dates.month["numeric-leading-zeros"] = function(state, num) {
        var num = CSL4.Util.Dates.normalizeMonth(num);
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
        }
        return num;
      };
      CSL4.Util.Dates.month["long"] = function(state, num, gender, forceDefaultLocale) {
        var res = CSL4.Util.Dates.normalizeMonth(num, true);
        var num = res.num;
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "long", 0, 0, false, forceDefaultLocale);
        }
        return num;
      };
      CSL4.Util.Dates.month["short"] = function(state, num, gender, forceDefaultLocale) {
        var res = CSL4.Util.Dates.normalizeMonth(num, true);
        var num = res.num;
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "short", 0, 0, false, forceDefaultLocale);
        }
        return num;
      };
      CSL4.Util.Dates.day = {};
      CSL4.Util.Dates.day.numeric = function(state, num) {
        return num.toString();
      };
      CSL4.Util.Dates.day["long"] = CSL4.Util.Dates.day.numeric;
      CSL4.Util.Dates.day["numeric-leading-zeros"] = function(state, num) {
        if (!num) {
          num = 0;
        }
        num = num.toString();
        while (num.length < 2) {
          num = "0" + num;
        }
        return num.toString();
      };
      CSL4.Util.Dates.day.ordinal = function(state, num, gender) {
        return state.fun.ordinalizer.format(num, gender);
      };
      CSL4.Util.Sort = {};
      CSL4.Util.Sort.strip_prepositions = function(str) {
        var m;
        if (typeof str === "string") {
          m = str.match(/^(([aA]|[aA][nN]|[tT][hH][eE])\s+)/);
        }
        if (m) {
          str = str.substr(m[1].length);
        }
        return str;
      };
      CSL4.Util.substituteStart = function(state, target) {
        var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;
        func = function(state2, Item, item) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
              state2.tmp.strip_periods += 1;
              break;
            }
          }
        };
        this.execs.push(func);
        if (this.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
          this.decorations.reverse();
          this.decorations.push(["@showid", "true", this.cslid]);
          this.decorations.reverse();
        }
        nodetypes = ["number", "date", "names"];
        if (this.name === "text" && !this.postponed_macro || nodetypes.indexOf(this.name) > -1) {
          element_trace = function(state2, Item, item) {
            if (state2.tmp.element_trace.value() === "author" || this.name === "names") {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (!state2.tmp.probably_rendered_something) {
                } else {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
              if (!state2.tmp.just_looking && item && item["suppress-author"]) {
                if (!state2.tmp.probably_rendered_something) {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
            } else if (this.name === "date") {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (state2.tmp.probably_rendered_something) {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
            } else {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (!state2.tmp.probably_rendered_something && state2.tmp.can_block_substitute) {
                } else {
                  state2.tmp.element_trace.push("suppress-me");
                }
              } else if (item && item["suppress-author"]) {
                state2.tmp.element_trace.push("do-not-suppress-me");
              }
            }
          };
          this.execs.push(element_trace);
        }
        display = this.strings.cls;
        this.strings.cls = false;
        if (state.build.render_nesting_level === 0) {
          if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first = new CSL4.Token("group", CSL4.START);
            bib_first.decorations = [["@display", "left-margin"]];
            func = function(state2, Item) {
              if (!state2.tmp.render_seen) {
                bib_first.strings.first_blob = Item.id;
                state2.output.startTag("bib_first", bib_first);
              }
            };
            bib_first.execs.push(func);
            target.push(bib_first);
          } else if (CSL4.DISPLAY_CLASSES.indexOf(display) > -1) {
            bib_first = new CSL4.Token("group", CSL4.START);
            bib_first.decorations = [["@display", display]];
            func = function(state2, Item) {
              bib_first.strings.first_blob = Item.id;
              state2.output.startTag("bib_first", bib_first);
            };
            bib_first.execs.push(func);
            target.push(bib_first);
          }
          state.build.cls = display;
        }
        state.build.render_nesting_level += 1;
        if (state.build.substitute_level.value() === 1) {
          choose_start = new CSL4.Token("choose", CSL4.START);
          CSL4.Node.choose.build.call(choose_start, state, target);
          if_start = new CSL4.Token("if", CSL4.START);
          func = function() {
            if (state.tmp.can_substitute.value()) {
              return true;
            }
            return false;
          };
          if_start.tests ? {} : if_start.tests = [];
          if_start.tests.push(func);
          if_start.test = state.fun.match.any(this, state, if_start.tests);
          target.push(if_start);
        }
        if (state.sys.variableWrapper && this.variables_real && this.variables_real.length) {
          func = function(state2, Item, item) {
            if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
              var variable_entry = new CSL4.Token("text", CSL4.START);
              variable_entry.decorations = [["@showid", "true"]];
              state2.output.startTag("variable_entry", variable_entry);
              var position = null;
              if (item) {
                position = item.position;
              }
              if (!position) {
                position = 0;
              }
              var positionMap = [
                "first",
                "container-subsequent",
                "subsequent",
                "ibid",
                "ibid-with-locator"
              ];
              var noteNumber = 0;
              if (item && item.noteIndex) {
                noteNumber = item.noteIndex;
              }
              var firstReferenceNoteNumber = 0;
              if (item && item["first-reference-note-number"]) {
                firstReferenceNoteNumber = item["first-reference-note-number"];
              }
              var firstContainerReferenceNoteNumber = 0;
              if (item && item["first-container-reference-note-number"]) {
                firstContainerReferenceNoteNumber = item["first-container-reference-note-number"];
              }
              var citationNumber = 0;
              if (item && item["citation-number"]) {
                citationNumber = item["citation-number"];
              }
              var index = 0;
              if (item && item.index) {
                index = item.index;
              }
              var params = {
                itemData: Item,
                variableNames: this.variables,
                context: state2.tmp.area,
                xclass: state2.opt.xclass,
                position: positionMap[position],
                "note-number": noteNumber,
                "first-reference-note-number": firstReferenceNoteNumber,
                "first-container-reference-note-number": firstContainerReferenceNoteNumber,
                "citation-number": citationNumber,
                "index": index,
                "mode": state2.opt.mode
              };
              state2.output.current.value().params = params;
            }
          };
          this.execs.push(func);
        }
      };
      CSL4.Util.substituteEnd = function(state, target) {
        var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;
        if (state.sys.variableWrapper && (this.hasVariable || this.variables_real && this.variables_real.length)) {
          func = function(state2) {
            if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
              state2.output.endTag("variable_entry");
            }
          };
          this.execs.push(func);
        }
        func = function(state2) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
              state2.tmp.strip_periods += -1;
              break;
            }
          }
        };
        this.execs.push(func);
        state.build.render_nesting_level += -1;
        if (state.build.render_nesting_level === 0) {
          if (state.build.cls) {
            func = function(state2) {
              state2.output.endTag("bib_first");
            };
            this.execs.push(func);
            state.build.cls = false;
          } else if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first_end = new CSL4.Token("group", CSL4.END);
            func = function(state2) {
              if (!state2.tmp.render_seen) {
                state2.output.endTag("bib_first");
              }
            };
            bib_first_end.execs.push(func);
            target.push(bib_first_end);
            bib_other = new CSL4.Token("group", CSL4.START);
            bib_other.decorations = [["@display", "right-inline"]];
            func = function(state2) {
              if (!state2.tmp.render_seen) {
                state2.tmp.render_seen = true;
                state2.output.startTag("bib_other", bib_other);
              }
            };
            bib_other.execs.push(func);
            target.push(bib_other);
          }
        }
        if (state.build.substitute_level.value() === 1) {
          if_end = new CSL4.Token("if", CSL4.END);
          target.push(if_end);
          choose_end = new CSL4.Token("choose", CSL4.END);
          CSL4.Node.choose.build.call(choose_end, state, target);
        }
        if (this.name === "names" || this.name === "text" && this.variables_real !== "title") {
          author_substitute = new CSL4.Token("text", CSL4.SINGLETON);
          var substitution_name = this.name;
          func = function(state2, Item) {
            if (state2.tmp.area !== "bibliography") {
              return;
            }
            if (typeof state2.bibliography.opt["subsequent-author-substitute"] !== "string") {
              return;
            }
            if (this.variables_real && !Item[this.variables_real]) {
              return;
            }
            if (this.variables_real && substitution_name === "names") {
              return;
            }
            var subrule = state2.bibliography.opt["subsequent-author-substitute-rule"];
            var i, ilen;
            var printing = !state2.tmp.suppress_decorations;
            if (printing && state2.tmp.subsequent_author_substitute_ok) {
              if (state2.tmp.rendered_name) {
                if (subrule === "partial-each" || subrule === "partial-first") {
                  var dosub = true;
                  var rendered_name = [];
                  for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                    var name = state2.tmp.rendered_name[i];
                    if (dosub && state2.tmp.last_rendered_name && state2.tmp.last_rendered_name.length > i - 1 && name && !name.localeCompare(state2.tmp.last_rendered_name[i])) {
                      str = new CSL4.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      state2.tmp.name_node.children[i].blobs = [str];
                      if (subrule === "partial-first") {
                        dosub = false;
                      }
                    } else {
                      dosub = false;
                    }
                    rendered_name.push(name);
                  }
                  state2.tmp.last_rendered_name = rendered_name;
                } else if (subrule === "complete-each") {
                  var rendered_name = state2.tmp.rendered_name.join(",");
                  if (rendered_name) {
                    if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                      for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                        str = new CSL4.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                        state2.tmp.name_node.children[i].blobs = [str];
                      }
                    }
                    state2.tmp.last_rendered_name = rendered_name;
                  }
                } else {
                  var rendered_name = state2.tmp.rendered_name.join(",");
                  if (rendered_name) {
                    if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                      str = new CSL4.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      if (state2.tmp.label_blob) {
                        state2.tmp.name_node.top.blobs = [str, state2.tmp.label_blob];
                      } else if (state2.tmp.name_node.top.blobs.length) {
                        state2.tmp.name_node.top.blobs[0].blobs = [str];
                      } else {
                        state2.tmp.name_node.top.blobs = [str];
                      }
                      state2.tmp.substituted_variable = substitution_name;
                    }
                    state2.tmp.last_rendered_name = rendered_name;
                  }
                }
                state2.tmp.subsequent_author_substitute_ok = false;
              }
            }
          };
          this.execs.push(func);
        }
        if (this.name === "text" && !this.postponed_macro || ["number", "date", "names"].indexOf(this.name) > -1) {
          func = function(state2, Item) {
            if (state2.tmp.element_trace.mystack.length > 1) {
              state2.tmp.element_trace.pop();
            }
          };
          this.execs.push(func);
        }
      };
      CSL4.Util.padding = function(num) {
        var m = num.match(/\s*(-{0,1}[0-9]+)/);
        if (m) {
          num = parseInt(m[1], 10);
          if (num < 0) {
            num = 1e20 + num;
          }
          num = "" + num;
          while (num.length < 20) {
            num = "0" + num;
          }
        }
        return num;
      };
      CSL4.Util.LongOrdinalizer = function() {
      };
      CSL4.Util.LongOrdinalizer.prototype.init = function(state) {
        this.state = state;
      };
      CSL4.Util.LongOrdinalizer.prototype.format = function(num, gender) {
        if (num < 10) {
          num = "0" + num;
        }
        var ret = CSL4.Engine.getField(CSL4.LOOSE, this.state.locale[this.state.opt.lang].terms, "long-ordinal-" + num, "long", 0, gender);
        if (!ret) {
          ret = this.state.fun.ordinalizer.format(num, gender);
        }
        this.state.tmp.cite_renders_content = true;
        return ret;
      };
      CSL4.Util.Ordinalizer = function(state) {
        this.state = state;
        this.suffixes = {};
      };
      CSL4.Util.Ordinalizer.prototype.init = function() {
        if (!this.suffixes[this.state.opt.lang]) {
          this.suffixes[this.state.opt.lang] = {};
          for (var i = 0, ilen = 3; i < ilen; i += 1) {
            var gender = [void 0, "masculine", "feminine"][i];
            this.suffixes[this.state.opt.lang][gender] = [];
            for (var j = 1; j < 5; j += 1) {
              var ordinal = this.state.getTerm("ordinal-0" + j, "long", false, gender);
              if (typeof ordinal === "undefined") {
                delete this.suffixes[this.state.opt.lang][gender];
                break;
              }
              this.suffixes[this.state.opt.lang][gender].push(ordinal);
            }
          }
        }
      };
      CSL4.Util.Ordinalizer.prototype.format = function(num, gender) {
        var str;
        num = parseInt(num, 10);
        str = "" + num;
        var suffix = "";
        var trygenders = [];
        if (gender) {
          trygenders.push(gender);
        }
        trygenders.push("neuter");
        if (this.state.locale[this.state.opt.lang].ord["1.0.1"]) {
          suffix = this.state.getTerm("ordinal", false, 0, gender);
          var trygender;
          for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {
            trygender = trygenders[i];
            var ordinfo = this.state.locale[this.state.opt.lang].ord["1.0.1"];
            if (ordinfo["whole-number"][str] && ordinfo["whole-number"][str][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["whole-number"][str][trygender], false, 0, gender);
            } else if (ordinfo["last-two-digits"][str.slice(str.length - 2)] && ordinfo["last-two-digits"][str.slice(str.length - 2)][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-two-digits"][str.slice(str.length - 2)][trygender], false, 0, gender);
            } else if (ordinfo["last-digit"][str.slice(str.length - 1)] && ordinfo["last-digit"][str.slice(str.length - 1)][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-digit"][str.slice(str.length - 1)][trygender], false, 0, gender);
            }
            if (suffix) {
              break;
            }
          }
        } else {
          if (!gender) {
            gender = void 0;
          }
          this.state.fun.ordinalizer.init();
          if (num / 10 % 10 === 1 || num > 10 && num < 20) {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
          } else if (num % 10 === 1 && num % 100 !== 11) {
            suffix = this.suffixes[this.state.opt.lang][gender][0];
          } else if (num % 10 === 2 && num % 100 !== 12) {
            suffix = this.suffixes[this.state.opt.lang][gender][1];
          } else if (num % 10 === 3 && num % 100 !== 13) {
            suffix = this.suffixes[this.state.opt.lang][gender][2];
          } else {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
          }
        }
        str = str += suffix;
        return str;
      };
      CSL4.Util.Romanizer = function() {
      };
      CSL4.Util.Romanizer.prototype.format = function(num) {
        var ret, pos, n, numstr, len;
        ret = "";
        if (num < 6e3) {
          numstr = num.toString().split("");
          numstr.reverse();
          pos = 0;
          n = 0;
          len = numstr.length;
          for (pos = 0; pos < len; pos += 1) {
            n = parseInt(numstr[pos], 10);
            ret = CSL4.ROMAN_NUMERALS[pos][n] + ret;
          }
        }
        return ret;
      };
      CSL4.Util.Suffixator = function(slist) {
        if (!slist) {
          slist = CSL4.SUFFIX_CHARS;
        }
        this.slist = slist.split(",");
      };
      CSL4.Util.Suffixator.prototype.format = function(N) {
        var X;
        N += 1;
        var key = "";
        do {
          X = N % 26 === 0 ? 26 : N % 26;
          var key = this.slist[X - 1] + key;
          N = (N - X) / 26;
        } while (N !== 0);
        return key;
      };
      CSL4.Engine.prototype.processNumber = function(node, ItemObject, variable) {
        var val;
        var me = this;
        var realVariable = variable;
        variable = variable === "page-first" ? "page" : variable;
        var fullformAnd = ",\\s+and\\s+|\\s+and\\s+";
        if (this.opt.lang.slice(0, 2) !== "en") {
          fullformAnd += "|,\\s+" + this.getTerm("and") + "\\s+|\\s+" + this.getTerm("and") + "\\s+";
        }
        var symbolAnd = "\\s*&\\s*";
        var andRex = new RegExp("^" + symbolAnd + "$");
        var joinerMatchRex = new RegExp("(" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)", "g");
        var joinerSplitRex = new RegExp("(?:" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)");
        var localeAnd = this.getTerm("and");
        var localeAmpersand = this.getTerm("and", "symbol");
        if (localeAnd === localeAmpersand) {
          localeAmpersand = "&";
        }
        function normalizeFieldValue(str) {
          str = str.trim();
          var m = str.match(/^([^ ]+)/);
          if (m && !CSL4.STATUTE_SUBDIV_STRINGS[m[1]]) {
            var embeddedLabel = null;
            if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
              if (ItemObject.label) {
                embeddedLabel = CSL4.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];
              } else {
                embeddedLabel = "p.";
              }
            } else {
              embeddedLabel = CSL4.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
            }
            if (embeddedLabel) {
              str = embeddedLabel + " " + str;
            }
          }
          return str;
        }
        function composeNumberInfo(origLabel, label2, val2, joiningSuffix, parsePosition) {
          joiningSuffix = joiningSuffix ? joiningSuffix : "";
          var info2 = {};
          if (!label2 && !CSL4.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {
            label2 = "var:" + variable;
          }
          if (label2) {
            var m = label2.match(/(\s*)([^\s]+)(\s*)/);
            if (realVariable === "page" && parsePosition === 0 && ["p.", "pp."].indexOf(m[2]) === -1) {
              info2.gotosleepability = true;
              info2.labelVisibility = true;
            } else {
              info2.labelVisibility = false;
            }
            info2.label = m[2];
            info2.origLabel = origLabel;
            info2.labelSuffix = m[3] ? m[3] : "";
            info2.plural = 0;
          }
          var m = val2.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
          if (m) {
            info2.particle = m[1] ? m[1] : "";
            info2.value = m[2];
          } else {
            info2.particle = "";
            info2.value = val2;
          }
          info2.joiningSuffix = joiningSuffix.replace(/\s*-\s*/, "-");
          return info2;
        }
        function fixupSubsections(elems) {
          for (var i = elems.length - 2; i > -1; i -= 2) {
            if (elems[i] === "-" && elems[i - 1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\.  *)*[0-9]+[,a-zA-Z]+$/) && elems[i + 1].match(/^[,a-zA-Z]+$/)) {
              elems[i - 1] = elems.slice(i - 1, i + 2).join("");
              elems = elems.slice(0, i).concat(elems.slice(i + 2));
            }
          }
          return elems;
        }
        function parseString(str, defaultLabel2) {
          defaultLabel2 = defaultLabel2 ? defaultLabel2 : "";
          str = normalizeFieldValue(str, defaultLabel2);
          var jmrex, jsrex, mystr;
          if (str.indexOf("\u2013") > -1) {
            str = str.replace(/\u2013/g, "-");
          }
          if (str.indexOf("\\-") > -1) {
            jmrex = new RegExp(joinerMatchRex.source.replace("\\-", ""));
            jsrex = new RegExp(joinerSplitRex.source.replace("\\-", ""));
            var lst = str.split("\\-");
            for (var i = 0, ilen = lst.length; i < ilen; i++) {
              lst[i] = lst[i].replace(/\-/g, "\u2013");
            }
            mystr = lst.join("\\-");
            mystr = mystr.replace(/\\/g, "");
          } else {
            jmrex = joinerMatchRex;
            jsrex = joinerSplitRex;
            mystr = str;
          }
          var elems = [];
          var m = mystr.match(jmrex);
          if (m) {
            var lst = mystr.split(jsrex);
            for (var i = 0, ilen = m.length; i < ilen; i++) {
              if (m[i].match(andRex)) {
                if (lst[i].match(/[a-zA-Z]$/) && lst[i].match(/^[a-zA-Z]/)) {
                  m[i] = localeAmpersand;
                } else {
                  m[i] = " " + localeAmpersand + " ";
                }
              }
            }
            var recombine = false;
            for (var i in lst) {
              if (("" + lst[i]).replace(/^[a-z]\.\s+/, "").match(/[^\s0-9ivxlcmIVXLCM]/)) {
                break;
              }
            }
            if (recombine) {
              elems = [mystr];
            } else {
              for (var i = 0, ilen = lst.length - 1; i < ilen; i++) {
                elems.push(lst[i]);
                elems.push(m[i]);
              }
              elems.push(lst[lst.length - 1]);
              elems = fixupSubsections(elems);
            }
          } else {
            var elems = [mystr];
          }
          var values2 = [];
          var label2 = defaultLabel2;
          var origLabel = "";
          for (var i = 0, ilen = elems.length; i < ilen; i += 2) {
            var m = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/g);
            if (m) {
              var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/);
              for (var j = lst.length - 1; j > 0; j--) {
                if (lst[j - 1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j - 1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {
                  lst[j - 1] = lst[j - 1] + m[j - 1] + lst[j];
                  lst = lst.slice(0, j).concat(lst.slice(j + 1));
                  m = m.slice(0, j - 1).concat(m.slice(j));
                }
              }
              if (m.length > 0) {
                var slug = m[0].trim();
                var notAlabel = !CSL4.STATUTE_SUBDIV_STRINGS[slug] || typeof me.getTerm(CSL4.STATUTE_SUBDIV_STRINGS[slug]) === "undefined" || ["locator", "number", "locator-extra", "page"].indexOf(variable) === -1 && CSL4.STATUTE_SUBDIV_STRINGS[slug] !== variable;
                if (notAlabel) {
                  if (i === 0) {
                    m = m.slice(1);
                    lst[0] = lst[0] + " " + slug + " " + lst[1];
                    lst = lst.slice(0, 1).concat(lst.slice(2));
                  }
                } else {
                  origLabel = slug;
                }
              }
              for (var j = 0, jlen = lst.length; j < jlen; j++) {
                if (lst[j] || j === lst.length - 1) {
                  var filteredOrigLabel;
                  label2 = m[j - 1] ? m[j - 1] : label2;
                  if (origLabel === label2.trim()) {
                    filteredOrigLabel = "";
                  } else {
                    filteredOrigLabel = origLabel;
                  }
                  mystr = lst[j] ? lst[j].trim() : "";
                  if (j === lst.length - 1) {
                    values2.push(composeNumberInfo(filteredOrigLabel, label2, mystr, elems[i + 1], i));
                  } else {
                    values2.push(composeNumberInfo(filteredOrigLabel, label2, mystr, null, i));
                  }
                }
              }
            } else {
              var filteredOrigLabel;
              if (origLabel === label2.trim()) {
                filteredOrigLabel = "";
              } else {
                filteredOrigLabel = origLabel;
              }
              values2.push(composeNumberInfo(filteredOrigLabel, label2, elems[i], elems[i + 1]));
            }
          }
          return values2;
        }
        function setSpaces(values2) {
          for (var i = 0, ilen = values2.length - 1; i < ilen; i++) {
            if (!values2[i].joiningSuffix && values2[i + 1].label) {
              values2[i].joiningSuffix = " ";
            }
          }
        }
        function fixNumericAndCount(values2, i, currentLabelInfo) {
          var master = values2[currentLabelInfo.pos];
          var val2 = values2[i].value;
          var isEscapedHyphen = master.joiningSuffix === "\\-";
          if (val2.particle && val2.particle !== master.particle) {
            currentLabelInfo.collapsible = false;
          }
          var mVal = val2.match(/^[0-9]+([-,:a-zA-Z]*)$/);
          var mCurrentLabel = master.value.match(/^(?:[0-9]+|[ixv]+)([-,:a-zA-Z]*|\-[\-0-9]+)$/);
          if (!val2 || !mVal || !mCurrentLabel || isEscapedHyphen) {
            currentLabelInfo.collapsible = false;
            if (!val2 || !mCurrentLabel) {
              currentLabelInfo.numeric = false;
            }
            if (isEscapedHyphen) {
              currentLabelInfo.count--;
            }
          }
          if (mVal && mVal[1] || mCurrentLabel && mCurrentLabel[1]) {
            currentLabelInfo.collapsible = false;
          }
          if (values2[i].collapsible === void 0) {
            for (var j = i, jlen = i + currentLabelInfo.count; j < jlen; j++) {
              if (isNaN(parseInt(values2[j].value)) && !values2[j].value.match(/^[ivxlcmIVXLCM]+$/)) {
                values2[j].collapsible = false;
              } else {
                values2[j].collapsible = true;
              }
            }
            currentLabelInfo.collapsible = values2[i].collapsible;
          }
          var isCollapsible = currentLabelInfo.collapsible;
          for (var j = currentLabelInfo.pos, jlen = currentLabelInfo.pos + currentLabelInfo.count; j < jlen; j++) {
            if (currentLabelInfo.count > 1 && isCollapsible) {
              values2[j].plural = 1;
            }
            values2[j].numeric = currentLabelInfo.numeric;
            values2[j].collapsible = currentLabelInfo.collapsible;
          }
        }
        function fixLabelVisibility(values2, groupStartPos, currentLabelInfo) {
          if (currentLabelInfo.label.slice(0, 4) !== "var:") {
            if (currentLabelInfo.pos === 0) {
              if (["locator", "number", "locator-extra", "page"].indexOf(variable) > -1) {
                if (typeof me.getTerm(CSL4.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label]) === "undefined") {
                  values2[currentLabelInfo.pos].labelVisibility = true;
                }
              }
              if (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1) {
                if (CSL4.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {
                  values2[0].labelVisibility = true;
                }
              }
            } else {
              values2[currentLabelInfo.pos].labelVisibility = true;
            }
          }
        }
        function setPluralsAndNumerics(values2) {
          if (values2.length === 0) {
            return;
          }
          var groupStartPos = 0;
          var groupCount = 1;
          for (var i = 1, ilen = values2.length; i < ilen; i++) {
            var lastVal = values2[i - 1];
            var thisVal = values2[i];
            if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {
              groupCount++;
            } else {
              var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
              currentLabelInfo.pos = groupStartPos;
              currentLabelInfo.count = groupCount;
              currentLabelInfo.numeric = true;
              fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
              if (lastVal.label !== thisVal.label) {
                fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
              }
              groupStartPos = i;
              groupCount = 1;
            }
          }
          var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
          currentLabelInfo.pos = groupStartPos;
          currentLabelInfo.count = groupCount;
          currentLabelInfo.numeric = true;
          fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
          fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
          if (values2.length && values2[0].numeric && variable.slice(0, 10) === "number-of-") {
            if (parseInt(ItemObject[realVariable], 10) > 1) {
              values2[0].plural = 1;
            }
          }
        }
        function stripHyphenBackslash(joiningSuffix) {
          return joiningSuffix.replace("\\-", "-");
        }
        function setStyling(values2) {
          var masterNode = CSL4.Util.cloneToken(node);
          var masterStyling = new CSL4.Token();
          if (!me.tmp.just_looking) {
            masterStyling.decorations = masterNode.decorations;
            masterNode.decorations = [];
            masterStyling.strings.prefix = masterNode.strings.prefix;
            masterNode.strings.prefix = "";
            masterStyling.strings.suffix = masterNode.strings.suffix;
            masterNode.strings.suffix = "";
          }
          var masterLabel = values2.length ? values2[0].label : null;
          if (values2.length) {
            for (var i = 0, ilen = values2.length; i < ilen; i++) {
              var val2 = values2[i];
              var newnode = CSL4.Util.cloneToken(masterNode);
              newnode.gender = node.gender;
              if (masterLabel === val2.label) {
                newnode.formatter = node.formatter;
              }
              if (val2.numeric) {
                newnode.successor_prefix = val2.successor_prefix;
              }
              newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val2.joiningSuffix);
              val2.styling = newnode;
            }
            if (!me.tmp.just_looking) {
              if (values2[0].value.slice(0, 1) === '"' && values2[values2.length - 1].value.slice(-1) === '"') {
                values2[0].value = values2[0].value.slice(1);
                values2[values2.length - 1].value = values2[values2.length - 1].value.slice(0, -1);
                masterStyling.decorations.push(["@quotes", true]);
              }
            }
          }
          return masterStyling;
        }
        function checkTerm(variable2, val2) {
          var ret = true;
          if (["locator", "locator-extra", "page"].indexOf(variable2) > -1) {
            var label2;
            if (val2.origLabel) {
              label2 = val2.origLabel;
            } else {
              label2 = val2.label;
            }
            ret = !!me.getTerm(CSL4.STATUTE_SUBDIV_STRINGS[label2]);
          }
          return ret;
        }
        function checkPage(variable2, val2) {
          return variable2 === "page" || ["locator", "locator-extra"].indexOf(variable2) > -1 && (["p."].indexOf(val2.label) > -1 || ["p."].indexOf(val2.origLabel) > -1);
        }
        function fixupRangeDelimiter(variable2, val2, rangeDelimiter, isNumeric) {
          var isPage = checkPage(variable2, val2);
          var hasTerm = checkTerm(variable2, val2);
          if (hasTerm && rangeDelimiter === "-") {
            if (isNumeric) {
              if (isPage || ["locator", "locator-extra", "issue", "volume", "edition", "number"].indexOf(variable2) > -1) {
                rangeDelimiter = me.getTerm("page-range-delimiter");
                if (!rangeDelimiter) {
                  rangeDelimiter = "\u2013";
                }
              }
              if (variable2 === "collection-number") {
                rangeDelimiter = me.getTerm("year-range-delimiter");
                if (!rangeDelimiter) {
                  rangeDelimiter = "\u2013";
                }
              }
            }
          }
          return rangeDelimiter;
        }
        function manglePageNumbers(values2, i, currentInfo) {
          if (i < 1) {
            return;
          }
          if (currentInfo.count !== 2) {
            return;
          }
          if (values2[i - 1].particle !== values2[i].particle) {
            return;
          }
          if (values2[i - 1].joiningSuffix !== "-") {
            currentInfo.count = 1;
            return;
          }
          if (!me.opt["page-range-format"] && parseInt(values2[i - 1].value, 10) > parseInt(values2[i].value, 10)) {
            values2[i - 1].joiningSuffix = fixupRangeDelimiter(variable, values2[i], values2[i - 1].joiningSuffix, true);
            return;
          }
          var val2 = values2[i];
          var isPage = checkPage(variable, val2);
          var str;
          if (isPage && !isNaN(parseInt(values2[i - 1].value)) && !isNaN(parseInt(values2[i].value))) {
            str = values2[i - 1].particle + values2[i - 1].value + " - " + values2[i].particle + values2[i].value;
            str = me.fun.page_mangler(str);
          } else {
            if (("" + values2[i - 1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && ("" + values2[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {
              values2[i - 1].joiningSuffix = me.getTerm("page-range-delimiter");
            }
            str = values2[i - 1].value + stripHyphenBackslash(values2[i - 1].joiningSuffix) + values2[i].value;
          }
          var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
          if (m) {
            var rangeDelimiter = m[3];
            rangeDelimiter = fixupRangeDelimiter(variable, val2, rangeDelimiter, values2[i].numeric);
            values2[i - 1].particle = m[1];
            values2[i - 1].value = m[2];
            values2[i - 1].joiningSuffix = rangeDelimiter;
            values2[i].particle = m[4];
            values2[i].value = m[5];
          }
          currentInfo.count = 0;
        }
        function fixRanges(values2) {
          if (!node) {
            return;
          }
          if (["page", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume", "locator", "locator-extra"].indexOf(variable) === -1) {
            return;
          }
          var currentInfo = {
            count: 0,
            label: null,
            lastHadRangeDelimiter: false
          };
          for (var i = 0, ilen = values2.length; i < ilen; i++) {
            var val2 = values2[i];
            if (!val2.collapsible) {
              currentInfo.count = 0;
              currentInfo.label = null;
              var isNumeric = val2.numeric;
              val2.joiningSuffix = fixupRangeDelimiter(variable, val2, val2.joiningSuffix, isNumeric);
            } else if (currentInfo.label === val2.label && val2.joiningSuffix === "-") {
              currentInfo.count = 1;
            } else if (currentInfo.label === val2.label && val2.joiningSuffix !== "-") {
              currentInfo.count++;
              if (currentInfo.count === 2) {
                manglePageNumbers(values2, i, currentInfo);
              }
            } else if (currentInfo.label !== val2.label) {
              currentInfo.label = val2.label;
              currentInfo.count = 1;
            } else {
              currentInfo.count = 1;
              currentInfo.label = val2.label;
            }
          }
          if (currentInfo.count === 2) {
            manglePageNumbers(values2, values2.length - 1, currentInfo);
          }
        }
        function setVariableParams(shadow_numbers, realVariable2, values2) {
          var obj2 = shadow_numbers[realVariable2];
          if (values2.length) {
            obj2.numeric = values2[0].numeric;
            obj2.collapsible = values2[0].collapsible;
            obj2.plural = values2[0].plural;
            obj2.label = CSL4.STATUTE_SUBDIV_STRINGS[values2[0].label];
            if (variable === "number" && obj2.label === "issue" && me.getTerm("number")) {
              obj2.label = "number";
            }
          }
        }
        if (node && this.tmp.shadow_numbers[realVariable] && this.tmp.shadow_numbers[realVariable].values.length) {
          var values = this.tmp.shadow_numbers[realVariable].values;
          fixRanges(values);
          this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
          return;
        }
        if (!this.tmp.shadow_numbers[realVariable]) {
          this.tmp.shadow_numbers[realVariable] = {
            values: []
          };
        }
        if (!ItemObject) {
          return;
        }
        var languageRole = CSL4.LangPrefsMap[variable];
        if (languageRole) {
          var localeType = this.opt["cite-lang-prefs"][languageRole][0];
          val = this.transform.getTextSubField(ItemObject, realVariable, "locale-" + localeType, true);
          val = val.name;
        } else {
          val = ItemObject[realVariable];
        }
        if (val && realVariable === "number" && ItemObject.type === "legal_case") {
          val = val.replace(/[\\]*-/g, "\\-");
        }
        if (val && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
            var normval = this.sys.normalizeAbbrevsKey(realVariable, val);
          } else {
            var normval = val;
          }
          var jurisdiction2 = this.transform.loadAbbreviation(ItemObject.jurisdiction, "number", normval, ItemObject.language);
          if (this.transform.abbrevs[jurisdiction2].number) {
            if (this.transform.abbrevs[jurisdiction2].number[normval]) {
              val = this.transform.abbrevs[jurisdiction2].number[normval];
            } else {
              if (typeof this.transform.abbrevs[jurisdiction2].number[normval] !== "undefined") {
                delete this.transform.abbrevs[jurisdiction2].number[normval];
              }
            }
          }
        }
        if (typeof val !== "undefined" && (typeof val === "string" || typeof val === "number")) {
          if (typeof val === "number") {
            val = "" + val;
          }
          var defaultLabel = CSL4.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
          if (this.tmp.shadow_numbers[realVariable].values.length === 0) {
            var values = parseString(val, defaultLabel);
            setSpaces(values);
            setPluralsAndNumerics(values);
            for (var obj of values) {
              if (!obj.numeric)
                obj.plural = 0;
            }
            this.tmp.shadow_numbers[realVariable].values = values;
            if (node) {
              fixRanges(values);
              this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
            }
            setVariableParams(this.tmp.shadow_numbers, realVariable, values);
          }
          var info = this.tmp.shadow_numbers[realVariable];
          if (variable === "number") {
            if (info.values.length === 1 && info.values[0].value.indexOf("|") > -1) {
              info.values[0].value = info.values[0].value.replace(/\|/g, ", ");
              info.values[0].numeric = true;
              info.values[0].plural = 1;
              info.values[0].collapsible = false;
              info.numeric = true;
              info.plural = 1;
              info.collapsible = false;
            }
          }
          if (info.values.length === 1) {
            if (info.values[0].value.match(/^[0-9]+(?:\/[0-9]+)+$/)) {
              info.values[0].numeric = true;
              info.values[0].plural = 0;
              info.values[0].collapsible = false;
              info.numeric = true;
              info.plural = 0;
              info.collapsible = false;
            }
          }
          if (variable === "page") {
            if (info.values.length > 0) {
              if (info.values[0].gotosleepability) {
                info.labelForm = "short";
              }
            }
          }
        }
      };
      CSL4.Util.outputNumericField = function(state, varname, itemID) {
        state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);
        var masterStyling = state.tmp.shadow_numbers[varname].masterStyling;
        var nums = state.tmp.shadow_numbers[varname].values;
        var masterLabel = nums.length ? nums[0].label : null;
        var labelForm = state.tmp.shadow_numbers[varname].labelForm;
        var tryStatic = state.tmp.group_context.tip.label_static;
        var embeddedLabelForm;
        if (labelForm) {
          embeddedLabelForm = labelForm;
        } else {
          embeddedLabelForm = "short";
        }
        var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;
        var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;
        var lastLabelName = null;
        for (var i = 0, ilen = nums.length; i < ilen; i++) {
          var num = nums[i];
          var label2 = "";
          var labelName;
          if (num.label) {
            if (num.label.slice(0, 4) === "var:") {
              labelName = num.label.slice(4);
            } else {
              labelName = CSL4.STATUTE_SUBDIV_STRINGS[num.label];
            }
            if (labelName) {
              if (num.label === masterLabel) {
                if (tryStatic) {
                  label2 = state.getTerm(labelName, "static", num.plural);
                  if (label2.indexOf("%s") === -1) {
                    label2 = "";
                  }
                }
                if (!label2) {
                  label2 = state.getTerm(labelName, labelForm, num.plural);
                }
              } else {
                if (tryStatic) {
                  label2 = state.getTerm(labelName, "static", num.plural);
                  if (label2.indexOf("%s") === -1) {
                    label2 = "";
                  }
                }
                if (!label2) {
                  label2 = state.getTerm(labelName, embeddedLabelForm, num.plural);
                }
              }
              if (labelCapitalizeIfFirst) {
                label2 = CSL4.Output.Formatters["capitalize-first"](state, label2);
              }
            }
          }
          var labelPlaceholderPos = -1;
          if (label2) {
            labelPlaceholderPos = label2.indexOf("%s");
          }
          var numStyling = CSL4.Util.cloneToken(num.styling);
          numStyling.formatter = num.styling.formatter;
          numStyling.type = num.styling.type;
          numStyling.num = num.styling.num;
          numStyling.gender = num.styling.gender;
          if (labelPlaceholderPos > 0 && labelPlaceholderPos < label2.length - 2) {
            numStyling.strings.prefix += label2.slice(0, labelPlaceholderPos);
            numStyling.strings.suffix = label2.slice(labelPlaceholderPos + 2) + numStyling.strings.suffix;
          } else if (num.labelVisibility) {
            if (!label2) {
              label2 = num.label;
              labelName = num.label;
            }
            if (labelPlaceholderPos > 0) {
              var prefixLabelStyling = new CSL4.Token();
              prefixLabelStyling.decorations = labelDecorations;
              state.output.append(label2.slice(0, labelPlaceholderPos), prefixLabelStyling);
            } else if (labelPlaceholderPos === label2.length - 2 || labelPlaceholderPos === -1) {
              state.output.append(label2 + num.labelSuffix, "empty");
            }
          }
          CSL4.UPDATE_GROUP_CONTEXT_CONDITION(state, masterStyling.strings.prefix, null, masterStyling, `${num.particle}${num.value}`);
          if (num.collapsible) {
            var blob;
            if (num.value.match(/^[1-9][0-9]*$/)) {
              blob = new CSL4.NumericBlob(num.particle, parseInt(num.value, 10), numStyling, itemID);
            } else {
              blob = new CSL4.NumericBlob(num.particle, num.value, numStyling, itemID);
            }
            if (typeof blob.gender === "undefined") {
              blob.gender = state.locale[state.opt.lang]["noun-genders"][varname];
            }
            state.output.append(blob, "literal");
          } else {
            state.output.append(num.particle + num.value, numStyling);
          }
          if (labelPlaceholderPos === 0 && labelPlaceholderPos < label2.length - 2) {
            if (lastLabelName === null) {
              lastLabelName = labelName;
            }
            if (labelName !== lastLabelName || i === nums.length - 1) {
              var suffixLabelStyling = new CSL4.Token();
              suffixLabelStyling.decorations = labelDecorations;
              state.output.append(label2.slice(labelPlaceholderPos + 2), suffixLabelStyling);
            }
          }
          lastLabelName = labelName;
          state.tmp.term_predecessor = true;
        }
        state.output.closeLevel();
      };
      CSL4.Util.PageRangeMangler = {};
      CSL4.Util.PageRangeMangler.getFunction = function(state, rangeType) {
        var rangerex, pos, len, stringify2, listify, expand, minimize, minimize_internal, chicago, lst, m, b, e, ret, begin, end, ret_func;
        var range_delimiter = state.getTerm(rangeType + "-range-delimiter");
        rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\s*(?:\u2013|-)\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;
        stringify2 = function(lst2) {
          len = lst2.length;
          for (pos = 1; pos < len; pos += 2) {
            if (typeof lst2[pos] === "object") {
              lst2[pos] = lst2[pos].join("");
            }
          }
          var ret2 = lst2.join("");
          ret2 = ret2.replace(/([^\\])\-/g, "$1" + state.getTerm(rangeType + "-range-delimiter"));
          return ret2;
        };
        listify = function(str) {
          var m2, lst2, ret2;
          var hyphens = "\\s+\\-\\s+";
          var this_range_delimiter = range_delimiter === "-" ? "" : range_delimiter;
          var delimRex = new RegExp("([^\\\\])[-" + this_range_delimiter + "\\u2013]", "g");
          str = str.replace(delimRex, "$1 - ").replace(/\s+-\s+/g, " - ");
          var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)", "g");
          var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*");
          m2 = str.match(rexm);
          lst2 = str.split(rexlst);
          if (lst2.length === 0) {
            ret2 = m2;
          } else {
            ret2 = [lst2[0]];
            for (pos = 1, len = lst2.length; pos < len; pos += 1) {
              ret2.push(m2[pos - 1].replace(/\s*\-\s*/g, "-"));
              ret2.push(lst2[pos]);
            }
          }
          return ret2;
        };
        expand = function(str) {
          str = "" + str;
          lst = listify(str);
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
            m = lst[pos].match(rangerex);
            if (m) {
              if (!m[3] || m[1] === m[3]) {
                if (m[4].length < m[2].length) {
                  m[4] = m[2].slice(0, m[2].length - m[4].length) + m[4];
                }
                if (parseInt(m[2], 10) < parseInt(m[4], 10)) {
                  m[3] = range_delimiter + (m[1] ? m[1] : "");
                  lst[pos] = m.slice(1);
                }
              }
            }
            if (typeof lst[pos] === "string") {
              lst[pos] = lst[pos].replace(/\-/g, range_delimiter);
            }
          }
          return lst;
        };
        minimize = function(lst2, minchars, isyear) {
          len = lst2.length;
          for (var i = 1, ilen = lst2.length; i < ilen; i += 2) {
            if (typeof lst2[i] === "object") {
              lst2[i][3] = minimize_internal(lst2[i][1], lst2[i][3], minchars, isyear);
              if (lst2[i][2].slice(1) === lst2[i][0]) {
                lst2[i][2] = range_delimiter;
              }
            }
          }
          return stringify2(lst2);
        };
        minimize_internal = function(begin2, end2, minchars, isyear) {
          if (!minchars) {
            minchars = 0;
          }
          b = ("" + begin2).split("");
          e = ("" + end2).split("");
          ret = e.slice();
          ret.reverse();
          if (b.length === e.length) {
            for (var i = 0, ilen = b.length; i < ilen; i += 1) {
              if (b[i] === e[i] && ret.length > minchars) {
                ret.pop();
              } else {
                if (minchars && isyear && ret.length === 3) {
                  var front = b.slice(0, i);
                  front.reverse();
                  ret = ret.concat(front);
                }
                break;
              }
            }
          }
          ret.reverse();
          return ret.join("");
        };
        chicago = function(lst2) {
          len = lst2.length;
          for (pos = 1; pos < len; pos += 2) {
            if (typeof lst2[pos] === "object") {
              m = lst2[pos];
              begin = parseInt(m[1], 10);
              end = parseInt(m[3], 10);
              if (begin > 100 && begin % 100 && parseInt(begin / 100, 10) === parseInt(end / 100, 10)) {
                m[3] = "" + end % 100;
              } else if (begin >= 1e4) {
                m[3] = "" + end % 1e3;
              }
            }
            if (m[2].slice(1) === m[0]) {
              m[2] = range_delimiter;
            }
          }
          return stringify2(lst2);
        };
        var sniff = function(str, func, minchars, isyear) {
          var ret2;
          str = "" + str;
          var lst2 = expand(str);
          var ret2 = func(lst2, minchars, isyear);
          return ret2;
        };
        if (!state.opt[rangeType + "-range-format"]) {
          ret_func = function(str) {
            return sniff(str, stringify2);
          };
        } else if (state.opt[rangeType + "-range-format"] === "expanded") {
          ret_func = function(str) {
            return sniff(str, stringify2);
          };
        } else if (state.opt[rangeType + "-range-format"] === "minimal") {
          ret_func = function(str) {
            return sniff(str, minimize);
          };
        } else if (state.opt[rangeType + "-range-format"] === "minimal-two") {
          ret_func = function(str, isyear) {
            return sniff(str, minimize, 2, isyear);
          };
        } else if (state.opt[rangeType + "-range-format"] === "chicago") {
          ret_func = function(str) {
            return sniff(str, chicago);
          };
        }
        return ret_func;
      };
      CSL4.Util.FlipFlopper = function(state) {
        var _nestingState = [];
        var _nestingData = {
          '<span class="nocase">': {
            type: "nocase",
            opener: '<span class="nocase">',
            closer: "</span>",
            attr: null,
            outer: null,
            flipflop: null
          },
          '<span class="nodecor">': {
            type: "nodecor",
            opener: '<span class="nodecor">',
            closer: "</span>",
            attr: "@class",
            outer: "nodecor",
            flipflop: {
              "nodecor": "nodecor"
            }
          },
          '<span style="font-variant:small-caps;">': {
            type: "tag",
            opener: '<span style="font-variant:small-caps;">',
            closer: "</span>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
              "small-caps": "normal",
              "normal": "small-caps"
            }
          },
          "<sc>": {
            type: "tag",
            opener: "<sc>",
            closer: "</sc>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
              "small-caps": "normal",
              "normal": "small-caps"
            }
          },
          "<i>": {
            type: "tag",
            opener: "<i>",
            closer: "</i>",
            attr: "@font-style",
            outer: "italic",
            flipflop: {
              "italic": "normal",
              "normal": "italic"
            }
          },
          "<b>": {
            type: "tag",
            opener: "<b>",
            closer: "</b>",
            attr: "@font-weight",
            outer: "bold",
            flipflop: {
              "bold": "normal",
              "normal": "bold"
            }
          },
          "<sup>": {
            type: "tag",
            opener: "<sup>",
            closer: "</sup>",
            attr: "@vertical-align",
            outer: "sup",
            flipflop: {
              "sub": "sup",
              "sup": "sup"
            }
          },
          "<sub>": {
            type: "tag",
            opener: "<sub>",
            closer: "</sub>",
            attr: "@vertical-align",
            outer: "sub",
            flipflop: {
              "sup": "sub",
              "sub": "sub"
            }
          },
          ' "': {
            type: "quote",
            opener: ' "',
            closer: '"',
            attr: "@quotes",
            outer: "true",
            flipflop: {
              "true": "inner",
              "inner": "true",
              "false": "true"
            }
          },
          " '": {
            type: "quote",
            opener: " '",
            closer: "'",
            attr: "@quotes",
            outer: "inner",
            flipflop: {
              "true": "inner",
              "inner": "true",
              "false": "true"
            }
          }
        };
        _nestingData['("'] = _nestingData[' "'];
        _nestingData["('"] = _nestingData[" '"];
        var localeOpenQuote = state.getTerm("open-quote");
        var localeCloseQuote = state.getTerm("close-quote");
        var localeOpenInnerQuote = state.getTerm("open-inner-quote");
        var localeCloseInnerQuote = state.getTerm("close-inner-quote");
        if (localeOpenQuote && localeCloseQuote && [' "', " '", '"', "'"].indexOf(localeOpenQuote) === -1) {
          _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[' "']));
          _nestingData[localeOpenQuote].opener = localeOpenQuote;
          _nestingData[localeOpenQuote].closer = localeCloseQuote;
        }
        if (localeOpenInnerQuote && localeCloseInnerQuote && [' "', " '", '"', "'"].indexOf(localeOpenInnerQuote) === -1) {
          _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[" '"]));
          _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;
          _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;
        }
        function _setOuterQuoteForm(quot) {
          var flip = {
            " '": ' "',
            ' "': " '",
            '("': "('",
            "('": '("'
          };
          _nestingData[quot].outer = "true";
          _nestingData[flip[quot]].outer = "inner";
        }
        function _getNestingOpenerParams(opener) {
          var openers = [];
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            if (_nestingData[opener].type !== "quote" || !_nestingData[opener]) {
              openers.push(key);
            }
          }
          var ret = _nestingData[opener];
          ret.opener = new RegExp("^(?:" + openers.map(function(str) {
            return str.replace("(", "\\(");
          }).join("|") + ")");
          return ret;
        }
        var _nestingParams = function() {
          var ret = {};
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            ret[key] = _getNestingOpenerParams(key);
          }
          return ret;
        }();
        var _tagRex = function() {
          var openers = [];
          var closers = [];
          var vals = {};
          for (var opener in _nestingParams) {
            openers.push(opener);
            vals[_nestingParams[opener].closer] = true;
          }
          var keys = Object.keys(vals);
          for (var i = 0, l = keys.length; i < l; i++) {
            var closer = keys[i];
            closers.push(closer);
          }
          var all = openers.concat(closers).map(function(str) {
            return str.replace("(", "\\(");
          }).join("|");
          return {
            matchAll: new RegExp("((?:" + all + "))", "g"),
            splitAll: new RegExp("(?:" + all + ")", "g"),
            open: new RegExp("(^(?:" + openers.map(function(str) {
              return str.replace("(", "\\(");
            }).join("|") + ")$)"),
            close: new RegExp("(^(?:" + closers.join("|") + ")$)")
          };
        }();
        function _tryOpen(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (!params || tag.match(params.opener)) {
            _nestingState.push({
              type: _nestingParams[tag].type,
              opener: _nestingParams[tag].opener,
              closer: _nestingParams[tag].closer,
              pos
            });
            return false;
          } else {
            _nestingState.pop();
            _nestingState.push({
              type: _nestingParams[tag].type,
              opener: _nestingParams[tag].opener,
              closer: _nestingParams[tag].closer,
              pos
            });
            return {
              fixtag: params.pos
            };
          }
        }
        function _tryClose(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (params && tag === params.closer) {
            _nestingState.pop();
            if (params.type === "nocase") {
              return {
                nocase: {
                  open: params.pos,
                  close: pos
                }
              };
            } else {
              return false;
            }
          } else {
            if (params) {
              return {
                fixtag: params.pos
              };
            } else {
              return {
                fixtag: pos
              };
            }
          }
        }
        function _pushNestingState(tag, pos) {
          if (tag.match(_tagRex.open)) {
            return _tryOpen(tag, pos);
          } else {
            return _tryClose(tag, pos);
          }
        }
        function _doppelString(str) {
          var forcedSpaces = [];
          str = str.replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?\"[^>]*(>)/g, '$1 $2$3;"$4');
          str = str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3");
          var match = str.match(_tagRex.matchAll);
          if (!match) {
            return {
              tags: [],
              strings: [str],
              forcedSpaces: []
            };
          }
          var split = str.split(_tagRex.splitAll);
          for (var i = 0, ilen = match.length - 1; i < ilen; i++) {
            if (_nestingData[match[i]]) {
              if (split[i + 1] === "" && ['"', "'"].indexOf(match[i + 1]) > -1) {
                match[i + 1] = " " + match[i + 1];
                forcedSpaces.push(true);
              } else {
                forcedSpaces.push(false);
              }
            }
          }
          return {
            tags: match,
            strings: split,
            forcedSpaces
          };
        }
        var TagReg = function(blob) {
          var _stack = [];
          this.set = function(tag) {
            var attr = _nestingData[tag].attr;
            var decor = null;
            for (var i = _stack.length - 1; i > -1; i--) {
              var _decor = _stack[i];
              if (_decor[0] === attr) {
                decor = _decor;
                break;
              }
            }
            if (!decor) {
              var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);
              outer:
                for (var i = allTheDecor.length - 1; i > -1; i--) {
                  var decorset = allTheDecor[i];
                  if (!decorset) {
                    continue;
                  }
                  for (var j = decorset.length - 1; j > -1; j--) {
                    var _decor = decorset[j];
                    if (_decor[0] === attr) {
                      decor = _decor;
                      break outer;
                    }
                  }
                }
            }
            if (!decor) {
              decor = [attr, _nestingData[tag].outer];
            } else {
              decor = [attr, _nestingData[tag].flipflop[decor[1]]];
            }
            _stack.push(decor);
          };
          this.pair = function() {
            return _stack[_stack.length - 1];
          };
          this.pop = function() {
            _stack.pop();
          };
        };
        function _apostropheForce(tag, str) {
          if (tag === "'") {
            if (str && str.match(/^[^\,\.\?\:\;\ ]/)) {
              return "\u2019";
            }
          } else if (tag === " '" && str && str.match(/^[\ ]/)) {
            return " \u2019";
          }
          return false;
        }
        function _undoppelToQueue(blob, doppel, leadingSpace) {
          var firstString = true;
          var tagReg = new TagReg(blob);
          blob.blobs = [];
          function Stack(blob2) {
            this.stack = [blob2];
            this.latest = blob2;
            this.addStyling = function(str2, decor) {
              if (firstString) {
                if (str2.slice(0, 1) === " ") {
                  str2 = str2.slice(1);
                }
                if (str2.slice(0, 1) === " ") {
                  str2 = str2.slice(1);
                }
                firstString = false;
              }
              this.latest = this.stack[this.stack.length - 1];
              if (decor) {
                if (typeof this.latest.blobs === "string") {
                  var child = new CSL4.Blob();
                  child.blobs = this.latest.blobs;
                  child.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs = [child];
                }
                var tok = new CSL4.Token();
                var newblob = new CSL4.Blob(null, tok);
                newblob.alldecor = this.latest.alldecor.slice();
                if (decor[0] === "@class" && decor[1] === "nodecor") {
                  var newdecorset = [];
                  var seen = {};
                  var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);
                  for (var i2 = allTheDecor.length - 1; i2 > -1; i2--) {
                    var _decorset = allTheDecor[i2];
                    if (!_decorset) {
                      continue;
                    }
                    for (var j = _decorset.length - 1; j > -1; j--) {
                      var _olddecor = _decorset[j];
                      if (["@font-weight", "@font-style", "@font-variant"].indexOf(_olddecor[0]) > -1 && !seen[_olddecor[0]]) {
                        if (decor[1] !== "normal") {
                          newblob.decorations.push([_olddecor[0], "normal"]);
                          newdecorset.push([_olddecor[0], "normal"]);
                        }
                        seen[_olddecor[0]] = true;
                      }
                    }
                  }
                  newblob.alldecor.push(newdecorset);
                } else {
                  newblob.decorations.push(decor);
                  newblob.alldecor.push([decor]);
                }
                this.latest.blobs.push(newblob);
                this.stack.push(newblob);
                this.latest = newblob;
                if (str2) {
                  var tok = new CSL4.Token();
                  var newblob = new CSL4.Blob(null, tok);
                  newblob.blobs = str2;
                  newblob.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs.push(newblob);
                }
              } else {
                if (str2) {
                  var child = new CSL4.Blob();
                  child.blobs = str2;
                  child.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs.push(child);
                }
              }
            };
            this.popStyling = function() {
              this.stack.pop();
            };
          }
          var stack = new Stack(blob);
          if (doppel.strings.length) {
            var str = doppel.strings[0];
            if (leadingSpace) {
              str = " " + str;
            }
            stack.addStyling(str);
          }
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i + 1];
            if (tag.match(_tagRex.open)) {
              tagReg.set(tag);
              stack.addStyling(str, tagReg.pair());
            } else {
              tagReg.pop();
              stack.popStyling();
              stack.addStyling(str);
            }
          }
        }
        this.processTags = function(blob) {
          var str = blob.blobs;
          var leadingSpace = false;
          if (str.slice(0, 1) === " " && !str.match(/^\s+[\'\"]/)) {
            leadingSpace = true;
          }
          var rex = new RegExp("(" + CSL4.ROMANESQUE_REGEXP.source + ")\u2019(" + CSL4.ROMANESQUE_REGEXP.source + ")", "g");
          var str = " " + str.replace(rex, "$1'$2");
          var doppel = _doppelString(str);
          if (doppel.tags.length === 0) {
            return;
          }
          var quoteFormSeen = false;
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i + 1];
            var apostrophe = _apostropheForce(tag, str);
            if (apostrophe) {
              doppel.strings[i + 1] = apostrophe + doppel.strings[i + 1];
              doppel.tags[i] = "";
            } else {
              var tagInfo;
              while (true) {
                tagInfo = _pushNestingState(tag, i);
                if (tagInfo) {
                  if (Object.keys(tagInfo).indexOf("fixtag") > -1) {
                    if (tag.match(_tagRex.close) && tag === "'") {
                      doppel.strings[i + 1] = "\u2019" + doppel.strings[i + 1];
                      doppel.tags[i] = "";
                    } else {
                      var failedTag = doppel.tags[tagInfo.fixtag];
                      if (doppel.forcedSpaces[tagInfo.fixtag - 1]) {
                        failedTag = failedTag.slice(1);
                      }
                      doppel.strings[tagInfo.fixtag + 1] = failedTag + doppel.strings[tagInfo.fixtag + 1];
                      doppel.tags[tagInfo.fixtag] = "";
                    }
                    if (_nestingState.length > 0) {
                      if (tag !== "'") {
                        _nestingState.pop();
                      } else {
                        break;
                      }
                    } else {
                      break;
                    }
                  } else if (tagInfo.nocase) {
                    doppel.tags[tagInfo.nocase.open] = "";
                    doppel.tags[tagInfo.nocase.close] = "";
                    break;
                  } else {
                    break;
                  }
                } else {
                  break;
                }
              }
              if (tagInfo && (tagInfo.fixtag || tagInfo.fixtag === 0)) {
                doppel.strings[i + 1] = doppel.tags[i] + doppel.strings[i + 1];
                doppel.tags[i] = "";
              }
            }
          }
          for (var i = _nestingState.length - 1; i > -1; i--) {
            var tagPos = _nestingState[i].pos;
            var tag = doppel.tags[tagPos];
            if (tag === " '" || tag === "'") {
              doppel.strings[tagPos + 1] = " \u2019" + doppel.strings[tagPos + 1];
            } else {
              doppel.strings[tagPos + 1] = doppel.tags[tagPos] + doppel.strings[tagPos + 1];
            }
            doppel.tags[tagPos] = "";
            _nestingState.pop();
          }
          for (var i = doppel.tags.length - 1; i > -1; i--) {
            if (!doppel.tags[i]) {
              doppel.tags = doppel.tags.slice(0, i).concat(doppel.tags.slice(i + 1));
              doppel.strings[i] = doppel.strings[i] + doppel.strings[i + 1];
              doppel.strings = doppel.strings.slice(0, i + 1).concat(doppel.strings.slice(i + 2));
            }
          }
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var forcedSpace = doppel.forcedSpaces[i - 1];
            if ([' "', " '", '("', "('"].indexOf(tag) > -1) {
              if (!quoteFormSeen) {
                _setOuterQuoteForm(tag);
                quoteFormSeen = true;
              }
              if (!forcedSpace) {
                doppel.strings[i] += tag.slice(0, 1);
              }
            }
          }
          _undoppelToQueue(blob, doppel, leadingSpace);
        };
      };
      CSL4.Output.Formatters = function() {
        var rexStr = `(?:\u2018|\u2019|\u201C|\u201D| "| '|"|'|[-\u2013\u2014/.,;?!:]|\\[|\\]|\\(|\\)|<span style="font-variant: small-caps;">|<span class="no(?:case|decor)">|</span>|</?(?:i|sc|b|sub|sup)>)`;
        var tagDoppel = new CSL4.Doppeler(rexStr, function(str) {
          return str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3").replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?(\")[^>]*(>)/g, "$1 $2 $3;$4$5");
        });
        var rexNameStr = '(?:[-\\s]*<\\/*(?:spans+class="no(?:case|decor)"|i|sc|b|sub|sup)>[-\\s]*|[-\\s]+)';
        var nameDoppel = new CSL4.Doppeler(rexNameStr);
        var wordDoppel = new CSL4.Doppeler("(?:[ \xA0\u2000-\u200B\u205F\u3000]+)");
        var _tagParams = {
          '<span style="font-variant: small-caps;">': "</span>",
          '<span class="nocase">': "</span>",
          '<span class="nodecor">': "</span>",
          "<sc>": "</sc>",
          "<sub>": "</sub>",
          "<sup>": "</sup>"
        };
        function _capitalise(word) {
          var m = word.match(/(^\s*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(.*)/);
          if (m && !(m[2].match(/^[\u0370-\u03FF]$/) && !m[3])) {
            return m[1] + CSL4.toLocaleUpperCase.call(this, m[2]) + m[3];
          }
          return word;
        }
        function _textcaseEngine(config, string) {
          if (!string) {
            return "";
          }
          config.doppel = tagDoppel.split(string);
          var quoteParams = {
            ' "': {
              opener: " '",
              closer: '"'
            },
            " '": {
              opener: ' "',
              closer: "'"
            },
            "\u2018": {
              opener: "\u2018",
              closer: "\u2019"
            },
            "\u201C": {
              opener: "\u201C",
              closer: "\u201D"
            }
          };
          function tryOpen(tag2, pos) {
            if (config.quoteState.length === 0 || tag2 === config.quoteState[config.quoteState.length - 1].opener) {
              config.quoteState.push({
                opener: quoteParams[tag2].opener,
                closer: quoteParams[tag2].closer,
                pos
              });
              return false;
            } else {
              var prevPos = config.quoteState[config.quoteState.length - 1].pos;
              config.quoteState.pop();
              config.quoteState.push({
                opener: quoteParams[tag2].opener,
                closer: quoteParams[tag2].closer,
                positions: pos
              });
              return prevPos;
            }
          }
          function tryClose(tag2, pos) {
            if (config.quoteState.length > 0 && tag2 === config.quoteState[config.quoteState.length - 1].closer) {
              config.quoteState.pop();
            } else {
              return pos;
            }
          }
          function pushQuoteState(tag2, pos) {
            var isOpener = ["\u201C", "\u2018", ' "', " '"].indexOf(tag2) > -1 ? true : false;
            if (isOpener) {
              return tryOpen(tag2, pos);
            } else {
              return tryClose(tag2, pos);
            }
          }
          function quoteFix(tag2, positions) {
            var m = tag2.match(/(^(?:\u2018|\u2019|\u201C|\u201D|\"|\')|(?: \"| \')$)/);
            if (m) {
              return pushQuoteState(m[1], positions);
            }
          }
          if (config.doppel.strings.length && config.doppel.strings[0].trim()) {
            config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);
          }
          for (var i = 0, ilen = config.doppel.tags.length; i < ilen; i++) {
            var tag = config.doppel.tags[i];
            var str = config.doppel.strings[i + 1];
            if (config.tagState !== null) {
              if (_tagParams[tag]) {
                config.tagState.push(_tagParams[tag]);
              } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {
                config.tagState.pop();
              }
            }
            if (config.afterPunct !== null) {
              if (tag.match(/[\!\?\:]$/)) {
                config.afterPunct = true;
              }
            }
            if (config.tagState.length === 0) {
              config.doppel.strings[i + 1] = config.capitaliseWords(str, i + 1, config.doppel, config.doppel.tags[i + 1]);
            } else if (config.doppel.strings[i + 1].trim()) {
              config.lastWordPos = null;
            }
            if (config.quoteState !== null) {
              var quotePos = quoteFix(tag, i);
              if (quotePos || quotePos === 0) {
                var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
                config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
                config.lastWordPos = null;
              }
            }
            if (config.isFirst) {
              if (str.trim()) {
                config.isFirst = false;
              }
            }
            if (config.afterPunct) {
              if (str.trim()) {
                config.afterPunct = false;
              }
            }
          }
          if (config.quoteState) {
            for (var i = 0, ilen = config.quoteState.length; i < ilen; i++) {
              var quotePos = config.quoteState[i].pos;
              if (typeof quotePos !== "undefined") {
                var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
                config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
              }
            }
          }
          if (config.lastWordPos) {
            var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);
            var lastWord = lastWords.strings[config.lastWordPos.words];
            if (lastWord.length > 1 && CSL4.toLocaleLowerCase.call(this, lastWord).match(config.skipWordsRex)) {
              lastWord = _capitalise.call(this, lastWord);
              lastWords.strings[config.lastWordPos.words] = lastWord;
            }
            config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);
          }
          return tagDoppel.join(config.doppel);
        }
        function passthrough(state, str) {
          return str;
        }
        function lowercase(state, string) {
          var config = {
            quoteState: null,
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = CSL4.toLocaleLowerCase.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        function uppercase(state, string) {
          var config = {
            quoteState: null,
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = CSL4.toLocaleUpperCase.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        function sentence(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (config.isFirst) {
                    words[i] = _capitalise.call(state, word);
                    config.isFirst = false;
                  } else {
                    words[i] = CSL4.toLocaleLowerCase.call(state, word);
                  }
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function title2(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str, i, followingTag) {
              if (str.trim()) {
                var words = str.split(/[ \u00A0]+/);
                var wordle = wordDoppel.split(str);
                var words = wordle.strings;
                for (var j = 0, jlen = words.length; j < jlen; j++) {
                  var word = words[j];
                  if (!word) {
                    continue;
                  }
                  if (word.length > 1 && !CSL4.toLocaleLowerCase.call(state, word).match(config.skipWordsRex)) {
                    words[j] = _capitalise.call(state, words[j]);
                  } else if (j === words.length - 1 && followingTag === "-") {
                    words[j] = _capitalise.call(state, words[j]);
                  } else if (config.isFirst) {
                    words[j] = _capitalise.call(state, words[j]);
                  } else if (config.afterPunct) {
                    words[j] = _capitalise.call(state, words[j]);
                  }
                  config.afterPunct = false;
                  config.isFirst = false;
                  config.lastWordPos = {
                    strings: i,
                    words: j
                  };
                }
                str = wordDoppel.join(wordle);
              }
              return str;
            },
            skipWordsRex: state.locale[state.opt.lang].opts["skip-words-regexp"],
            tagState: [],
            afterPunct: false,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function capitalizeFirst(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (config.isFirst) {
                    words[i] = _capitalise.call(state, word);
                    config.isFirst = false;
                    break;
                  }
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function capitalizeAll(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = _capitalise.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        return {
          nameDoppel,
          passthrough,
          lowercase,
          uppercase,
          sentence,
          title: title2,
          "capitalize-first": capitalizeFirst,
          "capitalize-all": capitalizeAll
        };
      }();
      CSL4.Output.Formats = function() {
      };
      CSL4.Output.Formats.prototype.html = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\s\s/g, "\xA0 ").replace(CSL4.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "<sup>" + CSL4.SUPERSCRIPTS[aChar] + "</sup>";
          });
        },
        "bibstart": '<div class="csl-bib-body">\n',
        "bibend": "</div>",
        "@font-style/italic": "<i>%%STRING%%</i>",
        "@font-style/oblique": "<em>%%STRING%%</em>",
        "@font-style/normal": '<span style="font-style:normal;">%%STRING%%</span>',
        "@font-variant/small-caps": '<span style="font-variant:small-caps;">%%STRING%%</span>',
        "@passthrough/true": CSL4.Output.Formatters.passthrough,
        "@font-variant/normal": '<span style="font-variant:normal;">%%STRING%%</span>',
        "@font-weight/bold": "<b>%%STRING%%</b>",
        "@font-weight/normal": '<span style="font-weight:normal;">%%STRING%%</span>',
        "@font-weight/light": false,
        "@text-decoration/none": '<span style="text-decoration:none;">%%STRING%%</span>',
        "@text-decoration/underline": '<span style="text-decoration:underline;">%%STRING%%</span>',
        "@vertical-align/sup": "<sup>%%STRING%%</sup>",
        "@vertical-align/sub": "<sub>%%STRING%%</sub>",
        "@vertical-align/baseline": '<span style="baseline">%%STRING%%</span>',
        "@strip-periods/true": CSL4.Output.Formatters.passthrough,
        "@strip-periods/false": CSL4.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return '  <div class="csl-entry">' + str + "</div>\n" + insert;
        },
        "@display/block": function(state, str) {
          return '\n\n    <div class="csl-block">' + str + "</div>\n";
        },
        "@display/left-margin": function(state, str) {
          return '\n    <div class="csl-left-margin">' + str + "</div>";
        },
        "@display/right-inline": function(state, str) {
          return '<div class="csl-right-inline">' + str + "</div>\n  ";
        },
        "@display/indent": function(state, str) {
          return '<div class="csl-indent">' + str + "</div>\n  ";
        },
        "@showid/true": function(state, str, cslid) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
            if (cslid) {
              return '<span class="' + state.opt.nodenames[cslid] + '" cslid="' + cslid + '">' + str + "</span>";
            } else if (this.params && typeof str === "string") {
              var prePunct = "";
              if (str) {
                var m = str.match(CSL4.VARIABLE_WRAPPER_PREPUNCT_REX);
                prePunct = m[1];
                str = m[2];
              }
              var postPunct = "";
              if (str && CSL4.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                postPunct = str.slice(-1);
                str = str.slice(0, -1);
              }
              return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
            } else {
              return str;
            }
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return '<a href="' + str + '">' + str + "</a>";
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return '<a href="' + doiurl + '">' + str + "</a>";
        }
      };
      CSL4.Output.Formats.prototype.text = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text;
        },
        "bibstart": "",
        "bibend": "",
        "@font-style/italic": false,
        "@font-style/oblique": false,
        "@font-style/normal": false,
        "@font-variant/small-caps": false,
        "@passthrough/true": CSL4.Output.Formatters.passthrough,
        "@font-variant/normal": false,
        "@font-weight/bold": false,
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": false,
        "@vertical-align/baseline": false,
        "@vertical-align/sup": false,
        "@vertical-align/sub": false,
        "@strip-periods/true": CSL4.Output.Formatters.passthrough,
        "@strip-periods/false": CSL4.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str + "\n";
        },
        "@display/block": function(state, str) {
          return "\n" + str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return str;
        },
        "@display/indent": function(state, str) {
          return "\n    " + str;
        },
        "@showid/true": function(state, str) {
          return str;
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL4.Output.Formats.prototype.rtf = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/([\\{}])/g, "\\$1").replace(CSL4.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "\\super " + CSL4.SUPERSCRIPTS[aChar] + "\\nosupersub{}";
          }).replace(/[\u007F-\uFFFF]/g, function(aChar) {
            return "\\uc0\\u" + aChar.charCodeAt(0).toString() + "{}";
          }).split("	").join("\\tab{}");
        },
        "@passthrough/true": CSL4.Output.Formatters.passthrough,
        "@font-style/italic": "{\\i{}%%STRING%%}",
        "@font-style/normal": "{\\i0{}%%STRING%%}",
        "@font-style/oblique": "{\\i{}%%STRING%%}",
        "@font-variant/small-caps": "{\\scaps %%STRING%%}",
        "@font-variant/normal": "{\\scaps0{}%%STRING%%}",
        "@font-weight/bold": "{\\b{}%%STRING%%}",
        "@font-weight/normal": "{\\b0{}%%STRING%%}",
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": "{\\ul{}%%STRING%%}",
        "@vertical-align/baseline": false,
        "@vertical-align/sup": "\\super %%STRING%%\\nosupersub{}",
        "@vertical-align/sub": "\\sub %%STRING%%\\nosupersub{}",
        "@strip-periods/true": CSL4.Output.Formatters.passthrough,
        "@strip-periods/false": CSL4.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return CSL4.Output.Formats.rtf.text_escape(state.getTerm("open-quote"));
          }
          return CSL4.Output.Formats.rtf.text_escape(state.getTerm("open-quote")) + str + CSL4.Output.Formats.rtf.text_escape(state.getTerm("close-quote"));
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return CSL4.Output.Formats.rtf.text_escape("\u2019");
          }
          return CSL4.Output.Formats.rtf.text_escape(state.getTerm("open-inner-quote")) + str + CSL4.Output.Formats.rtf.text_escape(state.getTerm("close-inner-quote"));
        },
        "@quotes/false": false,
        "bibstart": "{\\rtf ",
        "bibend": "}",
        "@display/block": "\\line{}%%STRING%%\\line\r\n",
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str;
        },
        "@display/left-margin": function(state, str) {
          return str + "\\tab ";
        },
        "@display/right-inline": function(state, str) {
          return str + "\r\n";
        },
        "@display/indent": function(state, str) {
          return "\n\\tab " + str + "\\line\r\n";
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL4.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL4.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL4.Output.Formats.prototype.asciidoc = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace("*", "pass:[*]", "g").replace("_", "pass:[_]", "g").replace("#", "pass:[#]", "g").replace("^", "pass:[^]", "g").replace("~", "pass:[~]", "g").replace("[[", "pass:[[[]", "g").replace("  ", "&#160; ", "g").replace(CSL4.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "^" + CSL4.SUPERSCRIPTS[aChar] + "^";
          });
        },
        "bibstart": "",
        "bibend": "",
        "@passthrough/true": CSL4.Output.Formatters.passthrough,
        "@font-style/italic": "__%%STRING%%__",
        "@font-style/oblique": "__%%STRING%%__",
        "@font-style/normal": false,
        "@font-variant/small-caps": "[small-caps]#%%STRING%%#",
        "@font-variant/normal": false,
        "@font-weight/bold": "**%%STRING%%**",
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": "[underline]##%%STRING%%##",
        "@vertical-align/sup": "^^%%STRING%%^^",
        "@vertical-align/sub": "~~%%STRING%%~~",
        "@vertical-align/baseline": false,
        "@strip-periods/true": CSL4.Output.Formatters.passthrough,
        "@strip-periods/false": CSL4.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return "``";
          }
          return "``" + str + "''";
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "`";
          }
          return "`" + str + "'";
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str + "\n";
        },
        "@display/block": function(state, str) {
          return str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return " " + str;
        },
        "@display/indent": function(state, str) {
          return " " + str;
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL4.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL4.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return doiurl + "[" + str + "]";
        }
      };
      CSL4.Output.Formats.prototype.fo = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace("  ", "&#160; ", "g").replace(CSL4.SUPERSCRIPTS_REGEXP, function(aChar) {
            return '<fo:inline vertical-align="super">' + CSL4.SUPERSCRIPTS[aChar] + "</fo:inline>";
          });
        },
        "bibstart": "",
        "bibend": "",
        "@passthrough/true": CSL4.Output.Formatters.passthrough,
        "@font-style/italic": '<fo:inline font-style="italic">%%STRING%%</fo:inline>',
        "@font-style/oblique": '<fo:inline font-style="oblique">%%STRING%%</fo:inline>',
        "@font-style/normal": '<fo:inline font-style="normal">%%STRING%%</fo:inline>',
        "@font-variant/small-caps": '<fo:inline font-variant="small-caps">%%STRING%%</fo:inline>',
        "@font-variant/normal": '<fo:inline font-variant="normal">%%STRING%%</fo:inline>',
        "@font-weight/bold": '<fo:inline font-weight="bold">%%STRING%%</fo:inline>',
        "@font-weight/normal": '<fo:inline font-weight="normal">%%STRING%%</fo:inline>',
        "@font-weight/light": '<fo:inline font-weight="lighter">%%STRING%%</fo:inline>',
        "@text-decoration/none": '<fo:inline text-decoration="none">%%STRING%%</fo:inline>',
        "@text-decoration/underline": '<fo:inline text-decoration="underline">%%STRING%%</fo:inline>',
        "@vertical-align/sup": '<fo:inline vertical-align="super">%%STRING%%</fo:inline>',
        "@vertical-align/sub": '<fo:inline vertical-align="sub">%%STRING%%</fo:inline>',
        "@vertical-align/baseline": '<fo:inline vertical-align="baseline">%%STRING%%</fo:inline>',
        "@strip-periods/true": CSL4.Output.Formatters.passthrough,
        "@strip-periods/false": CSL4.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          var indent = "";
          if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {
            var hi2 = state.bibliography.opt.hangingindent;
            indent = ' start-indent="' + hi2 + 'em" text-indent="-' + hi2 + 'em"';
          }
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return '<fo:block id="' + this.system_id + '"' + indent + ">" + str + "</fo:block>\n" + insert;
        },
        "@display/block": function(state, str) {
          return "\n  <fo:block>" + str + "</fo:block>\n";
        },
        "@display/left-margin": function(state, str) {
          return '\n  <fo:table table-layout="fixed" width="100%">\n    <fo:table-column column-number="1" column-width="$$$__COLUMN_WIDTH_1__$$$"/>\n    <fo:table-column column-number="2" column-width="proportional-column-width(1)"/>\n    <fo:table-body>\n      <fo:table-row>\n        <fo:table-cell>\n          <fo:block>' + str + "</fo:block>\n        </fo:table-cell>\n        ";
        },
        "@display/right-inline": function(state, str) {
          return "<fo:table-cell>\n          <fo:block>" + str + "</fo:block>\n        </fo:table-cell>\n      </fo:table-row>\n    </fo:table-body>\n  </fo:table>\n";
        },
        "@display/indent": function(state, str) {
          return '<fo:block margin-left="2em">' + str + "</fo:block>\n";
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL4.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL4.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return `<fo:basic-link external-destination="url('` + str + `')">` + str + "</fo:basic-link>";
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return `<fo:basic-link external-destination="url('` + doiurl + `')">` + str + "</fo:basic-link>";
        }
      };
      CSL4.Output.Formats.prototype.latex = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text;
        },
        "bibstart": "\\begin{thebibliography}{4}",
        "bibend": "end{thebibliography}",
        "@font-style/italic": "{\\em %%STRING%%}",
        "@font-style/oblique": false,
        "@font-style/normal": false,
        "@font-variant/small-caps": false,
        "@passthrough/true": CSL4.Output.Formatters.passthrough,
        "@font-variant/normal": false,
        "@font-weight/bold": "{\\bf %%STRING%%}",
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": false,
        "@vertical-align/baseline": false,
        "@vertical-align/sup": false,
        "@vertical-align/sub": false,
        "@strip-periods/true": CSL4.Output.Formatters.passthrough,
        "@strip-periods/false": CSL4.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return "\\bibitem{" + state.sys.embedBibliographyEntry(this.item_id) + "}\n";
        },
        "@display/block": function(state, str) {
          return "\n" + str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return str;
        },
        "@display/indent": function(state, str) {
          return "\n    " + str;
        },
        "@showid/true": function(state, str, cslid) {
          return str;
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL4.Output.Formats = new CSL4.Output.Formats();
      CSL4.Registry = function(state) {
        this.debug = false;
        this.state = state;
        this.registry = {};
        this.reflist = [];
        this.refhash = {};
        this.namereg = new CSL4.Registry.NameReg(state);
        this.citationreg = new CSL4.Registry.CitationReg(state);
        this.authorstrings = {};
        this.masterMap = {};
        this.mylist = [];
        this.myhash = {};
        this.deletes = [];
        this.inserts = [];
        this.uncited = {};
        this.refreshes = {};
        this.akeys = {};
        this.oldseq = {};
        this.return_data = {};
        this.ambigcites = {};
        this.ambigresets = {};
        this.sorter = new CSL4.Registry.Comparifier(state, "bibliography_sort");
        this.getSortedIds = function() {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push("" + this.reflist[i].id);
          }
          return ret;
        };
        this.getSortedRegistryItems = function() {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push(this.reflist[i]);
          }
          return ret;
        };
      };
      CSL4.Registry.prototype.init = function(itemIDs, uncited_flag) {
        var i, ilen;
        this.oldseq = {};
        if (uncited_flag) {
          this.uncited = {};
          for (var i = 0, ilen = itemIDs.length; i < ilen; i += 1) {
            if (!this.myhash[itemIDs[i]]) {
              this.mylist.push("" + itemIDs[i]);
            }
            this.uncited[itemIDs[i]] = true;
            this.myhash[itemIDs[i]] = true;
          }
        } else {
          for (var key in this.uncited) {
            itemIDs.push(key);
          }
          var myhash = {};
          for (i = itemIDs.length - 1; i > -1; i += -1) {
            if (myhash[itemIDs[i]]) {
              itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));
            } else {
              myhash[itemIDs[i]] = true;
            }
          }
          this.mylist = itemIDs;
          this.myhash = myhash;
        }
        this.refreshes = {};
        this.touched = {};
        this.ambigsTouched = {};
        this.ambigresets = {};
      };
      CSL4.Registry.prototype.dopurge = function(myhash) {
        for (var i = this.mylist.length - 1; i > -1; i += -1) {
          if (this.citationreg.citationsByItemId) {
            if ((!this.citationreg.citationsByItemId || !this.citationreg.citationsByItemId[this.mylist[i]]) && !myhash[this.mylist[i]]) {
              delete this.myhash[this.mylist[i]];
              delete this.uncited[this.mylist[i]];
              this.mylist = this.mylist.slice(0, i).concat(this.mylist.slice(i + 1));
            }
          }
        }
        this.dodeletes(this.myhash);
      };
      CSL4.Registry.prototype.dodeletes = function(myhash) {
        var otheritems, key, ambig, pos, len, items, kkey, mypos, id2;
        if (typeof myhash === "string") {
          var key = myhash;
          myhash = {};
          myhash[key] = true;
        }
        for (var key in this.registry) {
          if (!myhash[key]) {
            if (this.uncited[key]) {
              continue;
            }
            otheritems = this.namereg.delitems(key);
            for (kkey in otheritems) {
              this.refreshes[kkey] = true;
            }
            ambig = this.registry[key].ambig;
            mypos = this.ambigcites[ambig].indexOf(key);
            if (mypos > -1) {
              items = this.ambigcites[ambig].slice();
              this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos + 1, items.length));
              this.ambigresets[ambig] = this.ambigcites[ambig].length;
            }
            len = this.ambigcites[ambig].length;
            for (pos = 0; pos < len; pos += 1) {
              id2 = "" + this.ambigcites[ambig][pos];
              this.refreshes[id2] = true;
            }
            if (this.registry[key].siblings) {
              if (this.registry[key].siblings.length == 1) {
                var loneSiblingID = this.registry[key].siblings[0];
                if (this.registry[loneSiblingID].siblings) {
                  this.registry[loneSiblingID].siblings.pop();
                  this.registry[loneSiblingID].master = true;
                }
              } else if (this.registry[key].siblings.length > 1) {
                var removeIDs = [key];
                if (this.registry[key].master) {
                  var newmasterID = this.registry[key].siblings[0];
                  var newmaster = this.registry[newmasterID];
                  newmaster.master = true;
                  removeIDs.push(newmasterID);
                }
                var buffer = [];
                for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {
                  var siblingID = this.registry[key].siblings.pop();
                  if (removeIDs.indexOf(siblingID) === -1) {
                    buffer.push(siblingID);
                  }
                }
                for (var k = buffer.length - 1; k > -1; k += -1) {
                  this.registry[key].siblings.push(buffer[k]);
                }
              }
            }
            for (var i = this.reflist.length - 1; i > -1; i--) {
              if (this.reflist[i].id === key) {
                this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
              }
            }
            delete this.registry[key];
            delete this.refhash[key];
            this.return_data.bibchange = true;
          }
        }
      };
      CSL4.Registry.prototype.doinserts = function(mylist) {
        var item, Item, akey, newitem, abase, i, ilen;
        if (typeof mylist === "string") {
          mylist = [mylist];
        }
        for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {
          item = mylist[i];
          if (!this.registry[item]) {
            Item = this.state.retrieveItem(item);
            akey = CSL4.getAmbiguousCite.call(this.state, Item);
            this.ambigsTouched[akey] = true;
            if (!Item.legislation_id) {
              this.akeys[akey] = true;
            }
            newitem = {
              "id": "" + item,
              "seq": 0,
              "offset": 0,
              "sortkeys": false,
              "ambig": false,
              "rendered": false,
              "disambig": false,
              "ref": Item,
              "newItem": true
            };
            this.registry[item] = newitem;
            if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {
              this.registry[item]["first-reference-note-number"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;
            }
            abase = CSL4.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, item, abase);
            this.touched[item] = true;
            this.return_data.bibchange = true;
          }
        }
      };
      CSL4.Registry.prototype.rebuildlist = function(nosort) {
        var len, pos, item, Item;
        if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
              this.reflist_inserts.push(Item);
            }
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = pos + 1;
          }
        } else {
          this.reflist = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.reflist.push(Item);
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = pos + 1;
          }
        }
      };
      CSL4.Registry.prototype.dorefreshes = function() {
        var key, regtoken, Item, akey, abase;
        for (var key in this.refreshes) {
          regtoken = this.registry[key];
          if (!regtoken) {
            continue;
          }
          regtoken.sortkeys = void 0;
          Item = this.state.refetchItem(key);
          var akey = regtoken.ambig;
          if (typeof akey === "undefined") {
            this.state.tmp.disambig_settings = false;
            akey = CSL4.getAmbiguousCite.call(this.state, Item);
            abase = CSL4.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, key, abase);
          }
          for (var akkey in this.ambigresets) {
            if (this.ambigresets[akkey] === 1) {
              var loneKey = this.ambigcites[akey][0];
              var Item = this.state.refetchItem(loneKey);
              this.registry[loneKey].disambig = new CSL4.AmbigConfig();
              this.state.tmp.disambig_settings = false;
              var akey = CSL4.getAmbiguousCite.call(this.state, Item);
              var abase = CSL4.getAmbigConfig.call(this.state);
              this.registerAmbigToken(akey, loneKey, abase);
            }
          }
          this.state.tmp.taintedItemIDs[key] = true;
          this.ambigsTouched[akey] = true;
          if (!Item.legislation_id) {
            this.akeys[akey] = true;
          }
          this.touched[key] = true;
        }
      };
      CSL4.Registry.prototype.setdisambigs = function() {
        for (var akey in this.ambigsTouched) {
          this.state.disambiguate.run(akey);
        }
        this.ambigsTouched = {};
        this.akeys = {};
      };
      CSL4.Registry.prototype.renumber = function() {
        var len, pos, item;
        if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL4.DESCENDING) {
          this.state.bibliography_sort.tmp.citation_number_map = {};
        }
        len = this.reflist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.reflist[pos];
          item.seq = pos + 1;
          if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL4.DESCENDING) {
            this.state.bibliography_sort.tmp.citation_number_map[item.seq] = this.reflist.length - item.seq + 1;
          }
          if (this.state.opt.update_mode === CSL4.NUMERIC && item.seq != this.oldseq[item.id]) {
            this.state.tmp.taintedItemIDs[item.id] = true;
          }
          if (item.seq != this.oldseq[item.id]) {
            this.return_data.bibchange = true;
          }
        }
      };
      CSL4.Registry.prototype.setsortkeys = function() {
        var key;
        for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {
          var key = this.mylist[i];
          if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {
            this.registry[key].sortkeys = CSL4.getSortKeys.call(this.state, this.state.retrieveItem(key), "bibliography_sort");
          }
        }
      };
      CSL4.Registry.prototype._insertItem = function(element, array) {
        array.splice(this._locationOf(element, array) + 1, 0, element);
        return array;
      };
      CSL4.Registry.prototype._locationOf = function(element, array, start, end) {
        if (array.length === 0) {
          return -1;
        }
        start = start || 0;
        end = end || array.length;
        var pivot = start + end >> 1;
        var c = this.sorter.compareKeys(element, array[pivot]);
        if (end - start <= 1) {
          return c == -1 ? pivot - 1 : pivot;
        }
        switch (c) {
          case -1:
            return this._locationOf(element, array, start, pivot);
          case 0:
            return pivot;
          case 1:
            return this._locationOf(element, array, pivot, end);
        }
      };
      CSL4.Registry.prototype.sorttokens = function(nosort) {
        var len, item, Item, pos;
        if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
              this.reflist_inserts.push(Item);
            }
          }
          for (var key in this.state.tmp.taintedItemIDs) {
            if (this.registry[key] && !this.registry[key].newItem) {
              for (var i = this.reflist.length - 1; i > -1; i--) {
                if (this.reflist[i].id === key) {
                  this.reflist_inserts.push(this.reflist[i]);
                  this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
                }
              }
            }
          }
          for (var i = 0, ilen = this.reflist_inserts.length; i < ilen; i++) {
            var Item = this.reflist_inserts[i];
            delete Item.newItem;
            this.reflist = this._insertItem(Item, this.reflist);
          }
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.registry[item].seq = pos + 1;
          }
        }
      };
      CSL4.Registry.Comparifier = function(state, keyset) {
        var sort_directions, len, pos, compareKeys;
        var sortCompare = CSL4.getSortCompare.call(state, state.opt["default-locale-sort"]);
        sort_directions = state[keyset].opt.sort_directions;
        this.compareKeys = function(a, b) {
          len = a.sortkeys ? a.sortkeys.length : 0;
          for (pos = 0; pos < len; pos += 1) {
            var cmp = 0;
            if (a.sortkeys[pos] === b.sortkeys[pos]) {
              cmp = 0;
            } else if (typeof a.sortkeys[pos] === "undefined") {
              cmp = sort_directions[pos][1];
            } else if (typeof b.sortkeys[pos] === "undefined") {
              cmp = sort_directions[pos][0];
            } else {
              cmp = sortCompare(a.sortkeys[pos], b.sortkeys[pos]);
            }
            if (0 < cmp) {
              return sort_directions[pos][1];
            } else if (0 > cmp) {
              return sort_directions[pos][0];
            }
          }
          if (a.seq > b.seq) {
            return 1;
          } else if (a.seq < b.seq) {
            return -1;
          }
          return 0;
        };
        compareKeys = this.compareKeys;
        this.compareCompositeKeys = function(a, b) {
          return compareKeys(a[1], b[1]);
        };
      };
      CSL4.Registry.prototype.compareRegistryTokens = function(a, b) {
        if (a.seq > b.seq) {
          return 1;
        } else if (a.seq < b.seq) {
          return -1;
        }
        return 0;
      };
      CSL4.Registry.prototype.registerAmbigToken = function(akey, id2, ambig_config) {
        if (!this.registry[id2]) {
          CSL4.debug("Warning: unregistered item: itemID=(" + id2 + "), akey=(" + akey + ")");
        }
        if (this.registry[id2] && this.registry[id2].disambig && this.registry[id2].disambig.names) {
          for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {
            var new_names_params = ambig_config.names[i];
            var old_names_params = this.registry[id2].disambig.names[i];
            if (new_names_params !== old_names_params) {
              this.state.tmp.taintedItemIDs[id2] = true;
            } else if (ambig_config.givens[i]) {
              for (var j = 0, jlen = ambig_config.givens[i].length; j < jlen; j += 1) {
                var new_gnames_params = ambig_config.givens[i][j];
                var old_gnames_params = this.registry[id2].disambig.givens[i][j];
                if (new_gnames_params !== old_gnames_params) {
                  this.state.tmp.taintedItemIDs[id2] = true;
                }
              }
            }
          }
        }
        if (!this.ambigcites[akey]) {
          this.ambigcites[akey] = [];
        }
        if (this.ambigcites[akey].indexOf("" + id2) === -1) {
          this.ambigcites[akey].push("" + id2);
        }
        this.registry[id2].ambig = akey;
        this.registry[id2].disambig = CSL4.cloneAmbigConfig(ambig_config);
      };
      CSL4.getSortKeys = function(Item, key_type) {
        var area, root, extension, strip_prepositions, len, pos;
        if (false) {
          CSL4.debug("KEY TYPE: " + key_type);
        }
        area = this.tmp.area;
        root = this.tmp.root;
        extension = this.tmp.extension;
        strip_prepositions = CSL4.Util.Sort.strip_prepositions;
        this.tmp.area = key_type;
        this.tmp.root = key_type.indexOf("_") > -1 ? key_type.slice(0, -5) : key_type;
        this.tmp.extension = "_sort";
        this.tmp.disambig_override = true;
        this.tmp.disambig_request = false;
        this.tmp.suppress_decorations = true;
        CSL4.getCite.call(this, Item);
        this.tmp.suppress_decorations = false;
        this.tmp.disambig_override = false;
        len = this[key_type].keys.length;
        for (pos = 0; pos < len; pos += 1) {
          this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);
        }
        if (false) {
          CSL4.debug("sort keys (" + key_type + "): " + this[key_type].keys);
        }
        this.tmp.area = area;
        this.tmp.root = root;
        this.tmp.extension = extension;
        return this[key_type].keys;
      };
      CSL4.Registry.NameReg = function(state) {
        var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;
        this.state = state;
        this.namereg = {};
        this.nameind = {};
        this.nameindpkeys = {};
        this.itemkeyreg = {};
        strip_periods = function(str) {
          if (!str) {
            str = "";
          }
          return str.replace(/\./g, " ").replace(/\s+/g, " ").replace(/\s+$/, "");
        };
        set_keys = function(state2, itemid, nameobj) {
          pkey = strip_periods(nameobj.family);
          skey = strip_periods(nameobj.given);
          var m = skey.match(/[,\!]* ([^,]+)$/);
          if (m && m[1] === m[1].toLowerCase()) {
            skey = skey.replace(/[,\!]* [^,]+$/, "");
          }
          ikey = CSL4.Util.Names.initializeWith(state2, skey, "%s");
          if (state2.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            pkey = "" + itemid + pkey;
          }
        };
        evalname = function(item_id, nameobj, namenum, request_base, form, initials) {
          var param;
          if (state.tmp.area.slice(0, 12) === "bibliography" && !form) {
            if (typeof initials === "string") {
              return 1;
            } else {
              return 2;
            }
          }
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          set_keys(this.state, "" + item_id, nameobj);
          param = 2;
          dagopt = state.opt["disambiguate-add-givenname"];
          gdropt = state.citation.opt["givenname-disambiguation-rule"];
          var gdropt_orig = gdropt;
          if (gdropt === "by-cite") {
            gdropt = "all-names";
          }
          if (form === "short") {
            param = 0;
          } else if (typeof initials === "string") {
            param = 1;
          }
          if (typeof this.namereg[pkey] === "undefined" || typeof this.namereg[pkey].ikey[ikey] === "undefined") {
            return param;
          }
          if (gdropt_orig === "by-cite" && param <= request_base) {
            return request_base;
          }
          if (!dagopt) {
            return param;
          }
          if (typeof gdropt === "string" && gdropt.slice(0, 12) === "primary-name" && namenum > 0) {
            return param;
          }
          if (!gdropt || gdropt === "all-names" || gdropt === "primary-name") {
            if (this.namereg[pkey].count > 1) {
              param = 1;
            }
            if (this.namereg[pkey].ikey && this.namereg[pkey].ikey[ikey].count > 1 || this.namereg[pkey].count > 1 && typeof initials !== "string") {
              param = 2;
            }
          } else if (gdropt === "all-names-with-initials" || gdropt === "primary-name-with-initials") {
            if (this.namereg[pkey].count > 1) {
              param = 1;
            } else {
              param = 0;
            }
          }
          if (!state.registry.registry[item_id]) {
            if (form == "short") {
              return 0;
            } else if (typeof initials == "string") {
              return 1;
            }
          } else {
            return param;
          }
        };
        delitems = function(ids) {
          var pos, len, posB, id2, fullkey;
          if (typeof ids === "string" || typeof ids === "number") {
            ids = ["" + ids];
          }
          var ret = {};
          len = ids.length;
          for (pos = 0; pos < len; pos += 1) {
            id2 = "" + ids[pos];
            if (!this.nameind[id2]) {
              continue;
            }
            for (fullkey in this.nameind[id2]) {
              if (this.nameind[id2].hasOwnProperty(fullkey)) {
                var key = fullkey.split("::");
                pkey = key[0];
                ikey = key[1];
                skey = key[2];
                if (typeof this.namereg[pkey] === "undefined") {
                  continue;
                }
                items = this.namereg[pkey].items;
                if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {
                  myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;
                  posB = myitems.indexOf("" + id2);
                  if (posB > -1) {
                    this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([posB + 1]));
                  }
                  if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {
                    delete this.namereg[pkey].ikey[ikey].skey[skey];
                    this.namereg[pkey].ikey[ikey].count += -1;
                    if (this.namereg[pkey].ikey[ikey].count < 2) {
                      for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                      }
                    }
                  }
                }
                if (ikey && this.namereg[pkey].ikey[ikey]) {
                  posB = this.namereg[pkey].ikey[ikey].items.indexOf("" + id2);
                  if (posB > -1) {
                    items = this.namereg[pkey].ikey[ikey].items.slice();
                    this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));
                  }
                  if (this.namereg[pkey].ikey[ikey].items.length === 0) {
                    delete this.namereg[pkey].ikey[ikey];
                    this.namereg[pkey].count += -1;
                    if (this.namereg[pkey].count < 2) {
                      for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                      }
                    }
                  }
                }
                if (pkey) {
                  posB = this.namereg[pkey].items.indexOf("" + id2);
                  if (posB > -1) {
                    items = this.namereg[pkey].items.slice();
                    this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));
                  }
                  if (this.namereg[pkey].items.length < 2) {
                    delete this.namereg[pkey];
                  }
                }
                delete this.nameind[id2][fullkey];
              }
            }
            delete this.nameind[id2];
            delete this.nameindpkeys[id2];
          }
          return ret;
        };
        addname = function(item_id, nameobj, pos) {
          var i, ilen;
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          if (state.citation.opt["givenname-disambiguation-rule"] && state.citation.opt["givenname-disambiguation-rule"].slice(0, 8) === "primary-" && pos !== 0) {
            return;
          }
          if (state.opt["demote-non-dropping-particle"] === "never" && nameobj["non-dropping-particle"] && nameobj["family"]) {
            nameobj["family"] = nameobj["non-dropping-particle"] + " " + nameobj["family"];
          }
          set_keys(this.state, "" + item_id, nameobj);
          if (pkey) {
            if (typeof this.namereg[pkey] === "undefined") {
              this.namereg[pkey] = {};
              this.namereg[pkey].count = 0;
              this.namereg[pkey].ikey = {};
              this.namereg[pkey].items = [item_id];
            } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].items.push(item_id);
            }
          }
          if (pkey && ikey) {
            if (typeof this.namereg[pkey].ikey[ikey] === "undefined") {
              this.namereg[pkey].ikey[ikey] = {};
              this.namereg[pkey].ikey[ikey].count = 0;
              this.namereg[pkey].ikey[ikey].skey = {};
              this.namereg[pkey].ikey[ikey].items = [item_id];
              this.namereg[pkey].count += 1;
              if (this.namereg[pkey].count === 2) {
                for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                  state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                }
              }
            } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].ikey[ikey].items.push(item_id);
            }
          }
          if (pkey && ikey && skey) {
            if (typeof this.namereg[pkey].ikey[ikey].skey[skey] === "undefined") {
              this.namereg[pkey].ikey[ikey].skey[skey] = {};
              this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];
              this.namereg[pkey].ikey[ikey].count += 1;
              if (this.namereg[pkey].ikey[ikey].count === 2) {
                for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                  state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                }
              }
            } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
            }
          }
          if (typeof this.nameind[item_id] === "undefined") {
            this.nameind[item_id] = {};
            this.nameindpkeys[item_id] = {};
          }
          if (pkey) {
            this.nameind[item_id][pkey + "::" + ikey + "::" + skey] = true;
            this.nameindpkeys[item_id][pkey] = this.namereg[pkey];
          }
        };
        this.addname = addname;
        this.delitems = delitems;
        this.evalname = evalname;
      };
      CSL4.Registry.CitationReg = function() {
        this.citationById = {};
        this.citationByIndex = [];
      };
      CSL4.Disambiguation = function(state) {
        this.state = state;
        this.sys = this.state.sys;
        this.registry = state.registry.registry;
        this.ambigcites = state.registry.ambigcites;
        this.configModes();
        this.debug = false;
      };
      CSL4.Disambiguation.prototype.run = function(akey) {
        if (!this.modes.length) {
          return;
        }
        if (this.debug) {
          print("[A] === RUN ===");
        }
        this.akey = akey;
        if (this.initVars(akey)) {
          this.runDisambig();
        }
      };
      CSL4.Disambiguation.prototype.runDisambig = function() {
        var ismax;
        if (this.debug) {
          print("[C] === runDisambig() ===");
        }
        this.initGivens = true;
        while (this.lists.length) {
          this.gnameset = 0;
          this.gname = 0;
          this.clashes = [1, 0];
          while (this.lists[0][1].length) {
            this.listpos = 0;
            if (!this.base) {
              this.base = this.lists[0][0];
            }
            ismax = this.incrementDisambig();
            this.scanItems(this.lists[0]);
            this.evalScan(ismax);
          }
          this.lists = this.lists.slice(1);
        }
      };
      CSL4.Disambiguation.prototype.scanItems = function(list) {
        var pos, len, otherItem;
        if (this.debug) {
          print("[2] === scanItems() ===");
        }
        this.Item = list[1][0];
        this.ItemCite = CSL4.getAmbiguousCite.call(this.state, this.Item, this.base, true);
        this.scanlist = list[1];
        this.partners = [];
        this.partners.push(this.Item);
        this.nonpartners = [];
        var clashes = 0;
        for (var pos = 1, len = list[1].length; pos < len; pos += 1) {
          otherItem = list[1][pos];
          var otherItemCite = CSL4.getAmbiguousCite.call(this.state, otherItem, this.base, true);
          if (this.debug) {
            if (pos > 1) {
              print("  -----------");
            }
          }
          if (this.ItemCite === otherItemCite) {
            if (this.debug) {
              print("  [CLASH]--> " + this.Item.id + ": " + this.ItemCite);
              print("             " + otherItem.id + ": " + otherItemCite);
            }
            clashes += 1;
            this.partners.push(otherItem);
          } else {
            if (this.debug) {
              print("  [clear]--> " + this.Item.id + ": " + this.ItemCite);
              print("             " + otherItem.id + ": " + otherItemCite);
            }
            this.nonpartners.push(otherItem);
          }
        }
        this.clashes[0] = this.clashes[1];
        this.clashes[1] = clashes;
      };
      CSL4.Disambiguation.prototype.evalScan = function(maxed) {
        this[this.modes[this.modeindex]](maxed);
        if (maxed) {
          if (this.modeindex < this.modes.length - 1) {
            this.modeindex += 1;
          } else {
            this.lists[this.listpos + 1] = [this.base, []];
          }
        }
      };
      CSL4.Disambiguation.prototype.disNames = function(ismax) {
        var i, ilen;
        if (this.debug) {
          print("[3] == disNames() ==");
        }
        if (this.clashes[1] === 0 && this.nonpartners.length === 1) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [a]: lone partner, one nonpartner");
            print("  registering " + this.partners[0].id + " and " + this.nonpartners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, []];
        } else if (this.clashes[1] === 0) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [b]: lone partner, unknown number of remaining nonpartners");
            print("  registering " + this.partners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.nonpartners];
          if (this.nonpartners.length) {
            this.initGivens = true;
          }
        } else if (this.nonpartners.length === 1) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [c]: lone nonpartner, unknown number of partners remaining");
            print("  registering " + this.nonpartners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.partners];
        } else if (this.clashes[1] < this.clashes[0]) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [d]: better result, but no entries safe to register");
          }
          this.lists[this.listpos] = [this.betterbase, this.partners];
          this.lists.push([this.betterbase, this.nonpartners]);
        } else {
          if (this.debug) {
            print("  ** RESOLUTION [e]: no improvement, and clashes remain");
          }
          if (ismax) {
            this.lists[this.listpos] = [this.betterbase, this.nonpartners];
            this.lists.push([this.betterbase, this.partners]);
            if (this.modeindex === this.modes.length - 1) {
              if (this.debug) {
                print("     (registering clashing entries because we've run out of options)");
              }
              for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {
                this.state.registry.registerAmbigToken(this.akey, "" + this.partners[i].id, this.betterbase);
              }
              this.lists[this.listpos] = [this.betterbase, []];
            }
          }
        }
      };
      CSL4.Disambiguation.prototype.disExtraText = function() {
        if (this.debug) {
          print("[3] === disExtraText ==");
        }
        var done = false;
        if (this.clashes[1] === 0 && this.nonpartners.length < 2) {
          done = true;
        }
        if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {
          this.modeindex = 0;
          this.base.disambiguate = this.state.tmp.disambiguate_count;
          this.betterbase.disambiguate = this.state.tmp.disambiguate_count;
          if (!this.base.disambiguate) {
            this.initGivens = true;
            this.base.disambiguate = 1;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
            }
          } else {
            this.disNames();
          }
        } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {
          if (done || this.modeindex === this.modes.length - 1) {
            var base = this.lists[this.listpos][0];
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
            this.lists[this.listpos] = [this.betterbase, []];
          } else {
            this.modeindex = this.modes.length - 1;
            var base = this.lists[this.listpos][0];
            base.disambiguate = true;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
          }
        }
      };
      CSL4.Disambiguation.prototype.disYears = function() {
        var pos, len, tokens, token;
        if (this.debug) {
          print("[3] === disYears ==");
        }
        tokens = [];
        var base = this.lists[this.listpos][0];
        if (this.clashes[1]) {
          for (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {
            var origid = this.state.registry.mylist[i];
            for (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {
              var token = this.lists[this.listpos][1][j];
              if (token.id == origid) {
                tokens.push(this.registry[token.id]);
                break;
              }
            }
          }
        }
        tokens.sort(this.state.registry.sorter.compareKeys);
        for (var pos = 0, len = tokens.length; pos < len; pos += 1) {
          base.year_suffix = "" + pos;
          var oldBase = this.state.registry.registry[tokens[pos].id].disambig;
          this.state.registry.registerAmbigToken(this.akey, "" + tokens[pos].id, base);
          if (CSL4.ambigConfigDiff(oldBase, base)) {
            this.state.tmp.taintedItemIDs[tokens[pos].id] = true;
          }
        }
        this.lists[this.listpos] = [this.betterbase, []];
      };
      CSL4.Disambiguation.prototype.incrementDisambig = function() {
        if (this.debug) {
          print("\n[1] === incrementDisambig() ===");
        }
        if (this.initGivens) {
          this.initGivens = false;
          return false;
        }
        var maxed = false;
        var increment_names = true;
        if (this.modes[this.modeindex] === "disNames") {
          increment_names = false;
          if (typeof this.givensMax !== "number") {
            increment_names = true;
          }
          var increment_namesets = false;
          if (typeof this.namesMax !== "number") {
            increment_namesets = true;
          }
          if (typeof this.givensMax === "number") {
            if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {
              this.base.givens[this.gnameset][this.gname] += 1;
            } else {
              increment_names = true;
            }
          }
          if (typeof this.namesMax === "number" && increment_names) {
            if (this.state.opt["disambiguate-add-names"]) {
              increment_namesets = false;
              if (this.gname < this.namesMax) {
                this.base.names[this.gnameset] += 1;
                this.gname += 1;
              } else {
                increment_namesets = true;
              }
            } else {
              increment_namesets = true;
            }
          }
          if (typeof this.namesetsMax === "number" && increment_namesets) {
            if (this.gnameset < this.namesetsMax) {
              this.gnameset += 1;
              this.base.names[this.gnameset] = 1;
              this.gname = 0;
            }
          }
          if (this.debug) {
            print("    ------------------");
            print("    incremented values");
            print("    ------------------");
            print("    | gnameset: " + this.gnameset);
            print("    | gname: " + this.gname);
            print("    | names value: " + this.base.names[this.gnameset]);
            if (this.base.givens.length) {
              print("    | givens value: " + this.base.givens[this.gnameset][this.gname]);
            } else {
              print("    | givens value: nil");
            }
            print("    | namesetsMax: " + this.namesetsMax);
            print("    | namesMax: " + this.namesMax);
            print("    | givensMax: " + this.givensMax);
          }
          if ((typeof this.namesetsMax !== "number" || this.namesetsMax === -1 || this.gnameset === this.namesetsMax) && (!this.state.opt["disambiguate-add-names"] || typeof this.namesMax !== "number" || this.gname === this.namesMax) && (typeof this.givensMax != "number" || typeof this.base.givens[this.gnameset] === "undefined" || typeof this.base.givens[this.gnameset][this.gname] === "undefined" || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {
            maxed = true;
            if (this.debug) {
              print("    MAXED");
            }
          }
        } else if (this.modes[this.modeindex] === "disExtraText") {
          this.base.disambiguate += 1;
          this.betterbase.disambiguate += 1;
        }
        return maxed;
      };
      CSL4.Disambiguation.prototype.initVars = function(akey) {
        var i, ilen, myIds, myItemBundles, myItems;
        if (this.debug) {
          print("[B] === initVars() ===");
        }
        this.lists = [];
        this.base = false;
        this.betterbase = false;
        this.akey = akey;
        this.maxNamesByItemId = {};
        myItemBundles = [];
        myIds = this.ambigcites[akey];
        if (!myIds || !myIds.length) {
          return false;
        }
        var myItem = this.state.refetchItem("" + myIds[0]);
        this.getCiteData(myItem);
        this.base = CSL4.getAmbigConfig.call(this.state);
        if (myIds && myIds.length > 1) {
          myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {
            myItem = this.state.refetchItem("" + myIds[i]);
            this.getCiteData(myItem, this.base);
            myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          }
          myItemBundles.sort(function(a, b) {
            if (a[0] > b[0]) {
              return 1;
            } else if (a[0] < b[0]) {
              return -1;
            } else {
              if (a[1].id > b[1].id) {
                return 1;
              } else if (a[1].id < b[1].id) {
                return -1;
              } else {
                return 0;
              }
            }
          });
          myItems = [];
          for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {
            myItems.push(myItemBundles[i][1]);
          }
          this.lists.push([this.base, myItems]);
          this.Item = this.lists[0][1][0];
        } else {
          this.Item = this.state.refetchItem("" + myIds[0]);
        }
        this.modeindex = 0;
        if (this.state.citation.opt["disambiguate-add-names"] || true) {
          this.namesMax = this.maxNamesByItemId[this.Item.id][0];
        } else {
          var namesMax = this.base.names[0];
          for (var i = 1, ilen = this.base.names.length; i < ilen; i += 1) {
            namesMax = Math.max(namesMax, this.base.names.names[i]);
          }
        }
        this.padBase(this.base);
        this.padBase(this.betterbase);
        this.base.year_suffix = false;
        this.base.disambiguate = false;
        this.betterbase.year_suffix = false;
        this.betterbase.disambiguate = false;
        if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.state.opt["disambiguate-add-givenname"]) {
          this.givensMax = 2;
        }
        return true;
      };
      CSL4.Disambiguation.prototype.padBase = function(base) {
        for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
          if (!base.givens[i]) {
            base.givens[i] = [];
          }
          for (var j = 0, jlen = base.names[i]; j < jlen; j += 1) {
            if (!base.givens[i][j]) {
              base.givens[i][j] = 0;
            }
          }
        }
      };
      CSL4.Disambiguation.prototype.configModes = function() {
        var dagopt, gdropt;
        this.modes = [];
        dagopt = this.state.opt["disambiguate-add-givenname"];
        gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
        if (this.state.opt["disambiguate-add-names"] || dagopt && gdropt === "by-cite") {
          this.modes.push("disNames");
        }
        if (this.state.opt.development_extensions.prioritize_disambiguate_condition) {
          if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
          }
          if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
          }
        } else {
          if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
          }
          if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
          }
        }
      };
      CSL4.Disambiguation.prototype.getCiteData = function(Item, base) {
        if (!this.maxNamesByItemId[Item.id]) {
          CSL4.getAmbiguousCite.call(this.state, Item, base);
          base = CSL4.getAmbigConfig.call(this.state);
          this.maxNamesByItemId[Item.id] = CSL4.getMaxVals.call(this.state);
          this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
          for (var i = 0, ilen = this.state.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
            this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();
          }
          this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;
          if (!this.base) {
            this.base = base;
            this.betterbase = CSL4.cloneAmbigConfig(base);
          }
          if (base.names.length < this.base.names.length) {
            this.base = base;
          }
          for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
            if (base.names[i] > this.base.names[i]) {
              this.base.givens[i] = base.givens[i].slice();
              this.base.names[i] = base.names[i];
              this.betterbase.names = this.base.names.slice();
              this.betterbase.givens = this.base.givens.slice();
              this.padBase(this.base);
              this.padBase(this.betterbase);
            }
          }
          this.betterbase.givens = this.base.givens.slice();
          for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {
            this.betterbase.givens[j] = this.base.givens[j].slice();
          }
        }
      };
      CSL4.Disambiguation.prototype.captureStepToBase = function() {
        if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.base.givens && this.base.givens.length) {
          if (typeof this.base.givens[this.gnameset][this.gname] !== "undefined") {
            if (this.betterbase.givens.length < this.base.givens.length) {
              this.betterbase.givens = JSON.parse(JSON.stringify(this.base.givens));
            }
            this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];
          }
        }
        this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];
      };
      CSL4.Engine.prototype.getJurisdictionList = function(jurisdiction2) {
        var jurisdictionList = [];
        var jurisdictionElems = jurisdiction2.split(":");
        for (var j = jurisdictionElems.length; j > 0; j--) {
          var composedID = jurisdictionElems.slice(0, j).join(":");
          jurisdictionList.push(composedID);
          if (this.opt.jurisdiction_fallbacks[composedID]) {
            var fallback = this.opt.jurisdiction_fallbacks[composedID];
            jurisdictionList.push(fallback);
          }
        }
        if (jurisdictionList.indexOf("us") === -1) {
          jurisdictionList.push("us");
        }
        return jurisdictionList;
      };
      CSL4.Engine.prototype.loadStyleModule = function(jurisdiction2, xmlSource, skipFallback) {
        var myFallback = null;
        var macroCount = 0;
        this.juris[jurisdiction2] = {};
        var myXml = CSL4.setupXml(xmlSource);
        myXml.addMissingNameNodes(myXml.dataObj);
        myXml.addInstitutionNodes(myXml.dataObj);
        myXml.insertPublisherAndPlace(myXml.dataObj);
        myXml.flagDateMacros(myXml.dataObj);
        var myNodes = myXml.getNodesByName(myXml.dataObj, "law-module");
        for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
          var myTypes = myXml.getAttributeValue(myNodes[i], "types");
          if (myTypes) {
            this.juris[jurisdiction2].types = {};
            myTypes = myTypes.split(/\s+/);
            for (var j = 0, jlen = myTypes.length; j < jlen; j++) {
              this.juris[jurisdiction2].types[myTypes[j]] = true;
            }
          }
          if (!skipFallback) {
            myFallback = myXml.getAttributeValue(myNodes[i], "fallback");
            if (myFallback) {
              if (jurisdiction2 !== "us") {
                this.opt.jurisdiction_fallbacks[jurisdiction2] = myFallback;
              }
            }
          }
        }
        var lang = this.opt.lang ? this.opt.lang : this.opt["default-locale"][0];
        CSL4.SET_COURT_CLASSES(this, lang, myXml, myXml.dataObj);
        if (!this.juris[jurisdiction2].types) {
          this.juris[jurisdiction2].types = CSL4.MODULE_TYPES;
        }
        var myNodes = myXml.getNodesByName(myXml.dataObj, "macro");
        for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
          var myName = myXml.getAttributeValue(myNodes[i], "name");
          if (!CSL4.MODULE_MACROS[myName]) {
            CSL4.debug('CSL: skipping non-modular macro name "' + myName + '" in module context');
            continue;
          }
          macroCount++;
          this.juris[jurisdiction2][myName] = [];
          this.buildTokenLists(myNodes[i], this.juris[jurisdiction2][myName]);
          this.configureTokenList(this.juris[jurisdiction2][myName]);
        }
        return myFallback;
      };
      CSL4.Engine.prototype.retrieveAllStyleModules = function(jurisdictionList) {
        var ret = {};
        var preferences = this.locale[this.opt.lang].opts["jurisdiction-preference"];
        preferences = preferences ? preferences : [];
        preferences = [""].concat(preferences);
        for (var i = preferences.length - 1; i > -1; i--) {
          var preference = preferences[i];
          for (var j = 0, jlen = jurisdictionList.length; j < jlen; j++) {
            var jurisdiction2 = jurisdictionList[j];
            if (this.opt.jurisdictions_seen[jurisdiction2]) {
              continue;
            }
            var res = this.sys.retrieveStyleModule(jurisdiction2, preference);
            if (!res && !preference || res) {
              this.opt.jurisdictions_seen[jurisdiction2] = true;
            }
            if (!res) {
              continue;
            }
            ret[jurisdiction2] = res;
          }
        }
        return ret;
      };
      CSL4.ParticleList = function() {
        var always_dropping_1 = [[[0, 1], null]];
        var always_dropping_3 = [[[0, 3], null]];
        var always_non_dropping_1 = [[null, [0, 1]]];
        var always_non_dropping_2 = [[null, [0, 2]]];
        var always_non_dropping_3 = [[null, [0, 3]]];
        var either_1 = [[null, [0, 1]], [[0, 1], null]];
        var either_2 = [[null, [0, 2]], [[0, 2], null]];
        var either_1_dropping_best = [[[0, 1], null], [null, [0, 1]]];
        var either_2_dropping_best = [[[0, 2], null], [null, [0, 2]]];
        var either_3_dropping_best = [[[0, 3], null], [null, [0, 3]]];
        var non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0, 2]], [[0, 1], [1, 2]]];
        var PARTICLES = [
          ["'s", always_non_dropping_1],
          ["'s-", always_non_dropping_1],
          ["'t", always_non_dropping_1],
          ["a", always_non_dropping_1],
          ["aan 't", always_non_dropping_2],
          ["aan de", always_non_dropping_2],
          ["aan den", always_non_dropping_2],
          ["aan der", always_non_dropping_2],
          ["aan het", always_non_dropping_2],
          ["aan t", always_non_dropping_2],
          ["aan", always_non_dropping_1],
          ["ad-", either_1],
          ["adh-", either_1],
          ["af", either_1],
          ["al", either_1],
          ["al-", either_1],
          ["am de", always_non_dropping_2],
          ["am", always_non_dropping_1],
          ["an-", either_1],
          ["ar-", either_1],
          ["as-", either_1],
          ["ash-", either_1],
          ["at-", either_1],
          ["ath-", either_1],
          ["auf dem", either_2_dropping_best],
          ["auf den", either_2_dropping_best],
          ["auf der", either_2_dropping_best],
          ["auf ter", always_non_dropping_2],
          ["auf", either_1_dropping_best],
          ["aus 'm", either_2_dropping_best],
          ["aus dem", either_2_dropping_best],
          ["aus den", either_2_dropping_best],
          ["aus der", either_2_dropping_best],
          ["aus m", either_2_dropping_best],
          ["aus", either_1_dropping_best],
          ["aus'm", either_2_dropping_best],
          ["az-", either_1],
          ["a\u0161-", either_1],
          ["a\u1E0D-", either_1],
          ["a\u1E0F-", either_1],
          ["a\u1E63-", either_1],
          ["a\u1E6D-", either_1],
          ["a\u1E6F-", either_1],
          ["a\u1E93-", either_1],
          ["ben", always_non_dropping_1],
          ["bij 't", always_non_dropping_2],
          ["bij de", always_non_dropping_2],
          ["bij den", always_non_dropping_2],
          ["bij het", always_non_dropping_2],
          ["bij t", always_non_dropping_2],
          ["bij", always_non_dropping_1],
          ["bin", always_non_dropping_1],
          ["boven d", always_non_dropping_2],
          ["boven d'", always_non_dropping_2],
          ["d", always_non_dropping_1],
          ["d'", either_1],
          ["da", either_1],
          ["dal", always_non_dropping_1],
          ["dal'", always_non_dropping_1],
          ["dall'", always_non_dropping_1],
          ["dalla", always_non_dropping_1],
          ["das", either_1],
          ["de die le", always_non_dropping_3],
          ["de die", always_non_dropping_2],
          ["de l", always_non_dropping_2],
          ["de l'", always_non_dropping_2],
          ["de la", non_dropping_2_alt_dropping_1_non_dropping_1],
          ["de las", non_dropping_2_alt_dropping_1_non_dropping_1],
          ["de le", always_non_dropping_2],
          ["de li", either_2],
          ["de van der", always_non_dropping_3],
          ["de", either_1],
          ["de'", either_1],
          ["deca", always_non_dropping_1],
          ["degli", either_1],
          ["dei", either_1],
          ["del", either_1],
          ["dela", always_dropping_1],
          ["dell'", either_1],
          ["della", either_1],
          ["delle", either_1],
          ["dello", either_1],
          ["den", either_1],
          ["der", either_1],
          ["des", either_1],
          ["di", either_1],
          ["die le", always_non_dropping_2],
          ["do", always_non_dropping_1],
          ["don", always_non_dropping_1],
          ["dos", either_1],
          ["du", either_1],
          ["ed-", either_1],
          ["edh-", either_1],
          ["el", either_1],
          ["el-", either_1],
          ["en-", either_1],
          ["er-", either_1],
          ["es-", either_1],
          ["esh-", either_1],
          ["et-", either_1],
          ["eth-", either_1],
          ["ez-", either_1],
          ["e\u0161-", either_1],
          ["e\u1E0D-", either_1],
          ["e\u1E0F-", either_1],
          ["e\u1E63-", either_1],
          ["e\u1E6D-", either_1],
          ["e\u1E6F-", either_1],
          ["e\u1E93-", either_1],
          ["het", always_non_dropping_1],
          ["i", always_non_dropping_1],
          ["il", always_dropping_1],
          ["im", always_non_dropping_1],
          ["in 't", always_non_dropping_2],
          ["in de", always_non_dropping_2],
          ["in den", always_non_dropping_2],
          ["in der", either_2],
          ["in het", always_non_dropping_2],
          ["in t", always_non_dropping_2],
          ["in", always_non_dropping_1],
          ["l", always_non_dropping_1],
          ["l'", always_non_dropping_1],
          ["la", always_non_dropping_1],
          ["las", always_non_dropping_1],
          ["le", always_non_dropping_1],
          ["les", either_1],
          ["lo", either_1],
          ["los", always_non_dropping_1],
          ["lou", always_non_dropping_1],
          ["of", always_non_dropping_1],
          ["onder 't", always_non_dropping_2],
          ["onder de", always_non_dropping_2],
          ["onder den", always_non_dropping_2],
          ["onder het", always_non_dropping_2],
          ["onder t", always_non_dropping_2],
          ["onder", always_non_dropping_1],
          ["op 't", always_non_dropping_2],
          ["op de", either_2],
          ["op den", always_non_dropping_2],
          ["op der", always_non_dropping_2],
          ["op gen", always_non_dropping_2],
          ["op het", always_non_dropping_2],
          ["op t", always_non_dropping_2],
          ["op ten", always_non_dropping_2],
          ["op", always_non_dropping_1],
          ["over 't", always_non_dropping_2],
          ["over de", always_non_dropping_2],
          ["over den", always_non_dropping_2],
          ["over het", always_non_dropping_2],
          ["over t", always_non_dropping_2],
          ["over", always_non_dropping_1],
          ["s", always_non_dropping_1],
          ["s'", always_non_dropping_1],
          ["sen", always_dropping_1],
          ["t", always_non_dropping_1],
          ["te", always_non_dropping_1],
          ["ten", always_non_dropping_1],
          ["ter", always_non_dropping_1],
          ["tho", always_non_dropping_1],
          ["thoe", always_non_dropping_1],
          ["thor", always_non_dropping_1],
          ["to", always_non_dropping_1],
          ["toe", always_non_dropping_1],
          ["tot", always_non_dropping_1],
          ["uijt 't", always_non_dropping_2],
          ["uijt de", always_non_dropping_2],
          ["uijt den", always_non_dropping_2],
          ["uijt te de", always_non_dropping_3],
          ["uijt ten", always_non_dropping_2],
          ["uijt", always_non_dropping_1],
          ["uit 't", always_non_dropping_2],
          ["uit de", always_non_dropping_2],
          ["uit den", always_non_dropping_2],
          ["uit het", always_non_dropping_2],
          ["uit t", always_non_dropping_2],
          ["uit te de", always_non_dropping_3],
          ["uit ten", always_non_dropping_2],
          ["uit", always_non_dropping_1],
          ["unter", always_non_dropping_1],
          ["v", always_non_dropping_1],
          ["v.", always_non_dropping_1],
          ["v.d.", always_non_dropping_1],
          ["van 't", always_non_dropping_2],
          ["van de l", always_non_dropping_3],
          ["van de l'", always_non_dropping_3],
          ["van de", always_non_dropping_2],
          ["van de", always_non_dropping_2],
          ["van den", always_non_dropping_2],
          ["van der", always_non_dropping_2],
          ["van gen", always_non_dropping_2],
          ["van het", always_non_dropping_2],
          ["van la", always_non_dropping_2],
          ["van t", always_non_dropping_2],
          ["van ter", always_non_dropping_2],
          ["van van de", always_non_dropping_3],
          ["van", either_1],
          ["vander", always_non_dropping_1],
          ["vd", always_non_dropping_1],
          ["ver", always_non_dropping_1],
          ["vom und zum", always_dropping_3],
          ["vom", either_1],
          ["von 't", always_non_dropping_2],
          ["von dem", either_2_dropping_best],
          ["von den", either_2_dropping_best],
          ["von der", either_2_dropping_best],
          ["von t", always_non_dropping_2],
          ["von und zu", either_3_dropping_best],
          ["von zu", either_2_dropping_best],
          ["von", either_1_dropping_best],
          ["voor 't", always_non_dropping_2],
          ["voor de", always_non_dropping_2],
          ["voor den", always_non_dropping_2],
          ["voor in 't", always_non_dropping_3],
          ["voor in t", always_non_dropping_3],
          ["voor", always_non_dropping_1],
          ["vor der", either_2_dropping_best],
          ["vor", either_1_dropping_best],
          ["z", always_dropping_1],
          ["ze", always_dropping_1],
          ["zu", either_1_dropping_best],
          ["zum", either_1],
          ["zur", either_1]
        ];
        return PARTICLES;
      }();
      CSL4.parseParticles = function() {
        function splitParticles(nameValue, firstNameFlag, caseOverride) {
          var origNameValue = nameValue;
          nameValue = caseOverride ? nameValue.toLowerCase() : nameValue;
          var particleList = [];
          var rex;
          var hasParticle;
          if (firstNameFlag) {
            nameValue = nameValue.split("").reverse().join("");
            rex = CSL4.PARTICLE_GIVEN_REGEXP;
          } else {
            rex = CSL4.PARTICLE_FAMILY_REGEXP;
          }
          var m = nameValue.match(rex);
          while (m) {
            var m1 = firstNameFlag ? m[1].split("").reverse().join("") : m[1];
            var firstChar = m ? m1 : false;
            var firstChar = firstChar ? m1.replace(/^[-\'\u02bb\u2019\s]*(.).*$/, "$1") : false;
            hasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;
            if (!hasParticle) {
              break;
            }
            if (firstNameFlag) {
              particleList.push(origNameValue.slice(m1.length * -1));
              origNameValue = origNameValue.slice(0, m1.length * -1);
            } else {
              particleList.push(origNameValue.slice(0, m1.length));
              origNameValue = origNameValue.slice(m1.length);
            }
            nameValue = m[2];
            m = nameValue.match(rex);
          }
          if (firstNameFlag) {
            nameValue = nameValue.split("").reverse().join("");
            particleList.reverse();
            for (var i = 1, ilen = particleList.length; i < ilen; i++) {
              if (particleList[i].slice(0, 1) == " ") {
                particleList[i - 1] += " ";
              }
            }
            for (var i = 0, ilen = particleList.length; i < ilen; i++) {
              if (particleList[i].slice(0, 1) == " ") {
                particleList[i] = particleList[i].slice(1);
              }
            }
            nameValue = origNameValue.slice(0, nameValue.length);
          } else {
            nameValue = origNameValue.slice(nameValue.length * -1);
          }
          return [hasParticle, nameValue, particleList];
        }
        function trimLast(str) {
          var lastChar = str.slice(-1);
          str = str.trim();
          if (lastChar === " " && ["'", "\u2019"].indexOf(str.slice(-1)) > -1) {
            str += " ";
          }
          return str;
        }
        function parseSuffix(nameObj) {
          if (!nameObj.suffix && nameObj.given) {
            var m = nameObj.given.match(/(\s*,!*\s*)/);
            if (m) {
              var idx = nameObj.given.indexOf(m[1]);
              var possible_suffix = nameObj.given.slice(idx + m[1].length);
              var possible_comma = nameObj.given.slice(idx, idx + m[1].length).replace(/\s*/g, "");
              if (possible_suffix.replace(/\./g, "") === "et al" && !nameObj["dropping-particle"]) {
                nameObj["dropping-particle"] = possible_suffix;
                nameObj["comma-dropping-particle"] = ",";
              } else {
                if (possible_comma.length === 2) {
                  nameObj["comma-suffix"] = true;
                }
                nameObj.suffix = possible_suffix;
              }
              nameObj.given = nameObj.given.slice(0, idx);
            }
          }
        }
        return function(nameObj) {
          var res = splitParticles(nameObj.family);
          var lastNameValue = res[1];
          var lastParticleList = res[2];
          nameObj.family = lastNameValue;
          var nonDroppingParticle = trimLast(lastParticleList.join(""));
          if (nonDroppingParticle) {
            nameObj["non-dropping-particle"] = nonDroppingParticle;
          }
          parseSuffix(nameObj);
          var res = splitParticles(nameObj.given, true);
          var firstNameValue = res[1];
          var firstParticleList = res[2];
          nameObj.given = firstNameValue;
          var droppingParticle = firstParticleList.join("").trim();
          if (droppingParticle) {
            nameObj["dropping-particle"] = droppingParticle;
          }
        };
      }();
      module.exports = CSL4;
    }
  });

  // node_modules/he/he.js
  var require_he = __commonJS({
    "node_modules/he/he.js"(exports, module) {
      (function(root) {
        var freeExports = typeof exports == "object" && exports;
        var freeModule = typeof module == "object" && module && module.exports == freeExports && module;
        var freeGlobal = typeof global == "object" && global;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
          root = freeGlobal;
        }
        var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
        var regexAsciiWhitelist = /[\x01-\x7F]/g;
        var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
        var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
        var encodeMap = { "\xAD": "shy", "\u200C": "zwnj", "\u200D": "zwj", "\u200E": "lrm", "\u2063": "ic", "\u2062": "it", "\u2061": "af", "\u200F": "rlm", "\u200B": "ZeroWidthSpace", "\u2060": "NoBreak", "\u0311": "DownBreve", "\u20DB": "tdot", "\u20DC": "DotDot", "	": "Tab", "\n": "NewLine", "\u2008": "puncsp", "\u205F": "MediumSpace", "\u2009": "thinsp", "\u200A": "hairsp", "\u2004": "emsp13", "\u2002": "ensp", "\u2005": "emsp14", "\u2003": "emsp", "\u2007": "numsp", "\xA0": "nbsp", "\u205F\u200A": "ThickSpace", "\u203E": "oline", "_": "lowbar", "\u2010": "dash", "\u2013": "ndash", "\u2014": "mdash", "\u2015": "horbar", ",": "comma", ";": "semi", "\u204F": "bsemi", ":": "colon", "\u2A74": "Colone", "!": "excl", "\xA1": "iexcl", "?": "quest", "\xBF": "iquest", ".": "period", "\u2025": "nldr", "\u2026": "mldr", "\xB7": "middot", "'": "apos", "\u2018": "lsquo", "\u2019": "rsquo", "\u201A": "sbquo", "\u2039": "lsaquo", "\u203A": "rsaquo", '"': "quot", "\u201C": "ldquo", "\u201D": "rdquo", "\u201E": "bdquo", "\xAB": "laquo", "\xBB": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "\u2308": "lceil", "\u2309": "rceil", "\u230A": "lfloor", "\u230B": "rfloor", "\u2985": "lopar", "\u2986": "ropar", "\u298B": "lbrke", "\u298C": "rbrke", "\u298D": "lbrkslu", "\u298E": "rbrksld", "\u298F": "lbrksld", "\u2990": "rbrkslu", "\u2991": "langd", "\u2992": "rangd", "\u2993": "lparlt", "\u2994": "rpargt", "\u2995": "gtlPar", "\u2996": "ltrPar", "\u27E6": "lobrk", "\u27E7": "robrk", "\u27E8": "lang", "\u27E9": "rang", "\u27EA": "Lang", "\u27EB": "Rang", "\u27EC": "loang", "\u27ED": "roang", "\u2772": "lbbrk", "\u2773": "rbbrk", "\u2016": "Vert", "\xA7": "sect", "\xB6": "para", "@": "commat", "*": "ast", "/": "sol", "undefined": null, "&": "amp", "#": "num", "%": "percnt", "\u2030": "permil", "\u2031": "pertenk", "\u2020": "dagger", "\u2021": "Dagger", "\u2022": "bull", "\u2043": "hybull", "\u2032": "prime", "\u2033": "Prime", "\u2034": "tprime", "\u2057": "qprime", "\u2035": "bprime", "\u2041": "caret", "`": "grave", "\xB4": "acute", "\u02DC": "tilde", "^": "Hat", "\xAF": "macr", "\u02D8": "breve", "\u02D9": "dot", "\xA8": "die", "\u02DA": "ring", "\u02DD": "dblac", "\xB8": "cedil", "\u02DB": "ogon", "\u02C6": "circ", "\u02C7": "caron", "\xB0": "deg", "\xA9": "copy", "\xAE": "reg", "\u2117": "copysr", "\u2118": "wp", "\u211E": "rx", "\u2127": "mho", "\u2129": "iiota", "\u2190": "larr", "\u219A": "nlarr", "\u2192": "rarr", "\u219B": "nrarr", "\u2191": "uarr", "\u2193": "darr", "\u2194": "harr", "\u21AE": "nharr", "\u2195": "varr", "\u2196": "nwarr", "\u2197": "nearr", "\u2198": "searr", "\u2199": "swarr", "\u219D": "rarrw", "\u219D\u0338": "nrarrw", "\u219E": "Larr", "\u219F": "Uarr", "\u21A0": "Rarr", "\u21A1": "Darr", "\u21A2": "larrtl", "\u21A3": "rarrtl", "\u21A4": "mapstoleft", "\u21A5": "mapstoup", "\u21A6": "map", "\u21A7": "mapstodown", "\u21A9": "larrhk", "\u21AA": "rarrhk", "\u21AB": "larrlp", "\u21AC": "rarrlp", "\u21AD": "harrw", "\u21B0": "lsh", "\u21B1": "rsh", "\u21B2": "ldsh", "\u21B3": "rdsh", "\u21B5": "crarr", "\u21B6": "cularr", "\u21B7": "curarr", "\u21BA": "olarr", "\u21BB": "orarr", "\u21BC": "lharu", "\u21BD": "lhard", "\u21BE": "uharr", "\u21BF": "uharl", "\u21C0": "rharu", "\u21C1": "rhard", "\u21C2": "dharr", "\u21C3": "dharl", "\u21C4": "rlarr", "\u21C5": "udarr", "\u21C6": "lrarr", "\u21C7": "llarr", "\u21C8": "uuarr", "\u21C9": "rrarr", "\u21CA": "ddarr", "\u21CB": "lrhar", "\u21CC": "rlhar", "\u21D0": "lArr", "\u21CD": "nlArr", "\u21D1": "uArr", "\u21D2": "rArr", "\u21CF": "nrArr", "\u21D3": "dArr", "\u21D4": "iff", "\u21CE": "nhArr", "\u21D5": "vArr", "\u21D6": "nwArr", "\u21D7": "neArr", "\u21D8": "seArr", "\u21D9": "swArr", "\u21DA": "lAarr", "\u21DB": "rAarr", "\u21DD": "zigrarr", "\u21E4": "larrb", "\u21E5": "rarrb", "\u21F5": "duarr", "\u21FD": "loarr", "\u21FE": "roarr", "\u21FF": "hoarr", "\u2200": "forall", "\u2201": "comp", "\u2202": "part", "\u2202\u0338": "npart", "\u2203": "exist", "\u2204": "nexist", "\u2205": "empty", "\u2207": "Del", "\u2208": "in", "\u2209": "notin", "\u220B": "ni", "\u220C": "notni", "\u03F6": "bepsi", "\u220F": "prod", "\u2210": "coprod", "\u2211": "sum", "+": "plus", "\xB1": "pm", "\xF7": "div", "\xD7": "times", "<": "lt", "\u226E": "nlt", "<\u20D2": "nvlt", "=": "equals", "\u2260": "ne", "=\u20E5": "bne", "\u2A75": "Equal", ">": "gt", "\u226F": "ngt", ">\u20D2": "nvgt", "\xAC": "not", "|": "vert", "\xA6": "brvbar", "\u2212": "minus", "\u2213": "mp", "\u2214": "plusdo", "\u2044": "frasl", "\u2216": "setmn", "\u2217": "lowast", "\u2218": "compfn", "\u221A": "Sqrt", "\u221D": "prop", "\u221E": "infin", "\u221F": "angrt", "\u2220": "ang", "\u2220\u20D2": "nang", "\u2221": "angmsd", "\u2222": "angsph", "\u2223": "mid", "\u2224": "nmid", "\u2225": "par", "\u2226": "npar", "\u2227": "and", "\u2228": "or", "\u2229": "cap", "\u2229\uFE00": "caps", "\u222A": "cup", "\u222A\uFE00": "cups", "\u222B": "int", "\u222C": "Int", "\u222D": "tint", "\u2A0C": "qint", "\u222E": "oint", "\u222F": "Conint", "\u2230": "Cconint", "\u2231": "cwint", "\u2232": "cwconint", "\u2233": "awconint", "\u2234": "there4", "\u2235": "becaus", "\u2236": "ratio", "\u2237": "Colon", "\u2238": "minusd", "\u223A": "mDDot", "\u223B": "homtht", "\u223C": "sim", "\u2241": "nsim", "\u223C\u20D2": "nvsim", "\u223D": "bsim", "\u223D\u0331": "race", "\u223E": "ac", "\u223E\u0333": "acE", "\u223F": "acd", "\u2240": "wr", "\u2242": "esim", "\u2242\u0338": "nesim", "\u2243": "sime", "\u2244": "nsime", "\u2245": "cong", "\u2247": "ncong", "\u2246": "simne", "\u2248": "ap", "\u2249": "nap", "\u224A": "ape", "\u224B": "apid", "\u224B\u0338": "napid", "\u224C": "bcong", "\u224D": "CupCap", "\u226D": "NotCupCap", "\u224D\u20D2": "nvap", "\u224E": "bump", "\u224E\u0338": "nbump", "\u224F": "bumpe", "\u224F\u0338": "nbumpe", "\u2250": "doteq", "\u2250\u0338": "nedot", "\u2251": "eDot", "\u2252": "efDot", "\u2253": "erDot", "\u2254": "colone", "\u2255": "ecolon", "\u2256": "ecir", "\u2257": "cire", "\u2259": "wedgeq", "\u225A": "veeeq", "\u225C": "trie", "\u225F": "equest", "\u2261": "equiv", "\u2262": "nequiv", "\u2261\u20E5": "bnequiv", "\u2264": "le", "\u2270": "nle", "\u2264\u20D2": "nvle", "\u2265": "ge", "\u2271": "nge", "\u2265\u20D2": "nvge", "\u2266": "lE", "\u2266\u0338": "nlE", "\u2267": "gE", "\u2267\u0338": "ngE", "\u2268\uFE00": "lvnE", "\u2268": "lnE", "\u2269": "gnE", "\u2269\uFE00": "gvnE", "\u226A": "ll", "\u226A\u0338": "nLtv", "\u226A\u20D2": "nLt", "\u226B": "gg", "\u226B\u0338": "nGtv", "\u226B\u20D2": "nGt", "\u226C": "twixt", "\u2272": "lsim", "\u2274": "nlsim", "\u2273": "gsim", "\u2275": "ngsim", "\u2276": "lg", "\u2278": "ntlg", "\u2277": "gl", "\u2279": "ntgl", "\u227A": "pr", "\u2280": "npr", "\u227B": "sc", "\u2281": "nsc", "\u227C": "prcue", "\u22E0": "nprcue", "\u227D": "sccue", "\u22E1": "nsccue", "\u227E": "prsim", "\u227F": "scsim", "\u227F\u0338": "NotSucceedsTilde", "\u2282": "sub", "\u2284": "nsub", "\u2282\u20D2": "vnsub", "\u2283": "sup", "\u2285": "nsup", "\u2283\u20D2": "vnsup", "\u2286": "sube", "\u2288": "nsube", "\u2287": "supe", "\u2289": "nsupe", "\u228A\uFE00": "vsubne", "\u228A": "subne", "\u228B\uFE00": "vsupne", "\u228B": "supne", "\u228D": "cupdot", "\u228E": "uplus", "\u228F": "sqsub", "\u228F\u0338": "NotSquareSubset", "\u2290": "sqsup", "\u2290\u0338": "NotSquareSuperset", "\u2291": "sqsube", "\u22E2": "nsqsube", "\u2292": "sqsupe", "\u22E3": "nsqsupe", "\u2293": "sqcap", "\u2293\uFE00": "sqcaps", "\u2294": "sqcup", "\u2294\uFE00": "sqcups", "\u2295": "oplus", "\u2296": "ominus", "\u2297": "otimes", "\u2298": "osol", "\u2299": "odot", "\u229A": "ocir", "\u229B": "oast", "\u229D": "odash", "\u229E": "plusb", "\u229F": "minusb", "\u22A0": "timesb", "\u22A1": "sdotb", "\u22A2": "vdash", "\u22AC": "nvdash", "\u22A3": "dashv", "\u22A4": "top", "\u22A5": "bot", "\u22A7": "models", "\u22A8": "vDash", "\u22AD": "nvDash", "\u22A9": "Vdash", "\u22AE": "nVdash", "\u22AA": "Vvdash", "\u22AB": "VDash", "\u22AF": "nVDash", "\u22B0": "prurel", "\u22B2": "vltri", "\u22EA": "nltri", "\u22B3": "vrtri", "\u22EB": "nrtri", "\u22B4": "ltrie", "\u22EC": "nltrie", "\u22B4\u20D2": "nvltrie", "\u22B5": "rtrie", "\u22ED": "nrtrie", "\u22B5\u20D2": "nvrtrie", "\u22B6": "origof", "\u22B7": "imof", "\u22B8": "mumap", "\u22B9": "hercon", "\u22BA": "intcal", "\u22BB": "veebar", "\u22BD": "barvee", "\u22BE": "angrtvb", "\u22BF": "lrtri", "\u22C0": "Wedge", "\u22C1": "Vee", "\u22C2": "xcap", "\u22C3": "xcup", "\u22C4": "diam", "\u22C5": "sdot", "\u22C6": "Star", "\u22C7": "divonx", "\u22C8": "bowtie", "\u22C9": "ltimes", "\u22CA": "rtimes", "\u22CB": "lthree", "\u22CC": "rthree", "\u22CD": "bsime", "\u22CE": "cuvee", "\u22CF": "cuwed", "\u22D0": "Sub", "\u22D1": "Sup", "\u22D2": "Cap", "\u22D3": "Cup", "\u22D4": "fork", "\u22D5": "epar", "\u22D6": "ltdot", "\u22D7": "gtdot", "\u22D8": "Ll", "\u22D8\u0338": "nLl", "\u22D9": "Gg", "\u22D9\u0338": "nGg", "\u22DA\uFE00": "lesg", "\u22DA": "leg", "\u22DB": "gel", "\u22DB\uFE00": "gesl", "\u22DE": "cuepr", "\u22DF": "cuesc", "\u22E6": "lnsim", "\u22E7": "gnsim", "\u22E8": "prnsim", "\u22E9": "scnsim", "\u22EE": "vellip", "\u22EF": "ctdot", "\u22F0": "utdot", "\u22F1": "dtdot", "\u22F2": "disin", "\u22F3": "isinsv", "\u22F4": "isins", "\u22F5": "isindot", "\u22F5\u0338": "notindot", "\u22F6": "notinvc", "\u22F7": "notinvb", "\u22F9": "isinE", "\u22F9\u0338": "notinE", "\u22FA": "nisd", "\u22FB": "xnis", "\u22FC": "nis", "\u22FD": "notnivc", "\u22FE": "notnivb", "\u2305": "barwed", "\u2306": "Barwed", "\u230C": "drcrop", "\u230D": "dlcrop", "\u230E": "urcrop", "\u230F": "ulcrop", "\u2310": "bnot", "\u2312": "profline", "\u2313": "profsurf", "\u2315": "telrec", "\u2316": "target", "\u231C": "ulcorn", "\u231D": "urcorn", "\u231E": "dlcorn", "\u231F": "drcorn", "\u2322": "frown", "\u2323": "smile", "\u232D": "cylcty", "\u232E": "profalar", "\u2336": "topbot", "\u233D": "ovbar", "\u233F": "solbar", "\u237C": "angzarr", "\u23B0": "lmoust", "\u23B1": "rmoust", "\u23B4": "tbrk", "\u23B5": "bbrk", "\u23B6": "bbrktbrk", "\u23DC": "OverParenthesis", "\u23DD": "UnderParenthesis", "\u23DE": "OverBrace", "\u23DF": "UnderBrace", "\u23E2": "trpezium", "\u23E7": "elinters", "\u2423": "blank", "\u2500": "boxh", "\u2502": "boxv", "\u250C": "boxdr", "\u2510": "boxdl", "\u2514": "boxur", "\u2518": "boxul", "\u251C": "boxvr", "\u2524": "boxvl", "\u252C": "boxhd", "\u2534": "boxhu", "\u253C": "boxvh", "\u2550": "boxH", "\u2551": "boxV", "\u2552": "boxdR", "\u2553": "boxDr", "\u2554": "boxDR", "\u2555": "boxdL", "\u2556": "boxDl", "\u2557": "boxDL", "\u2558": "boxuR", "\u2559": "boxUr", "\u255A": "boxUR", "\u255B": "boxuL", "\u255C": "boxUl", "\u255D": "boxUL", "\u255E": "boxvR", "\u255F": "boxVr", "\u2560": "boxVR", "\u2561": "boxvL", "\u2562": "boxVl", "\u2563": "boxVL", "\u2564": "boxHd", "\u2565": "boxhD", "\u2566": "boxHD", "\u2567": "boxHu", "\u2568": "boxhU", "\u2569": "boxHU", "\u256A": "boxvH", "\u256B": "boxVh", "\u256C": "boxVH", "\u2580": "uhblk", "\u2584": "lhblk", "\u2588": "block", "\u2591": "blk14", "\u2592": "blk12", "\u2593": "blk34", "\u25A1": "squ", "\u25AA": "squf", "\u25AB": "EmptyVerySmallSquare", "\u25AD": "rect", "\u25AE": "marker", "\u25B1": "fltns", "\u25B3": "xutri", "\u25B4": "utrif", "\u25B5": "utri", "\u25B8": "rtrif", "\u25B9": "rtri", "\u25BD": "xdtri", "\u25BE": "dtrif", "\u25BF": "dtri", "\u25C2": "ltrif", "\u25C3": "ltri", "\u25CA": "loz", "\u25CB": "cir", "\u25EC": "tridot", "\u25EF": "xcirc", "\u25F8": "ultri", "\u25F9": "urtri", "\u25FA": "lltri", "\u25FB": "EmptySmallSquare", "\u25FC": "FilledSmallSquare", "\u2605": "starf", "\u2606": "star", "\u260E": "phone", "\u2640": "female", "\u2642": "male", "\u2660": "spades", "\u2663": "clubs", "\u2665": "hearts", "\u2666": "diams", "\u266A": "sung", "\u2713": "check", "\u2717": "cross", "\u2720": "malt", "\u2736": "sext", "\u2758": "VerticalSeparator", "\u27C8": "bsolhsub", "\u27C9": "suphsol", "\u27F5": "xlarr", "\u27F6": "xrarr", "\u27F7": "xharr", "\u27F8": "xlArr", "\u27F9": "xrArr", "\u27FA": "xhArr", "\u27FC": "xmap", "\u27FF": "dzigrarr", "\u2902": "nvlArr", "\u2903": "nvrArr", "\u2904": "nvHarr", "\u2905": "Map", "\u290C": "lbarr", "\u290D": "rbarr", "\u290E": "lBarr", "\u290F": "rBarr", "\u2910": "RBarr", "\u2911": "DDotrahd", "\u2912": "UpArrowBar", "\u2913": "DownArrowBar", "\u2916": "Rarrtl", "\u2919": "latail", "\u291A": "ratail", "\u291B": "lAtail", "\u291C": "rAtail", "\u291D": "larrfs", "\u291E": "rarrfs", "\u291F": "larrbfs", "\u2920": "rarrbfs", "\u2923": "nwarhk", "\u2924": "nearhk", "\u2925": "searhk", "\u2926": "swarhk", "\u2927": "nwnear", "\u2928": "toea", "\u2929": "tosa", "\u292A": "swnwar", "\u2933": "rarrc", "\u2933\u0338": "nrarrc", "\u2935": "cudarrr", "\u2936": "ldca", "\u2937": "rdca", "\u2938": "cudarrl", "\u2939": "larrpl", "\u293C": "curarrm", "\u293D": "cularrp", "\u2945": "rarrpl", "\u2948": "harrcir", "\u2949": "Uarrocir", "\u294A": "lurdshar", "\u294B": "ldrushar", "\u294E": "LeftRightVector", "\u294F": "RightUpDownVector", "\u2950": "DownLeftRightVector", "\u2951": "LeftUpDownVector", "\u2952": "LeftVectorBar", "\u2953": "RightVectorBar", "\u2954": "RightUpVectorBar", "\u2955": "RightDownVectorBar", "\u2956": "DownLeftVectorBar", "\u2957": "DownRightVectorBar", "\u2958": "LeftUpVectorBar", "\u2959": "LeftDownVectorBar", "\u295A": "LeftTeeVector", "\u295B": "RightTeeVector", "\u295C": "RightUpTeeVector", "\u295D": "RightDownTeeVector", "\u295E": "DownLeftTeeVector", "\u295F": "DownRightTeeVector", "\u2960": "LeftUpTeeVector", "\u2961": "LeftDownTeeVector", "\u2962": "lHar", "\u2963": "uHar", "\u2964": "rHar", "\u2965": "dHar", "\u2966": "luruhar", "\u2967": "ldrdhar", "\u2968": "ruluhar", "\u2969": "rdldhar", "\u296A": "lharul", "\u296B": "llhard", "\u296C": "rharul", "\u296D": "lrhard", "\u296E": "udhar", "\u296F": "duhar", "\u2970": "RoundImplies", "\u2971": "erarr", "\u2972": "simrarr", "\u2973": "larrsim", "\u2974": "rarrsim", "\u2975": "rarrap", "\u2976": "ltlarr", "\u2978": "gtrarr", "\u2979": "subrarr", "\u297B": "suplarr", "\u297C": "lfisht", "\u297D": "rfisht", "\u297E": "ufisht", "\u297F": "dfisht", "\u299A": "vzigzag", "\u299C": "vangrt", "\u299D": "angrtvbd", "\u29A4": "ange", "\u29A5": "range", "\u29A6": "dwangle", "\u29A7": "uwangle", "\u29A8": "angmsdaa", "\u29A9": "angmsdab", "\u29AA": "angmsdac", "\u29AB": "angmsdad", "\u29AC": "angmsdae", "\u29AD": "angmsdaf", "\u29AE": "angmsdag", "\u29AF": "angmsdah", "\u29B0": "bemptyv", "\u29B1": "demptyv", "\u29B2": "cemptyv", "\u29B3": "raemptyv", "\u29B4": "laemptyv", "\u29B5": "ohbar", "\u29B6": "omid", "\u29B7": "opar", "\u29B9": "operp", "\u29BB": "olcross", "\u29BC": "odsold", "\u29BE": "olcir", "\u29BF": "ofcir", "\u29C0": "olt", "\u29C1": "ogt", "\u29C2": "cirscir", "\u29C3": "cirE", "\u29C4": "solb", "\u29C5": "bsolb", "\u29C9": "boxbox", "\u29CD": "trisb", "\u29CE": "rtriltri", "\u29CF": "LeftTriangleBar", "\u29CF\u0338": "NotLeftTriangleBar", "\u29D0": "RightTriangleBar", "\u29D0\u0338": "NotRightTriangleBar", "\u29DC": "iinfin", "\u29DD": "infintie", "\u29DE": "nvinfin", "\u29E3": "eparsl", "\u29E4": "smeparsl", "\u29E5": "eqvparsl", "\u29EB": "lozf", "\u29F4": "RuleDelayed", "\u29F6": "dsol", "\u2A00": "xodot", "\u2A01": "xoplus", "\u2A02": "xotime", "\u2A04": "xuplus", "\u2A06": "xsqcup", "\u2A0D": "fpartint", "\u2A10": "cirfnint", "\u2A11": "awint", "\u2A12": "rppolint", "\u2A13": "scpolint", "\u2A14": "npolint", "\u2A15": "pointint", "\u2A16": "quatint", "\u2A17": "intlarhk", "\u2A22": "pluscir", "\u2A23": "plusacir", "\u2A24": "simplus", "\u2A25": "plusdu", "\u2A26": "plussim", "\u2A27": "plustwo", "\u2A29": "mcomma", "\u2A2A": "minusdu", "\u2A2D": "loplus", "\u2A2E": "roplus", "\u2A2F": "Cross", "\u2A30": "timesd", "\u2A31": "timesbar", "\u2A33": "smashp", "\u2A34": "lotimes", "\u2A35": "rotimes", "\u2A36": "otimesas", "\u2A37": "Otimes", "\u2A38": "odiv", "\u2A39": "triplus", "\u2A3A": "triminus", "\u2A3B": "tritime", "\u2A3C": "iprod", "\u2A3F": "amalg", "\u2A40": "capdot", "\u2A42": "ncup", "\u2A43": "ncap", "\u2A44": "capand", "\u2A45": "cupor", "\u2A46": "cupcap", "\u2A47": "capcup", "\u2A48": "cupbrcap", "\u2A49": "capbrcup", "\u2A4A": "cupcup", "\u2A4B": "capcap", "\u2A4C": "ccups", "\u2A4D": "ccaps", "\u2A50": "ccupssm", "\u2A53": "And", "\u2A54": "Or", "\u2A55": "andand", "\u2A56": "oror", "\u2A57": "orslope", "\u2A58": "andslope", "\u2A5A": "andv", "\u2A5B": "orv", "\u2A5C": "andd", "\u2A5D": "ord", "\u2A5F": "wedbar", "\u2A66": "sdote", "\u2A6A": "simdot", "\u2A6D": "congdot", "\u2A6D\u0338": "ncongdot", "\u2A6E": "easter", "\u2A6F": "apacir", "\u2A70": "apE", "\u2A70\u0338": "napE", "\u2A71": "eplus", "\u2A72": "pluse", "\u2A73": "Esim", "\u2A77": "eDDot", "\u2A78": "equivDD", "\u2A79": "ltcir", "\u2A7A": "gtcir", "\u2A7B": "ltquest", "\u2A7C": "gtquest", "\u2A7D": "les", "\u2A7D\u0338": "nles", "\u2A7E": "ges", "\u2A7E\u0338": "nges", "\u2A7F": "lesdot", "\u2A80": "gesdot", "\u2A81": "lesdoto", "\u2A82": "gesdoto", "\u2A83": "lesdotor", "\u2A84": "gesdotol", "\u2A85": "lap", "\u2A86": "gap", "\u2A87": "lne", "\u2A88": "gne", "\u2A89": "lnap", "\u2A8A": "gnap", "\u2A8B": "lEg", "\u2A8C": "gEl", "\u2A8D": "lsime", "\u2A8E": "gsime", "\u2A8F": "lsimg", "\u2A90": "gsiml", "\u2A91": "lgE", "\u2A92": "glE", "\u2A93": "lesges", "\u2A94": "gesles", "\u2A95": "els", "\u2A96": "egs", "\u2A97": "elsdot", "\u2A98": "egsdot", "\u2A99": "el", "\u2A9A": "eg", "\u2A9D": "siml", "\u2A9E": "simg", "\u2A9F": "simlE", "\u2AA0": "simgE", "\u2AA1": "LessLess", "\u2AA1\u0338": "NotNestedLessLess", "\u2AA2": "GreaterGreater", "\u2AA2\u0338": "NotNestedGreaterGreater", "\u2AA4": "glj", "\u2AA5": "gla", "\u2AA6": "ltcc", "\u2AA7": "gtcc", "\u2AA8": "lescc", "\u2AA9": "gescc", "\u2AAA": "smt", "\u2AAB": "lat", "\u2AAC": "smte", "\u2AAC\uFE00": "smtes", "\u2AAD": "late", "\u2AAD\uFE00": "lates", "\u2AAE": "bumpE", "\u2AAF": "pre", "\u2AAF\u0338": "npre", "\u2AB0": "sce", "\u2AB0\u0338": "nsce", "\u2AB3": "prE", "\u2AB4": "scE", "\u2AB5": "prnE", "\u2AB6": "scnE", "\u2AB7": "prap", "\u2AB8": "scap", "\u2AB9": "prnap", "\u2ABA": "scnap", "\u2ABB": "Pr", "\u2ABC": "Sc", "\u2ABD": "subdot", "\u2ABE": "supdot", "\u2ABF": "subplus", "\u2AC0": "supplus", "\u2AC1": "submult", "\u2AC2": "supmult", "\u2AC3": "subedot", "\u2AC4": "supedot", "\u2AC5": "subE", "\u2AC5\u0338": "nsubE", "\u2AC6": "supE", "\u2AC6\u0338": "nsupE", "\u2AC7": "subsim", "\u2AC8": "supsim", "\u2ACB\uFE00": "vsubnE", "\u2ACB": "subnE", "\u2ACC\uFE00": "vsupnE", "\u2ACC": "supnE", "\u2ACF": "csub", "\u2AD0": "csup", "\u2AD1": "csube", "\u2AD2": "csupe", "\u2AD3": "subsup", "\u2AD4": "supsub", "\u2AD5": "subsub", "\u2AD6": "supsup", "\u2AD7": "suphsub", "\u2AD8": "supdsub", "\u2AD9": "forkv", "\u2ADA": "topfork", "\u2ADB": "mlcp", "\u2AE4": "Dashv", "\u2AE6": "Vdashl", "\u2AE7": "Barv", "\u2AE8": "vBar", "\u2AE9": "vBarv", "\u2AEB": "Vbar", "\u2AEC": "Not", "\u2AED": "bNot", "\u2AEE": "rnmid", "\u2AEF": "cirmid", "\u2AF0": "midcir", "\u2AF1": "topcir", "\u2AF2": "nhpar", "\u2AF3": "parsim", "\u2AFD": "parsl", "\u2AFD\u20E5": "nparsl", "\u266D": "flat", "\u266E": "natur", "\u266F": "sharp", "\xA4": "curren", "\xA2": "cent", "$": "dollar", "\xA3": "pound", "\xA5": "yen", "\u20AC": "euro", "\xB9": "sup1", "\xBD": "half", "\u2153": "frac13", "\xBC": "frac14", "\u2155": "frac15", "\u2159": "frac16", "\u215B": "frac18", "\xB2": "sup2", "\u2154": "frac23", "\u2156": "frac25", "\xB3": "sup3", "\xBE": "frac34", "\u2157": "frac35", "\u215C": "frac38", "\u2158": "frac45", "\u215A": "frac56", "\u215D": "frac58", "\u215E": "frac78", "\u{1D4B6}": "ascr", "\u{1D552}": "aopf", "\u{1D51E}": "afr", "\u{1D538}": "Aopf", "\u{1D504}": "Afr", "\u{1D49C}": "Ascr", "\xAA": "ordf", "\xE1": "aacute", "\xC1": "Aacute", "\xE0": "agrave", "\xC0": "Agrave", "\u0103": "abreve", "\u0102": "Abreve", "\xE2": "acirc", "\xC2": "Acirc", "\xE5": "aring", "\xC5": "angst", "\xE4": "auml", "\xC4": "Auml", "\xE3": "atilde", "\xC3": "Atilde", "\u0105": "aogon", "\u0104": "Aogon", "\u0101": "amacr", "\u0100": "Amacr", "\xE6": "aelig", "\xC6": "AElig", "\u{1D4B7}": "bscr", "\u{1D553}": "bopf", "\u{1D51F}": "bfr", "\u{1D539}": "Bopf", "\u212C": "Bscr", "\u{1D505}": "Bfr", "\u{1D520}": "cfr", "\u{1D4B8}": "cscr", "\u{1D554}": "copf", "\u212D": "Cfr", "\u{1D49E}": "Cscr", "\u2102": "Copf", "\u0107": "cacute", "\u0106": "Cacute", "\u0109": "ccirc", "\u0108": "Ccirc", "\u010D": "ccaron", "\u010C": "Ccaron", "\u010B": "cdot", "\u010A": "Cdot", "\xE7": "ccedil", "\xC7": "Ccedil", "\u2105": "incare", "\u{1D521}": "dfr", "\u2146": "dd", "\u{1D555}": "dopf", "\u{1D4B9}": "dscr", "\u{1D49F}": "Dscr", "\u{1D507}": "Dfr", "\u2145": "DD", "\u{1D53B}": "Dopf", "\u010F": "dcaron", "\u010E": "Dcaron", "\u0111": "dstrok", "\u0110": "Dstrok", "\xF0": "eth", "\xD0": "ETH", "\u2147": "ee", "\u212F": "escr", "\u{1D522}": "efr", "\u{1D556}": "eopf", "\u2130": "Escr", "\u{1D508}": "Efr", "\u{1D53C}": "Eopf", "\xE9": "eacute", "\xC9": "Eacute", "\xE8": "egrave", "\xC8": "Egrave", "\xEA": "ecirc", "\xCA": "Ecirc", "\u011B": "ecaron", "\u011A": "Ecaron", "\xEB": "euml", "\xCB": "Euml", "\u0117": "edot", "\u0116": "Edot", "\u0119": "eogon", "\u0118": "Eogon", "\u0113": "emacr", "\u0112": "Emacr", "\u{1D523}": "ffr", "\u{1D557}": "fopf", "\u{1D4BB}": "fscr", "\u{1D509}": "Ffr", "\u{1D53D}": "Fopf", "\u2131": "Fscr", "\uFB00": "fflig", "\uFB03": "ffilig", "\uFB04": "ffllig", "\uFB01": "filig", "fj": "fjlig", "\uFB02": "fllig", "\u0192": "fnof", "\u210A": "gscr", "\u{1D558}": "gopf", "\u{1D524}": "gfr", "\u{1D4A2}": "Gscr", "\u{1D53E}": "Gopf", "\u{1D50A}": "Gfr", "\u01F5": "gacute", "\u011F": "gbreve", "\u011E": "Gbreve", "\u011D": "gcirc", "\u011C": "Gcirc", "\u0121": "gdot", "\u0120": "Gdot", "\u0122": "Gcedil", "\u{1D525}": "hfr", "\u210E": "planckh", "\u{1D4BD}": "hscr", "\u{1D559}": "hopf", "\u210B": "Hscr", "\u210C": "Hfr", "\u210D": "Hopf", "\u0125": "hcirc", "\u0124": "Hcirc", "\u210F": "hbar", "\u0127": "hstrok", "\u0126": "Hstrok", "\u{1D55A}": "iopf", "\u{1D526}": "ifr", "\u{1D4BE}": "iscr", "\u2148": "ii", "\u{1D540}": "Iopf", "\u2110": "Iscr", "\u2111": "Im", "\xED": "iacute", "\xCD": "Iacute", "\xEC": "igrave", "\xCC": "Igrave", "\xEE": "icirc", "\xCE": "Icirc", "\xEF": "iuml", "\xCF": "Iuml", "\u0129": "itilde", "\u0128": "Itilde", "\u0130": "Idot", "\u012F": "iogon", "\u012E": "Iogon", "\u012B": "imacr", "\u012A": "Imacr", "\u0133": "ijlig", "\u0132": "IJlig", "\u0131": "imath", "\u{1D4BF}": "jscr", "\u{1D55B}": "jopf", "\u{1D527}": "jfr", "\u{1D4A5}": "Jscr", "\u{1D50D}": "Jfr", "\u{1D541}": "Jopf", "\u0135": "jcirc", "\u0134": "Jcirc", "\u0237": "jmath", "\u{1D55C}": "kopf", "\u{1D4C0}": "kscr", "\u{1D528}": "kfr", "\u{1D4A6}": "Kscr", "\u{1D542}": "Kopf", "\u{1D50E}": "Kfr", "\u0137": "kcedil", "\u0136": "Kcedil", "\u{1D529}": "lfr", "\u{1D4C1}": "lscr", "\u2113": "ell", "\u{1D55D}": "lopf", "\u2112": "Lscr", "\u{1D50F}": "Lfr", "\u{1D543}": "Lopf", "\u013A": "lacute", "\u0139": "Lacute", "\u013E": "lcaron", "\u013D": "Lcaron", "\u013C": "lcedil", "\u013B": "Lcedil", "\u0142": "lstrok", "\u0141": "Lstrok", "\u0140": "lmidot", "\u013F": "Lmidot", "\u{1D52A}": "mfr", "\u{1D55E}": "mopf", "\u{1D4C2}": "mscr", "\u{1D510}": "Mfr", "\u{1D544}": "Mopf", "\u2133": "Mscr", "\u{1D52B}": "nfr", "\u{1D55F}": "nopf", "\u{1D4C3}": "nscr", "\u2115": "Nopf", "\u{1D4A9}": "Nscr", "\u{1D511}": "Nfr", "\u0144": "nacute", "\u0143": "Nacute", "\u0148": "ncaron", "\u0147": "Ncaron", "\xF1": "ntilde", "\xD1": "Ntilde", "\u0146": "ncedil", "\u0145": "Ncedil", "\u2116": "numero", "\u014B": "eng", "\u014A": "ENG", "\u{1D560}": "oopf", "\u{1D52C}": "ofr", "\u2134": "oscr", "\u{1D4AA}": "Oscr", "\u{1D512}": "Ofr", "\u{1D546}": "Oopf", "\xBA": "ordm", "\xF3": "oacute", "\xD3": "Oacute", "\xF2": "ograve", "\xD2": "Ograve", "\xF4": "ocirc", "\xD4": "Ocirc", "\xF6": "ouml", "\xD6": "Ouml", "\u0151": "odblac", "\u0150": "Odblac", "\xF5": "otilde", "\xD5": "Otilde", "\xF8": "oslash", "\xD8": "Oslash", "\u014D": "omacr", "\u014C": "Omacr", "\u0153": "oelig", "\u0152": "OElig", "\u{1D52D}": "pfr", "\u{1D4C5}": "pscr", "\u{1D561}": "popf", "\u2119": "Popf", "\u{1D513}": "Pfr", "\u{1D4AB}": "Pscr", "\u{1D562}": "qopf", "\u{1D52E}": "qfr", "\u{1D4C6}": "qscr", "\u{1D4AC}": "Qscr", "\u{1D514}": "Qfr", "\u211A": "Qopf", "\u0138": "kgreen", "\u{1D52F}": "rfr", "\u{1D563}": "ropf", "\u{1D4C7}": "rscr", "\u211B": "Rscr", "\u211C": "Re", "\u211D": "Ropf", "\u0155": "racute", "\u0154": "Racute", "\u0159": "rcaron", "\u0158": "Rcaron", "\u0157": "rcedil", "\u0156": "Rcedil", "\u{1D564}": "sopf", "\u{1D4C8}": "sscr", "\u{1D530}": "sfr", "\u{1D54A}": "Sopf", "\u{1D516}": "Sfr", "\u{1D4AE}": "Sscr", "\u24C8": "oS", "\u015B": "sacute", "\u015A": "Sacute", "\u015D": "scirc", "\u015C": "Scirc", "\u0161": "scaron", "\u0160": "Scaron", "\u015F": "scedil", "\u015E": "Scedil", "\xDF": "szlig", "\u{1D531}": "tfr", "\u{1D4C9}": "tscr", "\u{1D565}": "topf", "\u{1D4AF}": "Tscr", "\u{1D517}": "Tfr", "\u{1D54B}": "Topf", "\u0165": "tcaron", "\u0164": "Tcaron", "\u0163": "tcedil", "\u0162": "Tcedil", "\u2122": "trade", "\u0167": "tstrok", "\u0166": "Tstrok", "\u{1D4CA}": "uscr", "\u{1D566}": "uopf", "\u{1D532}": "ufr", "\u{1D54C}": "Uopf", "\u{1D518}": "Ufr", "\u{1D4B0}": "Uscr", "\xFA": "uacute", "\xDA": "Uacute", "\xF9": "ugrave", "\xD9": "Ugrave", "\u016D": "ubreve", "\u016C": "Ubreve", "\xFB": "ucirc", "\xDB": "Ucirc", "\u016F": "uring", "\u016E": "Uring", "\xFC": "uuml", "\xDC": "Uuml", "\u0171": "udblac", "\u0170": "Udblac", "\u0169": "utilde", "\u0168": "Utilde", "\u0173": "uogon", "\u0172": "Uogon", "\u016B": "umacr", "\u016A": "Umacr", "\u{1D533}": "vfr", "\u{1D567}": "vopf", "\u{1D4CB}": "vscr", "\u{1D519}": "Vfr", "\u{1D54D}": "Vopf", "\u{1D4B1}": "Vscr", "\u{1D568}": "wopf", "\u{1D4CC}": "wscr", "\u{1D534}": "wfr", "\u{1D4B2}": "Wscr", "\u{1D54E}": "Wopf", "\u{1D51A}": "Wfr", "\u0175": "wcirc", "\u0174": "Wcirc", "\u{1D535}": "xfr", "\u{1D4CD}": "xscr", "\u{1D569}": "xopf", "\u{1D54F}": "Xopf", "\u{1D51B}": "Xfr", "\u{1D4B3}": "Xscr", "\u{1D536}": "yfr", "\u{1D4CE}": "yscr", "\u{1D56A}": "yopf", "\u{1D4B4}": "Yscr", "\u{1D51C}": "Yfr", "\u{1D550}": "Yopf", "\xFD": "yacute", "\xDD": "Yacute", "\u0177": "ycirc", "\u0176": "Ycirc", "\xFF": "yuml", "\u0178": "Yuml", "\u{1D4CF}": "zscr", "\u{1D537}": "zfr", "\u{1D56B}": "zopf", "\u2128": "Zfr", "\u2124": "Zopf", "\u{1D4B5}": "Zscr", "\u017A": "zacute", "\u0179": "Zacute", "\u017E": "zcaron", "\u017D": "Zcaron", "\u017C": "zdot", "\u017B": "Zdot", "\u01B5": "imped", "\xFE": "thorn", "\xDE": "THORN", "\u0149": "napos", "\u03B1": "alpha", "\u0391": "Alpha", "\u03B2": "beta", "\u0392": "Beta", "\u03B3": "gamma", "\u0393": "Gamma", "\u03B4": "delta", "\u0394": "Delta", "\u03B5": "epsi", "\u03F5": "epsiv", "\u0395": "Epsilon", "\u03DD": "gammad", "\u03DC": "Gammad", "\u03B6": "zeta", "\u0396": "Zeta", "\u03B7": "eta", "\u0397": "Eta", "\u03B8": "theta", "\u03D1": "thetav", "\u0398": "Theta", "\u03B9": "iota", "\u0399": "Iota", "\u03BA": "kappa", "\u03F0": "kappav", "\u039A": "Kappa", "\u03BB": "lambda", "\u039B": "Lambda", "\u03BC": "mu", "\xB5": "micro", "\u039C": "Mu", "\u03BD": "nu", "\u039D": "Nu", "\u03BE": "xi", "\u039E": "Xi", "\u03BF": "omicron", "\u039F": "Omicron", "\u03C0": "pi", "\u03D6": "piv", "\u03A0": "Pi", "\u03C1": "rho", "\u03F1": "rhov", "\u03A1": "Rho", "\u03C3": "sigma", "\u03A3": "Sigma", "\u03C2": "sigmaf", "\u03C4": "tau", "\u03A4": "Tau", "\u03C5": "upsi", "\u03A5": "Upsilon", "\u03D2": "Upsi", "\u03C6": "phi", "\u03D5": "phiv", "\u03A6": "Phi", "\u03C7": "chi", "\u03A7": "Chi", "\u03C8": "psi", "\u03A8": "Psi", "\u03C9": "omega", "\u03A9": "ohm", "\u0430": "acy", "\u0410": "Acy", "\u0431": "bcy", "\u0411": "Bcy", "\u0432": "vcy", "\u0412": "Vcy", "\u0433": "gcy", "\u0413": "Gcy", "\u0453": "gjcy", "\u0403": "GJcy", "\u0434": "dcy", "\u0414": "Dcy", "\u0452": "djcy", "\u0402": "DJcy", "\u0435": "iecy", "\u0415": "IEcy", "\u0451": "iocy", "\u0401": "IOcy", "\u0454": "jukcy", "\u0404": "Jukcy", "\u0436": "zhcy", "\u0416": "ZHcy", "\u0437": "zcy", "\u0417": "Zcy", "\u0455": "dscy", "\u0405": "DScy", "\u0438": "icy", "\u0418": "Icy", "\u0456": "iukcy", "\u0406": "Iukcy", "\u0457": "yicy", "\u0407": "YIcy", "\u0439": "jcy", "\u0419": "Jcy", "\u0458": "jsercy", "\u0408": "Jsercy", "\u043A": "kcy", "\u041A": "Kcy", "\u045C": "kjcy", "\u040C": "KJcy", "\u043B": "lcy", "\u041B": "Lcy", "\u0459": "ljcy", "\u0409": "LJcy", "\u043C": "mcy", "\u041C": "Mcy", "\u043D": "ncy", "\u041D": "Ncy", "\u045A": "njcy", "\u040A": "NJcy", "\u043E": "ocy", "\u041E": "Ocy", "\u043F": "pcy", "\u041F": "Pcy", "\u0440": "rcy", "\u0420": "Rcy", "\u0441": "scy", "\u0421": "Scy", "\u0442": "tcy", "\u0422": "Tcy", "\u045B": "tshcy", "\u040B": "TSHcy", "\u0443": "ucy", "\u0423": "Ucy", "\u045E": "ubrcy", "\u040E": "Ubrcy", "\u0444": "fcy", "\u0424": "Fcy", "\u0445": "khcy", "\u0425": "KHcy", "\u0446": "tscy", "\u0426": "TScy", "\u0447": "chcy", "\u0427": "CHcy", "\u045F": "dzcy", "\u040F": "DZcy", "\u0448": "shcy", "\u0428": "SHcy", "\u0449": "shchcy", "\u0429": "SHCHcy", "\u044A": "hardcy", "\u042A": "HARDcy", "\u044B": "ycy", "\u042B": "Ycy", "\u044C": "softcy", "\u042C": "SOFTcy", "\u044D": "ecy", "\u042D": "Ecy", "\u044E": "yucy", "\u042E": "YUcy", "\u044F": "yacy", "\u042F": "YAcy", "\u2135": "aleph", "\u2136": "beth", "\u2137": "gimel", "\u2138": "daleth" };
        var regexEscape = /["&'<>`]/g;
        var escapeMap = {
          '"': "&quot;",
          "&": "&amp;",
          "'": "&#x27;",
          "<": "&lt;",
          ">": "&gt;",
          "`": "&#x60;"
        };
        var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
        var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
        var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
        var decodeMap = { "aacute": "\xE1", "Aacute": "\xC1", "abreve": "\u0103", "Abreve": "\u0102", "ac": "\u223E", "acd": "\u223F", "acE": "\u223E\u0333", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "acy": "\u0430", "Acy": "\u0410", "aelig": "\xE6", "AElig": "\xC6", "af": "\u2061", "afr": "\u{1D51E}", "Afr": "\u{1D504}", "agrave": "\xE0", "Agrave": "\xC0", "alefsym": "\u2135", "aleph": "\u2135", "alpha": "\u03B1", "Alpha": "\u0391", "amacr": "\u0101", "Amacr": "\u0100", "amalg": "\u2A3F", "amp": "&", "AMP": "&", "and": "\u2227", "And": "\u2A53", "andand": "\u2A55", "andd": "\u2A5C", "andslope": "\u2A58", "andv": "\u2A5A", "ang": "\u2220", "ange": "\u29A4", "angle": "\u2220", "angmsd": "\u2221", "angmsdaa": "\u29A8", "angmsdab": "\u29A9", "angmsdac": "\u29AA", "angmsdad": "\u29AB", "angmsdae": "\u29AC", "angmsdaf": "\u29AD", "angmsdag": "\u29AE", "angmsdah": "\u29AF", "angrt": "\u221F", "angrtvb": "\u22BE", "angrtvbd": "\u299D", "angsph": "\u2222", "angst": "\xC5", "angzarr": "\u237C", "aogon": "\u0105", "Aogon": "\u0104", "aopf": "\u{1D552}", "Aopf": "\u{1D538}", "ap": "\u2248", "apacir": "\u2A6F", "ape": "\u224A", "apE": "\u2A70", "apid": "\u224B", "apos": "'", "ApplyFunction": "\u2061", "approx": "\u2248", "approxeq": "\u224A", "aring": "\xE5", "Aring": "\xC5", "ascr": "\u{1D4B6}", "Ascr": "\u{1D49C}", "Assign": "\u2254", "ast": "*", "asymp": "\u2248", "asympeq": "\u224D", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "awconint": "\u2233", "awint": "\u2A11", "backcong": "\u224C", "backepsilon": "\u03F6", "backprime": "\u2035", "backsim": "\u223D", "backsimeq": "\u22CD", "Backslash": "\u2216", "Barv": "\u2AE7", "barvee": "\u22BD", "barwed": "\u2305", "Barwed": "\u2306", "barwedge": "\u2305", "bbrk": "\u23B5", "bbrktbrk": "\u23B6", "bcong": "\u224C", "bcy": "\u0431", "Bcy": "\u0411", "bdquo": "\u201E", "becaus": "\u2235", "because": "\u2235", "Because": "\u2235", "bemptyv": "\u29B0", "bepsi": "\u03F6", "bernou": "\u212C", "Bernoullis": "\u212C", "beta": "\u03B2", "Beta": "\u0392", "beth": "\u2136", "between": "\u226C", "bfr": "\u{1D51F}", "Bfr": "\u{1D505}", "bigcap": "\u22C2", "bigcirc": "\u25EF", "bigcup": "\u22C3", "bigodot": "\u2A00", "bigoplus": "\u2A01", "bigotimes": "\u2A02", "bigsqcup": "\u2A06", "bigstar": "\u2605", "bigtriangledown": "\u25BD", "bigtriangleup": "\u25B3", "biguplus": "\u2A04", "bigvee": "\u22C1", "bigwedge": "\u22C0", "bkarow": "\u290D", "blacklozenge": "\u29EB", "blacksquare": "\u25AA", "blacktriangle": "\u25B4", "blacktriangledown": "\u25BE", "blacktriangleleft": "\u25C2", "blacktriangleright": "\u25B8", "blank": "\u2423", "blk12": "\u2592", "blk14": "\u2591", "blk34": "\u2593", "block": "\u2588", "bne": "=\u20E5", "bnequiv": "\u2261\u20E5", "bnot": "\u2310", "bNot": "\u2AED", "bopf": "\u{1D553}", "Bopf": "\u{1D539}", "bot": "\u22A5", "bottom": "\u22A5", "bowtie": "\u22C8", "boxbox": "\u29C9", "boxdl": "\u2510", "boxdL": "\u2555", "boxDl": "\u2556", "boxDL": "\u2557", "boxdr": "\u250C", "boxdR": "\u2552", "boxDr": "\u2553", "boxDR": "\u2554", "boxh": "\u2500", "boxH": "\u2550", "boxhd": "\u252C", "boxhD": "\u2565", "boxHd": "\u2564", "boxHD": "\u2566", "boxhu": "\u2534", "boxhU": "\u2568", "boxHu": "\u2567", "boxHU": "\u2569", "boxminus": "\u229F", "boxplus": "\u229E", "boxtimes": "\u22A0", "boxul": "\u2518", "boxuL": "\u255B", "boxUl": "\u255C", "boxUL": "\u255D", "boxur": "\u2514", "boxuR": "\u2558", "boxUr": "\u2559", "boxUR": "\u255A", "boxv": "\u2502", "boxV": "\u2551", "boxvh": "\u253C", "boxvH": "\u256A", "boxVh": "\u256B", "boxVH": "\u256C", "boxvl": "\u2524", "boxvL": "\u2561", "boxVl": "\u2562", "boxVL": "\u2563", "boxvr": "\u251C", "boxvR": "\u255E", "boxVr": "\u255F", "boxVR": "\u2560", "bprime": "\u2035", "breve": "\u02D8", "Breve": "\u02D8", "brvbar": "\xA6", "bscr": "\u{1D4B7}", "Bscr": "\u212C", "bsemi": "\u204F", "bsim": "\u223D", "bsime": "\u22CD", "bsol": "\\", "bsolb": "\u29C5", "bsolhsub": "\u27C8", "bull": "\u2022", "bullet": "\u2022", "bump": "\u224E", "bumpe": "\u224F", "bumpE": "\u2AAE", "bumpeq": "\u224F", "Bumpeq": "\u224E", "cacute": "\u0107", "Cacute": "\u0106", "cap": "\u2229", "Cap": "\u22D2", "capand": "\u2A44", "capbrcup": "\u2A49", "capcap": "\u2A4B", "capcup": "\u2A47", "capdot": "\u2A40", "CapitalDifferentialD": "\u2145", "caps": "\u2229\uFE00", "caret": "\u2041", "caron": "\u02C7", "Cayleys": "\u212D", "ccaps": "\u2A4D", "ccaron": "\u010D", "Ccaron": "\u010C", "ccedil": "\xE7", "Ccedil": "\xC7", "ccirc": "\u0109", "Ccirc": "\u0108", "Cconint": "\u2230", "ccups": "\u2A4C", "ccupssm": "\u2A50", "cdot": "\u010B", "Cdot": "\u010A", "cedil": "\xB8", "Cedilla": "\xB8", "cemptyv": "\u29B2", "cent": "\xA2", "centerdot": "\xB7", "CenterDot": "\xB7", "cfr": "\u{1D520}", "Cfr": "\u212D", "chcy": "\u0447", "CHcy": "\u0427", "check": "\u2713", "checkmark": "\u2713", "chi": "\u03C7", "Chi": "\u03A7", "cir": "\u25CB", "circ": "\u02C6", "circeq": "\u2257", "circlearrowleft": "\u21BA", "circlearrowright": "\u21BB", "circledast": "\u229B", "circledcirc": "\u229A", "circleddash": "\u229D", "CircleDot": "\u2299", "circledR": "\xAE", "circledS": "\u24C8", "CircleMinus": "\u2296", "CirclePlus": "\u2295", "CircleTimes": "\u2297", "cire": "\u2257", "cirE": "\u29C3", "cirfnint": "\u2A10", "cirmid": "\u2AEF", "cirscir": "\u29C2", "ClockwiseContourIntegral": "\u2232", "CloseCurlyDoubleQuote": "\u201D", "CloseCurlyQuote": "\u2019", "clubs": "\u2663", "clubsuit": "\u2663", "colon": ":", "Colon": "\u2237", "colone": "\u2254", "Colone": "\u2A74", "coloneq": "\u2254", "comma": ",", "commat": "@", "comp": "\u2201", "compfn": "\u2218", "complement": "\u2201", "complexes": "\u2102", "cong": "\u2245", "congdot": "\u2A6D", "Congruent": "\u2261", "conint": "\u222E", "Conint": "\u222F", "ContourIntegral": "\u222E", "copf": "\u{1D554}", "Copf": "\u2102", "coprod": "\u2210", "Coproduct": "\u2210", "copy": "\xA9", "COPY": "\xA9", "copysr": "\u2117", "CounterClockwiseContourIntegral": "\u2233", "crarr": "\u21B5", "cross": "\u2717", "Cross": "\u2A2F", "cscr": "\u{1D4B8}", "Cscr": "\u{1D49E}", "csub": "\u2ACF", "csube": "\u2AD1", "csup": "\u2AD0", "csupe": "\u2AD2", "ctdot": "\u22EF", "cudarrl": "\u2938", "cudarrr": "\u2935", "cuepr": "\u22DE", "cuesc": "\u22DF", "cularr": "\u21B6", "cularrp": "\u293D", "cup": "\u222A", "Cup": "\u22D3", "cupbrcap": "\u2A48", "cupcap": "\u2A46", "CupCap": "\u224D", "cupcup": "\u2A4A", "cupdot": "\u228D", "cupor": "\u2A45", "cups": "\u222A\uFE00", "curarr": "\u21B7", "curarrm": "\u293C", "curlyeqprec": "\u22DE", "curlyeqsucc": "\u22DF", "curlyvee": "\u22CE", "curlywedge": "\u22CF", "curren": "\xA4", "curvearrowleft": "\u21B6", "curvearrowright": "\u21B7", "cuvee": "\u22CE", "cuwed": "\u22CF", "cwconint": "\u2232", "cwint": "\u2231", "cylcty": "\u232D", "dagger": "\u2020", "Dagger": "\u2021", "daleth": "\u2138", "darr": "\u2193", "dArr": "\u21D3", "Darr": "\u21A1", "dash": "\u2010", "dashv": "\u22A3", "Dashv": "\u2AE4", "dbkarow": "\u290F", "dblac": "\u02DD", "dcaron": "\u010F", "Dcaron": "\u010E", "dcy": "\u0434", "Dcy": "\u0414", "dd": "\u2146", "DD": "\u2145", "ddagger": "\u2021", "ddarr": "\u21CA", "DDotrahd": "\u2911", "ddotseq": "\u2A77", "deg": "\xB0", "Del": "\u2207", "delta": "\u03B4", "Delta": "\u0394", "demptyv": "\u29B1", "dfisht": "\u297F", "dfr": "\u{1D521}", "Dfr": "\u{1D507}", "dHar": "\u2965", "dharl": "\u21C3", "dharr": "\u21C2", "DiacriticalAcute": "\xB4", "DiacriticalDot": "\u02D9", "DiacriticalDoubleAcute": "\u02DD", "DiacriticalGrave": "`", "DiacriticalTilde": "\u02DC", "diam": "\u22C4", "diamond": "\u22C4", "Diamond": "\u22C4", "diamondsuit": "\u2666", "diams": "\u2666", "die": "\xA8", "DifferentialD": "\u2146", "digamma": "\u03DD", "disin": "\u22F2", "div": "\xF7", "divide": "\xF7", "divideontimes": "\u22C7", "divonx": "\u22C7", "djcy": "\u0452", "DJcy": "\u0402", "dlcorn": "\u231E", "dlcrop": "\u230D", "dollar": "$", "dopf": "\u{1D555}", "Dopf": "\u{1D53B}", "dot": "\u02D9", "Dot": "\xA8", "DotDot": "\u20DC", "doteq": "\u2250", "doteqdot": "\u2251", "DotEqual": "\u2250", "dotminus": "\u2238", "dotplus": "\u2214", "dotsquare": "\u22A1", "doublebarwedge": "\u2306", "DoubleContourIntegral": "\u222F", "DoubleDot": "\xA8", "DoubleDownArrow": "\u21D3", "DoubleLeftArrow": "\u21D0", "DoubleLeftRightArrow": "\u21D4", "DoubleLeftTee": "\u2AE4", "DoubleLongLeftArrow": "\u27F8", "DoubleLongLeftRightArrow": "\u27FA", "DoubleLongRightArrow": "\u27F9", "DoubleRightArrow": "\u21D2", "DoubleRightTee": "\u22A8", "DoubleUpArrow": "\u21D1", "DoubleUpDownArrow": "\u21D5", "DoubleVerticalBar": "\u2225", "downarrow": "\u2193", "Downarrow": "\u21D3", "DownArrow": "\u2193", "DownArrowBar": "\u2913", "DownArrowUpArrow": "\u21F5", "DownBreve": "\u0311", "downdownarrows": "\u21CA", "downharpoonleft": "\u21C3", "downharpoonright": "\u21C2", "DownLeftRightVector": "\u2950", "DownLeftTeeVector": "\u295E", "DownLeftVector": "\u21BD", "DownLeftVectorBar": "\u2956", "DownRightTeeVector": "\u295F", "DownRightVector": "\u21C1", "DownRightVectorBar": "\u2957", "DownTee": "\u22A4", "DownTeeArrow": "\u21A7", "drbkarow": "\u2910", "drcorn": "\u231F", "drcrop": "\u230C", "dscr": "\u{1D4B9}", "Dscr": "\u{1D49F}", "dscy": "\u0455", "DScy": "\u0405", "dsol": "\u29F6", "dstrok": "\u0111", "Dstrok": "\u0110", "dtdot": "\u22F1", "dtri": "\u25BF", "dtrif": "\u25BE", "duarr": "\u21F5", "duhar": "\u296F", "dwangle": "\u29A6", "dzcy": "\u045F", "DZcy": "\u040F", "dzigrarr": "\u27FF", "eacute": "\xE9", "Eacute": "\xC9", "easter": "\u2A6E", "ecaron": "\u011B", "Ecaron": "\u011A", "ecir": "\u2256", "ecirc": "\xEA", "Ecirc": "\xCA", "ecolon": "\u2255", "ecy": "\u044D", "Ecy": "\u042D", "eDDot": "\u2A77", "edot": "\u0117", "eDot": "\u2251", "Edot": "\u0116", "ee": "\u2147", "efDot": "\u2252", "efr": "\u{1D522}", "Efr": "\u{1D508}", "eg": "\u2A9A", "egrave": "\xE8", "Egrave": "\xC8", "egs": "\u2A96", "egsdot": "\u2A98", "el": "\u2A99", "Element": "\u2208", "elinters": "\u23E7", "ell": "\u2113", "els": "\u2A95", "elsdot": "\u2A97", "emacr": "\u0113", "Emacr": "\u0112", "empty": "\u2205", "emptyset": "\u2205", "EmptySmallSquare": "\u25FB", "emptyv": "\u2205", "EmptyVerySmallSquare": "\u25AB", "emsp": "\u2003", "emsp13": "\u2004", "emsp14": "\u2005", "eng": "\u014B", "ENG": "\u014A", "ensp": "\u2002", "eogon": "\u0119", "Eogon": "\u0118", "eopf": "\u{1D556}", "Eopf": "\u{1D53C}", "epar": "\u22D5", "eparsl": "\u29E3", "eplus": "\u2A71", "epsi": "\u03B5", "epsilon": "\u03B5", "Epsilon": "\u0395", "epsiv": "\u03F5", "eqcirc": "\u2256", "eqcolon": "\u2255", "eqsim": "\u2242", "eqslantgtr": "\u2A96", "eqslantless": "\u2A95", "Equal": "\u2A75", "equals": "=", "EqualTilde": "\u2242", "equest": "\u225F", "Equilibrium": "\u21CC", "equiv": "\u2261", "equivDD": "\u2A78", "eqvparsl": "\u29E5", "erarr": "\u2971", "erDot": "\u2253", "escr": "\u212F", "Escr": "\u2130", "esdot": "\u2250", "esim": "\u2242", "Esim": "\u2A73", "eta": "\u03B7", "Eta": "\u0397", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "euro": "\u20AC", "excl": "!", "exist": "\u2203", "Exists": "\u2203", "expectation": "\u2130", "exponentiale": "\u2147", "ExponentialE": "\u2147", "fallingdotseq": "\u2252", "fcy": "\u0444", "Fcy": "\u0424", "female": "\u2640", "ffilig": "\uFB03", "fflig": "\uFB00", "ffllig": "\uFB04", "ffr": "\u{1D523}", "Ffr": "\u{1D509}", "filig": "\uFB01", "FilledSmallSquare": "\u25FC", "FilledVerySmallSquare": "\u25AA", "fjlig": "fj", "flat": "\u266D", "fllig": "\uFB02", "fltns": "\u25B1", "fnof": "\u0192", "fopf": "\u{1D557}", "Fopf": "\u{1D53D}", "forall": "\u2200", "ForAll": "\u2200", "fork": "\u22D4", "forkv": "\u2AD9", "Fouriertrf": "\u2131", "fpartint": "\u2A0D", "frac12": "\xBD", "frac13": "\u2153", "frac14": "\xBC", "frac15": "\u2155", "frac16": "\u2159", "frac18": "\u215B", "frac23": "\u2154", "frac25": "\u2156", "frac34": "\xBE", "frac35": "\u2157", "frac38": "\u215C", "frac45": "\u2158", "frac56": "\u215A", "frac58": "\u215D", "frac78": "\u215E", "frasl": "\u2044", "frown": "\u2322", "fscr": "\u{1D4BB}", "Fscr": "\u2131", "gacute": "\u01F5", "gamma": "\u03B3", "Gamma": "\u0393", "gammad": "\u03DD", "Gammad": "\u03DC", "gap": "\u2A86", "gbreve": "\u011F", "Gbreve": "\u011E", "Gcedil": "\u0122", "gcirc": "\u011D", "Gcirc": "\u011C", "gcy": "\u0433", "Gcy": "\u0413", "gdot": "\u0121", "Gdot": "\u0120", "ge": "\u2265", "gE": "\u2267", "gel": "\u22DB", "gEl": "\u2A8C", "geq": "\u2265", "geqq": "\u2267", "geqslant": "\u2A7E", "ges": "\u2A7E", "gescc": "\u2AA9", "gesdot": "\u2A80", "gesdoto": "\u2A82", "gesdotol": "\u2A84", "gesl": "\u22DB\uFE00", "gesles": "\u2A94", "gfr": "\u{1D524}", "Gfr": "\u{1D50A}", "gg": "\u226B", "Gg": "\u22D9", "ggg": "\u22D9", "gimel": "\u2137", "gjcy": "\u0453", "GJcy": "\u0403", "gl": "\u2277", "gla": "\u2AA5", "glE": "\u2A92", "glj": "\u2AA4", "gnap": "\u2A8A", "gnapprox": "\u2A8A", "gne": "\u2A88", "gnE": "\u2269", "gneq": "\u2A88", "gneqq": "\u2269", "gnsim": "\u22E7", "gopf": "\u{1D558}", "Gopf": "\u{1D53E}", "grave": "`", "GreaterEqual": "\u2265", "GreaterEqualLess": "\u22DB", "GreaterFullEqual": "\u2267", "GreaterGreater": "\u2AA2", "GreaterLess": "\u2277", "GreaterSlantEqual": "\u2A7E", "GreaterTilde": "\u2273", "gscr": "\u210A", "Gscr": "\u{1D4A2}", "gsim": "\u2273", "gsime": "\u2A8E", "gsiml": "\u2A90", "gt": ">", "Gt": "\u226B", "GT": ">", "gtcc": "\u2AA7", "gtcir": "\u2A7A", "gtdot": "\u22D7", "gtlPar": "\u2995", "gtquest": "\u2A7C", "gtrapprox": "\u2A86", "gtrarr": "\u2978", "gtrdot": "\u22D7", "gtreqless": "\u22DB", "gtreqqless": "\u2A8C", "gtrless": "\u2277", "gtrsim": "\u2273", "gvertneqq": "\u2269\uFE00", "gvnE": "\u2269\uFE00", "Hacek": "\u02C7", "hairsp": "\u200A", "half": "\xBD", "hamilt": "\u210B", "hardcy": "\u044A", "HARDcy": "\u042A", "harr": "\u2194", "hArr": "\u21D4", "harrcir": "\u2948", "harrw": "\u21AD", "Hat": "^", "hbar": "\u210F", "hcirc": "\u0125", "Hcirc": "\u0124", "hearts": "\u2665", "heartsuit": "\u2665", "hellip": "\u2026", "hercon": "\u22B9", "hfr": "\u{1D525}", "Hfr": "\u210C", "HilbertSpace": "\u210B", "hksearow": "\u2925", "hkswarow": "\u2926", "hoarr": "\u21FF", "homtht": "\u223B", "hookleftarrow": "\u21A9", "hookrightarrow": "\u21AA", "hopf": "\u{1D559}", "Hopf": "\u210D", "horbar": "\u2015", "HorizontalLine": "\u2500", "hscr": "\u{1D4BD}", "Hscr": "\u210B", "hslash": "\u210F", "hstrok": "\u0127", "Hstrok": "\u0126", "HumpDownHump": "\u224E", "HumpEqual": "\u224F", "hybull": "\u2043", "hyphen": "\u2010", "iacute": "\xED", "Iacute": "\xCD", "ic": "\u2063", "icirc": "\xEE", "Icirc": "\xCE", "icy": "\u0438", "Icy": "\u0418", "Idot": "\u0130", "iecy": "\u0435", "IEcy": "\u0415", "iexcl": "\xA1", "iff": "\u21D4", "ifr": "\u{1D526}", "Ifr": "\u2111", "igrave": "\xEC", "Igrave": "\xCC", "ii": "\u2148", "iiiint": "\u2A0C", "iiint": "\u222D", "iinfin": "\u29DC", "iiota": "\u2129", "ijlig": "\u0133", "IJlig": "\u0132", "Im": "\u2111", "imacr": "\u012B", "Imacr": "\u012A", "image": "\u2111", "ImaginaryI": "\u2148", "imagline": "\u2110", "imagpart": "\u2111", "imath": "\u0131", "imof": "\u22B7", "imped": "\u01B5", "Implies": "\u21D2", "in": "\u2208", "incare": "\u2105", "infin": "\u221E", "infintie": "\u29DD", "inodot": "\u0131", "int": "\u222B", "Int": "\u222C", "intcal": "\u22BA", "integers": "\u2124", "Integral": "\u222B", "intercal": "\u22BA", "Intersection": "\u22C2", "intlarhk": "\u2A17", "intprod": "\u2A3C", "InvisibleComma": "\u2063", "InvisibleTimes": "\u2062", "iocy": "\u0451", "IOcy": "\u0401", "iogon": "\u012F", "Iogon": "\u012E", "iopf": "\u{1D55A}", "Iopf": "\u{1D540}", "iota": "\u03B9", "Iota": "\u0399", "iprod": "\u2A3C", "iquest": "\xBF", "iscr": "\u{1D4BE}", "Iscr": "\u2110", "isin": "\u2208", "isindot": "\u22F5", "isinE": "\u22F9", "isins": "\u22F4", "isinsv": "\u22F3", "isinv": "\u2208", "it": "\u2062", "itilde": "\u0129", "Itilde": "\u0128", "iukcy": "\u0456", "Iukcy": "\u0406", "iuml": "\xEF", "Iuml": "\xCF", "jcirc": "\u0135", "Jcirc": "\u0134", "jcy": "\u0439", "Jcy": "\u0419", "jfr": "\u{1D527}", "Jfr": "\u{1D50D}", "jmath": "\u0237", "jopf": "\u{1D55B}", "Jopf": "\u{1D541}", "jscr": "\u{1D4BF}", "Jscr": "\u{1D4A5}", "jsercy": "\u0458", "Jsercy": "\u0408", "jukcy": "\u0454", "Jukcy": "\u0404", "kappa": "\u03BA", "Kappa": "\u039A", "kappav": "\u03F0", "kcedil": "\u0137", "Kcedil": "\u0136", "kcy": "\u043A", "Kcy": "\u041A", "kfr": "\u{1D528}", "Kfr": "\u{1D50E}", "kgreen": "\u0138", "khcy": "\u0445", "KHcy": "\u0425", "kjcy": "\u045C", "KJcy": "\u040C", "kopf": "\u{1D55C}", "Kopf": "\u{1D542}", "kscr": "\u{1D4C0}", "Kscr": "\u{1D4A6}", "lAarr": "\u21DA", "lacute": "\u013A", "Lacute": "\u0139", "laemptyv": "\u29B4", "lagran": "\u2112", "lambda": "\u03BB", "Lambda": "\u039B", "lang": "\u27E8", "Lang": "\u27EA", "langd": "\u2991", "langle": "\u27E8", "lap": "\u2A85", "Laplacetrf": "\u2112", "laquo": "\xAB", "larr": "\u2190", "lArr": "\u21D0", "Larr": "\u219E", "larrb": "\u21E4", "larrbfs": "\u291F", "larrfs": "\u291D", "larrhk": "\u21A9", "larrlp": "\u21AB", "larrpl": "\u2939", "larrsim": "\u2973", "larrtl": "\u21A2", "lat": "\u2AAB", "latail": "\u2919", "lAtail": "\u291B", "late": "\u2AAD", "lates": "\u2AAD\uFE00", "lbarr": "\u290C", "lBarr": "\u290E", "lbbrk": "\u2772", "lbrace": "{", "lbrack": "[", "lbrke": "\u298B", "lbrksld": "\u298F", "lbrkslu": "\u298D", "lcaron": "\u013E", "Lcaron": "\u013D", "lcedil": "\u013C", "Lcedil": "\u013B", "lceil": "\u2308", "lcub": "{", "lcy": "\u043B", "Lcy": "\u041B", "ldca": "\u2936", "ldquo": "\u201C", "ldquor": "\u201E", "ldrdhar": "\u2967", "ldrushar": "\u294B", "ldsh": "\u21B2", "le": "\u2264", "lE": "\u2266", "LeftAngleBracket": "\u27E8", "leftarrow": "\u2190", "Leftarrow": "\u21D0", "LeftArrow": "\u2190", "LeftArrowBar": "\u21E4", "LeftArrowRightArrow": "\u21C6", "leftarrowtail": "\u21A2", "LeftCeiling": "\u2308", "LeftDoubleBracket": "\u27E6", "LeftDownTeeVector": "\u2961", "LeftDownVector": "\u21C3", "LeftDownVectorBar": "\u2959", "LeftFloor": "\u230A", "leftharpoondown": "\u21BD", "leftharpoonup": "\u21BC", "leftleftarrows": "\u21C7", "leftrightarrow": "\u2194", "Leftrightarrow": "\u21D4", "LeftRightArrow": "\u2194", "leftrightarrows": "\u21C6", "leftrightharpoons": "\u21CB", "leftrightsquigarrow": "\u21AD", "LeftRightVector": "\u294E", "LeftTee": "\u22A3", "LeftTeeArrow": "\u21A4", "LeftTeeVector": "\u295A", "leftthreetimes": "\u22CB", "LeftTriangle": "\u22B2", "LeftTriangleBar": "\u29CF", "LeftTriangleEqual": "\u22B4", "LeftUpDownVector": "\u2951", "LeftUpTeeVector": "\u2960", "LeftUpVector": "\u21BF", "LeftUpVectorBar": "\u2958", "LeftVector": "\u21BC", "LeftVectorBar": "\u2952", "leg": "\u22DA", "lEg": "\u2A8B", "leq": "\u2264", "leqq": "\u2266", "leqslant": "\u2A7D", "les": "\u2A7D", "lescc": "\u2AA8", "lesdot": "\u2A7F", "lesdoto": "\u2A81", "lesdotor": "\u2A83", "lesg": "\u22DA\uFE00", "lesges": "\u2A93", "lessapprox": "\u2A85", "lessdot": "\u22D6", "lesseqgtr": "\u22DA", "lesseqqgtr": "\u2A8B", "LessEqualGreater": "\u22DA", "LessFullEqual": "\u2266", "LessGreater": "\u2276", "lessgtr": "\u2276", "LessLess": "\u2AA1", "lesssim": "\u2272", "LessSlantEqual": "\u2A7D", "LessTilde": "\u2272", "lfisht": "\u297C", "lfloor": "\u230A", "lfr": "\u{1D529}", "Lfr": "\u{1D50F}", "lg": "\u2276", "lgE": "\u2A91", "lHar": "\u2962", "lhard": "\u21BD", "lharu": "\u21BC", "lharul": "\u296A", "lhblk": "\u2584", "ljcy": "\u0459", "LJcy": "\u0409", "ll": "\u226A", "Ll": "\u22D8", "llarr": "\u21C7", "llcorner": "\u231E", "Lleftarrow": "\u21DA", "llhard": "\u296B", "lltri": "\u25FA", "lmidot": "\u0140", "Lmidot": "\u013F", "lmoust": "\u23B0", "lmoustache": "\u23B0", "lnap": "\u2A89", "lnapprox": "\u2A89", "lne": "\u2A87", "lnE": "\u2268", "lneq": "\u2A87", "lneqq": "\u2268", "lnsim": "\u22E6", "loang": "\u27EC", "loarr": "\u21FD", "lobrk": "\u27E6", "longleftarrow": "\u27F5", "Longleftarrow": "\u27F8", "LongLeftArrow": "\u27F5", "longleftrightarrow": "\u27F7", "Longleftrightarrow": "\u27FA", "LongLeftRightArrow": "\u27F7", "longmapsto": "\u27FC", "longrightarrow": "\u27F6", "Longrightarrow": "\u27F9", "LongRightArrow": "\u27F6", "looparrowleft": "\u21AB", "looparrowright": "\u21AC", "lopar": "\u2985", "lopf": "\u{1D55D}", "Lopf": "\u{1D543}", "loplus": "\u2A2D", "lotimes": "\u2A34", "lowast": "\u2217", "lowbar": "_", "LowerLeftArrow": "\u2199", "LowerRightArrow": "\u2198", "loz": "\u25CA", "lozenge": "\u25CA", "lozf": "\u29EB", "lpar": "(", "lparlt": "\u2993", "lrarr": "\u21C6", "lrcorner": "\u231F", "lrhar": "\u21CB", "lrhard": "\u296D", "lrm": "\u200E", "lrtri": "\u22BF", "lsaquo": "\u2039", "lscr": "\u{1D4C1}", "Lscr": "\u2112", "lsh": "\u21B0", "Lsh": "\u21B0", "lsim": "\u2272", "lsime": "\u2A8D", "lsimg": "\u2A8F", "lsqb": "[", "lsquo": "\u2018", "lsquor": "\u201A", "lstrok": "\u0142", "Lstrok": "\u0141", "lt": "<", "Lt": "\u226A", "LT": "<", "ltcc": "\u2AA6", "ltcir": "\u2A79", "ltdot": "\u22D6", "lthree": "\u22CB", "ltimes": "\u22C9", "ltlarr": "\u2976", "ltquest": "\u2A7B", "ltri": "\u25C3", "ltrie": "\u22B4", "ltrif": "\u25C2", "ltrPar": "\u2996", "lurdshar": "\u294A", "luruhar": "\u2966", "lvertneqq": "\u2268\uFE00", "lvnE": "\u2268\uFE00", "macr": "\xAF", "male": "\u2642", "malt": "\u2720", "maltese": "\u2720", "map": "\u21A6", "Map": "\u2905", "mapsto": "\u21A6", "mapstodown": "\u21A7", "mapstoleft": "\u21A4", "mapstoup": "\u21A5", "marker": "\u25AE", "mcomma": "\u2A29", "mcy": "\u043C", "Mcy": "\u041C", "mdash": "\u2014", "mDDot": "\u223A", "measuredangle": "\u2221", "MediumSpace": "\u205F", "Mellintrf": "\u2133", "mfr": "\u{1D52A}", "Mfr": "\u{1D510}", "mho": "\u2127", "micro": "\xB5", "mid": "\u2223", "midast": "*", "midcir": "\u2AF0", "middot": "\xB7", "minus": "\u2212", "minusb": "\u229F", "minusd": "\u2238", "minusdu": "\u2A2A", "MinusPlus": "\u2213", "mlcp": "\u2ADB", "mldr": "\u2026", "mnplus": "\u2213", "models": "\u22A7", "mopf": "\u{1D55E}", "Mopf": "\u{1D544}", "mp": "\u2213", "mscr": "\u{1D4C2}", "Mscr": "\u2133", "mstpos": "\u223E", "mu": "\u03BC", "Mu": "\u039C", "multimap": "\u22B8", "mumap": "\u22B8", "nabla": "\u2207", "nacute": "\u0144", "Nacute": "\u0143", "nang": "\u2220\u20D2", "nap": "\u2249", "napE": "\u2A70\u0338", "napid": "\u224B\u0338", "napos": "\u0149", "napprox": "\u2249", "natur": "\u266E", "natural": "\u266E", "naturals": "\u2115", "nbsp": "\xA0", "nbump": "\u224E\u0338", "nbumpe": "\u224F\u0338", "ncap": "\u2A43", "ncaron": "\u0148", "Ncaron": "\u0147", "ncedil": "\u0146", "Ncedil": "\u0145", "ncong": "\u2247", "ncongdot": "\u2A6D\u0338", "ncup": "\u2A42", "ncy": "\u043D", "Ncy": "\u041D", "ndash": "\u2013", "ne": "\u2260", "nearhk": "\u2924", "nearr": "\u2197", "neArr": "\u21D7", "nearrow": "\u2197", "nedot": "\u2250\u0338", "NegativeMediumSpace": "\u200B", "NegativeThickSpace": "\u200B", "NegativeThinSpace": "\u200B", "NegativeVeryThinSpace": "\u200B", "nequiv": "\u2262", "nesear": "\u2928", "nesim": "\u2242\u0338", "NestedGreaterGreater": "\u226B", "NestedLessLess": "\u226A", "NewLine": "\n", "nexist": "\u2204", "nexists": "\u2204", "nfr": "\u{1D52B}", "Nfr": "\u{1D511}", "nge": "\u2271", "ngE": "\u2267\u0338", "ngeq": "\u2271", "ngeqq": "\u2267\u0338", "ngeqslant": "\u2A7E\u0338", "nges": "\u2A7E\u0338", "nGg": "\u22D9\u0338", "ngsim": "\u2275", "ngt": "\u226F", "nGt": "\u226B\u20D2", "ngtr": "\u226F", "nGtv": "\u226B\u0338", "nharr": "\u21AE", "nhArr": "\u21CE", "nhpar": "\u2AF2", "ni": "\u220B", "nis": "\u22FC", "nisd": "\u22FA", "niv": "\u220B", "njcy": "\u045A", "NJcy": "\u040A", "nlarr": "\u219A", "nlArr": "\u21CD", "nldr": "\u2025", "nle": "\u2270", "nlE": "\u2266\u0338", "nleftarrow": "\u219A", "nLeftarrow": "\u21CD", "nleftrightarrow": "\u21AE", "nLeftrightarrow": "\u21CE", "nleq": "\u2270", "nleqq": "\u2266\u0338", "nleqslant": "\u2A7D\u0338", "nles": "\u2A7D\u0338", "nless": "\u226E", "nLl": "\u22D8\u0338", "nlsim": "\u2274", "nlt": "\u226E", "nLt": "\u226A\u20D2", "nltri": "\u22EA", "nltrie": "\u22EC", "nLtv": "\u226A\u0338", "nmid": "\u2224", "NoBreak": "\u2060", "NonBreakingSpace": "\xA0", "nopf": "\u{1D55F}", "Nopf": "\u2115", "not": "\xAC", "Not": "\u2AEC", "NotCongruent": "\u2262", "NotCupCap": "\u226D", "NotDoubleVerticalBar": "\u2226", "NotElement": "\u2209", "NotEqual": "\u2260", "NotEqualTilde": "\u2242\u0338", "NotExists": "\u2204", "NotGreater": "\u226F", "NotGreaterEqual": "\u2271", "NotGreaterFullEqual": "\u2267\u0338", "NotGreaterGreater": "\u226B\u0338", "NotGreaterLess": "\u2279", "NotGreaterSlantEqual": "\u2A7E\u0338", "NotGreaterTilde": "\u2275", "NotHumpDownHump": "\u224E\u0338", "NotHumpEqual": "\u224F\u0338", "notin": "\u2209", "notindot": "\u22F5\u0338", "notinE": "\u22F9\u0338", "notinva": "\u2209", "notinvb": "\u22F7", "notinvc": "\u22F6", "NotLeftTriangle": "\u22EA", "NotLeftTriangleBar": "\u29CF\u0338", "NotLeftTriangleEqual": "\u22EC", "NotLess": "\u226E", "NotLessEqual": "\u2270", "NotLessGreater": "\u2278", "NotLessLess": "\u226A\u0338", "NotLessSlantEqual": "\u2A7D\u0338", "NotLessTilde": "\u2274", "NotNestedGreaterGreater": "\u2AA2\u0338", "NotNestedLessLess": "\u2AA1\u0338", "notni": "\u220C", "notniva": "\u220C", "notnivb": "\u22FE", "notnivc": "\u22FD", "NotPrecedes": "\u2280", "NotPrecedesEqual": "\u2AAF\u0338", "NotPrecedesSlantEqual": "\u22E0", "NotReverseElement": "\u220C", "NotRightTriangle": "\u22EB", "NotRightTriangleBar": "\u29D0\u0338", "NotRightTriangleEqual": "\u22ED", "NotSquareSubset": "\u228F\u0338", "NotSquareSubsetEqual": "\u22E2", "NotSquareSuperset": "\u2290\u0338", "NotSquareSupersetEqual": "\u22E3", "NotSubset": "\u2282\u20D2", "NotSubsetEqual": "\u2288", "NotSucceeds": "\u2281", "NotSucceedsEqual": "\u2AB0\u0338", "NotSucceedsSlantEqual": "\u22E1", "NotSucceedsTilde": "\u227F\u0338", "NotSuperset": "\u2283\u20D2", "NotSupersetEqual": "\u2289", "NotTilde": "\u2241", "NotTildeEqual": "\u2244", "NotTildeFullEqual": "\u2247", "NotTildeTilde": "\u2249", "NotVerticalBar": "\u2224", "npar": "\u2226", "nparallel": "\u2226", "nparsl": "\u2AFD\u20E5", "npart": "\u2202\u0338", "npolint": "\u2A14", "npr": "\u2280", "nprcue": "\u22E0", "npre": "\u2AAF\u0338", "nprec": "\u2280", "npreceq": "\u2AAF\u0338", "nrarr": "\u219B", "nrArr": "\u21CF", "nrarrc": "\u2933\u0338", "nrarrw": "\u219D\u0338", "nrightarrow": "\u219B", "nRightarrow": "\u21CF", "nrtri": "\u22EB", "nrtrie": "\u22ED", "nsc": "\u2281", "nsccue": "\u22E1", "nsce": "\u2AB0\u0338", "nscr": "\u{1D4C3}", "Nscr": "\u{1D4A9}", "nshortmid": "\u2224", "nshortparallel": "\u2226", "nsim": "\u2241", "nsime": "\u2244", "nsimeq": "\u2244", "nsmid": "\u2224", "nspar": "\u2226", "nsqsube": "\u22E2", "nsqsupe": "\u22E3", "nsub": "\u2284", "nsube": "\u2288", "nsubE": "\u2AC5\u0338", "nsubset": "\u2282\u20D2", "nsubseteq": "\u2288", "nsubseteqq": "\u2AC5\u0338", "nsucc": "\u2281", "nsucceq": "\u2AB0\u0338", "nsup": "\u2285", "nsupe": "\u2289", "nsupE": "\u2AC6\u0338", "nsupset": "\u2283\u20D2", "nsupseteq": "\u2289", "nsupseteqq": "\u2AC6\u0338", "ntgl": "\u2279", "ntilde": "\xF1", "Ntilde": "\xD1", "ntlg": "\u2278", "ntriangleleft": "\u22EA", "ntrianglelefteq": "\u22EC", "ntriangleright": "\u22EB", "ntrianglerighteq": "\u22ED", "nu": "\u03BD", "Nu": "\u039D", "num": "#", "numero": "\u2116", "numsp": "\u2007", "nvap": "\u224D\u20D2", "nvdash": "\u22AC", "nvDash": "\u22AD", "nVdash": "\u22AE", "nVDash": "\u22AF", "nvge": "\u2265\u20D2", "nvgt": ">\u20D2", "nvHarr": "\u2904", "nvinfin": "\u29DE", "nvlArr": "\u2902", "nvle": "\u2264\u20D2", "nvlt": "<\u20D2", "nvltrie": "\u22B4\u20D2", "nvrArr": "\u2903", "nvrtrie": "\u22B5\u20D2", "nvsim": "\u223C\u20D2", "nwarhk": "\u2923", "nwarr": "\u2196", "nwArr": "\u21D6", "nwarrow": "\u2196", "nwnear": "\u2927", "oacute": "\xF3", "Oacute": "\xD3", "oast": "\u229B", "ocir": "\u229A", "ocirc": "\xF4", "Ocirc": "\xD4", "ocy": "\u043E", "Ocy": "\u041E", "odash": "\u229D", "odblac": "\u0151", "Odblac": "\u0150", "odiv": "\u2A38", "odot": "\u2299", "odsold": "\u29BC", "oelig": "\u0153", "OElig": "\u0152", "ofcir": "\u29BF", "ofr": "\u{1D52C}", "Ofr": "\u{1D512}", "ogon": "\u02DB", "ograve": "\xF2", "Ograve": "\xD2", "ogt": "\u29C1", "ohbar": "\u29B5", "ohm": "\u03A9", "oint": "\u222E", "olarr": "\u21BA", "olcir": "\u29BE", "olcross": "\u29BB", "oline": "\u203E", "olt": "\u29C0", "omacr": "\u014D", "Omacr": "\u014C", "omega": "\u03C9", "Omega": "\u03A9", "omicron": "\u03BF", "Omicron": "\u039F", "omid": "\u29B6", "ominus": "\u2296", "oopf": "\u{1D560}", "Oopf": "\u{1D546}", "opar": "\u29B7", "OpenCurlyDoubleQuote": "\u201C", "OpenCurlyQuote": "\u2018", "operp": "\u29B9", "oplus": "\u2295", "or": "\u2228", "Or": "\u2A54", "orarr": "\u21BB", "ord": "\u2A5D", "order": "\u2134", "orderof": "\u2134", "ordf": "\xAA", "ordm": "\xBA", "origof": "\u22B6", "oror": "\u2A56", "orslope": "\u2A57", "orv": "\u2A5B", "oS": "\u24C8", "oscr": "\u2134", "Oscr": "\u{1D4AA}", "oslash": "\xF8", "Oslash": "\xD8", "osol": "\u2298", "otilde": "\xF5", "Otilde": "\xD5", "otimes": "\u2297", "Otimes": "\u2A37", "otimesas": "\u2A36", "ouml": "\xF6", "Ouml": "\xD6", "ovbar": "\u233D", "OverBar": "\u203E", "OverBrace": "\u23DE", "OverBracket": "\u23B4", "OverParenthesis": "\u23DC", "par": "\u2225", "para": "\xB6", "parallel": "\u2225", "parsim": "\u2AF3", "parsl": "\u2AFD", "part": "\u2202", "PartialD": "\u2202", "pcy": "\u043F", "Pcy": "\u041F", "percnt": "%", "period": ".", "permil": "\u2030", "perp": "\u22A5", "pertenk": "\u2031", "pfr": "\u{1D52D}", "Pfr": "\u{1D513}", "phi": "\u03C6", "Phi": "\u03A6", "phiv": "\u03D5", "phmmat": "\u2133", "phone": "\u260E", "pi": "\u03C0", "Pi": "\u03A0", "pitchfork": "\u22D4", "piv": "\u03D6", "planck": "\u210F", "planckh": "\u210E", "plankv": "\u210F", "plus": "+", "plusacir": "\u2A23", "plusb": "\u229E", "pluscir": "\u2A22", "plusdo": "\u2214", "plusdu": "\u2A25", "pluse": "\u2A72", "PlusMinus": "\xB1", "plusmn": "\xB1", "plussim": "\u2A26", "plustwo": "\u2A27", "pm": "\xB1", "Poincareplane": "\u210C", "pointint": "\u2A15", "popf": "\u{1D561}", "Popf": "\u2119", "pound": "\xA3", "pr": "\u227A", "Pr": "\u2ABB", "prap": "\u2AB7", "prcue": "\u227C", "pre": "\u2AAF", "prE": "\u2AB3", "prec": "\u227A", "precapprox": "\u2AB7", "preccurlyeq": "\u227C", "Precedes": "\u227A", "PrecedesEqual": "\u2AAF", "PrecedesSlantEqual": "\u227C", "PrecedesTilde": "\u227E", "preceq": "\u2AAF", "precnapprox": "\u2AB9", "precneqq": "\u2AB5", "precnsim": "\u22E8", "precsim": "\u227E", "prime": "\u2032", "Prime": "\u2033", "primes": "\u2119", "prnap": "\u2AB9", "prnE": "\u2AB5", "prnsim": "\u22E8", "prod": "\u220F", "Product": "\u220F", "profalar": "\u232E", "profline": "\u2312", "profsurf": "\u2313", "prop": "\u221D", "Proportion": "\u2237", "Proportional": "\u221D", "propto": "\u221D", "prsim": "\u227E", "prurel": "\u22B0", "pscr": "\u{1D4C5}", "Pscr": "\u{1D4AB}", "psi": "\u03C8", "Psi": "\u03A8", "puncsp": "\u2008", "qfr": "\u{1D52E}", "Qfr": "\u{1D514}", "qint": "\u2A0C", "qopf": "\u{1D562}", "Qopf": "\u211A", "qprime": "\u2057", "qscr": "\u{1D4C6}", "Qscr": "\u{1D4AC}", "quaternions": "\u210D", "quatint": "\u2A16", "quest": "?", "questeq": "\u225F", "quot": '"', "QUOT": '"', "rAarr": "\u21DB", "race": "\u223D\u0331", "racute": "\u0155", "Racute": "\u0154", "radic": "\u221A", "raemptyv": "\u29B3", "rang": "\u27E9", "Rang": "\u27EB", "rangd": "\u2992", "range": "\u29A5", "rangle": "\u27E9", "raquo": "\xBB", "rarr": "\u2192", "rArr": "\u21D2", "Rarr": "\u21A0", "rarrap": "\u2975", "rarrb": "\u21E5", "rarrbfs": "\u2920", "rarrc": "\u2933", "rarrfs": "\u291E", "rarrhk": "\u21AA", "rarrlp": "\u21AC", "rarrpl": "\u2945", "rarrsim": "\u2974", "rarrtl": "\u21A3", "Rarrtl": "\u2916", "rarrw": "\u219D", "ratail": "\u291A", "rAtail": "\u291C", "ratio": "\u2236", "rationals": "\u211A", "rbarr": "\u290D", "rBarr": "\u290F", "RBarr": "\u2910", "rbbrk": "\u2773", "rbrace": "}", "rbrack": "]", "rbrke": "\u298C", "rbrksld": "\u298E", "rbrkslu": "\u2990", "rcaron": "\u0159", "Rcaron": "\u0158", "rcedil": "\u0157", "Rcedil": "\u0156", "rceil": "\u2309", "rcub": "}", "rcy": "\u0440", "Rcy": "\u0420", "rdca": "\u2937", "rdldhar": "\u2969", "rdquo": "\u201D", "rdquor": "\u201D", "rdsh": "\u21B3", "Re": "\u211C", "real": "\u211C", "realine": "\u211B", "realpart": "\u211C", "reals": "\u211D", "rect": "\u25AD", "reg": "\xAE", "REG": "\xAE", "ReverseElement": "\u220B", "ReverseEquilibrium": "\u21CB", "ReverseUpEquilibrium": "\u296F", "rfisht": "\u297D", "rfloor": "\u230B", "rfr": "\u{1D52F}", "Rfr": "\u211C", "rHar": "\u2964", "rhard": "\u21C1", "rharu": "\u21C0", "rharul": "\u296C", "rho": "\u03C1", "Rho": "\u03A1", "rhov": "\u03F1", "RightAngleBracket": "\u27E9", "rightarrow": "\u2192", "Rightarrow": "\u21D2", "RightArrow": "\u2192", "RightArrowBar": "\u21E5", "RightArrowLeftArrow": "\u21C4", "rightarrowtail": "\u21A3", "RightCeiling": "\u2309", "RightDoubleBracket": "\u27E7", "RightDownTeeVector": "\u295D", "RightDownVector": "\u21C2", "RightDownVectorBar": "\u2955", "RightFloor": "\u230B", "rightharpoondown": "\u21C1", "rightharpoonup": "\u21C0", "rightleftarrows": "\u21C4", "rightleftharpoons": "\u21CC", "rightrightarrows": "\u21C9", "rightsquigarrow": "\u219D", "RightTee": "\u22A2", "RightTeeArrow": "\u21A6", "RightTeeVector": "\u295B", "rightthreetimes": "\u22CC", "RightTriangle": "\u22B3", "RightTriangleBar": "\u29D0", "RightTriangleEqual": "\u22B5", "RightUpDownVector": "\u294F", "RightUpTeeVector": "\u295C", "RightUpVector": "\u21BE", "RightUpVectorBar": "\u2954", "RightVector": "\u21C0", "RightVectorBar": "\u2953", "ring": "\u02DA", "risingdotseq": "\u2253", "rlarr": "\u21C4", "rlhar": "\u21CC", "rlm": "\u200F", "rmoust": "\u23B1", "rmoustache": "\u23B1", "rnmid": "\u2AEE", "roang": "\u27ED", "roarr": "\u21FE", "robrk": "\u27E7", "ropar": "\u2986", "ropf": "\u{1D563}", "Ropf": "\u211D", "roplus": "\u2A2E", "rotimes": "\u2A35", "RoundImplies": "\u2970", "rpar": ")", "rpargt": "\u2994", "rppolint": "\u2A12", "rrarr": "\u21C9", "Rrightarrow": "\u21DB", "rsaquo": "\u203A", "rscr": "\u{1D4C7}", "Rscr": "\u211B", "rsh": "\u21B1", "Rsh": "\u21B1", "rsqb": "]", "rsquo": "\u2019", "rsquor": "\u2019", "rthree": "\u22CC", "rtimes": "\u22CA", "rtri": "\u25B9", "rtrie": "\u22B5", "rtrif": "\u25B8", "rtriltri": "\u29CE", "RuleDelayed": "\u29F4", "ruluhar": "\u2968", "rx": "\u211E", "sacute": "\u015B", "Sacute": "\u015A", "sbquo": "\u201A", "sc": "\u227B", "Sc": "\u2ABC", "scap": "\u2AB8", "scaron": "\u0161", "Scaron": "\u0160", "sccue": "\u227D", "sce": "\u2AB0", "scE": "\u2AB4", "scedil": "\u015F", "Scedil": "\u015E", "scirc": "\u015D", "Scirc": "\u015C", "scnap": "\u2ABA", "scnE": "\u2AB6", "scnsim": "\u22E9", "scpolint": "\u2A13", "scsim": "\u227F", "scy": "\u0441", "Scy": "\u0421", "sdot": "\u22C5", "sdotb": "\u22A1", "sdote": "\u2A66", "searhk": "\u2925", "searr": "\u2198", "seArr": "\u21D8", "searrow": "\u2198", "sect": "\xA7", "semi": ";", "seswar": "\u2929", "setminus": "\u2216", "setmn": "\u2216", "sext": "\u2736", "sfr": "\u{1D530}", "Sfr": "\u{1D516}", "sfrown": "\u2322", "sharp": "\u266F", "shchcy": "\u0449", "SHCHcy": "\u0429", "shcy": "\u0448", "SHcy": "\u0428", "ShortDownArrow": "\u2193", "ShortLeftArrow": "\u2190", "shortmid": "\u2223", "shortparallel": "\u2225", "ShortRightArrow": "\u2192", "ShortUpArrow": "\u2191", "shy": "\xAD", "sigma": "\u03C3", "Sigma": "\u03A3", "sigmaf": "\u03C2", "sigmav": "\u03C2", "sim": "\u223C", "simdot": "\u2A6A", "sime": "\u2243", "simeq": "\u2243", "simg": "\u2A9E", "simgE": "\u2AA0", "siml": "\u2A9D", "simlE": "\u2A9F", "simne": "\u2246", "simplus": "\u2A24", "simrarr": "\u2972", "slarr": "\u2190", "SmallCircle": "\u2218", "smallsetminus": "\u2216", "smashp": "\u2A33", "smeparsl": "\u29E4", "smid": "\u2223", "smile": "\u2323", "smt": "\u2AAA", "smte": "\u2AAC", "smtes": "\u2AAC\uFE00", "softcy": "\u044C", "SOFTcy": "\u042C", "sol": "/", "solb": "\u29C4", "solbar": "\u233F", "sopf": "\u{1D564}", "Sopf": "\u{1D54A}", "spades": "\u2660", "spadesuit": "\u2660", "spar": "\u2225", "sqcap": "\u2293", "sqcaps": "\u2293\uFE00", "sqcup": "\u2294", "sqcups": "\u2294\uFE00", "Sqrt": "\u221A", "sqsub": "\u228F", "sqsube": "\u2291", "sqsubset": "\u228F", "sqsubseteq": "\u2291", "sqsup": "\u2290", "sqsupe": "\u2292", "sqsupset": "\u2290", "sqsupseteq": "\u2292", "squ": "\u25A1", "square": "\u25A1", "Square": "\u25A1", "SquareIntersection": "\u2293", "SquareSubset": "\u228F", "SquareSubsetEqual": "\u2291", "SquareSuperset": "\u2290", "SquareSupersetEqual": "\u2292", "SquareUnion": "\u2294", "squarf": "\u25AA", "squf": "\u25AA", "srarr": "\u2192", "sscr": "\u{1D4C8}", "Sscr": "\u{1D4AE}", "ssetmn": "\u2216", "ssmile": "\u2323", "sstarf": "\u22C6", "star": "\u2606", "Star": "\u22C6", "starf": "\u2605", "straightepsilon": "\u03F5", "straightphi": "\u03D5", "strns": "\xAF", "sub": "\u2282", "Sub": "\u22D0", "subdot": "\u2ABD", "sube": "\u2286", "subE": "\u2AC5", "subedot": "\u2AC3", "submult": "\u2AC1", "subne": "\u228A", "subnE": "\u2ACB", "subplus": "\u2ABF", "subrarr": "\u2979", "subset": "\u2282", "Subset": "\u22D0", "subseteq": "\u2286", "subseteqq": "\u2AC5", "SubsetEqual": "\u2286", "subsetneq": "\u228A", "subsetneqq": "\u2ACB", "subsim": "\u2AC7", "subsub": "\u2AD5", "subsup": "\u2AD3", "succ": "\u227B", "succapprox": "\u2AB8", "succcurlyeq": "\u227D", "Succeeds": "\u227B", "SucceedsEqual": "\u2AB0", "SucceedsSlantEqual": "\u227D", "SucceedsTilde": "\u227F", "succeq": "\u2AB0", "succnapprox": "\u2ABA", "succneqq": "\u2AB6", "succnsim": "\u22E9", "succsim": "\u227F", "SuchThat": "\u220B", "sum": "\u2211", "Sum": "\u2211", "sung": "\u266A", "sup": "\u2283", "Sup": "\u22D1", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "supdot": "\u2ABE", "supdsub": "\u2AD8", "supe": "\u2287", "supE": "\u2AC6", "supedot": "\u2AC4", "Superset": "\u2283", "SupersetEqual": "\u2287", "suphsol": "\u27C9", "suphsub": "\u2AD7", "suplarr": "\u297B", "supmult": "\u2AC2", "supne": "\u228B", "supnE": "\u2ACC", "supplus": "\u2AC0", "supset": "\u2283", "Supset": "\u22D1", "supseteq": "\u2287", "supseteqq": "\u2AC6", "supsetneq": "\u228B", "supsetneqq": "\u2ACC", "supsim": "\u2AC8", "supsub": "\u2AD4", "supsup": "\u2AD6", "swarhk": "\u2926", "swarr": "\u2199", "swArr": "\u21D9", "swarrow": "\u2199", "swnwar": "\u292A", "szlig": "\xDF", "Tab": "	", "target": "\u2316", "tau": "\u03C4", "Tau": "\u03A4", "tbrk": "\u23B4", "tcaron": "\u0165", "Tcaron": "\u0164", "tcedil": "\u0163", "Tcedil": "\u0162", "tcy": "\u0442", "Tcy": "\u0422", "tdot": "\u20DB", "telrec": "\u2315", "tfr": "\u{1D531}", "Tfr": "\u{1D517}", "there4": "\u2234", "therefore": "\u2234", "Therefore": "\u2234", "theta": "\u03B8", "Theta": "\u0398", "thetasym": "\u03D1", "thetav": "\u03D1", "thickapprox": "\u2248", "thicksim": "\u223C", "ThickSpace": "\u205F\u200A", "thinsp": "\u2009", "ThinSpace": "\u2009", "thkap": "\u2248", "thksim": "\u223C", "thorn": "\xFE", "THORN": "\xDE", "tilde": "\u02DC", "Tilde": "\u223C", "TildeEqual": "\u2243", "TildeFullEqual": "\u2245", "TildeTilde": "\u2248", "times": "\xD7", "timesb": "\u22A0", "timesbar": "\u2A31", "timesd": "\u2A30", "tint": "\u222D", "toea": "\u2928", "top": "\u22A4", "topbot": "\u2336", "topcir": "\u2AF1", "topf": "\u{1D565}", "Topf": "\u{1D54B}", "topfork": "\u2ADA", "tosa": "\u2929", "tprime": "\u2034", "trade": "\u2122", "TRADE": "\u2122", "triangle": "\u25B5", "triangledown": "\u25BF", "triangleleft": "\u25C3", "trianglelefteq": "\u22B4", "triangleq": "\u225C", "triangleright": "\u25B9", "trianglerighteq": "\u22B5", "tridot": "\u25EC", "trie": "\u225C", "triminus": "\u2A3A", "TripleDot": "\u20DB", "triplus": "\u2A39", "trisb": "\u29CD", "tritime": "\u2A3B", "trpezium": "\u23E2", "tscr": "\u{1D4C9}", "Tscr": "\u{1D4AF}", "tscy": "\u0446", "TScy": "\u0426", "tshcy": "\u045B", "TSHcy": "\u040B", "tstrok": "\u0167", "Tstrok": "\u0166", "twixt": "\u226C", "twoheadleftarrow": "\u219E", "twoheadrightarrow": "\u21A0", "uacute": "\xFA", "Uacute": "\xDA", "uarr": "\u2191", "uArr": "\u21D1", "Uarr": "\u219F", "Uarrocir": "\u2949", "ubrcy": "\u045E", "Ubrcy": "\u040E", "ubreve": "\u016D", "Ubreve": "\u016C", "ucirc": "\xFB", "Ucirc": "\xDB", "ucy": "\u0443", "Ucy": "\u0423", "udarr": "\u21C5", "udblac": "\u0171", "Udblac": "\u0170", "udhar": "\u296E", "ufisht": "\u297E", "ufr": "\u{1D532}", "Ufr": "\u{1D518}", "ugrave": "\xF9", "Ugrave": "\xD9", "uHar": "\u2963", "uharl": "\u21BF", "uharr": "\u21BE", "uhblk": "\u2580", "ulcorn": "\u231C", "ulcorner": "\u231C", "ulcrop": "\u230F", "ultri": "\u25F8", "umacr": "\u016B", "Umacr": "\u016A", "uml": "\xA8", "UnderBar": "_", "UnderBrace": "\u23DF", "UnderBracket": "\u23B5", "UnderParenthesis": "\u23DD", "Union": "\u22C3", "UnionPlus": "\u228E", "uogon": "\u0173", "Uogon": "\u0172", "uopf": "\u{1D566}", "Uopf": "\u{1D54C}", "uparrow": "\u2191", "Uparrow": "\u21D1", "UpArrow": "\u2191", "UpArrowBar": "\u2912", "UpArrowDownArrow": "\u21C5", "updownarrow": "\u2195", "Updownarrow": "\u21D5", "UpDownArrow": "\u2195", "UpEquilibrium": "\u296E", "upharpoonleft": "\u21BF", "upharpoonright": "\u21BE", "uplus": "\u228E", "UpperLeftArrow": "\u2196", "UpperRightArrow": "\u2197", "upsi": "\u03C5", "Upsi": "\u03D2", "upsih": "\u03D2", "upsilon": "\u03C5", "Upsilon": "\u03A5", "UpTee": "\u22A5", "UpTeeArrow": "\u21A5", "upuparrows": "\u21C8", "urcorn": "\u231D", "urcorner": "\u231D", "urcrop": "\u230E", "uring": "\u016F", "Uring": "\u016E", "urtri": "\u25F9", "uscr": "\u{1D4CA}", "Uscr": "\u{1D4B0}", "utdot": "\u22F0", "utilde": "\u0169", "Utilde": "\u0168", "utri": "\u25B5", "utrif": "\u25B4", "uuarr": "\u21C8", "uuml": "\xFC", "Uuml": "\xDC", "uwangle": "\u29A7", "vangrt": "\u299C", "varepsilon": "\u03F5", "varkappa": "\u03F0", "varnothing": "\u2205", "varphi": "\u03D5", "varpi": "\u03D6", "varpropto": "\u221D", "varr": "\u2195", "vArr": "\u21D5", "varrho": "\u03F1", "varsigma": "\u03C2", "varsubsetneq": "\u228A\uFE00", "varsubsetneqq": "\u2ACB\uFE00", "varsupsetneq": "\u228B\uFE00", "varsupsetneqq": "\u2ACC\uFE00", "vartheta": "\u03D1", "vartriangleleft": "\u22B2", "vartriangleright": "\u22B3", "vBar": "\u2AE8", "Vbar": "\u2AEB", "vBarv": "\u2AE9", "vcy": "\u0432", "Vcy": "\u0412", "vdash": "\u22A2", "vDash": "\u22A8", "Vdash": "\u22A9", "VDash": "\u22AB", "Vdashl": "\u2AE6", "vee": "\u2228", "Vee": "\u22C1", "veebar": "\u22BB", "veeeq": "\u225A", "vellip": "\u22EE", "verbar": "|", "Verbar": "\u2016", "vert": "|", "Vert": "\u2016", "VerticalBar": "\u2223", "VerticalLine": "|", "VerticalSeparator": "\u2758", "VerticalTilde": "\u2240", "VeryThinSpace": "\u200A", "vfr": "\u{1D533}", "Vfr": "\u{1D519}", "vltri": "\u22B2", "vnsub": "\u2282\u20D2", "vnsup": "\u2283\u20D2", "vopf": "\u{1D567}", "Vopf": "\u{1D54D}", "vprop": "\u221D", "vrtri": "\u22B3", "vscr": "\u{1D4CB}", "Vscr": "\u{1D4B1}", "vsubne": "\u228A\uFE00", "vsubnE": "\u2ACB\uFE00", "vsupne": "\u228B\uFE00", "vsupnE": "\u2ACC\uFE00", "Vvdash": "\u22AA", "vzigzag": "\u299A", "wcirc": "\u0175", "Wcirc": "\u0174", "wedbar": "\u2A5F", "wedge": "\u2227", "Wedge": "\u22C0", "wedgeq": "\u2259", "weierp": "\u2118", "wfr": "\u{1D534}", "Wfr": "\u{1D51A}", "wopf": "\u{1D568}", "Wopf": "\u{1D54E}", "wp": "\u2118", "wr": "\u2240", "wreath": "\u2240", "wscr": "\u{1D4CC}", "Wscr": "\u{1D4B2}", "xcap": "\u22C2", "xcirc": "\u25EF", "xcup": "\u22C3", "xdtri": "\u25BD", "xfr": "\u{1D535}", "Xfr": "\u{1D51B}", "xharr": "\u27F7", "xhArr": "\u27FA", "xi": "\u03BE", "Xi": "\u039E", "xlarr": "\u27F5", "xlArr": "\u27F8", "xmap": "\u27FC", "xnis": "\u22FB", "xodot": "\u2A00", "xopf": "\u{1D569}", "Xopf": "\u{1D54F}", "xoplus": "\u2A01", "xotime": "\u2A02", "xrarr": "\u27F6", "xrArr": "\u27F9", "xscr": "\u{1D4CD}", "Xscr": "\u{1D4B3}", "xsqcup": "\u2A06", "xuplus": "\u2A04", "xutri": "\u25B3", "xvee": "\u22C1", "xwedge": "\u22C0", "yacute": "\xFD", "Yacute": "\xDD", "yacy": "\u044F", "YAcy": "\u042F", "ycirc": "\u0177", "Ycirc": "\u0176", "ycy": "\u044B", "Ycy": "\u042B", "yen": "\xA5", "yfr": "\u{1D536}", "Yfr": "\u{1D51C}", "yicy": "\u0457", "YIcy": "\u0407", "yopf": "\u{1D56A}", "Yopf": "\u{1D550}", "yscr": "\u{1D4CE}", "Yscr": "\u{1D4B4}", "yucy": "\u044E", "YUcy": "\u042E", "yuml": "\xFF", "Yuml": "\u0178", "zacute": "\u017A", "Zacute": "\u0179", "zcaron": "\u017E", "Zcaron": "\u017D", "zcy": "\u0437", "Zcy": "\u0417", "zdot": "\u017C", "Zdot": "\u017B", "zeetrf": "\u2128", "ZeroWidthSpace": "\u200B", "zeta": "\u03B6", "Zeta": "\u0396", "zfr": "\u{1D537}", "Zfr": "\u2128", "zhcy": "\u0436", "ZHcy": "\u0416", "zigrarr": "\u21DD", "zopf": "\u{1D56B}", "Zopf": "\u2124", "zscr": "\u{1D4CF}", "Zscr": "\u{1D4B5}", "zwj": "\u200D", "zwnj": "\u200C" };
        var decodeMapLegacy = { "aacute": "\xE1", "Aacute": "\xC1", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "aelig": "\xE6", "AElig": "\xC6", "agrave": "\xE0", "Agrave": "\xC0", "amp": "&", "AMP": "&", "aring": "\xE5", "Aring": "\xC5", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "brvbar": "\xA6", "ccedil": "\xE7", "Ccedil": "\xC7", "cedil": "\xB8", "cent": "\xA2", "copy": "\xA9", "COPY": "\xA9", "curren": "\xA4", "deg": "\xB0", "divide": "\xF7", "eacute": "\xE9", "Eacute": "\xC9", "ecirc": "\xEA", "Ecirc": "\xCA", "egrave": "\xE8", "Egrave": "\xC8", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "frac12": "\xBD", "frac14": "\xBC", "frac34": "\xBE", "gt": ">", "GT": ">", "iacute": "\xED", "Iacute": "\xCD", "icirc": "\xEE", "Icirc": "\xCE", "iexcl": "\xA1", "igrave": "\xEC", "Igrave": "\xCC", "iquest": "\xBF", "iuml": "\xEF", "Iuml": "\xCF", "laquo": "\xAB", "lt": "<", "LT": "<", "macr": "\xAF", "micro": "\xB5", "middot": "\xB7", "nbsp": "\xA0", "not": "\xAC", "ntilde": "\xF1", "Ntilde": "\xD1", "oacute": "\xF3", "Oacute": "\xD3", "ocirc": "\xF4", "Ocirc": "\xD4", "ograve": "\xF2", "Ograve": "\xD2", "ordf": "\xAA", "ordm": "\xBA", "oslash": "\xF8", "Oslash": "\xD8", "otilde": "\xF5", "Otilde": "\xD5", "ouml": "\xF6", "Ouml": "\xD6", "para": "\xB6", "plusmn": "\xB1", "pound": "\xA3", "quot": '"', "QUOT": '"', "raquo": "\xBB", "reg": "\xAE", "REG": "\xAE", "sect": "\xA7", "shy": "\xAD", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "szlig": "\xDF", "thorn": "\xFE", "THORN": "\xDE", "times": "\xD7", "uacute": "\xFA", "Uacute": "\xDA", "ucirc": "\xFB", "Ucirc": "\xDB", "ugrave": "\xF9", "Ugrave": "\xD9", "uml": "\xA8", "uuml": "\xFC", "Uuml": "\xDC", "yacute": "\xFD", "Yacute": "\xDD", "yen": "\xA5", "yuml": "\xFF" };
        var decodeMapNumeric = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
        var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65e3, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
        var stringFromCharCode = String.fromCharCode;
        var object = {};
        var hasOwnProperty = object.hasOwnProperty;
        var has = function(object2, propertyName) {
          return hasOwnProperty.call(object2, propertyName);
        };
        var contains = function(array, value) {
          var index = -1;
          var length = array.length;
          while (++index < length) {
            if (array[index] == value) {
              return true;
            }
          }
          return false;
        };
        var merge = function(options, defaults2) {
          if (!options) {
            return defaults2;
          }
          var result = {};
          var key2;
          for (key2 in defaults2) {
            result[key2] = has(options, key2) ? options[key2] : defaults2[key2];
          }
          return result;
        };
        var codePointToSymbol = function(codePoint, strict) {
          var output = "";
          if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
            if (strict) {
              parseError("character reference outside the permissible Unicode range");
            }
            return "\uFFFD";
          }
          if (has(decodeMapNumeric, codePoint)) {
            if (strict) {
              parseError("disallowed character reference");
            }
            return decodeMapNumeric[codePoint];
          }
          if (strict && contains(invalidReferenceCodePoints, codePoint)) {
            parseError("disallowed character reference");
          }
          if (codePoint > 65535) {
            codePoint -= 65536;
            output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          output += stringFromCharCode(codePoint);
          return output;
        };
        var hexEscape = function(codePoint) {
          return "&#x" + codePoint.toString(16).toUpperCase() + ";";
        };
        var decEscape = function(codePoint) {
          return "&#" + codePoint + ";";
        };
        var parseError = function(message) {
          throw Error("Parse error: " + message);
        };
        var encode = function(string, options) {
          options = merge(options, encode.options);
          var strict = options.strict;
          if (strict && regexInvalidRawCodePoint.test(string)) {
            parseError("forbidden code point");
          }
          var encodeEverything = options.encodeEverything;
          var useNamedReferences = options.useNamedReferences;
          var allowUnsafeSymbols = options.allowUnsafeSymbols;
          var escapeCodePoint = options.decimal ? decEscape : hexEscape;
          var escapeBmpSymbol = function(symbol) {
            return escapeCodePoint(symbol.charCodeAt(0));
          };
          if (encodeEverything) {
            string = string.replace(regexAsciiWhitelist, function(symbol) {
              if (useNamedReferences && has(encodeMap, symbol)) {
                return "&" + encodeMap[symbol] + ";";
              }
              return escapeBmpSymbol(symbol);
            });
            if (useNamedReferences) {
              string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
            }
            if (useNamedReferences) {
              string = string.replace(regexEncodeNonAscii, function(string2) {
                return "&" + encodeMap[string2] + ";";
              });
            }
          } else if (useNamedReferences) {
            if (!allowUnsafeSymbols) {
              string = string.replace(regexEscape, function(string2) {
                return "&" + encodeMap[string2] + ";";
              });
            }
            string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
            string = string.replace(regexEncodeNonAscii, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          } else if (!allowUnsafeSymbols) {
            string = string.replace(regexEscape, escapeBmpSymbol);
          }
          return string.replace(regexAstralSymbols, function($0) {
            var high = $0.charCodeAt(0);
            var low = $0.charCodeAt(1);
            var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
            return escapeCodePoint(codePoint);
          }).replace(regexBmpWhitelist, escapeBmpSymbol);
        };
        encode.options = {
          "allowUnsafeSymbols": false,
          "encodeEverything": false,
          "strict": false,
          "useNamedReferences": false,
          "decimal": false
        };
        var decode = function(html, options) {
          options = merge(options, decode.options);
          var strict = options.strict;
          if (strict && regexInvalidEntity.test(html)) {
            parseError("malformed character reference");
          }
          return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
            var codePoint;
            var semicolon;
            var decDigits;
            var hexDigits;
            var reference;
            var next;
            if ($1) {
              reference = $1;
              return decodeMap[reference];
            }
            if ($2) {
              reference = $2;
              next = $3;
              if (next && options.isAttributeValue) {
                if (strict && next == "=") {
                  parseError("`&` did not start a character reference");
                }
                return $0;
              } else {
                if (strict) {
                  parseError("named character reference was not terminated by a semicolon");
                }
                return decodeMapLegacy[reference] + (next || "");
              }
            }
            if ($4) {
              decDigits = $4;
              semicolon = $5;
              if (strict && !semicolon) {
                parseError("character reference was not terminated by a semicolon");
              }
              codePoint = parseInt(decDigits, 10);
              return codePointToSymbol(codePoint, strict);
            }
            if ($6) {
              hexDigits = $6;
              semicolon = $7;
              if (strict && !semicolon) {
                parseError("character reference was not terminated by a semicolon");
              }
              codePoint = parseInt(hexDigits, 16);
              return codePointToSymbol(codePoint, strict);
            }
            if (strict) {
              parseError("named character reference was not terminated by a semicolon");
            }
            return $0;
          });
        };
        decode.options = {
          "isAttributeValue": false,
          "strict": false
        };
        var escape = function(string) {
          return string.replace(regexEscape, function($0) {
            return escapeMap[$0];
          });
        };
        var he2 = {
          "version": "1.2.0",
          "encode": encode,
          "decode": decode,
          "escape": escape,
          "unescape": decode
        };
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          define(function() {
            return he2;
          });
        } else if (freeExports && !freeExports.nodeType) {
          if (freeModule) {
            freeModule.exports = he2;
          } else {
            for (var key in he2) {
              has(he2, key) && (freeExports[key] = he2[key]);
            }
          }
        } else {
          root.he = he2;
        }
      })(exports);
    }
  });

  // node_modules/parse5/lib/common/unicode.js
  var require_unicode2 = __commonJS({
    "node_modules/parse5/lib/common/unicode.js"(exports) {
      var UNDEFINED_CODE_POINTS = [
        65534,
        65535,
        131070,
        131071,
        196606,
        196607,
        262142,
        262143,
        327678,
        327679,
        393214,
        393215,
        458750,
        458751,
        524286,
        524287,
        589822,
        589823,
        655358,
        655359,
        720894,
        720895,
        786430,
        786431,
        851966,
        851967,
        917502,
        917503,
        983038,
        983039,
        1048574,
        1048575,
        1114110,
        1114111
      ];
      exports.REPLACEMENT_CHARACTER = "\uFFFD";
      exports.CODE_POINTS = {
        EOF: -1,
        NULL: 0,
        TABULATION: 9,
        CARRIAGE_RETURN: 13,
        LINE_FEED: 10,
        FORM_FEED: 12,
        SPACE: 32,
        EXCLAMATION_MARK: 33,
        QUOTATION_MARK: 34,
        NUMBER_SIGN: 35,
        AMPERSAND: 38,
        APOSTROPHE: 39,
        HYPHEN_MINUS: 45,
        SOLIDUS: 47,
        DIGIT_0: 48,
        DIGIT_9: 57,
        SEMICOLON: 59,
        LESS_THAN_SIGN: 60,
        EQUALS_SIGN: 61,
        GREATER_THAN_SIGN: 62,
        QUESTION_MARK: 63,
        LATIN_CAPITAL_A: 65,
        LATIN_CAPITAL_F: 70,
        LATIN_CAPITAL_X: 88,
        LATIN_CAPITAL_Z: 90,
        RIGHT_SQUARE_BRACKET: 93,
        GRAVE_ACCENT: 96,
        LATIN_SMALL_A: 97,
        LATIN_SMALL_F: 102,
        LATIN_SMALL_X: 120,
        LATIN_SMALL_Z: 122,
        REPLACEMENT_CHARACTER: 65533
      };
      exports.CODE_POINT_SEQUENCES = {
        DASH_DASH_STRING: [45, 45],
        DOCTYPE_STRING: [68, 79, 67, 84, 89, 80, 69],
        CDATA_START_STRING: [91, 67, 68, 65, 84, 65, 91],
        SCRIPT_STRING: [115, 99, 114, 105, 112, 116],
        PUBLIC_STRING: [80, 85, 66, 76, 73, 67],
        SYSTEM_STRING: [83, 89, 83, 84, 69, 77]
      };
      exports.isSurrogate = function(cp) {
        return cp >= 55296 && cp <= 57343;
      };
      exports.isSurrogatePair = function(cp) {
        return cp >= 56320 && cp <= 57343;
      };
      exports.getSurrogatePairCodePoint = function(cp1, cp2) {
        return (cp1 - 55296) * 1024 + 9216 + cp2;
      };
      exports.isControlCodePoint = function(cp) {
        return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
      };
      exports.isUndefinedCodePoint = function(cp) {
        return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
      };
    }
  });

  // node_modules/parse5/lib/common/error-codes.js
  var require_error_codes = __commonJS({
    "node_modules/parse5/lib/common/error-codes.js"(exports, module) {
      module.exports = {
        controlCharacterInInputStream: "control-character-in-input-stream",
        noncharacterInInputStream: "noncharacter-in-input-stream",
        surrogateInInputStream: "surrogate-in-input-stream",
        nonVoidHtmlElementStartTagWithTrailingSolidus: "non-void-html-element-start-tag-with-trailing-solidus",
        endTagWithAttributes: "end-tag-with-attributes",
        endTagWithTrailingSolidus: "end-tag-with-trailing-solidus",
        unexpectedSolidusInTag: "unexpected-solidus-in-tag",
        unexpectedNullCharacter: "unexpected-null-character",
        unexpectedQuestionMarkInsteadOfTagName: "unexpected-question-mark-instead-of-tag-name",
        invalidFirstCharacterOfTagName: "invalid-first-character-of-tag-name",
        unexpectedEqualsSignBeforeAttributeName: "unexpected-equals-sign-before-attribute-name",
        missingEndTagName: "missing-end-tag-name",
        unexpectedCharacterInAttributeName: "unexpected-character-in-attribute-name",
        unknownNamedCharacterReference: "unknown-named-character-reference",
        missingSemicolonAfterCharacterReference: "missing-semicolon-after-character-reference",
        unexpectedCharacterAfterDoctypeSystemIdentifier: "unexpected-character-after-doctype-system-identifier",
        unexpectedCharacterInUnquotedAttributeValue: "unexpected-character-in-unquoted-attribute-value",
        eofBeforeTagName: "eof-before-tag-name",
        eofInTag: "eof-in-tag",
        missingAttributeValue: "missing-attribute-value",
        missingWhitespaceBetweenAttributes: "missing-whitespace-between-attributes",
        missingWhitespaceAfterDoctypePublicKeyword: "missing-whitespace-after-doctype-public-keyword",
        missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: "missing-whitespace-between-doctype-public-and-system-identifiers",
        missingWhitespaceAfterDoctypeSystemKeyword: "missing-whitespace-after-doctype-system-keyword",
        missingQuoteBeforeDoctypePublicIdentifier: "missing-quote-before-doctype-public-identifier",
        missingQuoteBeforeDoctypeSystemIdentifier: "missing-quote-before-doctype-system-identifier",
        missingDoctypePublicIdentifier: "missing-doctype-public-identifier",
        missingDoctypeSystemIdentifier: "missing-doctype-system-identifier",
        abruptDoctypePublicIdentifier: "abrupt-doctype-public-identifier",
        abruptDoctypeSystemIdentifier: "abrupt-doctype-system-identifier",
        cdataInHtmlContent: "cdata-in-html-content",
        incorrectlyOpenedComment: "incorrectly-opened-comment",
        eofInScriptHtmlCommentLikeText: "eof-in-script-html-comment-like-text",
        eofInDoctype: "eof-in-doctype",
        nestedComment: "nested-comment",
        abruptClosingOfEmptyComment: "abrupt-closing-of-empty-comment",
        eofInComment: "eof-in-comment",
        incorrectlyClosedComment: "incorrectly-closed-comment",
        eofInCdata: "eof-in-cdata",
        absenceOfDigitsInNumericCharacterReference: "absence-of-digits-in-numeric-character-reference",
        nullCharacterReference: "null-character-reference",
        surrogateCharacterReference: "surrogate-character-reference",
        characterReferenceOutsideUnicodeRange: "character-reference-outside-unicode-range",
        controlCharacterReference: "control-character-reference",
        noncharacterCharacterReference: "noncharacter-character-reference",
        missingWhitespaceBeforeDoctypeName: "missing-whitespace-before-doctype-name",
        missingDoctypeName: "missing-doctype-name",
        invalidCharacterSequenceAfterDoctypeName: "invalid-character-sequence-after-doctype-name",
        duplicateAttribute: "duplicate-attribute",
        nonConformingDoctype: "non-conforming-doctype",
        missingDoctype: "missing-doctype",
        misplacedDoctype: "misplaced-doctype",
        endTagWithoutMatchingOpenElement: "end-tag-without-matching-open-element",
        closingOfElementWithOpenChildElements: "closing-of-element-with-open-child-elements",
        disallowedContentInNoscriptInHead: "disallowed-content-in-noscript-in-head",
        openElementsLeftAfterEof: "open-elements-left-after-eof",
        abandonedHeadElementChild: "abandoned-head-element-child",
        misplacedStartTagForHeadElement: "misplaced-start-tag-for-head-element",
        nestedNoscriptInHead: "nested-noscript-in-head",
        eofInElementThatCanContainOnlyText: "eof-in-element-that-can-contain-only-text"
      };
    }
  });

  // node_modules/parse5/lib/tokenizer/preprocessor.js
  var require_preprocessor = __commonJS({
    "node_modules/parse5/lib/tokenizer/preprocessor.js"(exports, module) {
      var unicode2 = require_unicode2();
      var ERR = require_error_codes();
      var $ = unicode2.CODE_POINTS;
      var DEFAULT_BUFFER_WATERLINE = 1 << 16;
      var Preprocessor = class {
        constructor() {
          this.html = null;
          this.pos = -1;
          this.lastGapPos = -1;
          this.lastCharPos = -1;
          this.gapStack = [];
          this.skipNextNewLine = false;
          this.lastChunkWritten = false;
          this.endOfChunkHit = false;
          this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
        }
        _err() {
        }
        _addGap() {
          this.gapStack.push(this.lastGapPos);
          this.lastGapPos = this.pos;
        }
        _processSurrogate(cp) {
          if (this.pos !== this.lastCharPos) {
            const nextCp = this.html.charCodeAt(this.pos + 1);
            if (unicode2.isSurrogatePair(nextCp)) {
              this.pos++;
              this._addGap();
              return unicode2.getSurrogatePairCodePoint(cp, nextCp);
            }
          } else if (!this.lastChunkWritten) {
            this.endOfChunkHit = true;
            return $.EOF;
          }
          this._err(ERR.surrogateInInputStream);
          return cp;
        }
        dropParsedChunk() {
          if (this.pos > this.bufferWaterline) {
            this.lastCharPos -= this.pos;
            this.html = this.html.substring(this.pos);
            this.pos = 0;
            this.lastGapPos = -1;
            this.gapStack = [];
          }
        }
        write(chunk, isLastChunk) {
          if (this.html) {
            this.html += chunk;
          } else {
            this.html = chunk;
          }
          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
          this.lastChunkWritten = isLastChunk;
        }
        insertHtmlAtCurrentPos(chunk) {
          this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
        }
        advance() {
          this.pos++;
          if (this.pos > this.lastCharPos) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return $.EOF;
          }
          let cp = this.html.charCodeAt(this.pos);
          if (this.skipNextNewLine && cp === $.LINE_FEED) {
            this.skipNextNewLine = false;
            this._addGap();
            return this.advance();
          }
          if (cp === $.CARRIAGE_RETURN) {
            this.skipNextNewLine = true;
            return $.LINE_FEED;
          }
          this.skipNextNewLine = false;
          if (unicode2.isSurrogate(cp)) {
            cp = this._processSurrogate(cp);
          }
          const isCommonValidRange = cp > 31 && cp < 127 || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 159 && cp < 64976;
          if (!isCommonValidRange) {
            this._checkForProblematicCharacters(cp);
          }
          return cp;
        }
        _checkForProblematicCharacters(cp) {
          if (unicode2.isControlCodePoint(cp)) {
            this._err(ERR.controlCharacterInInputStream);
          } else if (unicode2.isUndefinedCodePoint(cp)) {
            this._err(ERR.noncharacterInInputStream);
          }
        }
        retreat() {
          if (this.pos === this.lastGapPos) {
            this.lastGapPos = this.gapStack.pop();
            this.pos--;
          }
          this.pos--;
        }
      };
      module.exports = Preprocessor;
    }
  });

  // node_modules/parse5/lib/tokenizer/named-entity-data.js
  var require_named_entity_data = __commonJS({
    "node_modules/parse5/lib/tokenizer/named-entity-data.js"(exports, module) {
      module.exports = new Uint16Array([4, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 106, 303, 412, 810, 1432, 1701, 1796, 1987, 2114, 2360, 2420, 2484, 3170, 3251, 4140, 4393, 4575, 4610, 5106, 5512, 5728, 6117, 6274, 6315, 6345, 6427, 6516, 7002, 7910, 8733, 9323, 9870, 10170, 10631, 10893, 11318, 11386, 11467, 12773, 13092, 14474, 14922, 15448, 15542, 16419, 17666, 18166, 18611, 19004, 19095, 19298, 19397, 4, 16, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 140, 150, 158, 169, 176, 194, 199, 210, 216, 222, 226, 242, 256, 266, 283, 294, 108, 105, 103, 5, 198, 1, 59, 148, 1, 198, 80, 5, 38, 1, 59, 156, 1, 38, 99, 117, 116, 101, 5, 193, 1, 59, 167, 1, 193, 114, 101, 118, 101, 59, 1, 258, 4, 2, 105, 121, 182, 191, 114, 99, 5, 194, 1, 59, 189, 1, 194, 59, 1, 1040, 114, 59, 3, 55349, 56580, 114, 97, 118, 101, 5, 192, 1, 59, 208, 1, 192, 112, 104, 97, 59, 1, 913, 97, 99, 114, 59, 1, 256, 100, 59, 1, 10835, 4, 2, 103, 112, 232, 237, 111, 110, 59, 1, 260, 102, 59, 3, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 1, 8289, 105, 110, 103, 5, 197, 1, 59, 264, 1, 197, 4, 2, 99, 115, 272, 277, 114, 59, 3, 55349, 56476, 105, 103, 110, 59, 1, 8788, 105, 108, 100, 101, 5, 195, 1, 59, 292, 1, 195, 109, 108, 5, 196, 1, 59, 301, 1, 196, 4, 8, 97, 99, 101, 102, 111, 114, 115, 117, 321, 350, 354, 383, 388, 394, 400, 405, 4, 2, 99, 114, 327, 336, 107, 115, 108, 97, 115, 104, 59, 1, 8726, 4, 2, 118, 119, 342, 345, 59, 1, 10983, 101, 100, 59, 1, 8966, 121, 59, 1, 1041, 4, 3, 99, 114, 116, 362, 369, 379, 97, 117, 115, 101, 59, 1, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 1, 8492, 97, 59, 1, 914, 114, 59, 3, 55349, 56581, 112, 102, 59, 3, 55349, 56633, 101, 118, 101, 59, 1, 728, 99, 114, 59, 1, 8492, 109, 112, 101, 113, 59, 1, 8782, 4, 14, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 442, 447, 456, 504, 542, 547, 569, 573, 577, 616, 678, 784, 790, 796, 99, 121, 59, 1, 1063, 80, 89, 5, 169, 1, 59, 454, 1, 169, 4, 3, 99, 112, 121, 464, 470, 497, 117, 116, 101, 59, 1, 262, 4, 2, 59, 105, 476, 478, 1, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8517, 108, 101, 121, 115, 59, 1, 8493, 4, 4, 97, 101, 105, 111, 514, 520, 530, 535, 114, 111, 110, 59, 1, 268, 100, 105, 108, 5, 199, 1, 59, 528, 1, 199, 114, 99, 59, 1, 264, 110, 105, 110, 116, 59, 1, 8752, 111, 116, 59, 1, 266, 4, 2, 100, 110, 553, 560, 105, 108, 108, 97, 59, 1, 184, 116, 101, 114, 68, 111, 116, 59, 1, 183, 114, 59, 1, 8493, 105, 59, 1, 935, 114, 99, 108, 101, 4, 4, 68, 77, 80, 84, 591, 596, 603, 609, 111, 116, 59, 1, 8857, 105, 110, 117, 115, 59, 1, 8854, 108, 117, 115, 59, 1, 8853, 105, 109, 101, 115, 59, 1, 8855, 111, 4, 2, 99, 115, 623, 646, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8754, 101, 67, 117, 114, 108, 121, 4, 2, 68, 81, 658, 671, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8221, 117, 111, 116, 101, 59, 1, 8217, 4, 4, 108, 110, 112, 117, 688, 701, 736, 753, 111, 110, 4, 2, 59, 101, 696, 698, 1, 8759, 59, 1, 10868, 4, 3, 103, 105, 116, 709, 717, 722, 114, 117, 101, 110, 116, 59, 1, 8801, 110, 116, 59, 1, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8750, 4, 2, 102, 114, 742, 745, 59, 1, 8450, 111, 100, 117, 99, 116, 59, 1, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8755, 111, 115, 115, 59, 1, 10799, 99, 114, 59, 3, 55349, 56478, 112, 4, 2, 59, 67, 803, 805, 1, 8915, 97, 112, 59, 1, 8781, 4, 11, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 834, 850, 855, 860, 865, 888, 903, 916, 921, 1011, 1415, 4, 2, 59, 111, 840, 842, 1, 8517, 116, 114, 97, 104, 100, 59, 1, 10513, 99, 121, 59, 1, 1026, 99, 121, 59, 1, 1029, 99, 121, 59, 1, 1039, 4, 3, 103, 114, 115, 873, 879, 883, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8609, 104, 118, 59, 1, 10980, 4, 2, 97, 121, 894, 900, 114, 111, 110, 59, 1, 270, 59, 1, 1044, 108, 4, 2, 59, 116, 910, 912, 1, 8711, 97, 59, 1, 916, 114, 59, 3, 55349, 56583, 4, 2, 97, 102, 927, 998, 4, 2, 99, 109, 933, 992, 114, 105, 116, 105, 99, 97, 108, 4, 4, 65, 68, 71, 84, 950, 957, 978, 985, 99, 117, 116, 101, 59, 1, 180, 111, 4, 2, 116, 117, 964, 967, 59, 1, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 1, 733, 114, 97, 118, 101, 59, 1, 96, 105, 108, 100, 101, 59, 1, 732, 111, 110, 100, 59, 1, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8518, 4, 4, 112, 116, 117, 119, 1021, 1026, 1048, 1249, 102, 59, 3, 55349, 56635, 4, 3, 59, 68, 69, 1034, 1036, 1041, 1, 168, 111, 116, 59, 1, 8412, 113, 117, 97, 108, 59, 1, 8784, 98, 108, 101, 4, 6, 67, 68, 76, 82, 85, 86, 1065, 1082, 1101, 1189, 1211, 1236, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8751, 111, 4, 2, 116, 119, 1089, 1092, 59, 1, 168, 110, 65, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 101, 111, 1107, 1141, 102, 116, 4, 3, 65, 82, 84, 1117, 1124, 1136, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8660, 101, 101, 59, 1, 10980, 110, 103, 4, 2, 76, 82, 1149, 1177, 101, 102, 116, 4, 2, 65, 82, 1158, 1165, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10233, 105, 103, 104, 116, 4, 2, 65, 84, 1199, 1206, 114, 114, 111, 119, 59, 1, 8658, 101, 101, 59, 1, 8872, 112, 4, 2, 65, 68, 1218, 1225, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8741, 110, 4, 6, 65, 66, 76, 82, 84, 97, 1264, 1292, 1299, 1352, 1391, 1408, 114, 114, 111, 119, 4, 3, 59, 66, 85, 1276, 1278, 1283, 1, 8595, 97, 114, 59, 1, 10515, 112, 65, 114, 114, 111, 119, 59, 1, 8693, 114, 101, 118, 101, 59, 1, 785, 101, 102, 116, 4, 3, 82, 84, 86, 1310, 1323, 1334, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 1, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10590, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1345, 1347, 1, 8637, 97, 114, 59, 1, 10582, 105, 103, 104, 116, 4, 2, 84, 86, 1362, 1373, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10591, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1384, 1386, 1, 8641, 97, 114, 59, 1, 10583, 101, 101, 4, 2, 59, 65, 1399, 1401, 1, 8868, 114, 114, 111, 119, 59, 1, 8615, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 99, 116, 1421, 1426, 114, 59, 3, 55349, 56479, 114, 111, 107, 59, 1, 272, 4, 16, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1466, 1470, 1478, 1489, 1515, 1520, 1525, 1536, 1544, 1593, 1609, 1617, 1650, 1664, 1668, 1677, 71, 59, 1, 330, 72, 5, 208, 1, 59, 1476, 1, 208, 99, 117, 116, 101, 5, 201, 1, 59, 1487, 1, 201, 4, 3, 97, 105, 121, 1497, 1503, 1512, 114, 111, 110, 59, 1, 282, 114, 99, 5, 202, 1, 59, 1510, 1, 202, 59, 1, 1069, 111, 116, 59, 1, 278, 114, 59, 3, 55349, 56584, 114, 97, 118, 101, 5, 200, 1, 59, 1534, 1, 200, 101, 109, 101, 110, 116, 59, 1, 8712, 4, 2, 97, 112, 1550, 1555, 99, 114, 59, 1, 274, 116, 121, 4, 2, 83, 86, 1563, 1576, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9643, 4, 2, 103, 112, 1599, 1604, 111, 110, 59, 1, 280, 102, 59, 3, 55349, 56636, 115, 105, 108, 111, 110, 59, 1, 917, 117, 4, 2, 97, 105, 1624, 1640, 108, 4, 2, 59, 84, 1631, 1633, 1, 10869, 105, 108, 100, 101, 59, 1, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8652, 4, 2, 99, 105, 1656, 1660, 114, 59, 1, 8496, 109, 59, 1, 10867, 97, 59, 1, 919, 109, 108, 5, 203, 1, 59, 1675, 1, 203, 4, 2, 105, 112, 1683, 1689, 115, 116, 115, 59, 1, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 1, 8519, 4, 5, 99, 102, 105, 111, 115, 1713, 1717, 1722, 1762, 1791, 121, 59, 1, 1060, 114, 59, 3, 55349, 56585, 108, 108, 101, 100, 4, 2, 83, 86, 1732, 1745, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9642, 4, 3, 112, 114, 117, 1770, 1775, 1781, 102, 59, 3, 55349, 56637, 65, 108, 108, 59, 1, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 1, 8497, 99, 114, 59, 1, 8497, 4, 12, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1822, 1827, 1834, 1848, 1855, 1877, 1882, 1887, 1890, 1896, 1978, 1984, 99, 121, 59, 1, 1027, 5, 62, 1, 59, 1832, 1, 62, 109, 109, 97, 4, 2, 59, 100, 1843, 1845, 1, 915, 59, 1, 988, 114, 101, 118, 101, 59, 1, 286, 4, 3, 101, 105, 121, 1863, 1869, 1874, 100, 105, 108, 59, 1, 290, 114, 99, 59, 1, 284, 59, 1, 1043, 111, 116, 59, 1, 288, 114, 59, 3, 55349, 56586, 59, 1, 8921, 112, 102, 59, 3, 55349, 56638, 101, 97, 116, 101, 114, 4, 6, 69, 70, 71, 76, 83, 84, 1915, 1933, 1944, 1953, 1959, 1971, 113, 117, 97, 108, 4, 2, 59, 76, 1925, 1927, 1, 8805, 101, 115, 115, 59, 1, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8807, 114, 101, 97, 116, 101, 114, 59, 1, 10914, 101, 115, 115, 59, 1, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10878, 105, 108, 100, 101, 59, 1, 8819, 99, 114, 59, 3, 55349, 56482, 59, 1, 8811, 4, 8, 65, 97, 99, 102, 105, 111, 115, 117, 2005, 2012, 2026, 2032, 2036, 2049, 2073, 2089, 82, 68, 99, 121, 59, 1, 1066, 4, 2, 99, 116, 2018, 2023, 101, 107, 59, 1, 711, 59, 1, 94, 105, 114, 99, 59, 1, 292, 114, 59, 1, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 1, 8459, 4, 2, 112, 114, 2055, 2059, 102, 59, 1, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 1, 9472, 4, 2, 99, 116, 2079, 2083, 114, 59, 1, 8459, 114, 111, 107, 59, 1, 294, 109, 112, 4, 2, 68, 69, 2097, 2107, 111, 119, 110, 72, 117, 109, 112, 59, 1, 8782, 113, 117, 97, 108, 59, 1, 8783, 4, 14, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 2144, 2149, 2155, 2160, 2171, 2189, 2194, 2198, 2209, 2245, 2307, 2329, 2334, 2341, 99, 121, 59, 1, 1045, 108, 105, 103, 59, 1, 306, 99, 121, 59, 1, 1025, 99, 117, 116, 101, 5, 205, 1, 59, 2169, 1, 205, 4, 2, 105, 121, 2177, 2186, 114, 99, 5, 206, 1, 59, 2184, 1, 206, 59, 1, 1048, 111, 116, 59, 1, 304, 114, 59, 1, 8465, 114, 97, 118, 101, 5, 204, 1, 59, 2207, 1, 204, 4, 3, 59, 97, 112, 2217, 2219, 2238, 1, 8465, 4, 2, 99, 103, 2225, 2229, 114, 59, 1, 298, 105, 110, 97, 114, 121, 73, 59, 1, 8520, 108, 105, 101, 115, 59, 1, 8658, 4, 2, 116, 118, 2251, 2281, 4, 2, 59, 101, 2257, 2259, 1, 8748, 4, 2, 103, 114, 2265, 2271, 114, 97, 108, 59, 1, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8898, 105, 115, 105, 98, 108, 101, 4, 2, 67, 84, 2293, 2300, 111, 109, 109, 97, 59, 1, 8291, 105, 109, 101, 115, 59, 1, 8290, 4, 3, 103, 112, 116, 2315, 2320, 2325, 111, 110, 59, 1, 302, 102, 59, 3, 55349, 56640, 97, 59, 1, 921, 99, 114, 59, 1, 8464, 105, 108, 100, 101, 59, 1, 296, 4, 2, 107, 109, 2347, 2352, 99, 121, 59, 1, 1030, 108, 5, 207, 1, 59, 2358, 1, 207, 4, 5, 99, 102, 111, 115, 117, 2372, 2386, 2391, 2397, 2414, 4, 2, 105, 121, 2378, 2383, 114, 99, 59, 1, 308, 59, 1, 1049, 114, 59, 3, 55349, 56589, 112, 102, 59, 3, 55349, 56641, 4, 2, 99, 101, 2403, 2408, 114, 59, 3, 55349, 56485, 114, 99, 121, 59, 1, 1032, 107, 99, 121, 59, 1, 1028, 4, 7, 72, 74, 97, 99, 102, 111, 115, 2436, 2441, 2446, 2452, 2467, 2472, 2478, 99, 121, 59, 1, 1061, 99, 121, 59, 1, 1036, 112, 112, 97, 59, 1, 922, 4, 2, 101, 121, 2458, 2464, 100, 105, 108, 59, 1, 310, 59, 1, 1050, 114, 59, 3, 55349, 56590, 112, 102, 59, 3, 55349, 56642, 99, 114, 59, 3, 55349, 56486, 4, 11, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2508, 2513, 2520, 2562, 2585, 2981, 2986, 3004, 3011, 3146, 3167, 99, 121, 59, 1, 1033, 5, 60, 1, 59, 2518, 1, 60, 4, 5, 99, 109, 110, 112, 114, 2532, 2538, 2544, 2548, 2558, 117, 116, 101, 59, 1, 313, 98, 100, 97, 59, 1, 923, 103, 59, 1, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 1, 8466, 114, 59, 1, 8606, 4, 3, 97, 101, 121, 2570, 2576, 2582, 114, 111, 110, 59, 1, 317, 100, 105, 108, 59, 1, 315, 59, 1, 1051, 4, 2, 102, 115, 2591, 2907, 116, 4, 10, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2614, 2663, 2672, 2728, 2735, 2760, 2820, 2870, 2888, 2895, 4, 2, 110, 114, 2620, 2633, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10216, 114, 111, 119, 4, 3, 59, 66, 82, 2644, 2646, 2651, 1, 8592, 97, 114, 59, 1, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8646, 101, 105, 108, 105, 110, 103, 59, 1, 8968, 111, 4, 2, 117, 119, 2679, 2692, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10214, 110, 4, 2, 84, 86, 2699, 2710, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10593, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2721, 2723, 1, 8643, 97, 114, 59, 1, 10585, 108, 111, 111, 114, 59, 1, 8970, 105, 103, 104, 116, 4, 2, 65, 86, 2745, 2752, 114, 114, 111, 119, 59, 1, 8596, 101, 99, 116, 111, 114, 59, 1, 10574, 4, 2, 101, 114, 2766, 2792, 101, 4, 3, 59, 65, 86, 2775, 2777, 2784, 1, 8867, 114, 114, 111, 119, 59, 1, 8612, 101, 99, 116, 111, 114, 59, 1, 10586, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 2806, 2808, 2813, 1, 8882, 97, 114, 59, 1, 10703, 113, 117, 97, 108, 59, 1, 8884, 112, 4, 3, 68, 84, 86, 2829, 2841, 2852, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10592, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2863, 2865, 1, 8639, 97, 114, 59, 1, 10584, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2881, 2883, 1, 8636, 97, 114, 59, 1, 10578, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8660, 115, 4, 6, 69, 70, 71, 76, 83, 84, 2922, 2936, 2947, 2956, 2962, 2974, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8806, 114, 101, 97, 116, 101, 114, 59, 1, 8822, 101, 115, 115, 59, 1, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10877, 105, 108, 100, 101, 59, 1, 8818, 114, 59, 3, 55349, 56591, 4, 2, 59, 101, 2992, 2994, 1, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8666, 105, 100, 111, 116, 59, 1, 319, 4, 3, 110, 112, 119, 3019, 3110, 3115, 103, 4, 4, 76, 82, 108, 114, 3030, 3058, 3070, 3098, 101, 102, 116, 4, 2, 65, 82, 3039, 3046, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10230, 101, 102, 116, 4, 2, 97, 114, 3079, 3086, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10233, 102, 59, 3, 55349, 56643, 101, 114, 4, 2, 76, 82, 3123, 3134, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8600, 4, 3, 99, 104, 116, 3154, 3158, 3161, 114, 59, 1, 8466, 59, 1, 8624, 114, 111, 107, 59, 1, 321, 59, 1, 8810, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 3188, 3192, 3196, 3222, 3227, 3237, 3243, 3248, 112, 59, 1, 10501, 121, 59, 1, 1052, 4, 2, 100, 108, 3202, 3213, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8287, 108, 105, 110, 116, 114, 102, 59, 1, 8499, 114, 59, 3, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 1, 8723, 112, 102, 59, 3, 55349, 56644, 99, 114, 59, 1, 8499, 59, 1, 924, 4, 9, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3271, 3276, 3283, 3306, 3422, 3427, 4120, 4126, 4137, 99, 121, 59, 1, 1034, 99, 117, 116, 101, 59, 1, 323, 4, 3, 97, 101, 121, 3291, 3297, 3303, 114, 111, 110, 59, 1, 327, 100, 105, 108, 59, 1, 325, 59, 1, 1053, 4, 3, 103, 115, 119, 3314, 3380, 3415, 97, 116, 105, 118, 101, 4, 3, 77, 84, 86, 3327, 3340, 3365, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8203, 104, 105, 4, 2, 99, 110, 3348, 3357, 107, 83, 112, 97, 99, 101, 59, 1, 8203, 83, 112, 97, 99, 101, 59, 1, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8203, 116, 101, 100, 4, 2, 71, 76, 3389, 3405, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 1, 8810, 76, 105, 110, 101, 59, 1, 10, 114, 59, 3, 55349, 56593, 4, 4, 66, 110, 112, 116, 3437, 3444, 3460, 3464, 114, 101, 97, 107, 59, 1, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 1, 160, 102, 59, 1, 8469, 4, 13, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3492, 3494, 3517, 3536, 3578, 3657, 3685, 3784, 3823, 3860, 3915, 4066, 4107, 1, 10988, 4, 2, 111, 117, 3500, 3510, 110, 103, 114, 117, 101, 110, 116, 59, 1, 8802, 112, 67, 97, 112, 59, 1, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8742, 4, 3, 108, 113, 120, 3544, 3552, 3571, 101, 109, 101, 110, 116, 59, 1, 8713, 117, 97, 108, 4, 2, 59, 84, 3561, 3563, 1, 8800, 105, 108, 100, 101, 59, 3, 8770, 824, 105, 115, 116, 115, 59, 1, 8708, 114, 101, 97, 116, 101, 114, 4, 7, 59, 69, 70, 71, 76, 83, 84, 3600, 3602, 3609, 3621, 3631, 3637, 3650, 1, 8815, 113, 117, 97, 108, 59, 1, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 3, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 3, 8811, 824, 101, 115, 115, 59, 1, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10878, 824, 105, 108, 100, 101, 59, 1, 8821, 117, 109, 112, 4, 2, 68, 69, 3666, 3677, 111, 119, 110, 72, 117, 109, 112, 59, 3, 8782, 824, 113, 117, 97, 108, 59, 3, 8783, 824, 101, 4, 2, 102, 115, 3692, 3724, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3709, 3711, 3717, 1, 8938, 97, 114, 59, 3, 10703, 824, 113, 117, 97, 108, 59, 1, 8940, 115, 4, 6, 59, 69, 71, 76, 83, 84, 3739, 3741, 3748, 3757, 3764, 3777, 1, 8814, 113, 117, 97, 108, 59, 1, 8816, 114, 101, 97, 116, 101, 114, 59, 1, 8824, 101, 115, 115, 59, 3, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10877, 824, 105, 108, 100, 101, 59, 1, 8820, 101, 115, 116, 101, 100, 4, 2, 71, 76, 3795, 3812, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 3, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 3, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 4, 3, 59, 69, 83, 3838, 3840, 3848, 1, 8832, 113, 117, 97, 108, 59, 3, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8928, 4, 2, 101, 105, 3866, 3881, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 1, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3900, 3902, 3908, 1, 8939, 97, 114, 59, 3, 10704, 824, 113, 117, 97, 108, 59, 1, 8941, 4, 2, 113, 117, 3921, 3973, 117, 97, 114, 101, 83, 117, 4, 2, 98, 112, 3933, 3952, 115, 101, 116, 4, 2, 59, 69, 3942, 3945, 3, 8847, 824, 113, 117, 97, 108, 59, 1, 8930, 101, 114, 115, 101, 116, 4, 2, 59, 69, 3963, 3966, 3, 8848, 824, 113, 117, 97, 108, 59, 1, 8931, 4, 3, 98, 99, 112, 3981, 4e3, 4045, 115, 101, 116, 4, 2, 59, 69, 3990, 3993, 3, 8834, 8402, 113, 117, 97, 108, 59, 1, 8840, 99, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 4015, 4017, 4025, 4037, 1, 8833, 113, 117, 97, 108, 59, 3, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8929, 105, 108, 100, 101, 59, 3, 8831, 824, 101, 114, 115, 101, 116, 4, 2, 59, 69, 4056, 4059, 3, 8835, 8402, 113, 117, 97, 108, 59, 1, 8841, 105, 108, 100, 101, 4, 4, 59, 69, 70, 84, 4080, 4082, 4089, 4100, 1, 8769, 113, 117, 97, 108, 59, 1, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8775, 105, 108, 100, 101, 59, 1, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8740, 99, 114, 59, 3, 55349, 56489, 105, 108, 100, 101, 5, 209, 1, 59, 4135, 1, 209, 59, 1, 925, 4, 14, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 4170, 4176, 4187, 4205, 4212, 4217, 4228, 4253, 4259, 4292, 4295, 4316, 4337, 4346, 108, 105, 103, 59, 1, 338, 99, 117, 116, 101, 5, 211, 1, 59, 4185, 1, 211, 4, 2, 105, 121, 4193, 4202, 114, 99, 5, 212, 1, 59, 4200, 1, 212, 59, 1, 1054, 98, 108, 97, 99, 59, 1, 336, 114, 59, 3, 55349, 56594, 114, 97, 118, 101, 5, 210, 1, 59, 4226, 1, 210, 4, 3, 97, 101, 105, 4236, 4241, 4246, 99, 114, 59, 1, 332, 103, 97, 59, 1, 937, 99, 114, 111, 110, 59, 1, 927, 112, 102, 59, 3, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 4, 2, 68, 81, 4272, 4285, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8220, 117, 111, 116, 101, 59, 1, 8216, 59, 1, 10836, 4, 2, 99, 108, 4301, 4306, 114, 59, 3, 55349, 56490, 97, 115, 104, 5, 216, 1, 59, 4314, 1, 216, 105, 4, 2, 108, 109, 4323, 4332, 100, 101, 5, 213, 1, 59, 4330, 1, 213, 101, 115, 59, 1, 10807, 109, 108, 5, 214, 1, 59, 4344, 1, 214, 101, 114, 4, 2, 66, 80, 4354, 4380, 4, 2, 97, 114, 4360, 4364, 114, 59, 1, 8254, 97, 99, 4, 2, 101, 107, 4372, 4375, 59, 1, 9182, 101, 116, 59, 1, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9180, 4, 9, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4413, 4422, 4426, 4431, 4435, 4438, 4448, 4471, 4561, 114, 116, 105, 97, 108, 68, 59, 1, 8706, 121, 59, 1, 1055, 114, 59, 3, 55349, 56595, 105, 59, 1, 934, 59, 1, 928, 117, 115, 77, 105, 110, 117, 115, 59, 1, 177, 4, 2, 105, 112, 4454, 4467, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 1, 8460, 102, 59, 1, 8473, 4, 4, 59, 101, 105, 111, 4481, 4483, 4526, 4531, 1, 10939, 99, 101, 100, 101, 115, 4, 4, 59, 69, 83, 84, 4498, 4500, 4507, 4519, 1, 8826, 113, 117, 97, 108, 59, 1, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8828, 105, 108, 100, 101, 59, 1, 8830, 109, 101, 59, 1, 8243, 4, 2, 100, 112, 4537, 4543, 117, 99, 116, 59, 1, 8719, 111, 114, 116, 105, 111, 110, 4, 2, 59, 97, 4555, 4557, 1, 8759, 108, 59, 1, 8733, 4, 2, 99, 105, 4567, 4572, 114, 59, 3, 55349, 56491, 59, 1, 936, 4, 4, 85, 102, 111, 115, 4585, 4594, 4599, 4604, 79, 84, 5, 34, 1, 59, 4592, 1, 34, 114, 59, 3, 55349, 56596, 112, 102, 59, 1, 8474, 99, 114, 59, 3, 55349, 56492, 4, 12, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4636, 4642, 4650, 4681, 4704, 4763, 4767, 4771, 5047, 5069, 5081, 5094, 97, 114, 114, 59, 1, 10512, 71, 5, 174, 1, 59, 4648, 1, 174, 4, 3, 99, 110, 114, 4658, 4664, 4668, 117, 116, 101, 59, 1, 340, 103, 59, 1, 10219, 114, 4, 2, 59, 116, 4675, 4677, 1, 8608, 108, 59, 1, 10518, 4, 3, 97, 101, 121, 4689, 4695, 4701, 114, 111, 110, 59, 1, 344, 100, 105, 108, 59, 1, 342, 59, 1, 1056, 4, 2, 59, 118, 4710, 4712, 1, 8476, 101, 114, 115, 101, 4, 2, 69, 85, 4722, 4748, 4, 2, 108, 113, 4728, 4736, 101, 109, 101, 110, 116, 59, 1, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10607, 114, 59, 1, 8476, 111, 59, 1, 929, 103, 104, 116, 4, 8, 65, 67, 68, 70, 84, 85, 86, 97, 4792, 4840, 4849, 4905, 4912, 4972, 5022, 5040, 4, 2, 110, 114, 4798, 4811, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10217, 114, 111, 119, 4, 3, 59, 66, 76, 4822, 4824, 4829, 1, 8594, 97, 114, 59, 1, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8644, 101, 105, 108, 105, 110, 103, 59, 1, 8969, 111, 4, 2, 117, 119, 4856, 4869, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10215, 110, 4, 2, 84, 86, 4876, 4887, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10589, 101, 99, 116, 111, 114, 4, 2, 59, 66, 4898, 4900, 1, 8642, 97, 114, 59, 1, 10581, 108, 111, 111, 114, 59, 1, 8971, 4, 2, 101, 114, 4918, 4944, 101, 4, 3, 59, 65, 86, 4927, 4929, 4936, 1, 8866, 114, 114, 111, 119, 59, 1, 8614, 101, 99, 116, 111, 114, 59, 1, 10587, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 4958, 4960, 4965, 1, 8883, 97, 114, 59, 1, 10704, 113, 117, 97, 108, 59, 1, 8885, 112, 4, 3, 68, 84, 86, 4981, 4993, 5004, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10588, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5015, 5017, 1, 8638, 97, 114, 59, 1, 10580, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5033, 5035, 1, 8640, 97, 114, 59, 1, 10579, 114, 114, 111, 119, 59, 1, 8658, 4, 2, 112, 117, 5053, 5057, 102, 59, 1, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 1, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8667, 4, 2, 99, 104, 5087, 5091, 114, 59, 1, 8475, 59, 1, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 1, 10740, 4, 13, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 5134, 5150, 5157, 5164, 5198, 5203, 5259, 5265, 5277, 5283, 5374, 5380, 5385, 4, 2, 67, 99, 5140, 5146, 72, 99, 121, 59, 1, 1065, 121, 59, 1, 1064, 70, 84, 99, 121, 59, 1, 1068, 99, 117, 116, 101, 59, 1, 346, 4, 5, 59, 97, 101, 105, 121, 5176, 5178, 5184, 5190, 5195, 1, 10940, 114, 111, 110, 59, 1, 352, 100, 105, 108, 59, 1, 350, 114, 99, 59, 1, 348, 59, 1, 1057, 114, 59, 3, 55349, 56598, 111, 114, 116, 4, 4, 68, 76, 82, 85, 5216, 5227, 5238, 5250, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8594, 112, 65, 114, 114, 111, 119, 59, 1, 8593, 103, 109, 97, 59, 1, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 1, 8728, 112, 102, 59, 3, 55349, 56650, 4, 2, 114, 117, 5289, 5293, 116, 59, 1, 8730, 97, 114, 101, 4, 4, 59, 73, 83, 85, 5306, 5308, 5322, 5367, 1, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8851, 117, 4, 2, 98, 112, 5329, 5347, 115, 101, 116, 4, 2, 59, 69, 5338, 5340, 1, 8847, 113, 117, 97, 108, 59, 1, 8849, 101, 114, 115, 101, 116, 4, 2, 59, 69, 5358, 5360, 1, 8848, 113, 117, 97, 108, 59, 1, 8850, 110, 105, 111, 110, 59, 1, 8852, 99, 114, 59, 3, 55349, 56494, 97, 114, 59, 1, 8902, 4, 4, 98, 99, 109, 112, 5395, 5420, 5475, 5478, 4, 2, 59, 115, 5401, 5403, 1, 8912, 101, 116, 4, 2, 59, 69, 5411, 5413, 1, 8912, 113, 117, 97, 108, 59, 1, 8838, 4, 2, 99, 104, 5426, 5468, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 5440, 5442, 5449, 5461, 1, 8827, 113, 117, 97, 108, 59, 1, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8829, 105, 108, 100, 101, 59, 1, 8831, 84, 104, 97, 116, 59, 1, 8715, 59, 1, 8721, 4, 3, 59, 101, 115, 5486, 5488, 5507, 1, 8913, 114, 115, 101, 116, 4, 2, 59, 69, 5498, 5500, 1, 8835, 113, 117, 97, 108, 59, 1, 8839, 101, 116, 59, 1, 8913, 4, 11, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5536, 5546, 5552, 5567, 5579, 5602, 5607, 5655, 5695, 5701, 5711, 79, 82, 78, 5, 222, 1, 59, 5544, 1, 222, 65, 68, 69, 59, 1, 8482, 4, 2, 72, 99, 5558, 5563, 99, 121, 59, 1, 1035, 121, 59, 1, 1062, 4, 2, 98, 117, 5573, 5576, 59, 1, 9, 59, 1, 932, 4, 3, 97, 101, 121, 5587, 5593, 5599, 114, 111, 110, 59, 1, 356, 100, 105, 108, 59, 1, 354, 59, 1, 1058, 114, 59, 3, 55349, 56599, 4, 2, 101, 105, 5613, 5631, 4, 2, 114, 116, 5619, 5627, 101, 102, 111, 114, 101, 59, 1, 8756, 97, 59, 1, 920, 4, 2, 99, 110, 5637, 5647, 107, 83, 112, 97, 99, 101, 59, 3, 8287, 8202, 83, 112, 97, 99, 101, 59, 1, 8201, 108, 100, 101, 4, 4, 59, 69, 70, 84, 5668, 5670, 5677, 5688, 1, 8764, 113, 117, 97, 108, 59, 1, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8773, 105, 108, 100, 101, 59, 1, 8776, 112, 102, 59, 3, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 1, 8411, 4, 2, 99, 116, 5717, 5722, 114, 59, 3, 55349, 56495, 114, 111, 107, 59, 1, 358, 4, 14, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 5758, 5789, 5805, 5823, 5830, 5835, 5846, 5852, 5921, 5937, 6089, 6095, 6101, 6108, 4, 2, 99, 114, 5764, 5774, 117, 116, 101, 5, 218, 1, 59, 5772, 1, 218, 114, 4, 2, 59, 111, 5781, 5783, 1, 8607, 99, 105, 114, 59, 1, 10569, 114, 4, 2, 99, 101, 5796, 5800, 121, 59, 1, 1038, 118, 101, 59, 1, 364, 4, 2, 105, 121, 5811, 5820, 114, 99, 5, 219, 1, 59, 5818, 1, 219, 59, 1, 1059, 98, 108, 97, 99, 59, 1, 368, 114, 59, 3, 55349, 56600, 114, 97, 118, 101, 5, 217, 1, 59, 5844, 1, 217, 97, 99, 114, 59, 1, 362, 4, 2, 100, 105, 5858, 5905, 101, 114, 4, 2, 66, 80, 5866, 5892, 4, 2, 97, 114, 5872, 5876, 114, 59, 1, 95, 97, 99, 4, 2, 101, 107, 5884, 5887, 59, 1, 9183, 101, 116, 59, 1, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9181, 111, 110, 4, 2, 59, 80, 5913, 5915, 1, 8899, 108, 117, 115, 59, 1, 8846, 4, 2, 103, 112, 5927, 5932, 111, 110, 59, 1, 370, 102, 59, 3, 55349, 56652, 4, 8, 65, 68, 69, 84, 97, 100, 112, 115, 5955, 5985, 5996, 6009, 6026, 6033, 6044, 6075, 114, 114, 111, 119, 4, 3, 59, 66, 68, 5967, 5969, 5974, 1, 8593, 97, 114, 59, 1, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10606, 101, 101, 4, 2, 59, 65, 6017, 6019, 1, 8869, 114, 114, 111, 119, 59, 1, 8613, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 4, 2, 76, 82, 6052, 6063, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8599, 105, 4, 2, 59, 108, 6082, 6084, 1, 978, 111, 110, 59, 1, 933, 105, 110, 103, 59, 1, 366, 99, 114, 59, 3, 55349, 56496, 105, 108, 100, 101, 59, 1, 360, 109, 108, 5, 220, 1, 59, 6115, 1, 220, 4, 9, 68, 98, 99, 100, 101, 102, 111, 115, 118, 6137, 6143, 6148, 6152, 6166, 6250, 6255, 6261, 6267, 97, 115, 104, 59, 1, 8875, 97, 114, 59, 1, 10987, 121, 59, 1, 1042, 97, 115, 104, 4, 2, 59, 108, 6161, 6163, 1, 8873, 59, 1, 10982, 4, 2, 101, 114, 6172, 6175, 59, 1, 8897, 4, 3, 98, 116, 121, 6183, 6188, 6238, 97, 114, 59, 1, 8214, 4, 2, 59, 105, 6194, 6196, 1, 8214, 99, 97, 108, 4, 4, 66, 76, 83, 84, 6209, 6214, 6220, 6231, 97, 114, 59, 1, 8739, 105, 110, 101, 59, 1, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 1, 10072, 105, 108, 100, 101, 59, 1, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8202, 114, 59, 3, 55349, 56601, 112, 102, 59, 3, 55349, 56653, 99, 114, 59, 3, 55349, 56497, 100, 97, 115, 104, 59, 1, 8874, 4, 5, 99, 101, 102, 111, 115, 6286, 6292, 6298, 6303, 6309, 105, 114, 99, 59, 1, 372, 100, 103, 101, 59, 1, 8896, 114, 59, 3, 55349, 56602, 112, 102, 59, 3, 55349, 56654, 99, 114, 59, 3, 55349, 56498, 4, 4, 102, 105, 111, 115, 6325, 6330, 6333, 6339, 114, 59, 3, 55349, 56603, 59, 1, 926, 112, 102, 59, 3, 55349, 56655, 99, 114, 59, 3, 55349, 56499, 4, 9, 65, 73, 85, 97, 99, 102, 111, 115, 117, 6365, 6370, 6375, 6380, 6391, 6405, 6410, 6416, 6422, 99, 121, 59, 1, 1071, 99, 121, 59, 1, 1031, 99, 121, 59, 1, 1070, 99, 117, 116, 101, 5, 221, 1, 59, 6389, 1, 221, 4, 2, 105, 121, 6397, 6402, 114, 99, 59, 1, 374, 59, 1, 1067, 114, 59, 3, 55349, 56604, 112, 102, 59, 3, 55349, 56656, 99, 114, 59, 3, 55349, 56500, 109, 108, 59, 1, 376, 4, 8, 72, 97, 99, 100, 101, 102, 111, 115, 6445, 6450, 6457, 6472, 6477, 6501, 6505, 6510, 99, 121, 59, 1, 1046, 99, 117, 116, 101, 59, 1, 377, 4, 2, 97, 121, 6463, 6469, 114, 111, 110, 59, 1, 381, 59, 1, 1047, 111, 116, 59, 1, 379, 4, 2, 114, 116, 6483, 6497, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 1, 8203, 97, 59, 1, 918, 114, 59, 1, 8488, 112, 102, 59, 1, 8484, 99, 114, 59, 3, 55349, 56501, 4, 16, 97, 98, 99, 101, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 6550, 6561, 6568, 6612, 6622, 6634, 6645, 6672, 6699, 6854, 6870, 6923, 6933, 6963, 6974, 6983, 99, 117, 116, 101, 5, 225, 1, 59, 6559, 1, 225, 114, 101, 118, 101, 59, 1, 259, 4, 6, 59, 69, 100, 105, 117, 121, 6582, 6584, 6588, 6591, 6600, 6609, 1, 8766, 59, 3, 8766, 819, 59, 1, 8767, 114, 99, 5, 226, 1, 59, 6598, 1, 226, 116, 101, 5, 180, 1, 59, 6607, 1, 180, 59, 1, 1072, 108, 105, 103, 5, 230, 1, 59, 6620, 1, 230, 4, 2, 59, 114, 6628, 6630, 1, 8289, 59, 3, 55349, 56606, 114, 97, 118, 101, 5, 224, 1, 59, 6643, 1, 224, 4, 2, 101, 112, 6651, 6667, 4, 2, 102, 112, 6657, 6663, 115, 121, 109, 59, 1, 8501, 104, 59, 1, 8501, 104, 97, 59, 1, 945, 4, 2, 97, 112, 6678, 6692, 4, 2, 99, 108, 6684, 6688, 114, 59, 1, 257, 103, 59, 1, 10815, 5, 38, 1, 59, 6697, 1, 38, 4, 2, 100, 103, 6705, 6737, 4, 5, 59, 97, 100, 115, 118, 6717, 6719, 6724, 6727, 6734, 1, 8743, 110, 100, 59, 1, 10837, 59, 1, 10844, 108, 111, 112, 101, 59, 1, 10840, 59, 1, 10842, 4, 7, 59, 101, 108, 109, 114, 115, 122, 6753, 6755, 6758, 6762, 6814, 6835, 6848, 1, 8736, 59, 1, 10660, 101, 59, 1, 8736, 115, 100, 4, 2, 59, 97, 6770, 6772, 1, 8737, 4, 8, 97, 98, 99, 100, 101, 102, 103, 104, 6790, 6793, 6796, 6799, 6802, 6805, 6808, 6811, 59, 1, 10664, 59, 1, 10665, 59, 1, 10666, 59, 1, 10667, 59, 1, 10668, 59, 1, 10669, 59, 1, 10670, 59, 1, 10671, 116, 4, 2, 59, 118, 6821, 6823, 1, 8735, 98, 4, 2, 59, 100, 6830, 6832, 1, 8894, 59, 1, 10653, 4, 2, 112, 116, 6841, 6845, 104, 59, 1, 8738, 59, 1, 197, 97, 114, 114, 59, 1, 9084, 4, 2, 103, 112, 6860, 6865, 111, 110, 59, 1, 261, 102, 59, 3, 55349, 56658, 4, 7, 59, 69, 97, 101, 105, 111, 112, 6886, 6888, 6891, 6897, 6900, 6904, 6908, 1, 8776, 59, 1, 10864, 99, 105, 114, 59, 1, 10863, 59, 1, 8778, 100, 59, 1, 8779, 115, 59, 1, 39, 114, 111, 120, 4, 2, 59, 101, 6917, 6919, 1, 8776, 113, 59, 1, 8778, 105, 110, 103, 5, 229, 1, 59, 6931, 1, 229, 4, 3, 99, 116, 121, 6941, 6946, 6949, 114, 59, 3, 55349, 56502, 59, 1, 42, 109, 112, 4, 2, 59, 101, 6957, 6959, 1, 8776, 113, 59, 1, 8781, 105, 108, 100, 101, 5, 227, 1, 59, 6972, 1, 227, 109, 108, 5, 228, 1, 59, 6981, 1, 228, 4, 2, 99, 105, 6989, 6997, 111, 110, 105, 110, 116, 59, 1, 8755, 110, 116, 59, 1, 10769, 4, 16, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 7036, 7041, 7119, 7135, 7149, 7155, 7219, 7224, 7347, 7354, 7463, 7489, 7786, 7793, 7814, 7866, 111, 116, 59, 1, 10989, 4, 2, 99, 114, 7047, 7094, 107, 4, 4, 99, 101, 112, 115, 7058, 7064, 7073, 7080, 111, 110, 103, 59, 1, 8780, 112, 115, 105, 108, 111, 110, 59, 1, 1014, 114, 105, 109, 101, 59, 1, 8245, 105, 109, 4, 2, 59, 101, 7088, 7090, 1, 8765, 113, 59, 1, 8909, 4, 2, 118, 119, 7100, 7105, 101, 101, 59, 1, 8893, 101, 100, 4, 2, 59, 103, 7113, 7115, 1, 8965, 101, 59, 1, 8965, 114, 107, 4, 2, 59, 116, 7127, 7129, 1, 9141, 98, 114, 107, 59, 1, 9142, 4, 2, 111, 121, 7141, 7146, 110, 103, 59, 1, 8780, 59, 1, 1073, 113, 117, 111, 59, 1, 8222, 4, 5, 99, 109, 112, 114, 116, 7167, 7181, 7188, 7193, 7199, 97, 117, 115, 4, 2, 59, 101, 7176, 7178, 1, 8757, 59, 1, 8757, 112, 116, 121, 118, 59, 1, 10672, 115, 105, 59, 1, 1014, 110, 111, 117, 59, 1, 8492, 4, 3, 97, 104, 119, 7207, 7210, 7213, 59, 1, 946, 59, 1, 8502, 101, 101, 110, 59, 1, 8812, 114, 59, 3, 55349, 56607, 103, 4, 7, 99, 111, 115, 116, 117, 118, 119, 7241, 7262, 7288, 7305, 7328, 7335, 7340, 4, 3, 97, 105, 117, 7249, 7253, 7258, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 4, 3, 100, 112, 116, 7270, 7275, 7281, 111, 116, 59, 1, 10752, 108, 117, 115, 59, 1, 10753, 105, 109, 101, 115, 59, 1, 10754, 4, 2, 113, 116, 7294, 7300, 99, 117, 112, 59, 1, 10758, 97, 114, 59, 1, 9733, 114, 105, 97, 110, 103, 108, 101, 4, 2, 100, 117, 7318, 7324, 111, 119, 110, 59, 1, 9661, 112, 59, 1, 9651, 112, 108, 117, 115, 59, 1, 10756, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 97, 114, 111, 119, 59, 1, 10509, 4, 3, 97, 107, 111, 7362, 7436, 7458, 4, 2, 99, 110, 7368, 7432, 107, 4, 3, 108, 115, 116, 7377, 7386, 7394, 111, 122, 101, 110, 103, 101, 59, 1, 10731, 113, 117, 97, 114, 101, 59, 1, 9642, 114, 105, 97, 110, 103, 108, 101, 4, 4, 59, 100, 108, 114, 7411, 7413, 7419, 7425, 1, 9652, 111, 119, 110, 59, 1, 9662, 101, 102, 116, 59, 1, 9666, 105, 103, 104, 116, 59, 1, 9656, 107, 59, 1, 9251, 4, 2, 49, 51, 7442, 7454, 4, 2, 50, 52, 7448, 7451, 59, 1, 9618, 59, 1, 9617, 52, 59, 1, 9619, 99, 107, 59, 1, 9608, 4, 2, 101, 111, 7469, 7485, 4, 2, 59, 113, 7475, 7478, 3, 61, 8421, 117, 105, 118, 59, 3, 8801, 8421, 116, 59, 1, 8976, 4, 4, 112, 116, 119, 120, 7499, 7504, 7517, 7523, 102, 59, 3, 55349, 56659, 4, 2, 59, 116, 7510, 7512, 1, 8869, 111, 109, 59, 1, 8869, 116, 105, 101, 59, 1, 8904, 4, 12, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7549, 7571, 7597, 7619, 7655, 7660, 7682, 7708, 7715, 7721, 7728, 7750, 4, 4, 76, 82, 108, 114, 7559, 7562, 7565, 7568, 59, 1, 9559, 59, 1, 9556, 59, 1, 9558, 59, 1, 9555, 4, 5, 59, 68, 85, 100, 117, 7583, 7585, 7588, 7591, 7594, 1, 9552, 59, 1, 9574, 59, 1, 9577, 59, 1, 9572, 59, 1, 9575, 4, 4, 76, 82, 108, 114, 7607, 7610, 7613, 7616, 59, 1, 9565, 59, 1, 9562, 59, 1, 9564, 59, 1, 9561, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7635, 7637, 7640, 7643, 7646, 7649, 7652, 1, 9553, 59, 1, 9580, 59, 1, 9571, 59, 1, 9568, 59, 1, 9579, 59, 1, 9570, 59, 1, 9567, 111, 120, 59, 1, 10697, 4, 4, 76, 82, 108, 114, 7670, 7673, 7676, 7679, 59, 1, 9557, 59, 1, 9554, 59, 1, 9488, 59, 1, 9484, 4, 5, 59, 68, 85, 100, 117, 7694, 7696, 7699, 7702, 7705, 1, 9472, 59, 1, 9573, 59, 1, 9576, 59, 1, 9516, 59, 1, 9524, 105, 110, 117, 115, 59, 1, 8863, 108, 117, 115, 59, 1, 8862, 105, 109, 101, 115, 59, 1, 8864, 4, 4, 76, 82, 108, 114, 7738, 7741, 7744, 7747, 59, 1, 9563, 59, 1, 9560, 59, 1, 9496, 59, 1, 9492, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7766, 7768, 7771, 7774, 7777, 7780, 7783, 1, 9474, 59, 1, 9578, 59, 1, 9569, 59, 1, 9566, 59, 1, 9532, 59, 1, 9508, 59, 1, 9500, 114, 105, 109, 101, 59, 1, 8245, 4, 2, 101, 118, 7799, 7804, 118, 101, 59, 1, 728, 98, 97, 114, 5, 166, 1, 59, 7812, 1, 166, 4, 4, 99, 101, 105, 111, 7824, 7829, 7834, 7846, 114, 59, 3, 55349, 56503, 109, 105, 59, 1, 8271, 109, 4, 2, 59, 101, 7841, 7843, 1, 8765, 59, 1, 8909, 108, 4, 3, 59, 98, 104, 7855, 7857, 7860, 1, 92, 59, 1, 10693, 115, 117, 98, 59, 1, 10184, 4, 2, 108, 109, 7872, 7885, 108, 4, 2, 59, 101, 7879, 7881, 1, 8226, 116, 59, 1, 8226, 112, 4, 3, 59, 69, 101, 7894, 7896, 7899, 1, 8782, 59, 1, 10926, 4, 2, 59, 113, 7905, 7907, 1, 8783, 59, 1, 8783, 4, 15, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 116, 117, 119, 121, 7942, 8021, 8075, 8080, 8121, 8126, 8157, 8279, 8295, 8430, 8446, 8485, 8491, 8707, 8726, 4, 3, 99, 112, 114, 7950, 7956, 8007, 117, 116, 101, 59, 1, 263, 4, 6, 59, 97, 98, 99, 100, 115, 7970, 7972, 7977, 7984, 7998, 8003, 1, 8745, 110, 100, 59, 1, 10820, 114, 99, 117, 112, 59, 1, 10825, 4, 2, 97, 117, 7990, 7994, 112, 59, 1, 10827, 112, 59, 1, 10823, 111, 116, 59, 1, 10816, 59, 3, 8745, 65024, 4, 2, 101, 111, 8013, 8017, 116, 59, 1, 8257, 110, 59, 1, 711, 4, 4, 97, 101, 105, 117, 8031, 8046, 8056, 8061, 4, 2, 112, 114, 8037, 8041, 115, 59, 1, 10829, 111, 110, 59, 1, 269, 100, 105, 108, 5, 231, 1, 59, 8054, 1, 231, 114, 99, 59, 1, 265, 112, 115, 4, 2, 59, 115, 8069, 8071, 1, 10828, 109, 59, 1, 10832, 111, 116, 59, 1, 267, 4, 3, 100, 109, 110, 8088, 8097, 8104, 105, 108, 5, 184, 1, 59, 8095, 1, 184, 112, 116, 121, 118, 59, 1, 10674, 116, 5, 162, 2, 59, 101, 8112, 8114, 1, 162, 114, 100, 111, 116, 59, 1, 183, 114, 59, 3, 55349, 56608, 4, 3, 99, 101, 105, 8134, 8138, 8154, 121, 59, 1, 1095, 99, 107, 4, 2, 59, 109, 8146, 8148, 1, 10003, 97, 114, 107, 59, 1, 10003, 59, 1, 967, 114, 4, 7, 59, 69, 99, 101, 102, 109, 115, 8174, 8176, 8179, 8258, 8261, 8268, 8273, 1, 9675, 59, 1, 10691, 4, 3, 59, 101, 108, 8187, 8189, 8193, 1, 710, 113, 59, 1, 8791, 101, 4, 2, 97, 100, 8200, 8223, 114, 114, 111, 119, 4, 2, 108, 114, 8210, 8216, 101, 102, 116, 59, 1, 8634, 105, 103, 104, 116, 59, 1, 8635, 4, 5, 82, 83, 97, 99, 100, 8235, 8238, 8241, 8246, 8252, 59, 1, 174, 59, 1, 9416, 115, 116, 59, 1, 8859, 105, 114, 99, 59, 1, 8858, 97, 115, 104, 59, 1, 8861, 59, 1, 8791, 110, 105, 110, 116, 59, 1, 10768, 105, 100, 59, 1, 10991, 99, 105, 114, 59, 1, 10690, 117, 98, 115, 4, 2, 59, 117, 8288, 8290, 1, 9827, 105, 116, 59, 1, 9827, 4, 4, 108, 109, 110, 112, 8305, 8326, 8376, 8400, 111, 110, 4, 2, 59, 101, 8313, 8315, 1, 58, 4, 2, 59, 113, 8321, 8323, 1, 8788, 59, 1, 8788, 4, 2, 109, 112, 8332, 8344, 97, 4, 2, 59, 116, 8339, 8341, 1, 44, 59, 1, 64, 4, 3, 59, 102, 108, 8352, 8354, 8358, 1, 8705, 110, 59, 1, 8728, 101, 4, 2, 109, 120, 8365, 8371, 101, 110, 116, 59, 1, 8705, 101, 115, 59, 1, 8450, 4, 2, 103, 105, 8382, 8395, 4, 2, 59, 100, 8388, 8390, 1, 8773, 111, 116, 59, 1, 10861, 110, 116, 59, 1, 8750, 4, 3, 102, 114, 121, 8408, 8412, 8417, 59, 3, 55349, 56660, 111, 100, 59, 1, 8720, 5, 169, 2, 59, 115, 8424, 8426, 1, 169, 114, 59, 1, 8471, 4, 2, 97, 111, 8436, 8441, 114, 114, 59, 1, 8629, 115, 115, 59, 1, 10007, 4, 2, 99, 117, 8452, 8457, 114, 59, 3, 55349, 56504, 4, 2, 98, 112, 8463, 8474, 4, 2, 59, 101, 8469, 8471, 1, 10959, 59, 1, 10961, 4, 2, 59, 101, 8480, 8482, 1, 10960, 59, 1, 10962, 100, 111, 116, 59, 1, 8943, 4, 7, 100, 101, 108, 112, 114, 118, 119, 8507, 8522, 8536, 8550, 8600, 8697, 8702, 97, 114, 114, 4, 2, 108, 114, 8516, 8519, 59, 1, 10552, 59, 1, 10549, 4, 2, 112, 115, 8528, 8532, 114, 59, 1, 8926, 99, 59, 1, 8927, 97, 114, 114, 4, 2, 59, 112, 8545, 8547, 1, 8630, 59, 1, 10557, 4, 6, 59, 98, 99, 100, 111, 115, 8564, 8566, 8573, 8587, 8592, 8596, 1, 8746, 114, 99, 97, 112, 59, 1, 10824, 4, 2, 97, 117, 8579, 8583, 112, 59, 1, 10822, 112, 59, 1, 10826, 111, 116, 59, 1, 8845, 114, 59, 1, 10821, 59, 3, 8746, 65024, 4, 4, 97, 108, 114, 118, 8610, 8623, 8663, 8672, 114, 114, 4, 2, 59, 109, 8618, 8620, 1, 8631, 59, 1, 10556, 121, 4, 3, 101, 118, 119, 8632, 8651, 8656, 113, 4, 2, 112, 115, 8639, 8645, 114, 101, 99, 59, 1, 8926, 117, 99, 99, 59, 1, 8927, 101, 101, 59, 1, 8910, 101, 100, 103, 101, 59, 1, 8911, 101, 110, 5, 164, 1, 59, 8670, 1, 164, 101, 97, 114, 114, 111, 119, 4, 2, 108, 114, 8684, 8690, 101, 102, 116, 59, 1, 8630, 105, 103, 104, 116, 59, 1, 8631, 101, 101, 59, 1, 8910, 101, 100, 59, 1, 8911, 4, 2, 99, 105, 8713, 8721, 111, 110, 105, 110, 116, 59, 1, 8754, 110, 116, 59, 1, 8753, 108, 99, 116, 121, 59, 1, 9005, 4, 19, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8773, 8778, 8783, 8821, 8839, 8854, 8887, 8914, 8930, 8944, 9036, 9041, 9058, 9197, 9227, 9258, 9281, 9297, 9305, 114, 114, 59, 1, 8659, 97, 114, 59, 1, 10597, 4, 4, 103, 108, 114, 115, 8793, 8799, 8805, 8809, 103, 101, 114, 59, 1, 8224, 101, 116, 104, 59, 1, 8504, 114, 59, 1, 8595, 104, 4, 2, 59, 118, 8816, 8818, 1, 8208, 59, 1, 8867, 4, 2, 107, 108, 8827, 8834, 97, 114, 111, 119, 59, 1, 10511, 97, 99, 59, 1, 733, 4, 2, 97, 121, 8845, 8851, 114, 111, 110, 59, 1, 271, 59, 1, 1076, 4, 3, 59, 97, 111, 8862, 8864, 8880, 1, 8518, 4, 2, 103, 114, 8870, 8876, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8650, 116, 115, 101, 113, 59, 1, 10871, 4, 3, 103, 108, 109, 8895, 8902, 8907, 5, 176, 1, 59, 8900, 1, 176, 116, 97, 59, 1, 948, 112, 116, 121, 118, 59, 1, 10673, 4, 2, 105, 114, 8920, 8926, 115, 104, 116, 59, 1, 10623, 59, 3, 55349, 56609, 97, 114, 4, 2, 108, 114, 8938, 8941, 59, 1, 8643, 59, 1, 8642, 4, 5, 97, 101, 103, 115, 118, 8956, 8986, 8989, 8996, 9001, 109, 4, 3, 59, 111, 115, 8965, 8967, 8983, 1, 8900, 110, 100, 4, 2, 59, 115, 8975, 8977, 1, 8900, 117, 105, 116, 59, 1, 9830, 59, 1, 9830, 59, 1, 168, 97, 109, 109, 97, 59, 1, 989, 105, 110, 59, 1, 8946, 4, 3, 59, 105, 111, 9009, 9011, 9031, 1, 247, 100, 101, 5, 247, 2, 59, 111, 9020, 9022, 1, 247, 110, 116, 105, 109, 101, 115, 59, 1, 8903, 110, 120, 59, 1, 8903, 99, 121, 59, 1, 1106, 99, 4, 2, 111, 114, 9048, 9053, 114, 110, 59, 1, 8990, 111, 112, 59, 1, 8973, 4, 5, 108, 112, 116, 117, 119, 9070, 9076, 9081, 9130, 9144, 108, 97, 114, 59, 1, 36, 102, 59, 3, 55349, 56661, 4, 5, 59, 101, 109, 112, 115, 9093, 9095, 9109, 9116, 9122, 1, 729, 113, 4, 2, 59, 100, 9102, 9104, 1, 8784, 111, 116, 59, 1, 8785, 105, 110, 117, 115, 59, 1, 8760, 108, 117, 115, 59, 1, 8724, 113, 117, 97, 114, 101, 59, 1, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 1, 8966, 110, 4, 3, 97, 100, 104, 9153, 9160, 9172, 114, 114, 111, 119, 59, 1, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 1, 8650, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 9184, 9190, 101, 102, 116, 59, 1, 8643, 105, 103, 104, 116, 59, 1, 8642, 4, 2, 98, 99, 9203, 9211, 107, 97, 114, 111, 119, 59, 1, 10512, 4, 2, 111, 114, 9217, 9222, 114, 110, 59, 1, 8991, 111, 112, 59, 1, 8972, 4, 3, 99, 111, 116, 9235, 9248, 9252, 4, 2, 114, 121, 9241, 9245, 59, 3, 55349, 56505, 59, 1, 1109, 108, 59, 1, 10742, 114, 111, 107, 59, 1, 273, 4, 2, 100, 114, 9264, 9269, 111, 116, 59, 1, 8945, 105, 4, 2, 59, 102, 9276, 9278, 1, 9663, 59, 1, 9662, 4, 2, 97, 104, 9287, 9292, 114, 114, 59, 1, 8693, 97, 114, 59, 1, 10607, 97, 110, 103, 108, 101, 59, 1, 10662, 4, 2, 99, 105, 9311, 9315, 121, 59, 1, 1119, 103, 114, 97, 114, 114, 59, 1, 10239, 4, 18, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 9361, 9376, 9398, 9439, 9444, 9447, 9462, 9495, 9531, 9585, 9598, 9614, 9659, 9755, 9771, 9792, 9808, 9826, 4, 2, 68, 111, 9367, 9372, 111, 116, 59, 1, 10871, 116, 59, 1, 8785, 4, 2, 99, 115, 9382, 9392, 117, 116, 101, 5, 233, 1, 59, 9390, 1, 233, 116, 101, 114, 59, 1, 10862, 4, 4, 97, 105, 111, 121, 9408, 9414, 9430, 9436, 114, 111, 110, 59, 1, 283, 114, 4, 2, 59, 99, 9421, 9423, 1, 8790, 5, 234, 1, 59, 9428, 1, 234, 108, 111, 110, 59, 1, 8789, 59, 1, 1101, 111, 116, 59, 1, 279, 59, 1, 8519, 4, 2, 68, 114, 9453, 9458, 111, 116, 59, 1, 8786, 59, 3, 55349, 56610, 4, 3, 59, 114, 115, 9470, 9472, 9482, 1, 10906, 97, 118, 101, 5, 232, 1, 59, 9480, 1, 232, 4, 2, 59, 100, 9488, 9490, 1, 10902, 111, 116, 59, 1, 10904, 4, 4, 59, 105, 108, 115, 9505, 9507, 9515, 9518, 1, 10905, 110, 116, 101, 114, 115, 59, 1, 9191, 59, 1, 8467, 4, 2, 59, 100, 9524, 9526, 1, 10901, 111, 116, 59, 1, 10903, 4, 3, 97, 112, 115, 9539, 9544, 9564, 99, 114, 59, 1, 275, 116, 121, 4, 3, 59, 115, 118, 9554, 9556, 9561, 1, 8709, 101, 116, 59, 1, 8709, 59, 1, 8709, 112, 4, 2, 49, 59, 9571, 9583, 4, 2, 51, 52, 9577, 9580, 59, 1, 8196, 59, 1, 8197, 1, 8195, 4, 2, 103, 115, 9591, 9594, 59, 1, 331, 112, 59, 1, 8194, 4, 2, 103, 112, 9604, 9609, 111, 110, 59, 1, 281, 102, 59, 3, 55349, 56662, 4, 3, 97, 108, 115, 9622, 9635, 9640, 114, 4, 2, 59, 115, 9629, 9631, 1, 8917, 108, 59, 1, 10723, 117, 115, 59, 1, 10865, 105, 4, 3, 59, 108, 118, 9649, 9651, 9656, 1, 949, 111, 110, 59, 1, 949, 59, 1, 1013, 4, 4, 99, 115, 117, 118, 9669, 9686, 9716, 9747, 4, 2, 105, 111, 9675, 9680, 114, 99, 59, 1, 8790, 108, 111, 110, 59, 1, 8789, 4, 2, 105, 108, 9692, 9696, 109, 59, 1, 8770, 97, 110, 116, 4, 2, 103, 108, 9705, 9710, 116, 114, 59, 1, 10902, 101, 115, 115, 59, 1, 10901, 4, 3, 97, 101, 105, 9724, 9729, 9734, 108, 115, 59, 1, 61, 115, 116, 59, 1, 8799, 118, 4, 2, 59, 68, 9741, 9743, 1, 8801, 68, 59, 1, 10872, 112, 97, 114, 115, 108, 59, 1, 10725, 4, 2, 68, 97, 9761, 9766, 111, 116, 59, 1, 8787, 114, 114, 59, 1, 10609, 4, 3, 99, 100, 105, 9779, 9783, 9788, 114, 59, 1, 8495, 111, 116, 59, 1, 8784, 109, 59, 1, 8770, 4, 2, 97, 104, 9798, 9801, 59, 1, 951, 5, 240, 1, 59, 9806, 1, 240, 4, 2, 109, 114, 9814, 9822, 108, 5, 235, 1, 59, 9820, 1, 235, 111, 59, 1, 8364, 4, 3, 99, 105, 112, 9834, 9838, 9843, 108, 59, 1, 33, 115, 116, 59, 1, 8707, 4, 2, 101, 111, 9849, 9859, 99, 116, 97, 116, 105, 111, 110, 59, 1, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 1, 8519, 4, 12, 97, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 115, 9896, 9910, 9914, 9921, 9954, 9960, 9967, 9989, 9994, 10027, 10036, 10164, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8786, 121, 59, 1, 1092, 109, 97, 108, 101, 59, 1, 9792, 4, 3, 105, 108, 114, 9929, 9935, 9950, 108, 105, 103, 59, 1, 64259, 4, 2, 105, 108, 9941, 9945, 103, 59, 1, 64256, 105, 103, 59, 1, 64260, 59, 3, 55349, 56611, 108, 105, 103, 59, 1, 64257, 108, 105, 103, 59, 3, 102, 106, 4, 3, 97, 108, 116, 9975, 9979, 9984, 116, 59, 1, 9837, 105, 103, 59, 1, 64258, 110, 115, 59, 1, 9649, 111, 102, 59, 1, 402, 4, 2, 112, 114, 1e4, 10005, 102, 59, 3, 55349, 56663, 4, 2, 97, 107, 10011, 10016, 108, 108, 59, 1, 8704, 4, 2, 59, 118, 10022, 10024, 1, 8916, 59, 1, 10969, 97, 114, 116, 105, 110, 116, 59, 1, 10765, 4, 2, 97, 111, 10042, 10159, 4, 2, 99, 115, 10048, 10155, 4, 6, 49, 50, 51, 52, 53, 55, 10062, 10102, 10114, 10135, 10139, 10151, 4, 6, 50, 51, 52, 53, 54, 56, 10076, 10083, 10086, 10093, 10096, 10099, 5, 189, 1, 59, 10081, 1, 189, 59, 1, 8531, 5, 188, 1, 59, 10091, 1, 188, 59, 1, 8533, 59, 1, 8537, 59, 1, 8539, 4, 2, 51, 53, 10108, 10111, 59, 1, 8532, 59, 1, 8534, 4, 3, 52, 53, 56, 10122, 10129, 10132, 5, 190, 1, 59, 10127, 1, 190, 59, 1, 8535, 59, 1, 8540, 53, 59, 1, 8536, 4, 2, 54, 56, 10145, 10148, 59, 1, 8538, 59, 1, 8541, 56, 59, 1, 8542, 108, 59, 1, 8260, 119, 110, 59, 1, 8994, 99, 114, 59, 3, 55349, 56507, 4, 17, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 10206, 10217, 10247, 10254, 10268, 10273, 10358, 10363, 10374, 10380, 10385, 10406, 10458, 10464, 10470, 10497, 10610, 4, 2, 59, 108, 10212, 10214, 1, 8807, 59, 1, 10892, 4, 3, 99, 109, 112, 10225, 10231, 10244, 117, 116, 101, 59, 1, 501, 109, 97, 4, 2, 59, 100, 10239, 10241, 1, 947, 59, 1, 989, 59, 1, 10886, 114, 101, 118, 101, 59, 1, 287, 4, 2, 105, 121, 10260, 10265, 114, 99, 59, 1, 285, 59, 1, 1075, 111, 116, 59, 1, 289, 4, 4, 59, 108, 113, 115, 10283, 10285, 10288, 10308, 1, 8805, 59, 1, 8923, 4, 3, 59, 113, 115, 10296, 10298, 10301, 1, 8805, 59, 1, 8807, 108, 97, 110, 116, 59, 1, 10878, 4, 4, 59, 99, 100, 108, 10318, 10320, 10324, 10345, 1, 10878, 99, 59, 1, 10921, 111, 116, 4, 2, 59, 111, 10332, 10334, 1, 10880, 4, 2, 59, 108, 10340, 10342, 1, 10882, 59, 1, 10884, 4, 2, 59, 101, 10351, 10354, 3, 8923, 65024, 115, 59, 1, 10900, 114, 59, 3, 55349, 56612, 4, 2, 59, 103, 10369, 10371, 1, 8811, 59, 1, 8921, 109, 101, 108, 59, 1, 8503, 99, 121, 59, 1, 1107, 4, 4, 59, 69, 97, 106, 10395, 10397, 10400, 10403, 1, 8823, 59, 1, 10898, 59, 1, 10917, 59, 1, 10916, 4, 4, 69, 97, 101, 115, 10416, 10419, 10434, 10453, 59, 1, 8809, 112, 4, 2, 59, 112, 10426, 10428, 1, 10890, 114, 111, 120, 59, 1, 10890, 4, 2, 59, 113, 10440, 10442, 1, 10888, 4, 2, 59, 113, 10448, 10450, 1, 10888, 59, 1, 8809, 105, 109, 59, 1, 8935, 112, 102, 59, 3, 55349, 56664, 97, 118, 101, 59, 1, 96, 4, 2, 99, 105, 10476, 10480, 114, 59, 1, 8458, 109, 4, 3, 59, 101, 108, 10489, 10491, 10494, 1, 8819, 59, 1, 10894, 59, 1, 10896, 5, 62, 6, 59, 99, 100, 108, 113, 114, 10512, 10514, 10527, 10532, 10538, 10545, 1, 62, 4, 2, 99, 105, 10520, 10523, 59, 1, 10919, 114, 59, 1, 10874, 111, 116, 59, 1, 8919, 80, 97, 114, 59, 1, 10645, 117, 101, 115, 116, 59, 1, 10876, 4, 5, 97, 100, 101, 108, 115, 10557, 10574, 10579, 10599, 10605, 4, 2, 112, 114, 10563, 10570, 112, 114, 111, 120, 59, 1, 10886, 114, 59, 1, 10616, 111, 116, 59, 1, 8919, 113, 4, 2, 108, 113, 10586, 10592, 101, 115, 115, 59, 1, 8923, 108, 101, 115, 115, 59, 1, 10892, 101, 115, 115, 59, 1, 8823, 105, 109, 59, 1, 8819, 4, 2, 101, 110, 10616, 10626, 114, 116, 110, 101, 113, 113, 59, 3, 8809, 65024, 69, 59, 3, 8809, 65024, 4, 10, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 10653, 10658, 10713, 10718, 10724, 10760, 10765, 10786, 10850, 10875, 114, 114, 59, 1, 8660, 4, 4, 105, 108, 109, 114, 10668, 10674, 10678, 10684, 114, 115, 112, 59, 1, 8202, 102, 59, 1, 189, 105, 108, 116, 59, 1, 8459, 4, 2, 100, 114, 10690, 10695, 99, 121, 59, 1, 1098, 4, 3, 59, 99, 119, 10703, 10705, 10710, 1, 8596, 105, 114, 59, 1, 10568, 59, 1, 8621, 97, 114, 59, 1, 8463, 105, 114, 99, 59, 1, 293, 4, 3, 97, 108, 114, 10732, 10748, 10754, 114, 116, 115, 4, 2, 59, 117, 10741, 10743, 1, 9829, 105, 116, 59, 1, 9829, 108, 105, 112, 59, 1, 8230, 99, 111, 110, 59, 1, 8889, 114, 59, 3, 55349, 56613, 115, 4, 2, 101, 119, 10772, 10779, 97, 114, 111, 119, 59, 1, 10533, 97, 114, 111, 119, 59, 1, 10534, 4, 5, 97, 109, 111, 112, 114, 10798, 10803, 10809, 10839, 10844, 114, 114, 59, 1, 8703, 116, 104, 116, 59, 1, 8763, 107, 4, 2, 108, 114, 10816, 10827, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8618, 102, 59, 3, 55349, 56665, 98, 97, 114, 59, 1, 8213, 4, 3, 99, 108, 116, 10858, 10863, 10869, 114, 59, 3, 55349, 56509, 97, 115, 104, 59, 1, 8463, 114, 111, 107, 59, 1, 295, 4, 2, 98, 112, 10881, 10887, 117, 108, 108, 59, 1, 8259, 104, 101, 110, 59, 1, 8208, 4, 15, 97, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 10925, 10936, 10958, 10977, 10990, 11001, 11039, 11045, 11101, 11192, 11220, 11226, 11237, 11285, 11299, 99, 117, 116, 101, 5, 237, 1, 59, 10934, 1, 237, 4, 3, 59, 105, 121, 10944, 10946, 10955, 1, 8291, 114, 99, 5, 238, 1, 59, 10953, 1, 238, 59, 1, 1080, 4, 2, 99, 120, 10964, 10968, 121, 59, 1, 1077, 99, 108, 5, 161, 1, 59, 10975, 1, 161, 4, 2, 102, 114, 10983, 10986, 59, 1, 8660, 59, 3, 55349, 56614, 114, 97, 118, 101, 5, 236, 1, 59, 10999, 1, 236, 4, 4, 59, 105, 110, 111, 11011, 11013, 11028, 11034, 1, 8520, 4, 2, 105, 110, 11019, 11024, 110, 116, 59, 1, 10764, 116, 59, 1, 8749, 102, 105, 110, 59, 1, 10716, 116, 97, 59, 1, 8489, 108, 105, 103, 59, 1, 307, 4, 3, 97, 111, 112, 11053, 11092, 11096, 4, 3, 99, 103, 116, 11061, 11065, 11088, 114, 59, 1, 299, 4, 3, 101, 108, 112, 11073, 11076, 11082, 59, 1, 8465, 105, 110, 101, 59, 1, 8464, 97, 114, 116, 59, 1, 8465, 104, 59, 1, 305, 102, 59, 1, 8887, 101, 100, 59, 1, 437, 4, 5, 59, 99, 102, 111, 116, 11113, 11115, 11121, 11136, 11142, 1, 8712, 97, 114, 101, 59, 1, 8453, 105, 110, 4, 2, 59, 116, 11129, 11131, 1, 8734, 105, 101, 59, 1, 10717, 100, 111, 116, 59, 1, 305, 4, 5, 59, 99, 101, 108, 112, 11154, 11156, 11161, 11179, 11186, 1, 8747, 97, 108, 59, 1, 8890, 4, 2, 103, 114, 11167, 11173, 101, 114, 115, 59, 1, 8484, 99, 97, 108, 59, 1, 8890, 97, 114, 104, 107, 59, 1, 10775, 114, 111, 100, 59, 1, 10812, 4, 4, 99, 103, 112, 116, 11202, 11206, 11211, 11216, 121, 59, 1, 1105, 111, 110, 59, 1, 303, 102, 59, 3, 55349, 56666, 97, 59, 1, 953, 114, 111, 100, 59, 1, 10812, 117, 101, 115, 116, 5, 191, 1, 59, 11235, 1, 191, 4, 2, 99, 105, 11243, 11248, 114, 59, 3, 55349, 56510, 110, 4, 5, 59, 69, 100, 115, 118, 11261, 11263, 11266, 11271, 11282, 1, 8712, 59, 1, 8953, 111, 116, 59, 1, 8949, 4, 2, 59, 118, 11277, 11279, 1, 8948, 59, 1, 8947, 59, 1, 8712, 4, 2, 59, 105, 11291, 11293, 1, 8290, 108, 100, 101, 59, 1, 297, 4, 2, 107, 109, 11305, 11310, 99, 121, 59, 1, 1110, 108, 5, 239, 1, 59, 11316, 1, 239, 4, 6, 99, 102, 109, 111, 115, 117, 11332, 11346, 11351, 11357, 11363, 11380, 4, 2, 105, 121, 11338, 11343, 114, 99, 59, 1, 309, 59, 1, 1081, 114, 59, 3, 55349, 56615, 97, 116, 104, 59, 1, 567, 112, 102, 59, 3, 55349, 56667, 4, 2, 99, 101, 11369, 11374, 114, 59, 3, 55349, 56511, 114, 99, 121, 59, 1, 1112, 107, 99, 121, 59, 1, 1108, 4, 8, 97, 99, 102, 103, 104, 106, 111, 115, 11404, 11418, 11433, 11438, 11445, 11450, 11455, 11461, 112, 112, 97, 4, 2, 59, 118, 11413, 11415, 1, 954, 59, 1, 1008, 4, 2, 101, 121, 11424, 11430, 100, 105, 108, 59, 1, 311, 59, 1, 1082, 114, 59, 3, 55349, 56616, 114, 101, 101, 110, 59, 1, 312, 99, 121, 59, 1, 1093, 99, 121, 59, 1, 1116, 112, 102, 59, 3, 55349, 56668, 99, 114, 59, 3, 55349, 56512, 4, 23, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 11515, 11538, 11544, 11555, 11560, 11721, 11780, 11818, 11868, 12136, 12160, 12171, 12203, 12208, 12246, 12275, 12327, 12509, 12523, 12569, 12641, 12732, 12752, 4, 3, 97, 114, 116, 11523, 11528, 11532, 114, 114, 59, 1, 8666, 114, 59, 1, 8656, 97, 105, 108, 59, 1, 10523, 97, 114, 114, 59, 1, 10510, 4, 2, 59, 103, 11550, 11552, 1, 8806, 59, 1, 10891, 97, 114, 59, 1, 10594, 4, 9, 99, 101, 103, 109, 110, 112, 113, 114, 116, 11580, 11586, 11594, 11600, 11606, 11624, 11627, 11636, 11694, 117, 116, 101, 59, 1, 314, 109, 112, 116, 121, 118, 59, 1, 10676, 114, 97, 110, 59, 1, 8466, 98, 100, 97, 59, 1, 955, 103, 4, 3, 59, 100, 108, 11615, 11617, 11620, 1, 10216, 59, 1, 10641, 101, 59, 1, 10216, 59, 1, 10885, 117, 111, 5, 171, 1, 59, 11634, 1, 171, 114, 4, 8, 59, 98, 102, 104, 108, 112, 115, 116, 11655, 11657, 11669, 11673, 11677, 11681, 11685, 11690, 1, 8592, 4, 2, 59, 102, 11663, 11665, 1, 8676, 115, 59, 1, 10527, 115, 59, 1, 10525, 107, 59, 1, 8617, 112, 59, 1, 8619, 108, 59, 1, 10553, 105, 109, 59, 1, 10611, 108, 59, 1, 8610, 4, 3, 59, 97, 101, 11702, 11704, 11709, 1, 10923, 105, 108, 59, 1, 10521, 4, 2, 59, 115, 11715, 11717, 1, 10925, 59, 3, 10925, 65024, 4, 3, 97, 98, 114, 11729, 11734, 11739, 114, 114, 59, 1, 10508, 114, 107, 59, 1, 10098, 4, 2, 97, 107, 11745, 11758, 99, 4, 2, 101, 107, 11752, 11755, 59, 1, 123, 59, 1, 91, 4, 2, 101, 115, 11764, 11767, 59, 1, 10635, 108, 4, 2, 100, 117, 11774, 11777, 59, 1, 10639, 59, 1, 10637, 4, 4, 97, 101, 117, 121, 11790, 11796, 11811, 11815, 114, 111, 110, 59, 1, 318, 4, 2, 100, 105, 11802, 11807, 105, 108, 59, 1, 316, 108, 59, 1, 8968, 98, 59, 1, 123, 59, 1, 1083, 4, 4, 99, 113, 114, 115, 11828, 11832, 11845, 11864, 97, 59, 1, 10550, 117, 111, 4, 2, 59, 114, 11840, 11842, 1, 8220, 59, 1, 8222, 4, 2, 100, 117, 11851, 11857, 104, 97, 114, 59, 1, 10599, 115, 104, 97, 114, 59, 1, 10571, 104, 59, 1, 8626, 4, 5, 59, 102, 103, 113, 115, 11880, 11882, 12008, 12011, 12031, 1, 8804, 116, 4, 5, 97, 104, 108, 114, 116, 11895, 11913, 11935, 11947, 11996, 114, 114, 111, 119, 4, 2, 59, 116, 11905, 11907, 1, 8592, 97, 105, 108, 59, 1, 8610, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 11925, 11931, 111, 119, 110, 59, 1, 8637, 112, 59, 1, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8647, 105, 103, 104, 116, 4, 3, 97, 104, 115, 11959, 11974, 11984, 114, 114, 111, 119, 4, 2, 59, 115, 11969, 11971, 1, 8596, 59, 1, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8907, 59, 1, 8922, 4, 3, 59, 113, 115, 12019, 12021, 12024, 1, 8804, 59, 1, 8806, 108, 97, 110, 116, 59, 1, 10877, 4, 5, 59, 99, 100, 103, 115, 12043, 12045, 12049, 12070, 12083, 1, 10877, 99, 59, 1, 10920, 111, 116, 4, 2, 59, 111, 12057, 12059, 1, 10879, 4, 2, 59, 114, 12065, 12067, 1, 10881, 59, 1, 10883, 4, 2, 59, 101, 12076, 12079, 3, 8922, 65024, 115, 59, 1, 10899, 4, 5, 97, 100, 101, 103, 115, 12095, 12103, 12108, 12126, 12131, 112, 112, 114, 111, 120, 59, 1, 10885, 111, 116, 59, 1, 8918, 113, 4, 2, 103, 113, 12115, 12120, 116, 114, 59, 1, 8922, 103, 116, 114, 59, 1, 10891, 116, 114, 59, 1, 8822, 105, 109, 59, 1, 8818, 4, 3, 105, 108, 114, 12144, 12150, 12156, 115, 104, 116, 59, 1, 10620, 111, 111, 114, 59, 1, 8970, 59, 3, 55349, 56617, 4, 2, 59, 69, 12166, 12168, 1, 8822, 59, 1, 10897, 4, 2, 97, 98, 12177, 12198, 114, 4, 2, 100, 117, 12184, 12187, 59, 1, 8637, 4, 2, 59, 108, 12193, 12195, 1, 8636, 59, 1, 10602, 108, 107, 59, 1, 9604, 99, 121, 59, 1, 1113, 4, 5, 59, 97, 99, 104, 116, 12220, 12222, 12227, 12235, 12241, 1, 8810, 114, 114, 59, 1, 8647, 111, 114, 110, 101, 114, 59, 1, 8990, 97, 114, 100, 59, 1, 10603, 114, 105, 59, 1, 9722, 4, 2, 105, 111, 12252, 12258, 100, 111, 116, 59, 1, 320, 117, 115, 116, 4, 2, 59, 97, 12267, 12269, 1, 9136, 99, 104, 101, 59, 1, 9136, 4, 4, 69, 97, 101, 115, 12285, 12288, 12303, 12322, 59, 1, 8808, 112, 4, 2, 59, 112, 12295, 12297, 1, 10889, 114, 111, 120, 59, 1, 10889, 4, 2, 59, 113, 12309, 12311, 1, 10887, 4, 2, 59, 113, 12317, 12319, 1, 10887, 59, 1, 8808, 105, 109, 59, 1, 8934, 4, 8, 97, 98, 110, 111, 112, 116, 119, 122, 12345, 12359, 12364, 12421, 12446, 12467, 12474, 12490, 4, 2, 110, 114, 12351, 12355, 103, 59, 1, 10220, 114, 59, 1, 8701, 114, 107, 59, 1, 10214, 103, 4, 3, 108, 109, 114, 12373, 12401, 12409, 101, 102, 116, 4, 2, 97, 114, 12382, 12389, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10231, 97, 112, 115, 116, 111, 59, 1, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10230, 112, 97, 114, 114, 111, 119, 4, 2, 108, 114, 12433, 12439, 101, 102, 116, 59, 1, 8619, 105, 103, 104, 116, 59, 1, 8620, 4, 3, 97, 102, 108, 12454, 12458, 12462, 114, 59, 1, 10629, 59, 3, 55349, 56669, 117, 115, 59, 1, 10797, 105, 109, 101, 115, 59, 1, 10804, 4, 2, 97, 98, 12480, 12485, 115, 116, 59, 1, 8727, 97, 114, 59, 1, 95, 4, 3, 59, 101, 102, 12498, 12500, 12506, 1, 9674, 110, 103, 101, 59, 1, 9674, 59, 1, 10731, 97, 114, 4, 2, 59, 108, 12517, 12519, 1, 40, 116, 59, 1, 10643, 4, 5, 97, 99, 104, 109, 116, 12535, 12540, 12548, 12561, 12564, 114, 114, 59, 1, 8646, 111, 114, 110, 101, 114, 59, 1, 8991, 97, 114, 4, 2, 59, 100, 12556, 12558, 1, 8651, 59, 1, 10605, 59, 1, 8206, 114, 105, 59, 1, 8895, 4, 6, 97, 99, 104, 105, 113, 116, 12583, 12589, 12594, 12597, 12614, 12635, 113, 117, 111, 59, 1, 8249, 114, 59, 3, 55349, 56513, 59, 1, 8624, 109, 4, 3, 59, 101, 103, 12606, 12608, 12611, 1, 8818, 59, 1, 10893, 59, 1, 10895, 4, 2, 98, 117, 12620, 12623, 59, 1, 91, 111, 4, 2, 59, 114, 12630, 12632, 1, 8216, 59, 1, 8218, 114, 111, 107, 59, 1, 322, 5, 60, 8, 59, 99, 100, 104, 105, 108, 113, 114, 12660, 12662, 12675, 12680, 12686, 12692, 12698, 12705, 1, 60, 4, 2, 99, 105, 12668, 12671, 59, 1, 10918, 114, 59, 1, 10873, 111, 116, 59, 1, 8918, 114, 101, 101, 59, 1, 8907, 109, 101, 115, 59, 1, 8905, 97, 114, 114, 59, 1, 10614, 117, 101, 115, 116, 59, 1, 10875, 4, 2, 80, 105, 12711, 12716, 97, 114, 59, 1, 10646, 4, 3, 59, 101, 102, 12724, 12726, 12729, 1, 9667, 59, 1, 8884, 59, 1, 9666, 114, 4, 2, 100, 117, 12739, 12746, 115, 104, 97, 114, 59, 1, 10570, 104, 97, 114, 59, 1, 10598, 4, 2, 101, 110, 12758, 12768, 114, 116, 110, 101, 113, 113, 59, 3, 8808, 65024, 69, 59, 3, 8808, 65024, 4, 14, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 12803, 12809, 12893, 12908, 12914, 12928, 12933, 12937, 13011, 13025, 13032, 13049, 13052, 13069, 68, 111, 116, 59, 1, 8762, 4, 4, 99, 108, 112, 114, 12819, 12827, 12849, 12887, 114, 5, 175, 1, 59, 12825, 1, 175, 4, 2, 101, 116, 12833, 12836, 59, 1, 9794, 4, 2, 59, 101, 12842, 12844, 1, 10016, 115, 101, 59, 1, 10016, 4, 2, 59, 115, 12855, 12857, 1, 8614, 116, 111, 4, 4, 59, 100, 108, 117, 12869, 12871, 12877, 12883, 1, 8614, 111, 119, 110, 59, 1, 8615, 101, 102, 116, 59, 1, 8612, 112, 59, 1, 8613, 107, 101, 114, 59, 1, 9646, 4, 2, 111, 121, 12899, 12905, 109, 109, 97, 59, 1, 10793, 59, 1, 1084, 97, 115, 104, 59, 1, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 1, 8737, 114, 59, 3, 55349, 56618, 111, 59, 1, 8487, 4, 3, 99, 100, 110, 12945, 12954, 12985, 114, 111, 5, 181, 1, 59, 12952, 1, 181, 4, 4, 59, 97, 99, 100, 12964, 12966, 12971, 12976, 1, 8739, 115, 116, 59, 1, 42, 105, 114, 59, 1, 10992, 111, 116, 5, 183, 1, 59, 12983, 1, 183, 117, 115, 4, 3, 59, 98, 100, 12995, 12997, 13e3, 1, 8722, 59, 1, 8863, 4, 2, 59, 117, 13006, 13008, 1, 8760, 59, 1, 10794, 4, 2, 99, 100, 13017, 13021, 112, 59, 1, 10971, 114, 59, 1, 8230, 112, 108, 117, 115, 59, 1, 8723, 4, 2, 100, 112, 13038, 13044, 101, 108, 115, 59, 1, 8871, 102, 59, 3, 55349, 56670, 59, 1, 8723, 4, 2, 99, 116, 13058, 13063, 114, 59, 3, 55349, 56514, 112, 111, 115, 59, 1, 8766, 4, 3, 59, 108, 109, 13077, 13079, 13087, 1, 956, 116, 105, 109, 97, 112, 59, 1, 8888, 97, 112, 59, 1, 8888, 4, 24, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 13142, 13165, 13217, 13229, 13247, 13330, 13359, 13414, 13420, 13508, 13513, 13579, 13602, 13626, 13631, 13762, 13767, 13855, 13936, 13995, 14214, 14285, 14312, 14432, 4, 2, 103, 116, 13148, 13152, 59, 3, 8921, 824, 4, 2, 59, 118, 13158, 13161, 3, 8811, 8402, 59, 3, 8811, 824, 4, 3, 101, 108, 116, 13173, 13200, 13204, 102, 116, 4, 2, 97, 114, 13181, 13188, 114, 114, 111, 119, 59, 1, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8654, 59, 3, 8920, 824, 4, 2, 59, 118, 13210, 13213, 3, 8810, 8402, 59, 3, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8655, 4, 2, 68, 100, 13235, 13241, 97, 115, 104, 59, 1, 8879, 97, 115, 104, 59, 1, 8878, 4, 5, 98, 99, 110, 112, 116, 13259, 13264, 13270, 13275, 13308, 108, 97, 59, 1, 8711, 117, 116, 101, 59, 1, 324, 103, 59, 3, 8736, 8402, 4, 5, 59, 69, 105, 111, 112, 13287, 13289, 13293, 13298, 13302, 1, 8777, 59, 3, 10864, 824, 100, 59, 3, 8779, 824, 115, 59, 1, 329, 114, 111, 120, 59, 1, 8777, 117, 114, 4, 2, 59, 97, 13316, 13318, 1, 9838, 108, 4, 2, 59, 115, 13325, 13327, 1, 9838, 59, 1, 8469, 4, 2, 115, 117, 13336, 13344, 112, 5, 160, 1, 59, 13342, 1, 160, 109, 112, 4, 2, 59, 101, 13352, 13355, 3, 8782, 824, 59, 3, 8783, 824, 4, 5, 97, 101, 111, 117, 121, 13371, 13385, 13391, 13407, 13411, 4, 2, 112, 114, 13377, 13380, 59, 1, 10819, 111, 110, 59, 1, 328, 100, 105, 108, 59, 1, 326, 110, 103, 4, 2, 59, 100, 13399, 13401, 1, 8775, 111, 116, 59, 3, 10861, 824, 112, 59, 1, 10818, 59, 1, 1085, 97, 115, 104, 59, 1, 8211, 4, 7, 59, 65, 97, 100, 113, 115, 120, 13436, 13438, 13443, 13466, 13472, 13478, 13494, 1, 8800, 114, 114, 59, 1, 8663, 114, 4, 2, 104, 114, 13450, 13454, 107, 59, 1, 10532, 4, 2, 59, 111, 13460, 13462, 1, 8599, 119, 59, 1, 8599, 111, 116, 59, 3, 8784, 824, 117, 105, 118, 59, 1, 8802, 4, 2, 101, 105, 13484, 13489, 97, 114, 59, 1, 10536, 109, 59, 3, 8770, 824, 105, 115, 116, 4, 2, 59, 115, 13503, 13505, 1, 8708, 59, 1, 8708, 114, 59, 3, 55349, 56619, 4, 4, 69, 101, 115, 116, 13523, 13527, 13563, 13568, 59, 3, 8807, 824, 4, 3, 59, 113, 115, 13535, 13537, 13559, 1, 8817, 4, 3, 59, 113, 115, 13545, 13547, 13551, 1, 8817, 59, 3, 8807, 824, 108, 97, 110, 116, 59, 3, 10878, 824, 59, 3, 10878, 824, 105, 109, 59, 1, 8821, 4, 2, 59, 114, 13574, 13576, 1, 8815, 59, 1, 8815, 4, 3, 65, 97, 112, 13587, 13592, 13597, 114, 114, 59, 1, 8654, 114, 114, 59, 1, 8622, 97, 114, 59, 1, 10994, 4, 3, 59, 115, 118, 13610, 13612, 13623, 1, 8715, 4, 2, 59, 100, 13618, 13620, 1, 8956, 59, 1, 8954, 59, 1, 8715, 99, 121, 59, 1, 1114, 4, 7, 65, 69, 97, 100, 101, 115, 116, 13647, 13652, 13656, 13661, 13665, 13737, 13742, 114, 114, 59, 1, 8653, 59, 3, 8806, 824, 114, 114, 59, 1, 8602, 114, 59, 1, 8229, 4, 4, 59, 102, 113, 115, 13675, 13677, 13703, 13725, 1, 8816, 116, 4, 2, 97, 114, 13684, 13691, 114, 114, 111, 119, 59, 1, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8622, 4, 3, 59, 113, 115, 13711, 13713, 13717, 1, 8816, 59, 3, 8806, 824, 108, 97, 110, 116, 59, 3, 10877, 824, 4, 2, 59, 115, 13731, 13734, 3, 10877, 824, 59, 1, 8814, 105, 109, 59, 1, 8820, 4, 2, 59, 114, 13748, 13750, 1, 8814, 105, 4, 2, 59, 101, 13757, 13759, 1, 8938, 59, 1, 8940, 105, 100, 59, 1, 8740, 4, 2, 112, 116, 13773, 13778, 102, 59, 3, 55349, 56671, 5, 172, 3, 59, 105, 110, 13787, 13789, 13829, 1, 172, 110, 4, 4, 59, 69, 100, 118, 13800, 13802, 13806, 13812, 1, 8713, 59, 3, 8953, 824, 111, 116, 59, 3, 8949, 824, 4, 3, 97, 98, 99, 13820, 13823, 13826, 59, 1, 8713, 59, 1, 8951, 59, 1, 8950, 105, 4, 2, 59, 118, 13836, 13838, 1, 8716, 4, 3, 97, 98, 99, 13846, 13849, 13852, 59, 1, 8716, 59, 1, 8958, 59, 1, 8957, 4, 3, 97, 111, 114, 13863, 13892, 13899, 114, 4, 4, 59, 97, 115, 116, 13874, 13876, 13883, 13888, 1, 8742, 108, 108, 101, 108, 59, 1, 8742, 108, 59, 3, 11005, 8421, 59, 3, 8706, 824, 108, 105, 110, 116, 59, 1, 10772, 4, 3, 59, 99, 101, 13907, 13909, 13914, 1, 8832, 117, 101, 59, 1, 8928, 4, 2, 59, 99, 13920, 13923, 3, 10927, 824, 4, 2, 59, 101, 13929, 13931, 1, 8832, 113, 59, 3, 10927, 824, 4, 4, 65, 97, 105, 116, 13946, 13951, 13971, 13982, 114, 114, 59, 1, 8655, 114, 114, 4, 3, 59, 99, 119, 13961, 13963, 13967, 1, 8603, 59, 3, 10547, 824, 59, 3, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8603, 114, 105, 4, 2, 59, 101, 13990, 13992, 1, 8939, 59, 1, 8941, 4, 7, 99, 104, 105, 109, 112, 113, 117, 14011, 14036, 14060, 14080, 14085, 14090, 14106, 4, 4, 59, 99, 101, 114, 14021, 14023, 14028, 14032, 1, 8833, 117, 101, 59, 1, 8929, 59, 3, 10928, 824, 59, 3, 55349, 56515, 111, 114, 116, 4, 2, 109, 112, 14045, 14050, 105, 100, 59, 1, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8742, 109, 4, 2, 59, 101, 14067, 14069, 1, 8769, 4, 2, 59, 113, 14075, 14077, 1, 8772, 59, 1, 8772, 105, 100, 59, 1, 8740, 97, 114, 59, 1, 8742, 115, 117, 4, 2, 98, 112, 14098, 14102, 101, 59, 1, 8930, 101, 59, 1, 8931, 4, 3, 98, 99, 112, 14114, 14157, 14171, 4, 4, 59, 69, 101, 115, 14124, 14126, 14130, 14133, 1, 8836, 59, 3, 10949, 824, 59, 1, 8840, 101, 116, 4, 2, 59, 101, 14141, 14144, 3, 8834, 8402, 113, 4, 2, 59, 113, 14151, 14153, 1, 8840, 59, 3, 10949, 824, 99, 4, 2, 59, 101, 14164, 14166, 1, 8833, 113, 59, 3, 10928, 824, 4, 4, 59, 69, 101, 115, 14181, 14183, 14187, 14190, 1, 8837, 59, 3, 10950, 824, 59, 1, 8841, 101, 116, 4, 2, 59, 101, 14198, 14201, 3, 8835, 8402, 113, 4, 2, 59, 113, 14208, 14210, 1, 8841, 59, 3, 10950, 824, 4, 4, 103, 105, 108, 114, 14224, 14228, 14238, 14242, 108, 59, 1, 8825, 108, 100, 101, 5, 241, 1, 59, 14236, 1, 241, 103, 59, 1, 8824, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 14254, 14269, 101, 102, 116, 4, 2, 59, 101, 14263, 14265, 1, 8938, 113, 59, 1, 8940, 105, 103, 104, 116, 4, 2, 59, 101, 14279, 14281, 1, 8939, 113, 59, 1, 8941, 4, 2, 59, 109, 14291, 14293, 1, 957, 4, 3, 59, 101, 115, 14301, 14303, 14308, 1, 35, 114, 111, 59, 1, 8470, 112, 59, 1, 8199, 4, 9, 68, 72, 97, 100, 103, 105, 108, 114, 115, 14332, 14338, 14344, 14349, 14355, 14369, 14376, 14408, 14426, 97, 115, 104, 59, 1, 8877, 97, 114, 114, 59, 1, 10500, 112, 59, 3, 8781, 8402, 97, 115, 104, 59, 1, 8876, 4, 2, 101, 116, 14361, 14365, 59, 3, 8805, 8402, 59, 3, 62, 8402, 110, 102, 105, 110, 59, 1, 10718, 4, 3, 65, 101, 116, 14384, 14389, 14393, 114, 114, 59, 1, 10498, 59, 3, 8804, 8402, 4, 2, 59, 114, 14399, 14402, 3, 60, 8402, 105, 101, 59, 3, 8884, 8402, 4, 2, 65, 116, 14414, 14419, 114, 114, 59, 1, 10499, 114, 105, 101, 59, 3, 8885, 8402, 105, 109, 59, 3, 8764, 8402, 4, 3, 65, 97, 110, 14440, 14445, 14468, 114, 114, 59, 1, 8662, 114, 4, 2, 104, 114, 14452, 14456, 107, 59, 1, 10531, 4, 2, 59, 111, 14462, 14464, 1, 8598, 119, 59, 1, 8598, 101, 97, 114, 59, 1, 10535, 4, 18, 83, 97, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 14512, 14515, 14535, 14560, 14597, 14603, 14618, 14643, 14657, 14662, 14701, 14741, 14747, 14769, 14851, 14877, 14907, 14916, 59, 1, 9416, 4, 2, 99, 115, 14521, 14531, 117, 116, 101, 5, 243, 1, 59, 14529, 1, 243, 116, 59, 1, 8859, 4, 2, 105, 121, 14541, 14557, 114, 4, 2, 59, 99, 14548, 14550, 1, 8858, 5, 244, 1, 59, 14555, 1, 244, 59, 1, 1086, 4, 5, 97, 98, 105, 111, 115, 14572, 14577, 14583, 14587, 14591, 115, 104, 59, 1, 8861, 108, 97, 99, 59, 1, 337, 118, 59, 1, 10808, 116, 59, 1, 8857, 111, 108, 100, 59, 1, 10684, 108, 105, 103, 59, 1, 339, 4, 2, 99, 114, 14609, 14614, 105, 114, 59, 1, 10687, 59, 3, 55349, 56620, 4, 3, 111, 114, 116, 14626, 14630, 14640, 110, 59, 1, 731, 97, 118, 101, 5, 242, 1, 59, 14638, 1, 242, 59, 1, 10689, 4, 2, 98, 109, 14649, 14654, 97, 114, 59, 1, 10677, 59, 1, 937, 110, 116, 59, 1, 8750, 4, 4, 97, 99, 105, 116, 14672, 14677, 14693, 14698, 114, 114, 59, 1, 8634, 4, 2, 105, 114, 14683, 14687, 114, 59, 1, 10686, 111, 115, 115, 59, 1, 10683, 110, 101, 59, 1, 8254, 59, 1, 10688, 4, 3, 97, 101, 105, 14709, 14714, 14719, 99, 114, 59, 1, 333, 103, 97, 59, 1, 969, 4, 3, 99, 100, 110, 14727, 14733, 14736, 114, 111, 110, 59, 1, 959, 59, 1, 10678, 117, 115, 59, 1, 8854, 112, 102, 59, 3, 55349, 56672, 4, 3, 97, 101, 108, 14755, 14759, 14764, 114, 59, 1, 10679, 114, 112, 59, 1, 10681, 117, 115, 59, 1, 8853, 4, 7, 59, 97, 100, 105, 111, 115, 118, 14785, 14787, 14792, 14831, 14837, 14841, 14848, 1, 8744, 114, 114, 59, 1, 8635, 4, 4, 59, 101, 102, 109, 14802, 14804, 14817, 14824, 1, 10845, 114, 4, 2, 59, 111, 14811, 14813, 1, 8500, 102, 59, 1, 8500, 5, 170, 1, 59, 14822, 1, 170, 5, 186, 1, 59, 14829, 1, 186, 103, 111, 102, 59, 1, 8886, 114, 59, 1, 10838, 108, 111, 112, 101, 59, 1, 10839, 59, 1, 10843, 4, 3, 99, 108, 111, 14859, 14863, 14873, 114, 59, 1, 8500, 97, 115, 104, 5, 248, 1, 59, 14871, 1, 248, 108, 59, 1, 8856, 105, 4, 2, 108, 109, 14884, 14893, 100, 101, 5, 245, 1, 59, 14891, 1, 245, 101, 115, 4, 2, 59, 97, 14901, 14903, 1, 8855, 115, 59, 1, 10806, 109, 108, 5, 246, 1, 59, 14914, 1, 246, 98, 97, 114, 59, 1, 9021, 4, 12, 97, 99, 101, 102, 104, 105, 108, 109, 111, 114, 115, 117, 14948, 14992, 14996, 15033, 15038, 15068, 15090, 15189, 15192, 15222, 15427, 15441, 114, 4, 4, 59, 97, 115, 116, 14959, 14961, 14976, 14989, 1, 8741, 5, 182, 2, 59, 108, 14968, 14970, 1, 182, 108, 101, 108, 59, 1, 8741, 4, 2, 105, 108, 14982, 14986, 109, 59, 1, 10995, 59, 1, 11005, 59, 1, 8706, 121, 59, 1, 1087, 114, 4, 5, 99, 105, 109, 112, 116, 15009, 15014, 15019, 15024, 15027, 110, 116, 59, 1, 37, 111, 100, 59, 1, 46, 105, 108, 59, 1, 8240, 59, 1, 8869, 101, 110, 107, 59, 1, 8241, 114, 59, 3, 55349, 56621, 4, 3, 105, 109, 111, 15046, 15057, 15063, 4, 2, 59, 118, 15052, 15054, 1, 966, 59, 1, 981, 109, 97, 116, 59, 1, 8499, 110, 101, 59, 1, 9742, 4, 3, 59, 116, 118, 15076, 15078, 15087, 1, 960, 99, 104, 102, 111, 114, 107, 59, 1, 8916, 59, 1, 982, 4, 2, 97, 117, 15096, 15119, 110, 4, 2, 99, 107, 15103, 15115, 107, 4, 2, 59, 104, 15110, 15112, 1, 8463, 59, 1, 8462, 118, 59, 1, 8463, 115, 4, 9, 59, 97, 98, 99, 100, 101, 109, 115, 116, 15140, 15142, 15148, 15151, 15156, 15168, 15171, 15179, 15184, 1, 43, 99, 105, 114, 59, 1, 10787, 59, 1, 8862, 105, 114, 59, 1, 10786, 4, 2, 111, 117, 15162, 15165, 59, 1, 8724, 59, 1, 10789, 59, 1, 10866, 110, 5, 177, 1, 59, 15177, 1, 177, 105, 109, 59, 1, 10790, 119, 111, 59, 1, 10791, 59, 1, 177, 4, 3, 105, 112, 117, 15200, 15208, 15213, 110, 116, 105, 110, 116, 59, 1, 10773, 102, 59, 3, 55349, 56673, 110, 100, 5, 163, 1, 59, 15220, 1, 163, 4, 10, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 15244, 15246, 15249, 15253, 15258, 15334, 15347, 15367, 15416, 15421, 1, 8826, 59, 1, 10931, 112, 59, 1, 10935, 117, 101, 59, 1, 8828, 4, 2, 59, 99, 15264, 15266, 1, 10927, 4, 6, 59, 97, 99, 101, 110, 115, 15280, 15282, 15290, 15299, 15303, 15329, 1, 8826, 112, 112, 114, 111, 120, 59, 1, 10935, 117, 114, 108, 121, 101, 113, 59, 1, 8828, 113, 59, 1, 10927, 4, 3, 97, 101, 115, 15311, 15319, 15324, 112, 112, 114, 111, 120, 59, 1, 10937, 113, 113, 59, 1, 10933, 105, 109, 59, 1, 8936, 105, 109, 59, 1, 8830, 109, 101, 4, 2, 59, 115, 15342, 15344, 1, 8242, 59, 1, 8473, 4, 3, 69, 97, 115, 15355, 15358, 15362, 59, 1, 10933, 112, 59, 1, 10937, 105, 109, 59, 1, 8936, 4, 3, 100, 102, 112, 15375, 15378, 15404, 59, 1, 8719, 4, 3, 97, 108, 115, 15386, 15392, 15398, 108, 97, 114, 59, 1, 9006, 105, 110, 101, 59, 1, 8978, 117, 114, 102, 59, 1, 8979, 4, 2, 59, 116, 15410, 15412, 1, 8733, 111, 59, 1, 8733, 105, 109, 59, 1, 8830, 114, 101, 108, 59, 1, 8880, 4, 2, 99, 105, 15433, 15438, 114, 59, 3, 55349, 56517, 59, 1, 968, 110, 99, 115, 112, 59, 1, 8200, 4, 6, 102, 105, 111, 112, 115, 117, 15462, 15467, 15472, 15478, 15485, 15491, 114, 59, 3, 55349, 56622, 110, 116, 59, 1, 10764, 112, 102, 59, 3, 55349, 56674, 114, 105, 109, 101, 59, 1, 8279, 99, 114, 59, 3, 55349, 56518, 4, 3, 97, 101, 111, 15499, 15520, 15534, 116, 4, 2, 101, 105, 15506, 15515, 114, 110, 105, 111, 110, 115, 59, 1, 8461, 110, 116, 59, 1, 10774, 115, 116, 4, 2, 59, 101, 15528, 15530, 1, 63, 113, 59, 1, 8799, 116, 5, 34, 1, 59, 15540, 1, 34, 4, 21, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 15586, 15609, 15615, 15620, 15796, 15855, 15893, 15931, 15977, 16001, 16039, 16183, 16204, 16222, 16228, 16285, 16312, 16318, 16363, 16408, 16416, 4, 3, 97, 114, 116, 15594, 15599, 15603, 114, 114, 59, 1, 8667, 114, 59, 1, 8658, 97, 105, 108, 59, 1, 10524, 97, 114, 114, 59, 1, 10511, 97, 114, 59, 1, 10596, 4, 7, 99, 100, 101, 110, 113, 114, 116, 15636, 15651, 15656, 15664, 15687, 15696, 15770, 4, 2, 101, 117, 15642, 15646, 59, 3, 8765, 817, 116, 101, 59, 1, 341, 105, 99, 59, 1, 8730, 109, 112, 116, 121, 118, 59, 1, 10675, 103, 4, 4, 59, 100, 101, 108, 15675, 15677, 15680, 15683, 1, 10217, 59, 1, 10642, 59, 1, 10661, 101, 59, 1, 10217, 117, 111, 5, 187, 1, 59, 15694, 1, 187, 114, 4, 11, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 15721, 15723, 15727, 15739, 15742, 15746, 15750, 15754, 15758, 15763, 15767, 1, 8594, 112, 59, 1, 10613, 4, 2, 59, 102, 15733, 15735, 1, 8677, 115, 59, 1, 10528, 59, 1, 10547, 115, 59, 1, 10526, 107, 59, 1, 8618, 112, 59, 1, 8620, 108, 59, 1, 10565, 105, 109, 59, 1, 10612, 108, 59, 1, 8611, 59, 1, 8605, 4, 2, 97, 105, 15776, 15781, 105, 108, 59, 1, 10522, 111, 4, 2, 59, 110, 15788, 15790, 1, 8758, 97, 108, 115, 59, 1, 8474, 4, 3, 97, 98, 114, 15804, 15809, 15814, 114, 114, 59, 1, 10509, 114, 107, 59, 1, 10099, 4, 2, 97, 107, 15820, 15833, 99, 4, 2, 101, 107, 15827, 15830, 59, 1, 125, 59, 1, 93, 4, 2, 101, 115, 15839, 15842, 59, 1, 10636, 108, 4, 2, 100, 117, 15849, 15852, 59, 1, 10638, 59, 1, 10640, 4, 4, 97, 101, 117, 121, 15865, 15871, 15886, 15890, 114, 111, 110, 59, 1, 345, 4, 2, 100, 105, 15877, 15882, 105, 108, 59, 1, 343, 108, 59, 1, 8969, 98, 59, 1, 125, 59, 1, 1088, 4, 4, 99, 108, 113, 115, 15903, 15907, 15914, 15927, 97, 59, 1, 10551, 100, 104, 97, 114, 59, 1, 10601, 117, 111, 4, 2, 59, 114, 15922, 15924, 1, 8221, 59, 1, 8221, 104, 59, 1, 8627, 4, 3, 97, 99, 103, 15939, 15966, 15970, 108, 4, 4, 59, 105, 112, 115, 15950, 15952, 15957, 15963, 1, 8476, 110, 101, 59, 1, 8475, 97, 114, 116, 59, 1, 8476, 59, 1, 8477, 116, 59, 1, 9645, 5, 174, 1, 59, 15975, 1, 174, 4, 3, 105, 108, 114, 15985, 15991, 15997, 115, 104, 116, 59, 1, 10621, 111, 111, 114, 59, 1, 8971, 59, 3, 55349, 56623, 4, 2, 97, 111, 16007, 16028, 114, 4, 2, 100, 117, 16014, 16017, 59, 1, 8641, 4, 2, 59, 108, 16023, 16025, 1, 8640, 59, 1, 10604, 4, 2, 59, 118, 16034, 16036, 1, 961, 59, 1, 1009, 4, 3, 103, 110, 115, 16047, 16167, 16171, 104, 116, 4, 6, 97, 104, 108, 114, 115, 116, 16063, 16081, 16103, 16130, 16143, 16155, 114, 114, 111, 119, 4, 2, 59, 116, 16073, 16075, 1, 8594, 97, 105, 108, 59, 1, 8611, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 16093, 16099, 111, 119, 110, 59, 1, 8641, 112, 59, 1, 8640, 101, 102, 116, 4, 2, 97, 104, 16112, 16120, 114, 114, 111, 119, 115, 59, 1, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8908, 103, 59, 1, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8787, 4, 3, 97, 104, 109, 16191, 16196, 16201, 114, 114, 59, 1, 8644, 97, 114, 59, 1, 8652, 59, 1, 8207, 111, 117, 115, 116, 4, 2, 59, 97, 16214, 16216, 1, 9137, 99, 104, 101, 59, 1, 9137, 109, 105, 100, 59, 1, 10990, 4, 4, 97, 98, 112, 116, 16238, 16252, 16257, 16278, 4, 2, 110, 114, 16244, 16248, 103, 59, 1, 10221, 114, 59, 1, 8702, 114, 107, 59, 1, 10215, 4, 3, 97, 102, 108, 16265, 16269, 16273, 114, 59, 1, 10630, 59, 3, 55349, 56675, 117, 115, 59, 1, 10798, 105, 109, 101, 115, 59, 1, 10805, 4, 2, 97, 112, 16291, 16304, 114, 4, 2, 59, 103, 16298, 16300, 1, 41, 116, 59, 1, 10644, 111, 108, 105, 110, 116, 59, 1, 10770, 97, 114, 114, 59, 1, 8649, 4, 4, 97, 99, 104, 113, 16328, 16334, 16339, 16342, 113, 117, 111, 59, 1, 8250, 114, 59, 3, 55349, 56519, 59, 1, 8625, 4, 2, 98, 117, 16348, 16351, 59, 1, 93, 111, 4, 2, 59, 114, 16358, 16360, 1, 8217, 59, 1, 8217, 4, 3, 104, 105, 114, 16371, 16377, 16383, 114, 101, 101, 59, 1, 8908, 109, 101, 115, 59, 1, 8906, 105, 4, 4, 59, 101, 102, 108, 16394, 16396, 16399, 16402, 1, 9657, 59, 1, 8885, 59, 1, 9656, 116, 114, 105, 59, 1, 10702, 108, 117, 104, 97, 114, 59, 1, 10600, 59, 1, 8478, 4, 19, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 16459, 16466, 16472, 16572, 16590, 16672, 16687, 16746, 16844, 16850, 16924, 16963, 16988, 17115, 17121, 17154, 17206, 17614, 17656, 99, 117, 116, 101, 59, 1, 347, 113, 117, 111, 59, 1, 8218, 4, 10, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 16494, 16496, 16499, 16513, 16518, 16531, 16536, 16556, 16564, 16569, 1, 8827, 59, 1, 10932, 4, 2, 112, 114, 16505, 16508, 59, 1, 10936, 111, 110, 59, 1, 353, 117, 101, 59, 1, 8829, 4, 2, 59, 100, 16524, 16526, 1, 10928, 105, 108, 59, 1, 351, 114, 99, 59, 1, 349, 4, 3, 69, 97, 115, 16544, 16547, 16551, 59, 1, 10934, 112, 59, 1, 10938, 105, 109, 59, 1, 8937, 111, 108, 105, 110, 116, 59, 1, 10771, 105, 109, 59, 1, 8831, 59, 1, 1089, 111, 116, 4, 3, 59, 98, 101, 16582, 16584, 16587, 1, 8901, 59, 1, 8865, 59, 1, 10854, 4, 7, 65, 97, 99, 109, 115, 116, 120, 16606, 16611, 16634, 16642, 16646, 16652, 16668, 114, 114, 59, 1, 8664, 114, 4, 2, 104, 114, 16618, 16622, 107, 59, 1, 10533, 4, 2, 59, 111, 16628, 16630, 1, 8600, 119, 59, 1, 8600, 116, 5, 167, 1, 59, 16640, 1, 167, 105, 59, 1, 59, 119, 97, 114, 59, 1, 10537, 109, 4, 2, 105, 110, 16659, 16665, 110, 117, 115, 59, 1, 8726, 59, 1, 8726, 116, 59, 1, 10038, 114, 4, 2, 59, 111, 16679, 16682, 3, 55349, 56624, 119, 110, 59, 1, 8994, 4, 4, 97, 99, 111, 121, 16697, 16702, 16716, 16739, 114, 112, 59, 1, 9839, 4, 2, 104, 121, 16708, 16713, 99, 121, 59, 1, 1097, 59, 1, 1096, 114, 116, 4, 2, 109, 112, 16724, 16729, 105, 100, 59, 1, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8741, 5, 173, 1, 59, 16744, 1, 173, 4, 2, 103, 109, 16752, 16770, 109, 97, 4, 3, 59, 102, 118, 16762, 16764, 16767, 1, 963, 59, 1, 962, 59, 1, 962, 4, 8, 59, 100, 101, 103, 108, 110, 112, 114, 16788, 16790, 16795, 16806, 16817, 16828, 16832, 16838, 1, 8764, 111, 116, 59, 1, 10858, 4, 2, 59, 113, 16801, 16803, 1, 8771, 59, 1, 8771, 4, 2, 59, 69, 16812, 16814, 1, 10910, 59, 1, 10912, 4, 2, 59, 69, 16823, 16825, 1, 10909, 59, 1, 10911, 101, 59, 1, 8774, 108, 117, 115, 59, 1, 10788, 97, 114, 114, 59, 1, 10610, 97, 114, 114, 59, 1, 8592, 4, 4, 97, 101, 105, 116, 16860, 16883, 16891, 16904, 4, 2, 108, 115, 16866, 16878, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 1, 8726, 104, 112, 59, 1, 10803, 112, 97, 114, 115, 108, 59, 1, 10724, 4, 2, 100, 108, 16897, 16900, 59, 1, 8739, 101, 59, 1, 8995, 4, 2, 59, 101, 16910, 16912, 1, 10922, 4, 2, 59, 115, 16918, 16920, 1, 10924, 59, 3, 10924, 65024, 4, 3, 102, 108, 112, 16932, 16938, 16958, 116, 99, 121, 59, 1, 1100, 4, 2, 59, 98, 16944, 16946, 1, 47, 4, 2, 59, 97, 16952, 16954, 1, 10692, 114, 59, 1, 9023, 102, 59, 3, 55349, 56676, 97, 4, 2, 100, 114, 16970, 16985, 101, 115, 4, 2, 59, 117, 16978, 16980, 1, 9824, 105, 116, 59, 1, 9824, 59, 1, 8741, 4, 3, 99, 115, 117, 16996, 17028, 17089, 4, 2, 97, 117, 17002, 17015, 112, 4, 2, 59, 115, 17009, 17011, 1, 8851, 59, 3, 8851, 65024, 112, 4, 2, 59, 115, 17022, 17024, 1, 8852, 59, 3, 8852, 65024, 117, 4, 2, 98, 112, 17035, 17062, 4, 3, 59, 101, 115, 17043, 17045, 17048, 1, 8847, 59, 1, 8849, 101, 116, 4, 2, 59, 101, 17056, 17058, 1, 8847, 113, 59, 1, 8849, 4, 3, 59, 101, 115, 17070, 17072, 17075, 1, 8848, 59, 1, 8850, 101, 116, 4, 2, 59, 101, 17083, 17085, 1, 8848, 113, 59, 1, 8850, 4, 3, 59, 97, 102, 17097, 17099, 17112, 1, 9633, 114, 4, 2, 101, 102, 17106, 17109, 59, 1, 9633, 59, 1, 9642, 59, 1, 9642, 97, 114, 114, 59, 1, 8594, 4, 4, 99, 101, 109, 116, 17131, 17136, 17142, 17148, 114, 59, 3, 55349, 56520, 116, 109, 110, 59, 1, 8726, 105, 108, 101, 59, 1, 8995, 97, 114, 102, 59, 1, 8902, 4, 2, 97, 114, 17160, 17172, 114, 4, 2, 59, 102, 17167, 17169, 1, 9734, 59, 1, 9733, 4, 2, 97, 110, 17178, 17202, 105, 103, 104, 116, 4, 2, 101, 112, 17188, 17197, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 104, 105, 59, 1, 981, 115, 59, 1, 175, 4, 5, 98, 99, 109, 110, 112, 17218, 17351, 17420, 17423, 17427, 4, 9, 59, 69, 100, 101, 109, 110, 112, 114, 115, 17238, 17240, 17243, 17248, 17261, 17267, 17279, 17285, 17291, 1, 8834, 59, 1, 10949, 111, 116, 59, 1, 10941, 4, 2, 59, 100, 17254, 17256, 1, 8838, 111, 116, 59, 1, 10947, 117, 108, 116, 59, 1, 10945, 4, 2, 69, 101, 17273, 17276, 59, 1, 10955, 59, 1, 8842, 108, 117, 115, 59, 1, 10943, 97, 114, 114, 59, 1, 10617, 4, 3, 101, 105, 117, 17299, 17335, 17339, 116, 4, 3, 59, 101, 110, 17308, 17310, 17322, 1, 8834, 113, 4, 2, 59, 113, 17317, 17319, 1, 8838, 59, 1, 10949, 101, 113, 4, 2, 59, 113, 17330, 17332, 1, 8842, 59, 1, 10955, 109, 59, 1, 10951, 4, 2, 98, 112, 17345, 17348, 59, 1, 10965, 59, 1, 10963, 99, 4, 6, 59, 97, 99, 101, 110, 115, 17366, 17368, 17376, 17385, 17389, 17415, 1, 8827, 112, 112, 114, 111, 120, 59, 1, 10936, 117, 114, 108, 121, 101, 113, 59, 1, 8829, 113, 59, 1, 10928, 4, 3, 97, 101, 115, 17397, 17405, 17410, 112, 112, 114, 111, 120, 59, 1, 10938, 113, 113, 59, 1, 10934, 105, 109, 59, 1, 8937, 105, 109, 59, 1, 8831, 59, 1, 8721, 103, 59, 1, 9834, 4, 13, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 17455, 17462, 17469, 17476, 17478, 17481, 17496, 17509, 17524, 17530, 17536, 17548, 17554, 5, 185, 1, 59, 17460, 1, 185, 5, 178, 1, 59, 17467, 1, 178, 5, 179, 1, 59, 17474, 1, 179, 1, 8835, 59, 1, 10950, 4, 2, 111, 115, 17487, 17491, 116, 59, 1, 10942, 117, 98, 59, 1, 10968, 4, 2, 59, 100, 17502, 17504, 1, 8839, 111, 116, 59, 1, 10948, 115, 4, 2, 111, 117, 17516, 17520, 108, 59, 1, 10185, 98, 59, 1, 10967, 97, 114, 114, 59, 1, 10619, 117, 108, 116, 59, 1, 10946, 4, 2, 69, 101, 17542, 17545, 59, 1, 10956, 59, 1, 8843, 108, 117, 115, 59, 1, 10944, 4, 3, 101, 105, 117, 17562, 17598, 17602, 116, 4, 3, 59, 101, 110, 17571, 17573, 17585, 1, 8835, 113, 4, 2, 59, 113, 17580, 17582, 1, 8839, 59, 1, 10950, 101, 113, 4, 2, 59, 113, 17593, 17595, 1, 8843, 59, 1, 10956, 109, 59, 1, 10952, 4, 2, 98, 112, 17608, 17611, 59, 1, 10964, 59, 1, 10966, 4, 3, 65, 97, 110, 17622, 17627, 17650, 114, 114, 59, 1, 8665, 114, 4, 2, 104, 114, 17634, 17638, 107, 59, 1, 10534, 4, 2, 59, 111, 17644, 17646, 1, 8601, 119, 59, 1, 8601, 119, 97, 114, 59, 1, 10538, 108, 105, 103, 5, 223, 1, 59, 17664, 1, 223, 4, 13, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 115, 119, 17694, 17709, 17714, 17737, 17742, 17749, 17754, 17860, 17905, 17957, 17964, 18090, 18122, 4, 2, 114, 117, 17700, 17706, 103, 101, 116, 59, 1, 8982, 59, 1, 964, 114, 107, 59, 1, 9140, 4, 3, 97, 101, 121, 17722, 17728, 17734, 114, 111, 110, 59, 1, 357, 100, 105, 108, 59, 1, 355, 59, 1, 1090, 111, 116, 59, 1, 8411, 108, 114, 101, 99, 59, 1, 8981, 114, 59, 3, 55349, 56625, 4, 4, 101, 105, 107, 111, 17764, 17805, 17836, 17851, 4, 2, 114, 116, 17770, 17786, 101, 4, 2, 52, 102, 17777, 17780, 59, 1, 8756, 111, 114, 101, 59, 1, 8756, 97, 4, 3, 59, 115, 118, 17795, 17797, 17802, 1, 952, 121, 109, 59, 1, 977, 59, 1, 977, 4, 2, 99, 110, 17811, 17831, 107, 4, 2, 97, 115, 17818, 17826, 112, 112, 114, 111, 120, 59, 1, 8776, 105, 109, 59, 1, 8764, 115, 112, 59, 1, 8201, 4, 2, 97, 115, 17842, 17846, 112, 59, 1, 8776, 105, 109, 59, 1, 8764, 114, 110, 5, 254, 1, 59, 17858, 1, 254, 4, 3, 108, 109, 110, 17868, 17873, 17901, 100, 101, 59, 1, 732, 101, 115, 5, 215, 3, 59, 98, 100, 17884, 17886, 17898, 1, 215, 4, 2, 59, 97, 17892, 17894, 1, 8864, 114, 59, 1, 10801, 59, 1, 10800, 116, 59, 1, 8749, 4, 3, 101, 112, 115, 17913, 17917, 17953, 97, 59, 1, 10536, 4, 4, 59, 98, 99, 102, 17927, 17929, 17934, 17939, 1, 8868, 111, 116, 59, 1, 9014, 105, 114, 59, 1, 10993, 4, 2, 59, 111, 17945, 17948, 3, 55349, 56677, 114, 107, 59, 1, 10970, 97, 59, 1, 10537, 114, 105, 109, 101, 59, 1, 8244, 4, 3, 97, 105, 112, 17972, 17977, 18082, 100, 101, 59, 1, 8482, 4, 7, 97, 100, 101, 109, 112, 115, 116, 17993, 18051, 18056, 18059, 18066, 18072, 18076, 110, 103, 108, 101, 4, 5, 59, 100, 108, 113, 114, 18009, 18011, 18017, 18032, 18035, 1, 9653, 111, 119, 110, 59, 1, 9663, 101, 102, 116, 4, 2, 59, 101, 18026, 18028, 1, 9667, 113, 59, 1, 8884, 59, 1, 8796, 105, 103, 104, 116, 4, 2, 59, 101, 18045, 18047, 1, 9657, 113, 59, 1, 8885, 111, 116, 59, 1, 9708, 59, 1, 8796, 105, 110, 117, 115, 59, 1, 10810, 108, 117, 115, 59, 1, 10809, 98, 59, 1, 10701, 105, 109, 101, 59, 1, 10811, 101, 122, 105, 117, 109, 59, 1, 9186, 4, 3, 99, 104, 116, 18098, 18111, 18116, 4, 2, 114, 121, 18104, 18108, 59, 3, 55349, 56521, 59, 1, 1094, 99, 121, 59, 1, 1115, 114, 111, 107, 59, 1, 359, 4, 2, 105, 111, 18128, 18133, 120, 116, 59, 1, 8812, 104, 101, 97, 100, 4, 2, 108, 114, 18143, 18154, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8608, 4, 18, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 18204, 18209, 18214, 18234, 18250, 18268, 18292, 18308, 18319, 18343, 18379, 18397, 18413, 18504, 18547, 18553, 18584, 18603, 114, 114, 59, 1, 8657, 97, 114, 59, 1, 10595, 4, 2, 99, 114, 18220, 18230, 117, 116, 101, 5, 250, 1, 59, 18228, 1, 250, 114, 59, 1, 8593, 114, 4, 2, 99, 101, 18241, 18245, 121, 59, 1, 1118, 118, 101, 59, 1, 365, 4, 2, 105, 121, 18256, 18265, 114, 99, 5, 251, 1, 59, 18263, 1, 251, 59, 1, 1091, 4, 3, 97, 98, 104, 18276, 18281, 18287, 114, 114, 59, 1, 8645, 108, 97, 99, 59, 1, 369, 97, 114, 59, 1, 10606, 4, 2, 105, 114, 18298, 18304, 115, 104, 116, 59, 1, 10622, 59, 3, 55349, 56626, 114, 97, 118, 101, 5, 249, 1, 59, 18317, 1, 249, 4, 2, 97, 98, 18325, 18338, 114, 4, 2, 108, 114, 18332, 18335, 59, 1, 8639, 59, 1, 8638, 108, 107, 59, 1, 9600, 4, 2, 99, 116, 18349, 18374, 4, 2, 111, 114, 18355, 18369, 114, 110, 4, 2, 59, 101, 18363, 18365, 1, 8988, 114, 59, 1, 8988, 111, 112, 59, 1, 8975, 114, 105, 59, 1, 9720, 4, 2, 97, 108, 18385, 18390, 99, 114, 59, 1, 363, 5, 168, 1, 59, 18395, 1, 168, 4, 2, 103, 112, 18403, 18408, 111, 110, 59, 1, 371, 102, 59, 3, 55349, 56678, 4, 6, 97, 100, 104, 108, 115, 117, 18427, 18434, 18445, 18470, 18475, 18494, 114, 114, 111, 119, 59, 1, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8597, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 18457, 18463, 101, 102, 116, 59, 1, 8639, 105, 103, 104, 116, 59, 1, 8638, 117, 115, 59, 1, 8846, 105, 4, 3, 59, 104, 108, 18484, 18486, 18489, 1, 965, 59, 1, 978, 111, 110, 59, 1, 965, 112, 97, 114, 114, 111, 119, 115, 59, 1, 8648, 4, 3, 99, 105, 116, 18512, 18537, 18542, 4, 2, 111, 114, 18518, 18532, 114, 110, 4, 2, 59, 101, 18526, 18528, 1, 8989, 114, 59, 1, 8989, 111, 112, 59, 1, 8974, 110, 103, 59, 1, 367, 114, 105, 59, 1, 9721, 99, 114, 59, 3, 55349, 56522, 4, 3, 100, 105, 114, 18561, 18566, 18572, 111, 116, 59, 1, 8944, 108, 100, 101, 59, 1, 361, 105, 4, 2, 59, 102, 18579, 18581, 1, 9653, 59, 1, 9652, 4, 2, 97, 109, 18590, 18595, 114, 114, 59, 1, 8648, 108, 5, 252, 1, 59, 18601, 1, 252, 97, 110, 103, 108, 101, 59, 1, 10663, 4, 15, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 18643, 18648, 18661, 18667, 18847, 18851, 18857, 18904, 18909, 18915, 18931, 18937, 18943, 18949, 18996, 114, 114, 59, 1, 8661, 97, 114, 4, 2, 59, 118, 18656, 18658, 1, 10984, 59, 1, 10985, 97, 115, 104, 59, 1, 8872, 4, 2, 110, 114, 18673, 18679, 103, 114, 116, 59, 1, 10652, 4, 7, 101, 107, 110, 112, 114, 115, 116, 18695, 18704, 18711, 18720, 18742, 18754, 18810, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 97, 112, 112, 97, 59, 1, 1008, 111, 116, 104, 105, 110, 103, 59, 1, 8709, 4, 3, 104, 105, 114, 18728, 18732, 18735, 105, 59, 1, 981, 59, 1, 982, 111, 112, 116, 111, 59, 1, 8733, 4, 2, 59, 104, 18748, 18750, 1, 8597, 111, 59, 1, 1009, 4, 2, 105, 117, 18760, 18766, 103, 109, 97, 59, 1, 962, 4, 2, 98, 112, 18772, 18791, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18784, 18787, 3, 8842, 65024, 59, 3, 10955, 65024, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18803, 18806, 3, 8843, 65024, 59, 3, 10956, 65024, 4, 2, 104, 114, 18816, 18822, 101, 116, 97, 59, 1, 977, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 18834, 18840, 101, 102, 116, 59, 1, 8882, 105, 103, 104, 116, 59, 1, 8883, 121, 59, 1, 1074, 97, 115, 104, 59, 1, 8866, 4, 3, 101, 108, 114, 18865, 18884, 18890, 4, 3, 59, 98, 101, 18873, 18875, 18880, 1, 8744, 97, 114, 59, 1, 8891, 113, 59, 1, 8794, 108, 105, 112, 59, 1, 8942, 4, 2, 98, 116, 18896, 18901, 97, 114, 59, 1, 124, 59, 1, 124, 114, 59, 3, 55349, 56627, 116, 114, 105, 59, 1, 8882, 115, 117, 4, 2, 98, 112, 18923, 18927, 59, 3, 8834, 8402, 59, 3, 8835, 8402, 112, 102, 59, 3, 55349, 56679, 114, 111, 112, 59, 1, 8733, 116, 114, 105, 59, 1, 8883, 4, 2, 99, 117, 18955, 18960, 114, 59, 3, 55349, 56523, 4, 2, 98, 112, 18966, 18981, 110, 4, 2, 69, 101, 18973, 18977, 59, 3, 10955, 65024, 59, 3, 8842, 65024, 110, 4, 2, 69, 101, 18988, 18992, 59, 3, 10956, 65024, 59, 3, 8843, 65024, 105, 103, 122, 97, 103, 59, 1, 10650, 4, 7, 99, 101, 102, 111, 112, 114, 115, 19020, 19026, 19061, 19066, 19072, 19075, 19089, 105, 114, 99, 59, 1, 373, 4, 2, 100, 105, 19032, 19055, 4, 2, 98, 103, 19038, 19043, 97, 114, 59, 1, 10847, 101, 4, 2, 59, 113, 19050, 19052, 1, 8743, 59, 1, 8793, 101, 114, 112, 59, 1, 8472, 114, 59, 3, 55349, 56628, 112, 102, 59, 3, 55349, 56680, 59, 1, 8472, 4, 2, 59, 101, 19081, 19083, 1, 8768, 97, 116, 104, 59, 1, 8768, 99, 114, 59, 3, 55349, 56524, 4, 14, 99, 100, 102, 104, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 19125, 19146, 19152, 19157, 19173, 19176, 19192, 19197, 19202, 19236, 19252, 19269, 19286, 19291, 4, 3, 97, 105, 117, 19133, 19137, 19142, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 116, 114, 105, 59, 1, 9661, 114, 59, 3, 55349, 56629, 4, 2, 65, 97, 19163, 19168, 114, 114, 59, 1, 10234, 114, 114, 59, 1, 10231, 59, 1, 958, 4, 2, 65, 97, 19182, 19187, 114, 114, 59, 1, 10232, 114, 114, 59, 1, 10229, 97, 112, 59, 1, 10236, 105, 115, 59, 1, 8955, 4, 3, 100, 112, 116, 19210, 19215, 19230, 111, 116, 59, 1, 10752, 4, 2, 102, 108, 19221, 19225, 59, 3, 55349, 56681, 117, 115, 59, 1, 10753, 105, 109, 101, 59, 1, 10754, 4, 2, 65, 97, 19242, 19247, 114, 114, 59, 1, 10233, 114, 114, 59, 1, 10230, 4, 2, 99, 113, 19258, 19263, 114, 59, 3, 55349, 56525, 99, 117, 112, 59, 1, 10758, 4, 2, 112, 116, 19275, 19281, 108, 117, 115, 59, 1, 10756, 114, 105, 59, 1, 9651, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 19316, 19335, 19349, 19357, 19362, 19367, 19373, 19379, 99, 4, 2, 117, 121, 19323, 19332, 116, 101, 5, 253, 1, 59, 19330, 1, 253, 59, 1, 1103, 4, 2, 105, 121, 19341, 19346, 114, 99, 59, 1, 375, 59, 1, 1099, 110, 5, 165, 1, 59, 19355, 1, 165, 114, 59, 3, 55349, 56630, 99, 121, 59, 1, 1111, 112, 102, 59, 3, 55349, 56682, 99, 114, 59, 3, 55349, 56526, 4, 2, 99, 109, 19385, 19389, 121, 59, 1, 1102, 108, 5, 255, 1, 59, 19395, 1, 255, 4, 10, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 19419, 19426, 19441, 19446, 19462, 19467, 19472, 19480, 19486, 19492, 99, 117, 116, 101, 59, 1, 378, 4, 2, 97, 121, 19432, 19438, 114, 111, 110, 59, 1, 382, 59, 1, 1079, 111, 116, 59, 1, 380, 4, 2, 101, 116, 19452, 19458, 116, 114, 102, 59, 1, 8488, 97, 59, 1, 950, 114, 59, 3, 55349, 56631, 99, 121, 59, 1, 1078, 103, 114, 97, 114, 114, 59, 1, 8669, 112, 102, 59, 3, 55349, 56683, 99, 114, 59, 3, 55349, 56527, 4, 2, 106, 110, 19498, 19501, 59, 1, 8205, 106, 59, 1, 8204]);
    }
  });

  // node_modules/parse5/lib/tokenizer/index.js
  var require_tokenizer = __commonJS({
    "node_modules/parse5/lib/tokenizer/index.js"(exports, module) {
      var Preprocessor = require_preprocessor();
      var unicode2 = require_unicode2();
      var neTree = require_named_entity_data();
      var ERR = require_error_codes();
      var $ = unicode2.CODE_POINTS;
      var $$ = unicode2.CODE_POINT_SEQUENCES;
      var C1_CONTROLS_REFERENCE_REPLACEMENTS = {
        128: 8364,
        130: 8218,
        131: 402,
        132: 8222,
        133: 8230,
        134: 8224,
        135: 8225,
        136: 710,
        137: 8240,
        138: 352,
        139: 8249,
        140: 338,
        142: 381,
        145: 8216,
        146: 8217,
        147: 8220,
        148: 8221,
        149: 8226,
        150: 8211,
        151: 8212,
        152: 732,
        153: 8482,
        154: 353,
        155: 8250,
        156: 339,
        158: 382,
        159: 376
      };
      var HAS_DATA_FLAG = 1 << 0;
      var DATA_DUPLET_FLAG = 1 << 1;
      var HAS_BRANCHES_FLAG = 1 << 2;
      var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;
      var DATA_STATE = "DATA_STATE";
      var RCDATA_STATE = "RCDATA_STATE";
      var RAWTEXT_STATE = "RAWTEXT_STATE";
      var SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE";
      var PLAINTEXT_STATE = "PLAINTEXT_STATE";
      var TAG_OPEN_STATE = "TAG_OPEN_STATE";
      var END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE";
      var TAG_NAME_STATE = "TAG_NAME_STATE";
      var RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE";
      var RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE";
      var RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE";
      var RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE";
      var RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE";
      var RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE";
      var SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE";
      var SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE";
      var SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE";
      var SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE";
      var SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE";
      var SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE";
      var BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE";
      var ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE";
      var AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE";
      var BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE";
      var ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE";
      var ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE";
      var ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE";
      var AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE";
      var SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE";
      var BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE";
      var MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE";
      var COMMENT_START_STATE = "COMMENT_START_STATE";
      var COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE";
      var COMMENT_STATE = "COMMENT_STATE";
      var COMMENT_LESS_THAN_SIGN_STATE = "COMMENT_LESS_THAN_SIGN_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_STATE = "COMMENT_LESS_THAN_SIGN_BANG_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE";
      var COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE";
      var COMMENT_END_STATE = "COMMENT_END_STATE";
      var COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE";
      var DOCTYPE_STATE = "DOCTYPE_STATE";
      var BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE";
      var DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE";
      var AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE";
      var AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE";
      var BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
      var DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE";
      var DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE";
      var AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
      var BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE";
      var AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE";
      var BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
      var DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE";
      var DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE";
      var AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
      var BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE";
      var CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
      var CDATA_SECTION_BRACKET_STATE = "CDATA_SECTION_BRACKET_STATE";
      var CDATA_SECTION_END_STATE = "CDATA_SECTION_END_STATE";
      var CHARACTER_REFERENCE_STATE = "CHARACTER_REFERENCE_STATE";
      var NAMED_CHARACTER_REFERENCE_STATE = "NAMED_CHARACTER_REFERENCE_STATE";
      var AMBIGUOUS_AMPERSAND_STATE = "AMBIGUOS_AMPERSAND_STATE";
      var NUMERIC_CHARACTER_REFERENCE_STATE = "NUMERIC_CHARACTER_REFERENCE_STATE";
      var HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_START_STATE";
      var DECIMAL_CHARACTER_REFERENCE_START_STATE = "DECIMAL_CHARACTER_REFERENCE_START_STATE";
      var HEXADEMICAL_CHARACTER_REFERENCE_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_STATE";
      var DECIMAL_CHARACTER_REFERENCE_STATE = "DECIMAL_CHARACTER_REFERENCE_STATE";
      var NUMERIC_CHARACTER_REFERENCE_END_STATE = "NUMERIC_CHARACTER_REFERENCE_END_STATE";
      function isWhitespace(cp) {
        return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
      }
      function isAsciiDigit(cp) {
        return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
      }
      function isAsciiUpper(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
      }
      function isAsciiLower(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
      }
      function isAsciiLetter(cp) {
        return isAsciiLower(cp) || isAsciiUpper(cp);
      }
      function isAsciiAlphaNumeric(cp) {
        return isAsciiLetter(cp) || isAsciiDigit(cp);
      }
      function isAsciiUpperHexDigit(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;
      }
      function isAsciiLowerHexDigit(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;
      }
      function isAsciiHexDigit(cp) {
        return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
      }
      function toAsciiLowerCodePoint(cp) {
        return cp + 32;
      }
      function toChar(cp) {
        if (cp <= 65535) {
          return String.fromCharCode(cp);
        }
        cp -= 65536;
        return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
      }
      function toAsciiLowerChar(cp) {
        return String.fromCharCode(toAsciiLowerCodePoint(cp));
      }
      function findNamedEntityTreeBranch(nodeIx, cp) {
        const branchCount = neTree[++nodeIx];
        let lo2 = ++nodeIx;
        let hi2 = lo2 + branchCount - 1;
        while (lo2 <= hi2) {
          const mid = lo2 + hi2 >>> 1;
          const midCp = neTree[mid];
          if (midCp < cp) {
            lo2 = mid + 1;
          } else if (midCp > cp) {
            hi2 = mid - 1;
          } else {
            return neTree[mid + branchCount];
          }
        }
        return -1;
      }
      var Tokenizer = class {
        constructor() {
          this.preprocessor = new Preprocessor();
          this.tokenQueue = [];
          this.allowCDATA = false;
          this.state = DATA_STATE;
          this.returnState = "";
          this.charRefCode = -1;
          this.tempBuff = [];
          this.lastStartTagName = "";
          this.consumedAfterSnapshot = -1;
          this.active = false;
          this.currentCharacterToken = null;
          this.currentToken = null;
          this.currentAttr = null;
        }
        _err() {
        }
        _errOnNextCodePoint(err) {
          this._consume();
          this._err(err);
          this._unconsume();
        }
        getNextToken() {
          while (!this.tokenQueue.length && this.active) {
            this.consumedAfterSnapshot = 0;
            const cp = this._consume();
            if (!this._ensureHibernation()) {
              this[this.state](cp);
            }
          }
          return this.tokenQueue.shift();
        }
        write(chunk, isLastChunk) {
          this.active = true;
          this.preprocessor.write(chunk, isLastChunk);
        }
        insertHtmlAtCurrentPos(chunk) {
          this.active = true;
          this.preprocessor.insertHtmlAtCurrentPos(chunk);
        }
        _ensureHibernation() {
          if (this.preprocessor.endOfChunkHit) {
            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
              this.preprocessor.retreat();
            }
            this.active = false;
            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });
            return true;
          }
          return false;
        }
        _consume() {
          this.consumedAfterSnapshot++;
          return this.preprocessor.advance();
        }
        _unconsume() {
          this.consumedAfterSnapshot--;
          this.preprocessor.retreat();
        }
        _reconsumeInState(state) {
          this.state = state;
          this._unconsume();
        }
        _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
          let consumedCount = 0;
          let isMatch = true;
          const patternLength = pattern.length;
          let patternPos = 0;
          let cp = startCp;
          let patternCp = void 0;
          for (; patternPos < patternLength; patternPos++) {
            if (patternPos > 0) {
              cp = this._consume();
              consumedCount++;
            }
            if (cp === $.EOF) {
              isMatch = false;
              break;
            }
            patternCp = pattern[patternPos];
            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
              isMatch = false;
              break;
            }
          }
          if (!isMatch) {
            while (consumedCount--) {
              this._unconsume();
            }
          }
          return isMatch;
        }
        _isTempBufferEqualToScriptString() {
          if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
            return false;
          }
          for (let i = 0; i < this.tempBuff.length; i++) {
            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
              return false;
            }
          }
          return true;
        }
        _createStartTagToken() {
          this.currentToken = {
            type: Tokenizer.START_TAG_TOKEN,
            tagName: "",
            selfClosing: false,
            ackSelfClosing: false,
            attrs: []
          };
        }
        _createEndTagToken() {
          this.currentToken = {
            type: Tokenizer.END_TAG_TOKEN,
            tagName: "",
            selfClosing: false,
            attrs: []
          };
        }
        _createCommentToken() {
          this.currentToken = {
            type: Tokenizer.COMMENT_TOKEN,
            data: ""
          };
        }
        _createDoctypeToken(initialName) {
          this.currentToken = {
            type: Tokenizer.DOCTYPE_TOKEN,
            name: initialName,
            forceQuirks: false,
            publicId: null,
            systemId: null
          };
        }
        _createCharacterToken(type2, ch) {
          this.currentCharacterToken = {
            type: type2,
            chars: ch
          };
        }
        _createEOFToken() {
          this.currentToken = { type: Tokenizer.EOF_TOKEN };
        }
        _createAttr(attrNameFirstCh) {
          this.currentAttr = {
            name: attrNameFirstCh,
            value: ""
          };
        }
        _leaveAttrName(toState) {
          if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
            this.currentToken.attrs.push(this.currentAttr);
          } else {
            this._err(ERR.duplicateAttribute);
          }
          this.state = toState;
        }
        _leaveAttrValue(toState) {
          this.state = toState;
        }
        _emitCurrentToken() {
          this._emitCurrentCharacterToken();
          const ct = this.currentToken;
          this.currentToken = null;
          if (ct.type === Tokenizer.START_TAG_TOKEN) {
            this.lastStartTagName = ct.tagName;
          } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
            if (ct.attrs.length > 0) {
              this._err(ERR.endTagWithAttributes);
            }
            if (ct.selfClosing) {
              this._err(ERR.endTagWithTrailingSolidus);
            }
          }
          this.tokenQueue.push(ct);
        }
        _emitCurrentCharacterToken() {
          if (this.currentCharacterToken) {
            this.tokenQueue.push(this.currentCharacterToken);
            this.currentCharacterToken = null;
          }
        }
        _emitEOFToken() {
          this._createEOFToken();
          this._emitCurrentToken();
        }
        _appendCharToCurrentCharacterToken(type2, ch) {
          if (this.currentCharacterToken && this.currentCharacterToken.type !== type2) {
            this._emitCurrentCharacterToken();
          }
          if (this.currentCharacterToken) {
            this.currentCharacterToken.chars += ch;
          } else {
            this._createCharacterToken(type2, ch);
          }
        }
        _emitCodePoint(cp) {
          let type2 = Tokenizer.CHARACTER_TOKEN;
          if (isWhitespace(cp)) {
            type2 = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          } else if (cp === $.NULL) {
            type2 = Tokenizer.NULL_CHARACTER_TOKEN;
          }
          this._appendCharToCurrentCharacterToken(type2, toChar(cp));
        }
        _emitSeveralCodePoints(codePoints) {
          for (let i = 0; i < codePoints.length; i++) {
            this._emitCodePoint(codePoints[i]);
          }
        }
        _emitChars(ch) {
          this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
        }
        _matchNamedCharacterReference(startCp) {
          let result = null;
          let excess = 1;
          let i = findNamedEntityTreeBranch(0, startCp);
          this.tempBuff.push(startCp);
          while (i > -1) {
            const current = neTree[i];
            const inNode = current < MAX_BRANCH_MARKER_VALUE;
            const nodeWithData = inNode && current & HAS_DATA_FLAG;
            if (nodeWithData) {
              result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
              excess = 0;
            }
            const cp = this._consume();
            this.tempBuff.push(cp);
            excess++;
            if (cp === $.EOF) {
              break;
            }
            if (inNode) {
              i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
            } else {
              i = cp === current ? ++i : -1;
            }
          }
          while (excess--) {
            this.tempBuff.pop();
            this._unconsume();
          }
          return result;
        }
        _isCharacterReferenceInAttribute() {
          return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
        }
        _isCharacterReferenceAttributeQuirk(withSemicolon) {
          if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
            const nextCp = this._consume();
            this._unconsume();
            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
          }
          return false;
        }
        _flushCodePointsConsumedAsCharacterReference() {
          if (this._isCharacterReferenceInAttribute()) {
            for (let i = 0; i < this.tempBuff.length; i++) {
              this.currentAttr.value += toChar(this.tempBuff[i]);
            }
          } else {
            this._emitSeveralCodePoints(this.tempBuff);
          }
          this.tempBuff = [];
        }
        [DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = TAG_OPEN_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = DATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitCodePoint(cp);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [RCDATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.AMPERSAND) {
            this.returnState = RCDATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = RCDATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [RAWTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [PLAINTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [TAG_OPEN_STATE](cp) {
          if (cp === $.EXCLAMATION_MARK) {
            this.state = MARKUP_DECLARATION_OPEN_STATE;
          } else if (cp === $.SOLIDUS) {
            this.state = END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
            this._createStartTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $.QUESTION_MARK) {
            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("<");
            this._emitEOFToken();
          } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._emitChars("<");
            this._reconsumeInState(DATA_STATE);
          }
        }
        [END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingEndTagName);
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("</");
            this._emitEOFToken();
          } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
        }
        [TAG_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          } else if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.tagName += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentToken.tagName += toChar(cp);
          }
        }
        [RCDATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RCDATA_END_TAG_OPEN_STATE;
          } else {
            this._emitChars("<");
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RCDATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RCDATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this.state = DATA_STATE;
                this._emitCurrentToken();
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RAWTEXT_END_TAG_OPEN_STATE;
          } else {
            this._emitChars("<");
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [RAWTEXT_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [RAWTEXT_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
          } else if (cp === $.EXCLAMATION_MARK) {
            this.state = SCRIPT_DATA_ESCAPE_START_STATE;
            this._emitChars("<!");
          } else {
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              } else if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              } else if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
            this._emitChars("-");
          } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars(">");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
            this.tempBuff = [];
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
          } else {
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
          } else {
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars(">");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode2.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
            this._emitChars("/");
          } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
          } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
        }
        [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.EQUALS_SIGN) {
            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
            this._createAttr("=");
            this.state = ATTRIBUTE_NAME_STATE;
          } else {
            this._createAttr("");
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
        }
        [ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
            this._unconsume();
          } else if (cp === $.EQUALS_SIGN) {
            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
          } else if (isAsciiUpper(cp)) {
            this.currentAttr.name += toAsciiLowerChar(cp);
          } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
            this._err(ERR.unexpectedCharacterInAttributeName);
            this.currentAttr.name += toChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.name += unicode2.REPLACEMENT_CHARACTER;
          } else {
            this.currentAttr.name += toChar(cp);
          }
        }
        [AFTER_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $.EQUALS_SIGN) {
            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._createAttr("");
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
        }
        [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingAttributeValue);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else {
            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
          }
        }
        [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
          if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
            this.currentAttr.value += toChar(cp);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
          if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.SOLIDUS) {
            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._err(ERR.missingWhitespaceBetweenAttributes);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
        }
        [SELF_CLOSING_START_TAG_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.selfClosing = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._err(ERR.unexpectedSolidusInTag);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
        }
        [BOGUS_COMMENT_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode2.REPLACEMENT_CHARACTER;
          } else {
            this.currentToken.data += toChar(cp);
          }
        }
        [MARKUP_DECLARATION_OPEN_STATE](cp) {
          if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
            this._createCommentToken();
            this.state = COMMENT_START_STATE;
          } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
            this.state = DOCTYPE_STATE;
          } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
            if (this.allowCDATA) {
              this.state = CDATA_SECTION_STATE;
            } else {
              this._err(ERR.cdataInHtmlContent);
              this._createCommentToken();
              this.currentToken.data = "[CDATA[";
              this.state = BOGUS_COMMENT_STATE;
            }
          } else if (!this._ensureHibernation()) {
            this._err(ERR.incorrectlyOpenedComment);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
        }
        [COMMENT_START_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_START_DASH_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_START_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "-";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += "<";
            this.state = COMMENT_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += toChar(cp);
          }
        }
        [COMMENT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.EXCLAMATION_MARK) {
            this.currentToken.data += "!";
            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += "!";
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
          } else {
            this._reconsumeInState(COMMENT_END_DASH_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
          if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {
            this._err(ERR.nestedComment);
          }
          this._reconsumeInState(COMMENT_END_STATE);
        }
        [COMMENT_END_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "-";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_END_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EXCLAMATION_MARK) {
            this.state = COMMENT_END_BANG_STATE;
          } else if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += "-";
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "--";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_END_BANG_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += "--!";
            this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.incorrectlyClosedComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "--!";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [DOCTYPE_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingWhitespaceBeforeDoctypeName);
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          }
        }
        [BEFORE_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (isAsciiUpper(cp)) {
            this._createDoctypeToken(toAsciiLowerChar(cp));
            this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._createDoctypeToken(unicode2.REPLACEMENT_CHARACTER);
            this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeName);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._createDoctypeToken(toChar(cp));
            this.state = DOCTYPE_NAME_STATE;
          }
        }
        [DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = AFTER_DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
            this.currentToken.name += toAsciiLowerChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.name += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.name += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
          } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
          } else if (!this._ensureHibernation()) {
            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.publicId += toChar(cp);
          }
        }
        [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.publicId += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.systemId += toChar(cp);
          }
        }
        [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode2.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.systemId += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BOGUS_DOCTYPE_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
          } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
          }
        }
        [CDATA_SECTION_STATE](cp) {
          if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_BRACKET_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInCdata);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [CDATA_SECTION_BRACKET_STATE](cp) {
          if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_END_STATE;
          } else {
            this._emitChars("]");
            this._reconsumeInState(CDATA_SECTION_STATE);
          }
        }
        [CDATA_SECTION_END_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
          } else if (cp === $.RIGHT_SQUARE_BRACKET) {
            this._emitChars("]");
          } else {
            this._emitChars("]]");
            this._reconsumeInState(CDATA_SECTION_STATE);
          }
        }
        [CHARACTER_REFERENCE_STATE](cp) {
          this.tempBuff = [$.AMPERSAND];
          if (cp === $.NUMBER_SIGN) {
            this.tempBuff.push(cp);
            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
          } else if (isAsciiAlphaNumeric(cp)) {
            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
          } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [NAMED_CHARACTER_REFERENCE_STATE](cp) {
          const matchResult = this._matchNamedCharacterReference(cp);
          if (this._ensureHibernation()) {
            this.tempBuff = [$.AMPERSAND];
          } else if (matchResult) {
            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;
            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
              if (!withSemicolon) {
                this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
              }
              this.tempBuff = matchResult;
            }
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = this.returnState;
          } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = AMBIGUOUS_AMPERSAND_STATE;
          }
        }
        [AMBIGUOUS_AMPERSAND_STATE](cp) {
          if (isAsciiAlphaNumeric(cp)) {
            if (this._isCharacterReferenceInAttribute()) {
              this.currentAttr.value += toChar(cp);
            } else {
              this._emitCodePoint(cp);
            }
          } else {
            if (cp === $.SEMICOLON) {
              this._err(ERR.unknownNamedCharacterReference);
            }
            this._reconsumeInState(this.returnState);
          }
        }
        [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
          this.charRefCode = 0;
          if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {
            this.tempBuff.push(cp);
            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
          } else {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
          }
        }
        [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiHexDigit(cp)) {
            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
          } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiDigit(cp)) {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
          } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiUpperHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 55;
          } else if (isAsciiLowerHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 87;
          } else if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 48;
          } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
        }
        [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 10 + cp - 48;
          } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
        }
        [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
          if (this.charRefCode === $.NULL) {
            this._err(ERR.nullCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (this.charRefCode > 1114111) {
            this._err(ERR.characterReferenceOutsideUnicodeRange);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (unicode2.isSurrogate(this.charRefCode)) {
            this._err(ERR.surrogateCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (unicode2.isUndefinedCodePoint(this.charRefCode)) {
            this._err(ERR.noncharacterCharacterReference);
          } else if (unicode2.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {
            this._err(ERR.controlCharacterReference);
            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];
            if (replacement) {
              this.charRefCode = replacement;
            }
          }
          this.tempBuff = [this.charRefCode];
          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
        }
      };
      Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
      Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
      Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
      Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
      Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
      Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
      Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
      Tokenizer.EOF_TOKEN = "EOF_TOKEN";
      Tokenizer.HIBERNATION_TOKEN = "HIBERNATION_TOKEN";
      Tokenizer.MODE = {
        DATA: DATA_STATE,
        RCDATA: RCDATA_STATE,
        RAWTEXT: RAWTEXT_STATE,
        SCRIPT_DATA: SCRIPT_DATA_STATE,
        PLAINTEXT: PLAINTEXT_STATE
      };
      Tokenizer.getTokenAttr = function(token, attrName) {
        for (let i = token.attrs.length - 1; i >= 0; i--) {
          if (token.attrs[i].name === attrName) {
            return token.attrs[i].value;
          }
        }
        return null;
      };
      module.exports = Tokenizer;
    }
  });

  // node_modules/parse5/lib/common/html.js
  var require_html = __commonJS({
    "node_modules/parse5/lib/common/html.js"(exports) {
      var NS = exports.NAMESPACES = {
        HTML: "http://www.w3.org/1999/xhtml",
        MATHML: "http://www.w3.org/1998/Math/MathML",
        SVG: "http://www.w3.org/2000/svg",
        XLINK: "http://www.w3.org/1999/xlink",
        XML: "http://www.w3.org/XML/1998/namespace",
        XMLNS: "http://www.w3.org/2000/xmlns/"
      };
      exports.ATTRS = {
        TYPE: "type",
        ACTION: "action",
        ENCODING: "encoding",
        PROMPT: "prompt",
        NAME: "name",
        COLOR: "color",
        FACE: "face",
        SIZE: "size"
      };
      exports.DOCUMENT_MODE = {
        NO_QUIRKS: "no-quirks",
        QUIRKS: "quirks",
        LIMITED_QUIRKS: "limited-quirks"
      };
      var $ = exports.TAG_NAMES = {
        A: "a",
        ADDRESS: "address",
        ANNOTATION_XML: "annotation-xml",
        APPLET: "applet",
        AREA: "area",
        ARTICLE: "article",
        ASIDE: "aside",
        B: "b",
        BASE: "base",
        BASEFONT: "basefont",
        BGSOUND: "bgsound",
        BIG: "big",
        BLOCKQUOTE: "blockquote",
        BODY: "body",
        BR: "br",
        BUTTON: "button",
        CAPTION: "caption",
        CENTER: "center",
        CODE: "code",
        COL: "col",
        COLGROUP: "colgroup",
        DD: "dd",
        DESC: "desc",
        DETAILS: "details",
        DIALOG: "dialog",
        DIR: "dir",
        DIV: "div",
        DL: "dl",
        DT: "dt",
        EM: "em",
        EMBED: "embed",
        FIELDSET: "fieldset",
        FIGCAPTION: "figcaption",
        FIGURE: "figure",
        FONT: "font",
        FOOTER: "footer",
        FOREIGN_OBJECT: "foreignObject",
        FORM: "form",
        FRAME: "frame",
        FRAMESET: "frameset",
        H1: "h1",
        H2: "h2",
        H3: "h3",
        H4: "h4",
        H5: "h5",
        H6: "h6",
        HEAD: "head",
        HEADER: "header",
        HGROUP: "hgroup",
        HR: "hr",
        HTML: "html",
        I: "i",
        IMG: "img",
        IMAGE: "image",
        INPUT: "input",
        IFRAME: "iframe",
        KEYGEN: "keygen",
        LABEL: "label",
        LI: "li",
        LINK: "link",
        LISTING: "listing",
        MAIN: "main",
        MALIGNMARK: "malignmark",
        MARQUEE: "marquee",
        MATH: "math",
        MENU: "menu",
        META: "meta",
        MGLYPH: "mglyph",
        MI: "mi",
        MO: "mo",
        MN: "mn",
        MS: "ms",
        MTEXT: "mtext",
        NAV: "nav",
        NOBR: "nobr",
        NOFRAMES: "noframes",
        NOEMBED: "noembed",
        NOSCRIPT: "noscript",
        OBJECT: "object",
        OL: "ol",
        OPTGROUP: "optgroup",
        OPTION: "option",
        P: "p",
        PARAM: "param",
        PLAINTEXT: "plaintext",
        PRE: "pre",
        RB: "rb",
        RP: "rp",
        RT: "rt",
        RTC: "rtc",
        RUBY: "ruby",
        S: "s",
        SCRIPT: "script",
        SECTION: "section",
        SELECT: "select",
        SOURCE: "source",
        SMALL: "small",
        SPAN: "span",
        STRIKE: "strike",
        STRONG: "strong",
        STYLE: "style",
        SUB: "sub",
        SUMMARY: "summary",
        SUP: "sup",
        TABLE: "table",
        TBODY: "tbody",
        TEMPLATE: "template",
        TEXTAREA: "textarea",
        TFOOT: "tfoot",
        TD: "td",
        TH: "th",
        THEAD: "thead",
        TITLE: "title",
        TR: "tr",
        TRACK: "track",
        TT: "tt",
        U: "u",
        UL: "ul",
        SVG: "svg",
        VAR: "var",
        WBR: "wbr",
        XMP: "xmp"
      };
      exports.SPECIAL_ELEMENTS = {
        [NS.HTML]: {
          [$.ADDRESS]: true,
          [$.APPLET]: true,
          [$.AREA]: true,
          [$.ARTICLE]: true,
          [$.ASIDE]: true,
          [$.BASE]: true,
          [$.BASEFONT]: true,
          [$.BGSOUND]: true,
          [$.BLOCKQUOTE]: true,
          [$.BODY]: true,
          [$.BR]: true,
          [$.BUTTON]: true,
          [$.CAPTION]: true,
          [$.CENTER]: true,
          [$.COL]: true,
          [$.COLGROUP]: true,
          [$.DD]: true,
          [$.DETAILS]: true,
          [$.DIR]: true,
          [$.DIV]: true,
          [$.DL]: true,
          [$.DT]: true,
          [$.EMBED]: true,
          [$.FIELDSET]: true,
          [$.FIGCAPTION]: true,
          [$.FIGURE]: true,
          [$.FOOTER]: true,
          [$.FORM]: true,
          [$.FRAME]: true,
          [$.FRAMESET]: true,
          [$.H1]: true,
          [$.H2]: true,
          [$.H3]: true,
          [$.H4]: true,
          [$.H5]: true,
          [$.H6]: true,
          [$.HEAD]: true,
          [$.HEADER]: true,
          [$.HGROUP]: true,
          [$.HR]: true,
          [$.HTML]: true,
          [$.IFRAME]: true,
          [$.IMG]: true,
          [$.INPUT]: true,
          [$.LI]: true,
          [$.LINK]: true,
          [$.LISTING]: true,
          [$.MAIN]: true,
          [$.MARQUEE]: true,
          [$.MENU]: true,
          [$.META]: true,
          [$.NAV]: true,
          [$.NOEMBED]: true,
          [$.NOFRAMES]: true,
          [$.NOSCRIPT]: true,
          [$.OBJECT]: true,
          [$.OL]: true,
          [$.P]: true,
          [$.PARAM]: true,
          [$.PLAINTEXT]: true,
          [$.PRE]: true,
          [$.SCRIPT]: true,
          [$.SECTION]: true,
          [$.SELECT]: true,
          [$.SOURCE]: true,
          [$.STYLE]: true,
          [$.SUMMARY]: true,
          [$.TABLE]: true,
          [$.TBODY]: true,
          [$.TD]: true,
          [$.TEMPLATE]: true,
          [$.TEXTAREA]: true,
          [$.TFOOT]: true,
          [$.TH]: true,
          [$.THEAD]: true,
          [$.TITLE]: true,
          [$.TR]: true,
          [$.TRACK]: true,
          [$.UL]: true,
          [$.WBR]: true,
          [$.XMP]: true
        },
        [NS.MATHML]: {
          [$.MI]: true,
          [$.MO]: true,
          [$.MN]: true,
          [$.MS]: true,
          [$.MTEXT]: true,
          [$.ANNOTATION_XML]: true
        },
        [NS.SVG]: {
          [$.TITLE]: true,
          [$.FOREIGN_OBJECT]: true,
          [$.DESC]: true
        }
      };
    }
  });

  // node_modules/parse5/lib/parser/open-element-stack.js
  var require_open_element_stack = __commonJS({
    "node_modules/parse5/lib/parser/open-element-stack.js"(exports, module) {
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      function isImpliedEndTagRequired(tn) {
        switch (tn.length) {
          case 1:
            return tn === $.P;
          case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;
          case 3:
            return tn === $.RTC;
          case 6:
            return tn === $.OPTION;
          case 8:
            return tn === $.OPTGROUP;
        }
        return false;
      }
      function isImpliedEndTagRequiredThoroughly(tn) {
        switch (tn.length) {
          case 1:
            return tn === $.P;
          case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI || tn === $.TD || tn === $.TH || tn === $.TR;
          case 3:
            return tn === $.RTC;
          case 5:
            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;
          case 6:
            return tn === $.OPTION;
          case 7:
            return tn === $.CAPTION;
          case 8:
            return tn === $.OPTGROUP || tn === $.COLGROUP;
        }
        return false;
      }
      function isScopingElement(tn, ns) {
        switch (tn.length) {
          case 2:
            if (tn === $.TD || tn === $.TH) {
              return ns === NS.HTML;
            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {
              return ns === NS.MATHML;
            }
            break;
          case 4:
            if (tn === $.HTML) {
              return ns === NS.HTML;
            } else if (tn === $.DESC) {
              return ns === NS.SVG;
            }
            break;
          case 5:
            if (tn === $.TABLE) {
              return ns === NS.HTML;
            } else if (tn === $.MTEXT) {
              return ns === NS.MATHML;
            } else if (tn === $.TITLE) {
              return ns === NS.SVG;
            }
            break;
          case 6:
            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;
          case 7:
            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;
          case 8:
            return tn === $.TEMPLATE && ns === NS.HTML;
          case 13:
            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;
          case 14:
            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
        }
        return false;
      }
      var OpenElementStack = class {
        constructor(document, treeAdapter) {
          this.stackTop = -1;
          this.items = [];
          this.current = document;
          this.currentTagName = null;
          this.currentTmplContent = null;
          this.tmplCount = 0;
          this.treeAdapter = treeAdapter;
        }
        _indexOf(element) {
          let idx = -1;
          for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
              idx = i;
              break;
            }
          }
          return idx;
        }
        _isInTemplate() {
          return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
        }
        _updateCurrentElement() {
          this.current = this.items[this.stackTop];
          this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
          this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
        }
        push(element) {
          this.items[++this.stackTop] = element;
          this._updateCurrentElement();
          if (this._isInTemplate()) {
            this.tmplCount++;
          }
        }
        pop() {
          this.stackTop--;
          if (this.tmplCount > 0 && this._isInTemplate()) {
            this.tmplCount--;
          }
          this._updateCurrentElement();
        }
        replace(oldElement, newElement) {
          const idx = this._indexOf(oldElement);
          this.items[idx] = newElement;
          if (idx === this.stackTop) {
            this._updateCurrentElement();
          }
        }
        insertAfter(referenceElement, newElement) {
          const insertionIdx = this._indexOf(referenceElement) + 1;
          this.items.splice(insertionIdx, 0, newElement);
          if (insertionIdx === ++this.stackTop) {
            this._updateCurrentElement();
          }
        }
        popUntilTagNamePopped(tagName) {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === tagName && ns === NS.HTML) {
              break;
            }
          }
        }
        popUntilElementPopped(element) {
          while (this.stackTop > -1) {
            const poppedElement = this.current;
            this.pop();
            if (poppedElement === element) {
              break;
            }
          }
        }
        popUntilNumberedHeaderPopped() {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML) {
              break;
            }
          }
        }
        popUntilTableCellPopped() {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === $.TD || tn === $.TH && ns === NS.HTML) {
              break;
            }
          }
        }
        popAllUpToHtmlElement() {
          this.stackTop = 0;
          this._updateCurrentElement();
        }
        clearBackToTableContext() {
          while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        clearBackToTableBodyContext() {
          while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        clearBackToTableRowContext() {
          while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        remove(element) {
          for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
              this.items.splice(i, 1);
              this.stackTop--;
              this._updateCurrentElement();
              break;
            }
          }
        }
        tryPeekProperlyNestedBodyElement() {
          const element = this.items[1];
          return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
        }
        contains(element) {
          return this._indexOf(element) > -1;
        }
        getCommonAncestor(element) {
          let elementIdx = this._indexOf(element);
          return --elementIdx >= 0 ? this.items[elementIdx] : null;
        }
        isRootHtmlElementCurrent() {
          return this.stackTop === 0 && this.currentTagName === $.HTML;
        }
        hasInScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if (isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasNumberedHeaderInScope() {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML) {
              return true;
            }
            if (isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInListItemScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInButtonScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInTableScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === tagName) {
              return true;
            }
            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {
              return false;
            }
          }
          return true;
        }
        hasTableBodyContextInTableScope() {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {
              return true;
            }
            if (tn === $.TABLE || tn === $.HTML) {
              return false;
            }
          }
          return true;
        }
        hasInSelectScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === tagName) {
              return true;
            }
            if (tn !== $.OPTION && tn !== $.OPTGROUP) {
              return false;
            }
          }
          return true;
        }
        generateImpliedEndTags() {
          while (isImpliedEndTagRequired(this.currentTagName)) {
            this.pop();
          }
        }
        generateImpliedEndTagsThoroughly() {
          while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
            this.pop();
          }
        }
        generateImpliedEndTagsWithExclusion(exclusionTagName) {
          while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
            this.pop();
          }
        }
      };
      module.exports = OpenElementStack;
    }
  });

  // node_modules/parse5/lib/parser/formatting-element-list.js
  var require_formatting_element_list = __commonJS({
    "node_modules/parse5/lib/parser/formatting-element-list.js"(exports, module) {
      var NOAH_ARK_CAPACITY = 3;
      var FormattingElementList = class {
        constructor(treeAdapter) {
          this.length = 0;
          this.entries = [];
          this.treeAdapter = treeAdapter;
          this.bookmark = null;
        }
        _getNoahArkConditionCandidates(newElement) {
          const candidates = [];
          if (this.length >= NOAH_ARK_CAPACITY) {
            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
            const neTagName = this.treeAdapter.getTagName(newElement);
            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
            for (let i = this.length - 1; i >= 0; i--) {
              const entry = this.entries[i];
              if (entry.type === FormattingElementList.MARKER_ENTRY) {
                break;
              }
              const element = entry.element;
              const elementAttrs = this.treeAdapter.getAttrList(element);
              const isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;
              if (isCandidate) {
                candidates.push({ idx: i, attrs: elementAttrs });
              }
            }
          }
          return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
        }
        _ensureNoahArkCondition(newElement) {
          const candidates = this._getNoahArkConditionCandidates(newElement);
          let cLength = candidates.length;
          if (cLength) {
            const neAttrs = this.treeAdapter.getAttrList(newElement);
            const neAttrsLength = neAttrs.length;
            const neAttrsMap = Object.create(null);
            for (let i = 0; i < neAttrsLength; i++) {
              const neAttr = neAttrs[i];
              neAttrsMap[neAttr.name] = neAttr.value;
            }
            for (let i = 0; i < neAttrsLength; i++) {
              for (let j = 0; j < cLength; j++) {
                const cAttr = candidates[j].attrs[i];
                if (neAttrsMap[cAttr.name] !== cAttr.value) {
                  candidates.splice(j, 1);
                  cLength--;
                }
                if (candidates.length < NOAH_ARK_CAPACITY) {
                  return;
                }
              }
            }
            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
              this.entries.splice(candidates[i].idx, 1);
              this.length--;
            }
          }
        }
        insertMarker() {
          this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
          this.length++;
        }
        pushElement(element, token) {
          this._ensureNoahArkCondition(element);
          this.entries.push({
            type: FormattingElementList.ELEMENT_ENTRY,
            element,
            token
          });
          this.length++;
        }
        insertElementAfterBookmark(element, token) {
          let bookmarkIdx = this.length - 1;
          for (; bookmarkIdx >= 0; bookmarkIdx--) {
            if (this.entries[bookmarkIdx] === this.bookmark) {
              break;
            }
          }
          this.entries.splice(bookmarkIdx + 1, 0, {
            type: FormattingElementList.ELEMENT_ENTRY,
            element,
            token
          });
          this.length++;
        }
        removeEntry(entry) {
          for (let i = this.length - 1; i >= 0; i--) {
            if (this.entries[i] === entry) {
              this.entries.splice(i, 1);
              this.length--;
              break;
            }
          }
        }
        clearToLastMarker() {
          while (this.length) {
            const entry = this.entries.pop();
            this.length--;
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              break;
            }
          }
        }
        getElementEntryInScopeWithTagName(tagName) {
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              return null;
            }
            if (this.treeAdapter.getTagName(entry.element) === tagName) {
              return entry;
            }
          }
          return null;
        }
        getElementEntry(element) {
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {
              return entry;
            }
          }
          return null;
        }
      };
      FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
      FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
      module.exports = FormattingElementList;
    }
  });

  // node_modules/parse5/lib/utils/mixin.js
  var require_mixin = __commonJS({
    "node_modules/parse5/lib/utils/mixin.js"(exports, module) {
      var Mixin = class {
        constructor(host) {
          const originalMethods = {};
          const overriddenMethods = this._getOverriddenMethods(this, originalMethods);
          for (const key of Object.keys(overriddenMethods)) {
            if (typeof overriddenMethods[key] === "function") {
              originalMethods[key] = host[key];
              host[key] = overriddenMethods[key];
            }
          }
        }
        _getOverriddenMethods() {
          throw new Error("Not implemented");
        }
      };
      Mixin.install = function(host, Ctor, opts) {
        if (!host.__mixins) {
          host.__mixins = [];
        }
        for (let i = 0; i < host.__mixins.length; i++) {
          if (host.__mixins[i].constructor === Ctor) {
            return host.__mixins[i];
          }
        }
        const mixin = new Ctor(host, opts);
        host.__mixins.push(mixin);
        return mixin;
      };
      module.exports = Mixin;
    }
  });

  // node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js
  var require_preprocessor_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js"(exports, module) {
      var Mixin = require_mixin();
      var PositionTrackingPreprocessorMixin = class extends Mixin {
        constructor(preprocessor) {
          super(preprocessor);
          this.preprocessor = preprocessor;
          this.isEol = false;
          this.lineStartPos = 0;
          this.droppedBufferSize = 0;
          this.offset = 0;
          this.col = 0;
          this.line = 1;
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            advance() {
              const pos = this.pos + 1;
              const ch = this.html[pos];
              if (mxn.isEol) {
                mxn.isEol = false;
                mxn.line++;
                mxn.lineStartPos = pos;
              }
              if (ch === "\n" || ch === "\r" && this.html[pos + 1] !== "\n") {
                mxn.isEol = true;
              }
              mxn.col = pos - mxn.lineStartPos + 1;
              mxn.offset = mxn.droppedBufferSize + pos;
              return orig.advance.call(this);
            },
            retreat() {
              orig.retreat.call(this);
              mxn.isEol = false;
              mxn.col = this.pos - mxn.lineStartPos + 1;
            },
            dropParsedChunk() {
              const prevPos = this.pos;
              orig.dropParsedChunk.call(this);
              const reduction = prevPos - this.pos;
              mxn.lineStartPos -= reduction;
              mxn.droppedBufferSize += reduction;
              mxn.offset = mxn.droppedBufferSize + this.pos;
            }
          };
        }
      };
      module.exports = PositionTrackingPreprocessorMixin;
    }
  });

  // node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js
  var require_tokenizer_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js"(exports, module) {
      var Mixin = require_mixin();
      var Tokenizer = require_tokenizer();
      var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
      var LocationInfoTokenizerMixin = class extends Mixin {
        constructor(tokenizer) {
          super(tokenizer);
          this.tokenizer = tokenizer;
          this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
          this.currentAttrLocation = null;
          this.ctLoc = null;
        }
        _getCurrentLocation() {
          return {
            startLine: this.posTracker.line,
            startCol: this.posTracker.col,
            startOffset: this.posTracker.offset,
            endLine: -1,
            endCol: -1,
            endOffset: -1
          };
        }
        _attachCurrentAttrLocationInfo() {
          this.currentAttrLocation.endLine = this.posTracker.line;
          this.currentAttrLocation.endCol = this.posTracker.col;
          this.currentAttrLocation.endOffset = this.posTracker.offset;
          const currentToken = this.tokenizer.currentToken;
          const currentAttr = this.tokenizer.currentAttr;
          if (!currentToken.location.attrs) {
            currentToken.location.attrs = Object.create(null);
          }
          currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
        }
        _getOverriddenMethods(mxn, orig) {
          const methods = {
            _createStartTagToken() {
              orig._createStartTagToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createEndTagToken() {
              orig._createEndTagToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createCommentToken() {
              orig._createCommentToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createDoctypeToken(initialName) {
              orig._createDoctypeToken.call(this, initialName);
              this.currentToken.location = mxn.ctLoc;
            },
            _createCharacterToken(type2, ch) {
              orig._createCharacterToken.call(this, type2, ch);
              this.currentCharacterToken.location = mxn.ctLoc;
            },
            _createEOFToken() {
              orig._createEOFToken.call(this);
              this.currentToken.location = mxn._getCurrentLocation();
            },
            _createAttr(attrNameFirstCh) {
              orig._createAttr.call(this, attrNameFirstCh);
              mxn.currentAttrLocation = mxn._getCurrentLocation();
            },
            _leaveAttrName(toState) {
              orig._leaveAttrName.call(this, toState);
              mxn._attachCurrentAttrLocationInfo();
            },
            _leaveAttrValue(toState) {
              orig._leaveAttrValue.call(this, toState);
              mxn._attachCurrentAttrLocationInfo();
            },
            _emitCurrentToken() {
              const ctLoc = this.currentToken.location;
              if (this.currentCharacterToken) {
                this.currentCharacterToken.location.endLine = ctLoc.startLine;
                this.currentCharacterToken.location.endCol = ctLoc.startCol;
                this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
              }
              if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
                ctLoc.endLine = ctLoc.startLine;
                ctLoc.endCol = ctLoc.startCol;
                ctLoc.endOffset = ctLoc.startOffset;
              } else {
                ctLoc.endLine = mxn.posTracker.line;
                ctLoc.endCol = mxn.posTracker.col + 1;
                ctLoc.endOffset = mxn.posTracker.offset + 1;
              }
              orig._emitCurrentToken.call(this);
            },
            _emitCurrentCharacterToken() {
              const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;
              if (ctLoc && ctLoc.endOffset === -1) {
                ctLoc.endLine = mxn.posTracker.line;
                ctLoc.endCol = mxn.posTracker.col;
                ctLoc.endOffset = mxn.posTracker.offset;
              }
              orig._emitCurrentCharacterToken.call(this);
            }
          };
          Object.keys(Tokenizer.MODE).forEach((modeName) => {
            const state = Tokenizer.MODE[modeName];
            methods[state] = function(cp) {
              mxn.ctLoc = mxn._getCurrentLocation();
              orig[state].call(this, cp);
            };
          });
          return methods;
        }
      };
      module.exports = LocationInfoTokenizerMixin;
    }
  });

  // node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js
  var require_open_element_stack_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js"(exports, module) {
      var Mixin = require_mixin();
      var LocationInfoOpenElementStackMixin = class extends Mixin {
        constructor(stack, opts) {
          super(stack);
          this.onItemPop = opts.onItemPop;
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            pop() {
              mxn.onItemPop(this.current);
              orig.pop.call(this);
            },
            popAllUpToHtmlElement() {
              for (let i = this.stackTop; i > 0; i--) {
                mxn.onItemPop(this.items[i]);
              }
              orig.popAllUpToHtmlElement.call(this);
            },
            remove(element) {
              mxn.onItemPop(this.current);
              orig.remove.call(this, element);
            }
          };
        }
      };
      module.exports = LocationInfoOpenElementStackMixin;
    }
  });

  // node_modules/parse5/lib/extensions/location-info/parser-mixin.js
  var require_parser_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/location-info/parser-mixin.js"(exports, module) {
      var Mixin = require_mixin();
      var Tokenizer = require_tokenizer();
      var LocationInfoTokenizerMixin = require_tokenizer_mixin();
      var LocationInfoOpenElementStackMixin = require_open_element_stack_mixin();
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var LocationInfoParserMixin = class extends Mixin {
        constructor(parser) {
          super(parser);
          this.parser = parser;
          this.treeAdapter = this.parser.treeAdapter;
          this.posTracker = null;
          this.lastStartTagToken = null;
          this.lastFosterParentingLocation = null;
          this.currentToken = null;
        }
        _setStartLocation(element) {
          let loc = null;
          if (this.lastStartTagToken) {
            loc = Object.assign({}, this.lastStartTagToken.location);
            loc.startTag = this.lastStartTagToken.location;
          }
          this.treeAdapter.setNodeSourceCodeLocation(element, loc);
        }
        _setEndLocation(element, closingToken) {
          const loc = this.treeAdapter.getNodeSourceCodeLocation(element);
          if (loc) {
            if (closingToken.location) {
              const ctLoc = closingToken.location;
              const tn = this.treeAdapter.getTagName(element);
              const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;
              const endLoc = {};
              if (isClosingEndTag) {
                endLoc.endTag = Object.assign({}, ctLoc);
                endLoc.endLine = ctLoc.endLine;
                endLoc.endCol = ctLoc.endCol;
                endLoc.endOffset = ctLoc.endOffset;
              } else {
                endLoc.endLine = ctLoc.startLine;
                endLoc.endCol = ctLoc.startCol;
                endLoc.endOffset = ctLoc.startOffset;
              }
              this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
            }
          }
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            _bootstrap(document, fragmentContext) {
              orig._bootstrap.call(this, document, fragmentContext);
              mxn.lastStartTagToken = null;
              mxn.lastFosterParentingLocation = null;
              mxn.currentToken = null;
              const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
              mxn.posTracker = tokenizerMixin.posTracker;
              Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
                onItemPop: function(element) {
                  mxn._setEndLocation(element, mxn.currentToken);
                }
              });
            },
            _runParsingLoop(scriptHandler) {
              orig._runParsingLoop.call(this, scriptHandler);
              for (let i = this.openElements.stackTop; i >= 0; i--) {
                mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
              }
            },
            _processTokenInForeignContent(token) {
              mxn.currentToken = token;
              orig._processTokenInForeignContent.call(this, token);
            },
            _processToken(token) {
              mxn.currentToken = token;
              orig._processToken.call(this, token);
              const requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));
              if (requireExplicitUpdate) {
                for (let i = this.openElements.stackTop; i >= 0; i--) {
                  const element = this.openElements.items[i];
                  if (this.treeAdapter.getTagName(element) === token.tagName) {
                    mxn._setEndLocation(element, token);
                    break;
                  }
                }
              }
            },
            _setDocumentType(token) {
              orig._setDocumentType.call(this, token);
              const documentChildren = this.treeAdapter.getChildNodes(this.document);
              const cnLength = documentChildren.length;
              for (let i = 0; i < cnLength; i++) {
                const node = documentChildren[i];
                if (this.treeAdapter.isDocumentTypeNode(node)) {
                  this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
                  break;
                }
              }
            },
            _attachElementToTree(element) {
              mxn._setStartLocation(element);
              mxn.lastStartTagToken = null;
              orig._attachElementToTree.call(this, element);
            },
            _appendElement(token, namespaceURI) {
              mxn.lastStartTagToken = token;
              orig._appendElement.call(this, token, namespaceURI);
            },
            _insertElement(token, namespaceURI) {
              mxn.lastStartTagToken = token;
              orig._insertElement.call(this, token, namespaceURI);
            },
            _insertTemplate(token) {
              mxn.lastStartTagToken = token;
              orig._insertTemplate.call(this, token);
              const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
              this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
            },
            _insertFakeRootElement() {
              orig._insertFakeRootElement.call(this);
              this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
            },
            _appendCommentNode(token, parent) {
              orig._appendCommentNode.call(this, token, parent);
              const children = this.treeAdapter.getChildNodes(parent);
              const commentNode = children[children.length - 1];
              this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
            },
            _findFosterParentingLocation() {
              mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
              return mxn.lastFosterParentingLocation;
            },
            _insertCharacters(token) {
              orig._insertCharacters.call(this, token);
              const hasFosterParent = this._shouldFosterParentOnInsertion();
              const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
              const siblings = this.treeAdapter.getChildNodes(parent);
              const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;
              const textNode = siblings[textNodeIdx];
              const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
              if (tnLoc) {
                const { endLine, endCol, endOffset } = token.location;
                this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
              } else {
                this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
              }
            }
          };
        }
      };
      module.exports = LocationInfoParserMixin;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/mixin-base.js
  var require_mixin_base = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/mixin-base.js"(exports, module) {
      var Mixin = require_mixin();
      var ErrorReportingMixinBase = class extends Mixin {
        constructor(host, opts) {
          super(host);
          this.posTracker = null;
          this.onParseError = opts.onParseError;
        }
        _setErrorLocation(err) {
          err.startLine = err.endLine = this.posTracker.line;
          err.startCol = err.endCol = this.posTracker.col;
          err.startOffset = err.endOffset = this.posTracker.offset;
        }
        _reportError(code2) {
          const err = {
            code: code2,
            startLine: -1,
            startCol: -1,
            startOffset: -1,
            endLine: -1,
            endCol: -1,
            endOffset: -1
          };
          this._setErrorLocation(err);
          this.onParseError(err);
        }
        _getOverriddenMethods(mxn) {
          return {
            _err(code2) {
              mxn._reportError(code2);
            }
          };
        }
      };
      module.exports = ErrorReportingMixinBase;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js
  var require_preprocessor_mixin2 = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js"(exports, module) {
      var ErrorReportingMixinBase = require_mixin_base();
      var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
      var Mixin = require_mixin();
      var ErrorReportingPreprocessorMixin = class extends ErrorReportingMixinBase {
        constructor(preprocessor, opts) {
          super(preprocessor, opts);
          this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
          this.lastErrOffset = -1;
        }
        _reportError(code2) {
          if (this.lastErrOffset !== this.posTracker.offset) {
            this.lastErrOffset = this.posTracker.offset;
            super._reportError(code2);
          }
        }
      };
      module.exports = ErrorReportingPreprocessorMixin;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js
  var require_tokenizer_mixin2 = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js"(exports, module) {
      var ErrorReportingMixinBase = require_mixin_base();
      var ErrorReportingPreprocessorMixin = require_preprocessor_mixin2();
      var Mixin = require_mixin();
      var ErrorReportingTokenizerMixin = class extends ErrorReportingMixinBase {
        constructor(tokenizer, opts) {
          super(tokenizer, opts);
          const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);
          this.posTracker = preprocessorMixin.posTracker;
        }
      };
      module.exports = ErrorReportingTokenizerMixin;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js
  var require_parser_mixin2 = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"(exports, module) {
      var ErrorReportingMixinBase = require_mixin_base();
      var ErrorReportingTokenizerMixin = require_tokenizer_mixin2();
      var LocationInfoTokenizerMixin = require_tokenizer_mixin();
      var Mixin = require_mixin();
      var ErrorReportingParserMixin = class extends ErrorReportingMixinBase {
        constructor(parser, opts) {
          super(parser, opts);
          this.opts = opts;
          this.ctLoc = null;
          this.locBeforeToken = false;
        }
        _setErrorLocation(err) {
          if (this.ctLoc) {
            err.startLine = this.ctLoc.startLine;
            err.startCol = this.ctLoc.startCol;
            err.startOffset = this.ctLoc.startOffset;
            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
          }
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            _bootstrap(document, fragmentContext) {
              orig._bootstrap.call(this, document, fragmentContext);
              Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
              Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
            },
            _processInputToken(token) {
              mxn.ctLoc = token.location;
              orig._processInputToken.call(this, token);
            },
            _err(code2, options) {
              mxn.locBeforeToken = options && options.beforeToken;
              mxn._reportError(code2);
            }
          };
        }
      };
      module.exports = ErrorReportingParserMixin;
    }
  });

  // node_modules/parse5/lib/tree-adapters/default.js
  var require_default = __commonJS({
    "node_modules/parse5/lib/tree-adapters/default.js"(exports) {
      var { DOCUMENT_MODE } = require_html();
      exports.createDocument = function() {
        return {
          nodeName: "#document",
          mode: DOCUMENT_MODE.NO_QUIRKS,
          childNodes: []
        };
      };
      exports.createDocumentFragment = function() {
        return {
          nodeName: "#document-fragment",
          childNodes: []
        };
      };
      exports.createElement = function(tagName, namespaceURI, attrs) {
        return {
          nodeName: tagName,
          tagName,
          attrs,
          namespaceURI,
          childNodes: [],
          parentNode: null
        };
      };
      exports.createCommentNode = function(data) {
        return {
          nodeName: "#comment",
          data,
          parentNode: null
        };
      };
      var createTextNode = function(value) {
        return {
          nodeName: "#text",
          value,
          parentNode: null
        };
      };
      var appendChild = exports.appendChild = function(parentNode, newNode) {
        parentNode.childNodes.push(newNode);
        newNode.parentNode = parentNode;
      };
      var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
        parentNode.childNodes.splice(insertionIdx, 0, newNode);
        newNode.parentNode = parentNode;
      };
      exports.setTemplateContent = function(templateElement, contentElement) {
        templateElement.content = contentElement;
      };
      exports.getTemplateContent = function(templateElement) {
        return templateElement.content;
      };
      exports.setDocumentType = function(document, name, publicId, systemId) {
        let doctypeNode = null;
        for (let i = 0; i < document.childNodes.length; i++) {
          if (document.childNodes[i].nodeName === "#documentType") {
            doctypeNode = document.childNodes[i];
            break;
          }
        }
        if (doctypeNode) {
          doctypeNode.name = name;
          doctypeNode.publicId = publicId;
          doctypeNode.systemId = systemId;
        } else {
          appendChild(document, {
            nodeName: "#documentType",
            name,
            publicId,
            systemId
          });
        }
      };
      exports.setDocumentMode = function(document, mode) {
        document.mode = mode;
      };
      exports.getDocumentMode = function(document) {
        return document.mode;
      };
      exports.detachNode = function(node) {
        if (node.parentNode) {
          const idx = node.parentNode.childNodes.indexOf(node);
          node.parentNode.childNodes.splice(idx, 1);
          node.parentNode = null;
        }
      };
      exports.insertText = function(parentNode, text) {
        if (parentNode.childNodes.length) {
          const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
          if (prevNode.nodeName === "#text") {
            prevNode.value += text;
            return;
          }
        }
        appendChild(parentNode, createTextNode(text));
      };
      exports.insertTextBefore = function(parentNode, text, referenceNode) {
        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
        if (prevNode && prevNode.nodeName === "#text") {
          prevNode.value += text;
        } else {
          insertBefore(parentNode, createTextNode(text), referenceNode);
        }
      };
      exports.adoptAttributes = function(recipient2, attrs) {
        const recipientAttrsMap = [];
        for (let i = 0; i < recipient2.attrs.length; i++) {
          recipientAttrsMap.push(recipient2.attrs[i].name);
        }
        for (let j = 0; j < attrs.length; j++) {
          if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
            recipient2.attrs.push(attrs[j]);
          }
        }
      };
      exports.getFirstChild = function(node) {
        return node.childNodes[0];
      };
      exports.getChildNodes = function(node) {
        return node.childNodes;
      };
      exports.getParentNode = function(node) {
        return node.parentNode;
      };
      exports.getAttrList = function(element) {
        return element.attrs;
      };
      exports.getTagName = function(element) {
        return element.tagName;
      };
      exports.getNamespaceURI = function(element) {
        return element.namespaceURI;
      };
      exports.getTextNodeContent = function(textNode) {
        return textNode.value;
      };
      exports.getCommentNodeContent = function(commentNode) {
        return commentNode.data;
      };
      exports.getDocumentTypeNodeName = function(doctypeNode) {
        return doctypeNode.name;
      };
      exports.getDocumentTypeNodePublicId = function(doctypeNode) {
        return doctypeNode.publicId;
      };
      exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
        return doctypeNode.systemId;
      };
      exports.isTextNode = function(node) {
        return node.nodeName === "#text";
      };
      exports.isCommentNode = function(node) {
        return node.nodeName === "#comment";
      };
      exports.isDocumentTypeNode = function(node) {
        return node.nodeName === "#documentType";
      };
      exports.isElementNode = function(node) {
        return !!node.tagName;
      };
      exports.setNodeSourceCodeLocation = function(node, location) {
        node.sourceCodeLocation = location;
      };
      exports.getNodeSourceCodeLocation = function(node) {
        return node.sourceCodeLocation;
      };
      exports.updateNodeSourceCodeLocation = function(node, endLocation) {
        node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
      };
    }
  });

  // node_modules/parse5/lib/utils/merge-options.js
  var require_merge_options = __commonJS({
    "node_modules/parse5/lib/utils/merge-options.js"(exports, module) {
      module.exports = function mergeOptions(defaults2, options) {
        options = options || Object.create(null);
        return [defaults2, options].reduce((merged, optObj) => {
          Object.keys(optObj).forEach((key) => {
            merged[key] = optObj[key];
          });
          return merged;
        }, Object.create(null));
      };
    }
  });

  // node_modules/parse5/lib/common/doctype.js
  var require_doctype = __commonJS({
    "node_modules/parse5/lib/common/doctype.js"(exports) {
      var { DOCUMENT_MODE } = require_html();
      var VALID_DOCTYPE_NAME = "html";
      var VALID_SYSTEM_ID = "about:legacy-compat";
      var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
      var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
        "+//silmaril//dtd html pro v0r11 19970101//",
        "-//as//dtd html 3.0 aswedit + extensions//",
        "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
        "-//ietf//dtd html 2.0 level 1//",
        "-//ietf//dtd html 2.0 level 2//",
        "-//ietf//dtd html 2.0 strict level 1//",
        "-//ietf//dtd html 2.0 strict level 2//",
        "-//ietf//dtd html 2.0 strict//",
        "-//ietf//dtd html 2.0//",
        "-//ietf//dtd html 2.1e//",
        "-//ietf//dtd html 3.0//",
        "-//ietf//dtd html 3.2 final//",
        "-//ietf//dtd html 3.2//",
        "-//ietf//dtd html 3//",
        "-//ietf//dtd html level 0//",
        "-//ietf//dtd html level 1//",
        "-//ietf//dtd html level 2//",
        "-//ietf//dtd html level 3//",
        "-//ietf//dtd html strict level 0//",
        "-//ietf//dtd html strict level 1//",
        "-//ietf//dtd html strict level 2//",
        "-//ietf//dtd html strict level 3//",
        "-//ietf//dtd html strict//",
        "-//ietf//dtd html//",
        "-//metrius//dtd metrius presentational//",
        "-//microsoft//dtd internet explorer 2.0 html strict//",
        "-//microsoft//dtd internet explorer 2.0 html//",
        "-//microsoft//dtd internet explorer 2.0 tables//",
        "-//microsoft//dtd internet explorer 3.0 html strict//",
        "-//microsoft//dtd internet explorer 3.0 html//",
        "-//microsoft//dtd internet explorer 3.0 tables//",
        "-//netscape comm. corp.//dtd html//",
        "-//netscape comm. corp.//dtd strict html//",
        "-//o'reilly and associates//dtd html 2.0//",
        "-//o'reilly and associates//dtd html extended 1.0//",
        "-//o'reilly and associates//dtd html extended relaxed 1.0//",
        "-//sq//dtd html 2.0 hotmetal + extensions//",
        "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
        "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
        "-//spyglass//dtd html 2.0 extended//",
        "-//sun microsystems corp.//dtd hotjava html//",
        "-//sun microsystems corp.//dtd hotjava strict html//",
        "-//w3c//dtd html 3 1995-03-24//",
        "-//w3c//dtd html 3.2 draft//",
        "-//w3c//dtd html 3.2 final//",
        "-//w3c//dtd html 3.2//",
        "-//w3c//dtd html 3.2s draft//",
        "-//w3c//dtd html 4.0 frameset//",
        "-//w3c//dtd html 4.0 transitional//",
        "-//w3c//dtd html experimental 19960712//",
        "-//w3c//dtd html experimental 970421//",
        "-//w3c//dtd w3 html//",
        "-//w3o//dtd w3 html 3.0//",
        "-//webtechs//dtd mozilla html 2.0//",
        "-//webtechs//dtd mozilla html//"
      ];
      var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
        "-//w3c//dtd html 4.01 frameset//",
        "-//w3c//dtd html 4.01 transitional//"
      ]);
      var QUIRKS_MODE_PUBLIC_IDS = ["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"];
      var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
      var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
        "-//w3c//dtd html 4.01 frameset//",
        "-//w3c//dtd html 4.01 transitional//"
      ]);
      function enquoteDoctypeId(id2) {
        const quote = id2.indexOf('"') !== -1 ? "'" : '"';
        return quote + id2 + quote;
      }
      function hasPrefix(publicId, prefixes) {
        for (let i = 0; i < prefixes.length; i++) {
          if (publicId.indexOf(prefixes[i]) === 0) {
            return true;
          }
        }
        return false;
      }
      exports.isConforming = function(token) {
        return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
      };
      exports.getDocumentMode = function(token) {
        if (token.name !== VALID_DOCTYPE_NAME) {
          return DOCUMENT_MODE.QUIRKS;
        }
        const systemId = token.systemId;
        if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
          return DOCUMENT_MODE.QUIRKS;
        }
        let publicId = token.publicId;
        if (publicId !== null) {
          publicId = publicId.toLowerCase();
          if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
            return DOCUMENT_MODE.QUIRKS;
          }
          let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
          if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.QUIRKS;
          }
          prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
          if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.LIMITED_QUIRKS;
          }
        }
        return DOCUMENT_MODE.NO_QUIRKS;
      };
      exports.serializeContent = function(name, publicId, systemId) {
        let str = "!DOCTYPE ";
        if (name) {
          str += name;
        }
        if (publicId) {
          str += " PUBLIC " + enquoteDoctypeId(publicId);
        } else if (systemId) {
          str += " SYSTEM";
        }
        if (systemId !== null) {
          str += " " + enquoteDoctypeId(systemId);
        }
        return str;
      };
    }
  });

  // node_modules/parse5/lib/common/foreign-content.js
  var require_foreign_content = __commonJS({
    "node_modules/parse5/lib/common/foreign-content.js"(exports) {
      var Tokenizer = require_tokenizer();
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      var ATTRS = HTML.ATTRS;
      var MIME_TYPES = {
        TEXT_HTML: "text/html",
        APPLICATION_XML: "application/xhtml+xml"
      };
      var DEFINITION_URL_ATTR = "definitionurl";
      var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
      var SVG_ATTRS_ADJUSTMENT_MAP = {
        attributename: "attributeName",
        attributetype: "attributeType",
        basefrequency: "baseFrequency",
        baseprofile: "baseProfile",
        calcmode: "calcMode",
        clippathunits: "clipPathUnits",
        diffuseconstant: "diffuseConstant",
        edgemode: "edgeMode",
        filterunits: "filterUnits",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        limitingconeangle: "limitingConeAngle",
        markerheight: "markerHeight",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        numoctaves: "numOctaves",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        refx: "refX",
        refy: "refY",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stitchtiles: "stitchTiles",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textlength: "textLength",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        xchannelselector: "xChannelSelector",
        ychannelselector: "yChannelSelector",
        zoomandpan: "zoomAndPan"
      };
      var XML_ATTRS_ADJUSTMENT_MAP = {
        "xlink:actuate": { prefix: "xlink", name: "actuate", namespace: NS.XLINK },
        "xlink:arcrole": { prefix: "xlink", name: "arcrole", namespace: NS.XLINK },
        "xlink:href": { prefix: "xlink", name: "href", namespace: NS.XLINK },
        "xlink:role": { prefix: "xlink", name: "role", namespace: NS.XLINK },
        "xlink:show": { prefix: "xlink", name: "show", namespace: NS.XLINK },
        "xlink:title": { prefix: "xlink", name: "title", namespace: NS.XLINK },
        "xlink:type": { prefix: "xlink", name: "type", namespace: NS.XLINK },
        "xml:base": { prefix: "xml", name: "base", namespace: NS.XML },
        "xml:lang": { prefix: "xml", name: "lang", namespace: NS.XML },
        "xml:space": { prefix: "xml", name: "space", namespace: NS.XML },
        xmlns: { prefix: "", name: "xmlns", namespace: NS.XMLNS },
        "xmlns:xlink": { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }
      };
      var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
        altglyph: "altGlyph",
        altglyphdef: "altGlyphDef",
        altglyphitem: "altGlyphItem",
        animatecolor: "animateColor",
        animatemotion: "animateMotion",
        animatetransform: "animateTransform",
        clippath: "clipPath",
        feblend: "feBlend",
        fecolormatrix: "feColorMatrix",
        fecomponenttransfer: "feComponentTransfer",
        fecomposite: "feComposite",
        feconvolvematrix: "feConvolveMatrix",
        fediffuselighting: "feDiffuseLighting",
        fedisplacementmap: "feDisplacementMap",
        fedistantlight: "feDistantLight",
        feflood: "feFlood",
        fefunca: "feFuncA",
        fefuncb: "feFuncB",
        fefuncg: "feFuncG",
        fefuncr: "feFuncR",
        fegaussianblur: "feGaussianBlur",
        feimage: "feImage",
        femerge: "feMerge",
        femergenode: "feMergeNode",
        femorphology: "feMorphology",
        feoffset: "feOffset",
        fepointlight: "fePointLight",
        fespecularlighting: "feSpecularLighting",
        fespotlight: "feSpotLight",
        fetile: "feTile",
        feturbulence: "feTurbulence",
        foreignobject: "foreignObject",
        glyphref: "glyphRef",
        lineargradient: "linearGradient",
        radialgradient: "radialGradient",
        textpath: "textPath"
      };
      var EXITS_FOREIGN_CONTENT = {
        [$.B]: true,
        [$.BIG]: true,
        [$.BLOCKQUOTE]: true,
        [$.BODY]: true,
        [$.BR]: true,
        [$.CENTER]: true,
        [$.CODE]: true,
        [$.DD]: true,
        [$.DIV]: true,
        [$.DL]: true,
        [$.DT]: true,
        [$.EM]: true,
        [$.EMBED]: true,
        [$.H1]: true,
        [$.H2]: true,
        [$.H3]: true,
        [$.H4]: true,
        [$.H5]: true,
        [$.H6]: true,
        [$.HEAD]: true,
        [$.HR]: true,
        [$.I]: true,
        [$.IMG]: true,
        [$.LI]: true,
        [$.LISTING]: true,
        [$.MENU]: true,
        [$.META]: true,
        [$.NOBR]: true,
        [$.OL]: true,
        [$.P]: true,
        [$.PRE]: true,
        [$.RUBY]: true,
        [$.S]: true,
        [$.SMALL]: true,
        [$.SPAN]: true,
        [$.STRONG]: true,
        [$.STRIKE]: true,
        [$.SUB]: true,
        [$.SUP]: true,
        [$.TABLE]: true,
        [$.TT]: true,
        [$.U]: true,
        [$.UL]: true,
        [$.VAR]: true
      };
      exports.causesExit = function(startTagToken) {
        const tn = startTagToken.tagName;
        const isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);
        return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
      };
      exports.adjustTokenMathMLAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          if (token.attrs[i].name === DEFINITION_URL_ATTR) {
            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
          }
        }
      };
      exports.adjustTokenSVGAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
          if (adjustedAttrName) {
            token.attrs[i].name = adjustedAttrName;
          }
        }
      };
      exports.adjustTokenXMLAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
          if (adjustedAttrEntry) {
            token.attrs[i].prefix = adjustedAttrEntry.prefix;
            token.attrs[i].name = adjustedAttrEntry.name;
            token.attrs[i].namespace = adjustedAttrEntry.namespace;
          }
        }
      };
      exports.adjustTokenSVGTagName = function(token) {
        const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
        if (adjustedTagName) {
          token.tagName = adjustedTagName;
        }
      };
      function isMathMLTextIntegrationPoint(tn, ns) {
        return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
      }
      function isHtmlIntegrationPoint(tn, ns, attrs) {
        if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
          for (let i = 0; i < attrs.length; i++) {
            if (attrs[i].name === ATTRS.ENCODING) {
              const value = attrs[i].value.toLowerCase();
              return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
          }
        }
        return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
      }
      exports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {
        if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
          return true;
        }
        if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
          return true;
        }
        return false;
      };
    }
  });

  // node_modules/parse5/lib/parser/index.js
  var require_parser = __commonJS({
    "node_modules/parse5/lib/parser/index.js"(exports, module) {
      var Tokenizer = require_tokenizer();
      var OpenElementStack = require_open_element_stack();
      var FormattingElementList = require_formatting_element_list();
      var LocationInfoParserMixin = require_parser_mixin();
      var ErrorReportingParserMixin = require_parser_mixin2();
      var Mixin = require_mixin();
      var defaultTreeAdapter = require_default();
      var mergeOptions = require_merge_options();
      var doctype = require_doctype();
      var foreignContent = require_foreign_content();
      var ERR = require_error_codes();
      var unicode2 = require_unicode2();
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      var ATTRS = HTML.ATTRS;
      var DEFAULT_OPTIONS = {
        scriptingEnabled: true,
        sourceCodeLocationInfo: false,
        onParseError: null,
        treeAdapter: defaultTreeAdapter
      };
      var HIDDEN_INPUT_TYPE = "hidden";
      var AA_OUTER_LOOP_ITER = 8;
      var AA_INNER_LOOP_ITER = 3;
      var INITIAL_MODE = "INITIAL_MODE";
      var BEFORE_HTML_MODE = "BEFORE_HTML_MODE";
      var BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE";
      var IN_HEAD_MODE = "IN_HEAD_MODE";
      var IN_HEAD_NO_SCRIPT_MODE = "IN_HEAD_NO_SCRIPT_MODE";
      var AFTER_HEAD_MODE = "AFTER_HEAD_MODE";
      var IN_BODY_MODE = "IN_BODY_MODE";
      var TEXT_MODE = "TEXT_MODE";
      var IN_TABLE_MODE = "IN_TABLE_MODE";
      var IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE";
      var IN_CAPTION_MODE = "IN_CAPTION_MODE";
      var IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE";
      var IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE";
      var IN_ROW_MODE = "IN_ROW_MODE";
      var IN_CELL_MODE = "IN_CELL_MODE";
      var IN_SELECT_MODE = "IN_SELECT_MODE";
      var IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE";
      var IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE";
      var AFTER_BODY_MODE = "AFTER_BODY_MODE";
      var IN_FRAMESET_MODE = "IN_FRAMESET_MODE";
      var AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE";
      var AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE";
      var AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
      var INSERTION_MODE_RESET_MAP = {
        [$.TR]: IN_ROW_MODE,
        [$.TBODY]: IN_TABLE_BODY_MODE,
        [$.THEAD]: IN_TABLE_BODY_MODE,
        [$.TFOOT]: IN_TABLE_BODY_MODE,
        [$.CAPTION]: IN_CAPTION_MODE,
        [$.COLGROUP]: IN_COLUMN_GROUP_MODE,
        [$.TABLE]: IN_TABLE_MODE,
        [$.BODY]: IN_BODY_MODE,
        [$.FRAMESET]: IN_FRAMESET_MODE
      };
      var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
        [$.CAPTION]: IN_TABLE_MODE,
        [$.COLGROUP]: IN_TABLE_MODE,
        [$.TBODY]: IN_TABLE_MODE,
        [$.TFOOT]: IN_TABLE_MODE,
        [$.THEAD]: IN_TABLE_MODE,
        [$.COL]: IN_COLUMN_GROUP_MODE,
        [$.TR]: IN_TABLE_BODY_MODE,
        [$.TD]: IN_ROW_MODE,
        [$.TH]: IN_ROW_MODE
      };
      var TOKEN_HANDLERS = {
        [INITIAL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
          [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.EOF_TOKEN]: tokenInInitialMode
        },
        [BEFORE_HTML_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
        },
        [BEFORE_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHead
        },
        [IN_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHead,
          [Tokenizer.END_TAG_TOKEN]: endTagInHead,
          [Tokenizer.EOF_TOKEN]: tokenInHead
        },
        [IN_HEAD_NO_SCRIPT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
          [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
          [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
        },
        [AFTER_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
          [Tokenizer.EOF_TOKEN]: tokenAfterHead
        },
        [IN_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: ignoreToken,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: ignoreToken,
          [Tokenizer.END_TAG_TOKEN]: endTagInText,
          [Tokenizer.EOF_TOKEN]: eofInText
        },
        [IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TABLE_TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
          [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
          [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
          [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.EOF_TOKEN]: tokenInTableText
        },
        [IN_CAPTION_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
          [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_COLUMN_GROUP_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
          [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TABLE_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_ROW_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInRow,
          [Tokenizer.END_TAG_TOKEN]: endTagInRow,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_CELL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCell,
          [Tokenizer.END_TAG_TOKEN]: endTagInCell,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_SELECT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_SELECT_IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TEMPLATE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
          [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
          [Tokenizer.EOF_TOKEN]: eofInTemplate
        },
        [AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [IN_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
          [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: ignoreToken,
          [Tokenizer.EOF_TOKEN]: stopParsing
        }
      };
      var Parser = class {
        constructor(options) {
          this.options = mergeOptions(DEFAULT_OPTIONS, options);
          this.treeAdapter = this.options.treeAdapter;
          this.pendingScript = null;
          if (this.options.sourceCodeLocationInfo) {
            Mixin.install(this, LocationInfoParserMixin);
          }
          if (this.options.onParseError) {
            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });
          }
        }
        parse(html) {
          const document = this.treeAdapter.createDocument();
          this._bootstrap(document, null);
          this.tokenizer.write(html, true);
          this._runParsingLoop(null);
          return document;
        }
        parseFragment(html, fragmentContext) {
          if (!fragmentContext) {
            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
          }
          const documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
          this._bootstrap(documentMock, fragmentContext);
          if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
          }
          this._initTokenizerForFragmentParsing();
          this._insertFakeRootElement();
          this._resetInsertionMode();
          this._findFormInFragmentContext();
          this.tokenizer.write(html, true);
          this._runParsingLoop(null);
          const rootElement = this.treeAdapter.getFirstChild(documentMock);
          const fragment = this.treeAdapter.createDocumentFragment();
          this._adoptNodes(rootElement, fragment);
          return fragment;
        }
        _bootstrap(document, fragmentContext) {
          this.tokenizer = new Tokenizer(this.options);
          this.stopped = false;
          this.insertionMode = INITIAL_MODE;
          this.originalInsertionMode = "";
          this.document = document;
          this.fragmentContext = fragmentContext;
          this.headElement = null;
          this.formElement = null;
          this.openElements = new OpenElementStack(this.document, this.treeAdapter);
          this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
          this.tmplInsertionModeStack = [];
          this.tmplInsertionModeStackTop = -1;
          this.currentTmplInsertionMode = null;
          this.pendingCharacterTokens = [];
          this.hasNonWhitespacePendingCharacterToken = false;
          this.framesetOk = true;
          this.skipNextNewLine = false;
          this.fosterParentingEnabled = false;
        }
        _err() {
        }
        _runParsingLoop(scriptHandler) {
          while (!this.stopped) {
            this._setupTokenizerCDATAMode();
            const token = this.tokenizer.getNextToken();
            if (token.type === Tokenizer.HIBERNATION_TOKEN) {
              break;
            }
            if (this.skipNextNewLine) {
              this.skipNextNewLine = false;
              if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
                if (token.chars.length === 1) {
                  continue;
                }
                token.chars = token.chars.substr(1);
              }
            }
            this._processInputToken(token);
            if (scriptHandler && this.pendingScript) {
              break;
            }
          }
        }
        runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
          this._runParsingLoop(scriptHandler);
          if (scriptHandler && this.pendingScript) {
            const script = this.pendingScript;
            this.pendingScript = null;
            scriptHandler(script);
            return;
          }
          if (writeCallback) {
            writeCallback();
          }
        }
        _setupTokenizerCDATAMode() {
          const current = this._getAdjustedCurrentElement();
          this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
        }
        _switchToTextParsing(currentToken, nextTokenizerState) {
          this._insertElement(currentToken, NS.HTML);
          this.tokenizer.state = nextTokenizerState;
          this.originalInsertionMode = this.insertionMode;
          this.insertionMode = TEXT_MODE;
        }
        switchToPlaintextParsing() {
          this.insertionMode = TEXT_MODE;
          this.originalInsertionMode = IN_BODY_MODE;
          this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
        }
        _getAdjustedCurrentElement() {
          return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
        }
        _findFormInFragmentContext() {
          let node = this.fragmentContext;
          do {
            if (this.treeAdapter.getTagName(node) === $.FORM) {
              this.formElement = node;
              break;
            }
            node = this.treeAdapter.getParentNode(node);
          } while (node);
        }
        _initTokenizerForFragmentParsing() {
          if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
            const tn = this.treeAdapter.getTagName(this.fragmentContext);
            if (tn === $.TITLE || tn === $.TEXTAREA) {
              this.tokenizer.state = Tokenizer.MODE.RCDATA;
            } else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
              this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
            } else if (tn === $.SCRIPT) {
              this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
            } else if (tn === $.PLAINTEXT) {
              this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
            }
          }
        }
        _setDocumentType(token) {
          const name = token.name || "";
          const publicId = token.publicId || "";
          const systemId = token.systemId || "";
          this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
        }
        _attachElementToTree(element) {
          if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentElement(element);
          } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;
            this.treeAdapter.appendChild(parent, element);
          }
        }
        _appendElement(token, namespaceURI) {
          const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
          this._attachElementToTree(element);
        }
        _insertElement(token, namespaceURI) {
          const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
          this._attachElementToTree(element);
          this.openElements.push(element);
        }
        _insertFakeElement(tagName) {
          const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
          this._attachElementToTree(element);
          this.openElements.push(element);
        }
        _insertTemplate(token) {
          const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
          const content = this.treeAdapter.createDocumentFragment();
          this.treeAdapter.setTemplateContent(tmpl, content);
          this._attachElementToTree(tmpl);
          this.openElements.push(tmpl);
        }
        _insertFakeRootElement() {
          const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
          this.treeAdapter.appendChild(this.openElements.current, element);
          this.openElements.push(element);
        }
        _appendCommentNode(token, parent) {
          const commentNode = this.treeAdapter.createCommentNode(token.data);
          this.treeAdapter.appendChild(parent, commentNode);
        }
        _insertCharacters(token) {
          if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentText(token.chars);
          } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;
            this.treeAdapter.insertText(parent, token.chars);
          }
        }
        _adoptNodes(donor, recipient2) {
          for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
            this.treeAdapter.detachNode(child);
            this.treeAdapter.appendChild(recipient2, child);
          }
        }
        _shouldProcessTokenInForeignContent(token) {
          const current = this._getAdjustedCurrentElement();
          if (!current || current === this.document) {
            return false;
          }
          const ns = this.treeAdapter.getNamespaceURI(current);
          if (ns === NS.HTML) {
            return false;
          }
          if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
            return false;
          }
          const isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          const isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
          if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
            return false;
          }
          if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) {
            return false;
          }
          return token.type !== Tokenizer.EOF_TOKEN;
        }
        _processToken(token) {
          TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
        }
        _processTokenInBodyMode(token) {
          TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
        }
        _processTokenInForeignContent(token) {
          if (token.type === Tokenizer.CHARACTER_TOKEN) {
            characterInForeignContent(this, token);
          } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
            nullCharacterInForeignContent(this, token);
          } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
            insertCharacters(this, token);
          } else if (token.type === Tokenizer.COMMENT_TOKEN) {
            appendComment(this, token);
          } else if (token.type === Tokenizer.START_TAG_TOKEN) {
            startTagInForeignContent(this, token);
          } else if (token.type === Tokenizer.END_TAG_TOKEN) {
            endTagInForeignContent(this, token);
          }
        }
        _processInputToken(token) {
          if (this._shouldProcessTokenInForeignContent(token)) {
            this._processTokenInForeignContent(token);
          } else {
            this._processToken(token);
          }
          if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
          }
        }
        _isIntegrationPoint(element, foreignNS) {
          const tn = this.treeAdapter.getTagName(element);
          const ns = this.treeAdapter.getNamespaceURI(element);
          const attrs = this.treeAdapter.getAttrList(element);
          return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
        }
        _reconstructActiveFormattingElements() {
          const listLength = this.activeFormattingElements.length;
          if (listLength) {
            let unopenIdx = listLength;
            let entry = null;
            do {
              unopenIdx--;
              entry = this.activeFormattingElements.entries[unopenIdx];
              if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                unopenIdx++;
                break;
              }
            } while (unopenIdx > 0);
            for (let i = unopenIdx; i < listLength; i++) {
              entry = this.activeFormattingElements.entries[i];
              this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
              entry.element = this.openElements.current;
            }
          }
        }
        _closeTableCell() {
          this.openElements.generateImpliedEndTags();
          this.openElements.popUntilTableCellPopped();
          this.activeFormattingElements.clearToLastMarker();
          this.insertionMode = IN_ROW_MODE;
        }
        _closePElement() {
          this.openElements.generateImpliedEndTagsWithExclusion($.P);
          this.openElements.popUntilTagNamePopped($.P);
        }
        _resetInsertionMode() {
          for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {
            let element = this.openElements.items[i];
            if (i === 0) {
              last = true;
              if (this.fragmentContext) {
                element = this.fragmentContext;
              }
            }
            const tn = this.treeAdapter.getTagName(element);
            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
            if (newInsertionMode) {
              this.insertionMode = newInsertionMode;
              break;
            } else if (!last && (tn === $.TD || tn === $.TH)) {
              this.insertionMode = IN_CELL_MODE;
              break;
            } else if (!last && tn === $.HEAD) {
              this.insertionMode = IN_HEAD_MODE;
              break;
            } else if (tn === $.SELECT) {
              this._resetInsertionModeForSelect(i);
              break;
            } else if (tn === $.TEMPLATE) {
              this.insertionMode = this.currentTmplInsertionMode;
              break;
            } else if (tn === $.HTML) {
              this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
              break;
            } else if (last) {
              this.insertionMode = IN_BODY_MODE;
              break;
            }
          }
        }
        _resetInsertionModeForSelect(selectIdx) {
          if (selectIdx > 0) {
            for (let i = selectIdx - 1; i > 0; i--) {
              const ancestor = this.openElements.items[i];
              const tn = this.treeAdapter.getTagName(ancestor);
              if (tn === $.TEMPLATE) {
                break;
              } else if (tn === $.TABLE) {
                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                return;
              }
            }
          }
          this.insertionMode = IN_SELECT_MODE;
        }
        _pushTmplInsertionMode(mode) {
          this.tmplInsertionModeStack.push(mode);
          this.tmplInsertionModeStackTop++;
          this.currentTmplInsertionMode = mode;
        }
        _popTmplInsertionMode() {
          this.tmplInsertionModeStack.pop();
          this.tmplInsertionModeStackTop--;
          this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
        }
        _isElementCausesFosterParenting(element) {
          const tn = this.treeAdapter.getTagName(element);
          return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
        }
        _shouldFosterParentOnInsertion() {
          return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
        }
        _findFosterParentingLocation() {
          const location = {
            parent: null,
            beforeElement: null
          };
          for (let i = this.openElements.stackTop; i >= 0; i--) {
            const openElement = this.openElements.items[i];
            const tn = this.treeAdapter.getTagName(openElement);
            const ns = this.treeAdapter.getNamespaceURI(openElement);
            if (tn === $.TEMPLATE && ns === NS.HTML) {
              location.parent = this.treeAdapter.getTemplateContent(openElement);
              break;
            } else if (tn === $.TABLE) {
              location.parent = this.treeAdapter.getParentNode(openElement);
              if (location.parent) {
                location.beforeElement = openElement;
              } else {
                location.parent = this.openElements.items[i - 1];
              }
              break;
            }
          }
          if (!location.parent) {
            location.parent = this.openElements.items[0];
          }
          return location;
        }
        _fosterParentElement(element) {
          const location = this._findFosterParentingLocation();
          if (location.beforeElement) {
            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
          } else {
            this.treeAdapter.appendChild(location.parent, element);
          }
        }
        _fosterParentText(chars) {
          const location = this._findFosterParentingLocation();
          if (location.beforeElement) {
            this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
          } else {
            this.treeAdapter.insertText(location.parent, chars);
          }
        }
        _isSpecialElement(element) {
          const tn = this.treeAdapter.getTagName(element);
          const ns = this.treeAdapter.getNamespaceURI(element);
          return HTML.SPECIAL_ELEMENTS[ns][tn];
        }
      };
      module.exports = Parser;
      function aaObtainFormattingElementEntry(p, token) {
        let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
        if (formattingElementEntry) {
          if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
          } else if (!p.openElements.hasInScope(token.tagName)) {
            formattingElementEntry = null;
          }
        } else {
          genericEndTagInBody(p, token);
        }
        return formattingElementEntry;
      }
      function aaObtainFurthestBlock(p, formattingElementEntry) {
        let furthestBlock = null;
        for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element = p.openElements.items[i];
          if (element === formattingElementEntry.element) {
            break;
          }
          if (p._isSpecialElement(element)) {
            furthestBlock = element;
          }
        }
        if (!furthestBlock) {
          p.openElements.popUntilElementPopped(formattingElementEntry.element);
          p.activeFormattingElements.removeEntry(formattingElementEntry);
        }
        return furthestBlock;
      }
      function aaInnerLoop(p, furthestBlock, formattingElement) {
        let lastElement = furthestBlock;
        let nextElement = p.openElements.getCommonAncestor(furthestBlock);
        for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
          nextElement = p.openElements.getCommonAncestor(element);
          const elementEntry = p.activeFormattingElements.getElementEntry(element);
          const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
          const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
          if (shouldRemoveFromOpenElements) {
            if (counterOverflow) {
              p.activeFormattingElements.removeEntry(elementEntry);
            }
            p.openElements.remove(element);
          } else {
            element = aaRecreateElementFromEntry(p, elementEntry);
            if (lastElement === furthestBlock) {
              p.activeFormattingElements.bookmark = elementEntry;
            }
            p.treeAdapter.detachNode(lastElement);
            p.treeAdapter.appendChild(element, lastElement);
            lastElement = element;
          }
        }
        return lastElement;
      }
      function aaRecreateElementFromEntry(p, elementEntry) {
        const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
        const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
        p.openElements.replace(elementEntry.element, newElement);
        elementEntry.element = newElement;
        return newElement;
      }
      function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
        if (p._isElementCausesFosterParenting(commonAncestor)) {
          p._fosterParentElement(lastElement);
        } else {
          const tn = p.treeAdapter.getTagName(commonAncestor);
          const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
          if (tn === $.TEMPLATE && ns === NS.HTML) {
            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
          }
          p.treeAdapter.appendChild(commonAncestor, lastElement);
        }
      }
      function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
        const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
        const token = formattingElementEntry.token;
        const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
        p._adoptNodes(furthestBlock, newElement);
        p.treeAdapter.appendChild(furthestBlock, newElement);
        p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
        p.openElements.remove(formattingElementEntry.element);
        p.openElements.insertAfter(furthestBlock, newElement);
      }
      function callAdoptionAgency(p, token) {
        let formattingElementEntry;
        for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
          formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
          if (!formattingElementEntry) {
            break;
          }
          const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
          if (!furthestBlock) {
            break;
          }
          p.activeFormattingElements.bookmark = formattingElementEntry;
          const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
          const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
          p.treeAdapter.detachNode(lastElement);
          aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
          aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
        }
      }
      function ignoreToken() {
      }
      function misplacedDoctype(p) {
        p._err(ERR.misplacedDoctype);
      }
      function appendComment(p, token) {
        p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
      }
      function appendCommentToRootHtmlElement(p, token) {
        p._appendCommentNode(token, p.openElements.items[0]);
      }
      function appendCommentToDocument(p, token) {
        p._appendCommentNode(token, p.document);
      }
      function insertCharacters(p, token) {
        p._insertCharacters(token);
      }
      function stopParsing(p) {
        p.stopped = true;
      }
      function doctypeInInitialMode(p, token) {
        p._setDocumentType(token);
        const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);
        if (!doctype.isConforming(token)) {
          p._err(ERR.nonConformingDoctype);
        }
        p.treeAdapter.setDocumentMode(p.document, mode);
        p.insertionMode = BEFORE_HTML_MODE;
      }
      function tokenInInitialMode(p, token) {
        p._err(ERR.missingDoctype, { beforeToken: true });
        p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
        p.insertionMode = BEFORE_HTML_MODE;
        p._processToken(token);
      }
      function startTagBeforeHtml(p, token) {
        if (token.tagName === $.HTML) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = BEFORE_HEAD_MODE;
        } else {
          tokenBeforeHtml(p, token);
        }
      }
      function endTagBeforeHtml(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
          tokenBeforeHtml(p, token);
        }
      }
      function tokenBeforeHtml(p, token) {
        p._insertFakeRootElement();
        p.insertionMode = BEFORE_HEAD_MODE;
        p._processToken(token);
      }
      function startTagBeforeHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.HEAD) {
          p._insertElement(token, NS.HTML);
          p.headElement = p.openElements.current;
          p.insertionMode = IN_HEAD_MODE;
        } else {
          tokenBeforeHead(p, token);
        }
      }
      function endTagBeforeHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenBeforeHead(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenBeforeHead(p, token) {
        p._insertFakeElement($.HEAD);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
      }
      function startTagInHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.TITLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
        } else if (tn === $.NOSCRIPT) {
          if (p.options.scriptingEnabled) {
            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
          } else {
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
          }
        } else if (tn === $.NOFRAMES || tn === $.STYLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
        } else if (tn === $.SCRIPT) {
          p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
        } else if (tn === $.TEMPLATE) {
          p._insertTemplate(token, NS.HTML);
          p.activeFormattingElements.insertMarker();
          p.framesetOk = false;
          p.insertionMode = IN_TEMPLATE_MODE;
          p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
        } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
        } else {
          tokenInHead(p, token);
        }
      }
      function endTagInHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HEAD) {
          p.openElements.pop();
          p.insertionMode = AFTER_HEAD_MODE;
        } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
          tokenInHead(p, token);
        } else if (tn === $.TEMPLATE) {
          if (p.openElements.tmplCount > 0) {
            p.openElements.generateImpliedEndTagsThoroughly();
            if (p.openElements.currentTagName !== $.TEMPLATE) {
              p._err(ERR.closingOfElementWithOpenChildElements);
            }
            p.openElements.popUntilTagNamePopped($.TEMPLATE);
            p.activeFormattingElements.clearToLastMarker();
            p._popTmplInsertionMode();
            p._resetInsertionMode();
          } else {
            p._err(ERR.endTagWithoutMatchingOpenElement);
          }
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenInHead(p, token) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
        p._processToken(token);
      }
      function startTagInHeadNoScript(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BASEFONT || tn === $.BGSOUND || tn === $.HEAD || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.STYLE) {
          startTagInHead(p, token);
        } else if (tn === $.NOSCRIPT) {
          p._err(ERR.nestedNoscriptInHead);
        } else {
          tokenInHeadNoScript(p, token);
        }
      }
      function endTagInHeadNoScript(p, token) {
        const tn = token.tagName;
        if (tn === $.NOSCRIPT) {
          p.openElements.pop();
          p.insertionMode = IN_HEAD_MODE;
        } else if (tn === $.BR) {
          tokenInHeadNoScript(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenInHeadNoScript(p, token) {
        const errCode = token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
        p._err(errCode);
        p.openElements.pop();
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
      }
      function startTagAfterHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BODY) {
          p._insertElement(token, NS.HTML);
          p.framesetOk = false;
          p.insertionMode = IN_BODY_MODE;
        } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
          p._err(ERR.abandonedHeadElementChild);
          p.openElements.push(p.headElement);
          startTagInHead(p, token);
          p.openElements.remove(p.headElement);
        } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
        } else {
          tokenAfterHead(p, token);
        }
      }
      function endTagAfterHead(p, token) {
        const tn = token.tagName;
        if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenAfterHead(p, token);
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenAfterHead(p, token) {
        p._insertFakeElement($.BODY);
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function whitespaceCharacterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
      }
      function characterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
        p.framesetOk = false;
      }
      function htmlStartTagInBody(p, token) {
        if (p.openElements.tmplCount === 0) {
          p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
        }
      }
      function bodyStartTagInBody(p, token) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (bodyElement && p.openElements.tmplCount === 0) {
          p.framesetOk = false;
          p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
        }
      }
      function framesetStartTagInBody(p, token) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (p.framesetOk && bodyElement) {
          p.treeAdapter.detachNode(bodyElement);
          p.openElements.popAllUpToHtmlElement();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
        }
      }
      function addressStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function numberedHeaderStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        const tn = p.openElements.currentTagName;
        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
          p.openElements.pop();
        }
        p._insertElement(token, NS.HTML);
      }
      function preStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.skipNextNewLine = true;
        p.framesetOk = false;
      }
      function formStartTagInBody(p, token) {
        const inTemplate = p.openElements.tmplCount > 0;
        if (!p.formElement || inTemplate) {
          if (p.openElements.hasInButtonScope($.P)) {
            p._closePElement();
          }
          p._insertElement(token, NS.HTML);
          if (!inTemplate) {
            p.formElement = p.openElements.current;
          }
        }
      }
      function listItemStartTagInBody(p, token) {
        p.framesetOk = false;
        const tn = token.tagName;
        for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element = p.openElements.items[i];
          const elementTn = p.treeAdapter.getTagName(element);
          let closeTn = null;
          if (tn === $.LI && elementTn === $.LI) {
            closeTn = $.LI;
          } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
            closeTn = elementTn;
          }
          if (closeTn) {
            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
            p.openElements.popUntilTagNamePopped(closeTn);
            break;
          }
          if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {
            break;
          }
        }
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function plaintextStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
      }
      function buttonStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.BUTTON)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped($.BUTTON);
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
      }
      function aStartTagInBody(p, token) {
        const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
        if (activeElementEntry) {
          callAdoptionAgency(p, token);
          p.openElements.remove(activeElementEntry.element);
          p.activeFormattingElements.removeEntry(activeElementEntry);
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function bStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function nobrStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        if (p.openElements.hasInScope($.NOBR)) {
          callAdoptionAgency(p, token);
          p._reconstructActiveFormattingElements();
        }
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function appletStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
      }
      function tableStartTagInBody(p, token) {
        if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_TABLE_MODE;
      }
      function areaStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
        token.ackSelfClosing = true;
      }
      function inputStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
        if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
          p.framesetOk = false;
        }
        token.ackSelfClosing = true;
      }
      function paramStartTagInBody(p, token) {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
      }
      function hrStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
        token.ackSelfClosing = true;
      }
      function imageStartTagInBody(p, token) {
        token.tagName = $.IMG;
        areaStartTagInBody(p, token);
      }
      function textareaStartTagInBody(p, token) {
        p._insertElement(token, NS.HTML);
        p.skipNextNewLine = true;
        p.tokenizer.state = Tokenizer.MODE.RCDATA;
        p.originalInsertionMode = p.insertionMode;
        p.framesetOk = false;
        p.insertionMode = TEXT_MODE;
      }
      function xmpStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._reconstructActiveFormattingElements();
        p.framesetOk = false;
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function iframeStartTagInBody(p, token) {
        p.framesetOk = false;
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function noembedStartTagInBody(p, token) {
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function selectStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
          p.insertionMode = IN_SELECT_IN_TABLE_MODE;
        } else {
          p.insertionMode = IN_SELECT_MODE;
        }
      }
      function optgroupStartTagInBody(p, token) {
        if (p.openElements.currentTagName === $.OPTION) {
          p.openElements.pop();
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
      }
      function rbStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTags();
        }
        p._insertElement(token, NS.HTML);
      }
      function rtStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
        }
        p._insertElement(token, NS.HTML);
      }
      function menuStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function mathStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        foreignContent.adjustTokenMathMLAttrs(token);
        foreignContent.adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
          p._appendElement(token, NS.MATHML);
        } else {
          p._insertElement(token, NS.MATHML);
        }
        token.ackSelfClosing = true;
      }
      function svgStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        foreignContent.adjustTokenSVGAttrs(token);
        foreignContent.adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
          p._appendElement(token, NS.SVG);
        } else {
          p._insertElement(token, NS.SVG);
        }
        token.ackSelfClosing = true;
      }
      function genericStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
      }
      function startTagInBody(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 1:
            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
              bStartTagInBody(p, token);
            } else if (tn === $.P) {
              addressStartTagInBody(p, token);
            } else if (tn === $.A) {
              aStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 2:
            if (tn === $.DL || tn === $.OL || tn === $.UL) {
              addressStartTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
              numberedHeaderStartTagInBody(p, token);
            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
              listItemStartTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
              bStartTagInBody(p, token);
            } else if (tn === $.BR) {
              areaStartTagInBody(p, token);
            } else if (tn === $.HR) {
              hrStartTagInBody(p, token);
            } else if (tn === $.RB) {
              rbStartTagInBody(p, token);
            } else if (tn === $.RT || tn === $.RP) {
              rtStartTagInBody(p, token);
            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
              genericStartTagInBody(p, token);
            }
            break;
          case 3:
            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
              addressStartTagInBody(p, token);
            } else if (tn === $.PRE) {
              preStartTagInBody(p, token);
            } else if (tn === $.BIG) {
              bStartTagInBody(p, token);
            } else if (tn === $.IMG || tn === $.WBR) {
              areaStartTagInBody(p, token);
            } else if (tn === $.XMP) {
              xmpStartTagInBody(p, token);
            } else if (tn === $.SVG) {
              svgStartTagInBody(p, token);
            } else if (tn === $.RTC) {
              rbStartTagInBody(p, token);
            } else if (tn !== $.COL) {
              genericStartTagInBody(p, token);
            }
            break;
          case 4:
            if (tn === $.HTML) {
              htmlStartTagInBody(p, token);
            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
              startTagInHead(p, token);
            } else if (tn === $.BODY) {
              bodyStartTagInBody(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
              addressStartTagInBody(p, token);
            } else if (tn === $.FORM) {
              formStartTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT) {
              bStartTagInBody(p, token);
            } else if (tn === $.NOBR) {
              nobrStartTagInBody(p, token);
            } else if (tn === $.AREA) {
              areaStartTagInBody(p, token);
            } else if (tn === $.MATH) {
              mathStartTagInBody(p, token);
            } else if (tn === $.MENU) {
              menuStartTagInBody(p, token);
            } else if (tn !== $.HEAD) {
              genericStartTagInBody(p, token);
            }
            break;
          case 5:
            if (tn === $.STYLE || tn === $.TITLE) {
              startTagInHead(p, token);
            } else if (tn === $.ASIDE) {
              addressStartTagInBody(p, token);
            } else if (tn === $.SMALL) {
              bStartTagInBody(p, token);
            } else if (tn === $.TABLE) {
              tableStartTagInBody(p, token);
            } else if (tn === $.EMBED) {
              areaStartTagInBody(p, token);
            } else if (tn === $.INPUT) {
              inputStartTagInBody(p, token);
            } else if (tn === $.PARAM || tn === $.TRACK) {
              paramStartTagInBody(p, token);
            } else if (tn === $.IMAGE) {
              imageStartTagInBody(p, token);
            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
              genericStartTagInBody(p, token);
            }
            break;
          case 6:
            if (tn === $.SCRIPT) {
              startTagInHead(p, token);
            } else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
              addressStartTagInBody(p, token);
            } else if (tn === $.BUTTON) {
              buttonStartTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
              bStartTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
              appletStartTagInBody(p, token);
            } else if (tn === $.KEYGEN) {
              areaStartTagInBody(p, token);
            } else if (tn === $.SOURCE) {
              paramStartTagInBody(p, token);
            } else if (tn === $.IFRAME) {
              iframeStartTagInBody(p, token);
            } else if (tn === $.SELECT) {
              selectStartTagInBody(p, token);
            } else if (tn === $.OPTION) {
              optgroupStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 7:
            if (tn === $.BGSOUND) {
              startTagInHead(p, token);
            } else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) {
              addressStartTagInBody(p, token);
            } else if (tn === $.LISTING) {
              preStartTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
              appletStartTagInBody(p, token);
            } else if (tn === $.NOEMBED) {
              noembedStartTagInBody(p, token);
            } else if (tn !== $.CAPTION) {
              genericStartTagInBody(p, token);
            }
            break;
          case 8:
            if (tn === $.BASEFONT) {
              startTagInHead(p, token);
            } else if (tn === $.FRAMESET) {
              framesetStartTagInBody(p, token);
            } else if (tn === $.FIELDSET) {
              addressStartTagInBody(p, token);
            } else if (tn === $.TEXTAREA) {
              textareaStartTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
              startTagInHead(p, token);
            } else if (tn === $.NOSCRIPT) {
              if (p.options.scriptingEnabled) {
                noembedStartTagInBody(p, token);
              } else {
                genericStartTagInBody(p, token);
              }
            } else if (tn === $.OPTGROUP) {
              optgroupStartTagInBody(p, token);
            } else if (tn !== $.COLGROUP) {
              genericStartTagInBody(p, token);
            }
            break;
          case 9:
            if (tn === $.PLAINTEXT) {
              plaintextStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
              addressStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          default:
            genericStartTagInBody(p, token);
        }
      }
      function bodyEndTagInBody(p) {
        if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
        }
      }
      function htmlEndTagInBody(p, token) {
        if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
          p._processToken(token);
        }
      }
      function addressEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
        }
      }
      function formEndTagInBody(p) {
        const inTemplate = p.openElements.tmplCount > 0;
        const formElement = p.formElement;
        if (!inTemplate) {
          p.formElement = null;
        }
        if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
          p.openElements.generateImpliedEndTags();
          if (inTemplate) {
            p.openElements.popUntilTagNamePopped($.FORM);
          } else {
            p.openElements.remove(formElement);
          }
        }
      }
      function pEndTagInBody(p) {
        if (!p.openElements.hasInButtonScope($.P)) {
          p._insertFakeElement($.P);
        }
        p._closePElement();
      }
      function liEndTagInBody(p) {
        if (p.openElements.hasInListItemScope($.LI)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.LI);
          p.openElements.popUntilTagNamePopped($.LI);
        }
      }
      function ddEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTagsWithExclusion(tn);
          p.openElements.popUntilTagNamePopped(tn);
        }
      }
      function numberedHeaderEndTagInBody(p) {
        if (p.openElements.hasNumberedHeaderInScope()) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilNumberedHeaderPopped();
        }
      }
      function appletEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
          p.activeFormattingElements.clearToLastMarker();
        }
      }
      function brEndTagInBody(p) {
        p._reconstructActiveFormattingElements();
        p._insertFakeElement($.BR);
        p.openElements.pop();
        p.framesetOk = false;
      }
      function genericEndTagInBody(p, token) {
        const tn = token.tagName;
        for (let i = p.openElements.stackTop; i > 0; i--) {
          const element = p.openElements.items[i];
          if (p.treeAdapter.getTagName(element) === tn) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilElementPopped(element);
            break;
          }
          if (p._isSpecialElement(element)) {
            break;
          }
        }
      }
      function endTagInBody(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 1:
            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
              callAdoptionAgency(p, token);
            } else if (tn === $.P) {
              pEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 2:
            if (tn === $.DL || tn === $.UL || tn === $.OL) {
              addressEndTagInBody(p, token);
            } else if (tn === $.LI) {
              liEndTagInBody(p, token);
            } else if (tn === $.DD || tn === $.DT) {
              ddEndTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
              numberedHeaderEndTagInBody(p, token);
            } else if (tn === $.BR) {
              brEndTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 3:
            if (tn === $.BIG) {
              callAdoptionAgency(p, token);
            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 4:
            if (tn === $.BODY) {
              bodyEndTagInBody(p, token);
            } else if (tn === $.HTML) {
              htmlEndTagInBody(p, token);
            } else if (tn === $.FORM) {
              formEndTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
              callAdoptionAgency(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 5:
            if (tn === $.ASIDE) {
              addressEndTagInBody(p, token);
            } else if (tn === $.SMALL) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 6:
            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
              addressEndTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
              appletEndTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 7:
            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY || tn === $.LISTING) {
              addressEndTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
              appletEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 8:
            if (tn === $.FIELDSET) {
              addressEndTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
              endTagInHead(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          default:
            genericEndTagInBody(p, token);
        }
      }
      function eofInBody(p, token) {
        if (p.tmplInsertionModeStackTop > -1) {
          eofInTemplate(p, token);
        } else {
          p.stopped = true;
        }
      }
      function endTagInText(p, token) {
        if (token.tagName === $.SCRIPT) {
          p.pendingScript = p.openElements.current;
        }
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
      }
      function eofInText(p, token) {
        p._err(ERR.eofInElementThatCanContainOnlyText);
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
      }
      function characterInTable(p, token) {
        const curTn = p.openElements.currentTagName;
        if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
          p.pendingCharacterTokens = [];
          p.hasNonWhitespacePendingCharacterToken = false;
          p.originalInsertionMode = p.insertionMode;
          p.insertionMode = IN_TABLE_TEXT_MODE;
          p._processToken(token);
        } else {
          tokenInTable(p, token);
        }
      }
      function captionStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p.activeFormattingElements.insertMarker();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CAPTION_MODE;
      }
      function colgroupStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
      }
      function colStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.COLGROUP);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
        p._processToken(token);
      }
      function tbodyStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_TABLE_BODY_MODE;
      }
      function tdStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.TBODY);
        p.insertionMode = IN_TABLE_BODY_MODE;
        p._processToken(token);
      }
      function tableStartTagInTable(p, token) {
        if (p.openElements.hasInTableScope($.TABLE)) {
          p.openElements.popUntilTagNamePopped($.TABLE);
          p._resetInsertionMode();
          p._processToken(token);
        }
      }
      function inputStartTagInTable(p, token) {
        const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
        if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
          p._appendElement(token, NS.HTML);
        } else {
          tokenInTable(p, token);
        }
        token.ackSelfClosing = true;
      }
      function formStartTagInTable(p, token) {
        if (!p.formElement && p.openElements.tmplCount === 0) {
          p._insertElement(token, NS.HTML);
          p.formElement = p.openElements.current;
          p.openElements.pop();
        }
      }
      function startTagInTable(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 2:
            if (tn === $.TD || tn === $.TH || tn === $.TR) {
              tdStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 3:
            if (tn === $.COL) {
              colStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 4:
            if (tn === $.FORM) {
              formStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 5:
            if (tn === $.TABLE) {
              tableStartTagInTable(p, token);
            } else if (tn === $.STYLE) {
              startTagInHead(p, token);
            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
              tbodyStartTagInTable(p, token);
            } else if (tn === $.INPUT) {
              inputStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 6:
            if (tn === $.SCRIPT) {
              startTagInHead(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 7:
            if (tn === $.CAPTION) {
              captionStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 8:
            if (tn === $.COLGROUP) {
              colgroupStartTagInTable(p, token);
            } else if (tn === $.TEMPLATE) {
              startTagInHead(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          default:
            tokenInTable(p, token);
        }
      }
      function endTagInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
          }
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
          tokenInTable(p, token);
        }
      }
      function tokenInTable(p, token) {
        const savedFosterParentingState = p.fosterParentingEnabled;
        p.fosterParentingEnabled = true;
        p._processTokenInBodyMode(token);
        p.fosterParentingEnabled = savedFosterParentingState;
      }
      function whitespaceCharacterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
      }
      function characterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
        p.hasNonWhitespacePendingCharacterToken = true;
      }
      function tokenInTableText(p, token) {
        let i = 0;
        if (p.hasNonWhitespacePendingCharacterToken) {
          for (; i < p.pendingCharacterTokens.length; i++) {
            tokenInTable(p, p.pendingCharacterTokens[i]);
          }
        } else {
          for (; i < p.pendingCharacterTokens.length; i++) {
            p._insertCharacters(p.pendingCharacterTokens[i]);
          }
        }
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
      }
      function startTagInCaption(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else {
          startTagInBody(p, token);
        }
      }
      function endTagInCaption(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            if (tn === $.TABLE) {
              p._processToken(token);
            }
          }
        } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
          endTagInBody(p, token);
        }
      }
      function startTagInColumnGroup(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.COL) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.TEMPLATE) {
          startTagInHead(p, token);
        } else {
          tokenInColumnGroup(p, token);
        }
      }
      function endTagInColumnGroup(p, token) {
        const tn = token.tagName;
        if (tn === $.COLGROUP) {
          if (p.openElements.currentTagName === $.COLGROUP) {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
          }
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else if (tn !== $.COL) {
          tokenInColumnGroup(p, token);
        }
      }
      function tokenInColumnGroup(p, token) {
        if (p.openElements.currentTagName === $.COLGROUP) {
          p.openElements.pop();
          p.insertionMode = IN_TABLE_MODE;
          p._processToken(token);
        }
      }
      function startTagInTableBody(p, token) {
        const tn = token.tagName;
        if (tn === $.TR) {
          p.openElements.clearBackToTableBodyContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_ROW_MODE;
        } else if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableBodyContext();
          p._insertFakeElement($.TR);
          p.insertionMode = IN_ROW_MODE;
          p._processToken(token);
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else {
          startTagInTable(p, token);
        }
      }
      function endTagInTableBody(p, token) {
        const tn = token.tagName;
        if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
          }
        } else if (tn === $.TABLE) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
          endTagInTable(p, token);
        }
      }
      function startTagInRow(p, token) {
        const tn = token.tagName;
        if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableRowContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_CELL_MODE;
          p.activeFormattingElements.insertMarker();
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else {
          startTagInTable(p, token);
        }
      }
      function endTagInRow(p, token) {
        const tn = token.tagName;
        if (tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
          }
        } else if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
          endTagInTable(p, token);
        }
      }
      function startTagInCell(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
            p._closeTableCell();
            p._processToken(token);
          }
        } else {
          startTagInBody(p, token);
        }
      }
      function endTagInCell(p, token) {
        const tn = token.tagName;
        if (tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_ROW_MODE;
          }
        } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope(tn)) {
            p._closeTableCell();
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
          endTagInBody(p, token);
        }
      }
      function startTagInSelect(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
          p._insertElement(token, NS.HTML);
        } else if (tn === $.OPTGROUP) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
          if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
          }
          p._insertElement(token, NS.HTML);
        } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
          if (p.openElements.hasInSelectScope($.SELECT)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            if (tn !== $.SELECT) {
              p._processToken(token);
            }
          }
        } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
          startTagInHead(p, token);
        }
      }
      function endTagInSelect(p, token) {
        const tn = token.tagName;
        if (tn === $.OPTGROUP) {
          const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
          const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
          if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
            p.openElements.pop();
          }
          if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
          }
        } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
        } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        }
      }
      function startTagInSelectInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
          p._processToken(token);
        } else {
          startTagInSelect(p, token);
        }
      }
      function endTagInSelectInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            p._processToken(token);
          }
        } else {
          endTagInSelect(p, token);
        }
      }
      function startTagInTemplate(p, token) {
        const tn = token.tagName;
        if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
          startTagInHead(p, token);
        } else {
          const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
          p._popTmplInsertionMode();
          p._pushTmplInsertionMode(newInsertionMode);
          p.insertionMode = newInsertionMode;
          p._processToken(token);
        }
      }
      function endTagInTemplate(p, token) {
        if (token.tagName === $.TEMPLATE) {
          endTagInHead(p, token);
        }
      }
      function eofInTemplate(p, token) {
        if (p.openElements.tmplCount > 0) {
          p.openElements.popUntilTagNamePopped($.TEMPLATE);
          p.activeFormattingElements.clearToLastMarker();
          p._popTmplInsertionMode();
          p._resetInsertionMode();
          p._processToken(token);
        } else {
          p.stopped = true;
        }
      }
      function startTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          startTagInBody(p, token);
        } else {
          tokenAfterBody(p, token);
        }
      }
      function endTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          if (!p.fragmentContext) {
            p.insertionMode = AFTER_AFTER_BODY_MODE;
          }
        } else {
          tokenAfterBody(p, token);
        }
      }
      function tokenAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function startTagInFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
        } else if (tn === $.FRAME) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function endTagInFrameset(p, token) {
        if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
          p.openElements.pop();
          if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
            p.insertionMode = AFTER_FRAMESET_MODE;
          }
        }
      }
      function startTagAfterFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function endTagAfterFrameset(p, token) {
        if (token.tagName === $.HTML) {
          p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
        }
      }
      function startTagAfterAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          startTagInBody(p, token);
        } else {
          tokenAfterAfterBody(p, token);
        }
      }
      function tokenAfterAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function startTagAfterAfterFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function nullCharacterInForeignContent(p, token) {
        token.chars = unicode2.REPLACEMENT_CHARACTER;
        p._insertCharacters(token);
      }
      function characterInForeignContent(p, token) {
        p._insertCharacters(token);
        p.framesetOk = false;
      }
      function startTagInForeignContent(p, token) {
        if (foreignContent.causesExit(token) && !p.fragmentContext) {
          while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
            p.openElements.pop();
          }
          p._processToken(token);
        } else {
          const current = p._getAdjustedCurrentElement();
          const currentNs = p.treeAdapter.getNamespaceURI(current);
          if (currentNs === NS.MATHML) {
            foreignContent.adjustTokenMathMLAttrs(token);
          } else if (currentNs === NS.SVG) {
            foreignContent.adjustTokenSVGTagName(token);
            foreignContent.adjustTokenSVGAttrs(token);
          }
          foreignContent.adjustTokenXMLAttrs(token);
          if (token.selfClosing) {
            p._appendElement(token, currentNs);
          } else {
            p._insertElement(token, currentNs);
          }
          token.ackSelfClosing = true;
        }
      }
      function endTagInForeignContent(p, token) {
        for (let i = p.openElements.stackTop; i > 0; i--) {
          const element = p.openElements.items[i];
          if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
            p._processToken(token);
            break;
          }
          if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
            p.openElements.popUntilElementPopped(element);
            break;
          }
        }
      }
    }
  });

  // translators/bibtex/biber-tool.conf
  var require_biber_tool = __commonJS({
    "translators/bibtex/biber-tool.conf"(exports, module) {
      var fieldSet = {
        "optional": new Set([
          "abstract",
          "annotation",
          "authortype",
          "bookpagination",
          "crossref",
          "date",
          "doi",
          "eprint",
          "eprintclass",
          "eprinttype",
          "entryset",
          "entrysubtype",
          "execute",
          "file",
          "gender",
          "ids",
          "indextitle",
          "indexsorttitle",
          "isan",
          "ismn",
          "iswc",
          "keywords",
          "label",
          "langid",
          "langidopts",
          "library",
          "lista",
          "listb",
          "listc",
          "listd",
          "liste",
          "listf",
          "month",
          "namea",
          "nameb",
          "namec",
          "nameatype",
          "namebtype",
          "namectype",
          "nameaddon",
          "options",
          "origdate",
          "origlocation",
          "origpublisher",
          "origtitle",
          "pagination",
          "presort",
          "related",
          "relatedoptions",
          "relatedstring",
          "relatedtype",
          "shortauthor",
          "shorteditor",
          "shorthand",
          "shorthandintro",
          "shortjournal",
          "shortseries",
          "shorttitle",
          "sortkey",
          "sortname",
          "sortshorthand",
          "sorttitle",
          "sortyear",
          "url",
          "urldate",
          "usera",
          "userb",
          "userc",
          "userd",
          "usere",
          "userf",
          "verba",
          "verbb",
          "verbc",
          "xdata",
          "xref",
          "year"
        ]),
        "optional_set": new Set([
          "entryset"
        ]),
        "optional_article": new Set([
          "addendum",
          "annotator",
          "author",
          "commentator",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "eid",
          "issn",
          "issue",
          "issuetitle",
          "issuesubtitle",
          "issuetitleaddon",
          "journalsubtitle",
          "journaltitle",
          "journaltitleaddon",
          "language",
          "note",
          "number",
          "origlanguage",
          "pages",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "version",
          "volume"
        ]),
        "optional_bibnote": new Set([
          "note"
        ]),
        "optional_book": new Set([
          "author",
          "addendum",
          "afterword",
          "annotator",
          "chapter",
          "commentator",
          "edition",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "eid",
          "foreword",
          "introduction",
          "isbn",
          "language",
          "location",
          "maintitle",
          "maintitleaddon",
          "mainsubtitle",
          "note",
          "number",
          "origlanguage",
          "pages",
          "pagetotal",
          "part",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "volume",
          "volumes"
        ]),
        "optional_mvbook": new Set([
          "addendum",
          "afterword",
          "annotator",
          "author",
          "commentator",
          "edition",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "foreword",
          "introduction",
          "isbn",
          "language",
          "location",
          "note",
          "number",
          "origlanguage",
          "pagetotal",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "volume",
          "volumes"
        ]),
        "optional_bookinbook_inbook_suppbook": new Set([
          "addendum",
          "afterword",
          "annotator",
          "author",
          "booktitle",
          "bookauthor",
          "booksubtitle",
          "booktitleaddon",
          "chapter",
          "commentator",
          "edition",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "eid",
          "foreword",
          "introduction",
          "isbn",
          "language",
          "location",
          "mainsubtitle",
          "maintitle",
          "maintitleaddon",
          "note",
          "number",
          "origlanguage",
          "part",
          "publisher",
          "pages",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "volume",
          "volumes"
        ]),
        "optional_booklet": new Set([
          "addendum",
          "author",
          "chapter",
          "editor",
          "editortype",
          "eid",
          "howpublished",
          "language",
          "location",
          "note",
          "pages",
          "pagetotal",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "type"
        ]),
        "optional_collection_reference": new Set([
          "addendum",
          "afterword",
          "annotator",
          "chapter",
          "commentator",
          "edition",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "eid",
          "foreword",
          "introduction",
          "isbn",
          "language",
          "location",
          "mainsubtitle",
          "maintitle",
          "maintitleaddon",
          "note",
          "number",
          "origlanguage",
          "pages",
          "pagetotal",
          "part",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "volume",
          "volumes"
        ]),
        "optional_mvcollection_mvreference": new Set([
          "addendum",
          "afterword",
          "annotator",
          "author",
          "commentator",
          "edition",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "foreword",
          "introduction",
          "isbn",
          "language",
          "location",
          "note",
          "number",
          "origlanguage",
          "publisher",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "volume",
          "volumes"
        ]),
        "optional_incollection_inreference_suppcollection": new Set([
          "addendum",
          "afterword",
          "annotator",
          "author",
          "booksubtitle",
          "booktitle",
          "booktitleaddon",
          "chapter",
          "commentator",
          "edition",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "eid",
          "foreword",
          "introduction",
          "isbn",
          "language",
          "location",
          "mainsubtitle",
          "maintitle",
          "maintitleaddon",
          "note",
          "number",
          "origlanguage",
          "pages",
          "part",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "translator",
          "volume",
          "volumes"
        ]),
        "optional_dataset": new Set([
          "addendum",
          "author",
          "edition",
          "editor",
          "editortype",
          "language",
          "location",
          "note",
          "number",
          "organization",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "type",
          "version"
        ]),
        "optional_manual": new Set([
          "addendum",
          "author",
          "chapter",
          "edition",
          "editor",
          "editortype",
          "eid",
          "isbn",
          "language",
          "location",
          "note",
          "number",
          "organization",
          "pages",
          "pagetotal",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "type",
          "version"
        ]),
        "optional_misc_software": new Set([
          "addendum",
          "author",
          "editor",
          "editortype",
          "howpublished",
          "language",
          "location",
          "note",
          "organization",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "type",
          "version"
        ]),
        "optional_online": new Set([
          "addendum",
          "author",
          "editor",
          "editortype",
          "language",
          "note",
          "organization",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "version"
        ]),
        "optional_patent": new Set([
          "addendum",
          "author",
          "holder",
          "location",
          "note",
          "number",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "type",
          "version"
        ]),
        "optional_periodical": new Set([
          "addendum",
          "editor",
          "editora",
          "editorb",
          "editorc",
          "editortype",
          "editoratype",
          "editorbtype",
          "editorctype",
          "issn",
          "issue",
          "issuesubtitle",
          "issuetitle",
          "issuetitleaddon",
          "language",
          "note",
          "number",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "volume",
          "date"
        ]),
        "optional_mvproceedings": new Set([
          "addendum",
          "editor",
          "editortype",
          "eventdate",
          "eventtitle",
          "eventtitleaddon",
          "isbn",
          "language",
          "location",
          "note",
          "number",
          "organization",
          "pagetotal",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "venue",
          "volumes"
        ]),
        "optional_proceedings": new Set([
          "addendum",
          "chapter",
          "editor",
          "editortype",
          "eid",
          "eventdate",
          "eventtitle",
          "eventtitleaddon",
          "isbn",
          "language",
          "location",
          "mainsubtitle",
          "maintitle",
          "maintitleaddon",
          "note",
          "number",
          "organization",
          "pages",
          "pagetotal",
          "part",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "venue",
          "volume",
          "volumes"
        ]),
        "optional_inproceedings": new Set([
          "addendum",
          "author",
          "booksubtitle",
          "booktitle",
          "booktitleaddon",
          "chapter",
          "editor",
          "editortype",
          "eid",
          "eventdate",
          "eventtitle",
          "eventtitleaddon",
          "isbn",
          "language",
          "location",
          "mainsubtitle",
          "maintitle",
          "maintitleaddon",
          "note",
          "number",
          "organization",
          "pages",
          "part",
          "publisher",
          "pubstate",
          "series",
          "subtitle",
          "title",
          "titleaddon",
          "venue",
          "volume",
          "volumes"
        ]),
        "optional_report": new Set([
          "addendum",
          "author",
          "chapter",
          "eid",
          "institution",
          "isrn",
          "language",
          "location",
          "note",
          "number",
          "pages",
          "pagetotal",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "type",
          "version"
        ]),
        "optional_thesis": new Set([
          "addendum",
          "author",
          "chapter",
          "eid",
          "institution",
          "language",
          "location",
          "note",
          "pages",
          "pagetotal",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "type"
        ]),
        "optional_unpublished": new Set([
          "addendum",
          "author",
          "eventdate",
          "eventtitle",
          "eventtitleaddon",
          "howpublished",
          "language",
          "location",
          "note",
          "pubstate",
          "subtitle",
          "title",
          "titleaddon",
          "type",
          "venue"
        ])
      };
      var allowed = {
        article: [
          fieldSet.optional,
          fieldSet.optional_article
        ],
        artwork: [
          fieldSet.optional
        ],
        audio: [
          fieldSet.optional
        ],
        bibnote: [
          fieldSet.optional,
          fieldSet.optional_bibnote
        ],
        book: [
          fieldSet.optional,
          fieldSet.optional_book
        ],
        bookinbook: [
          fieldSet.optional,
          fieldSet.optional_bookinbook_inbook_suppbook
        ],
        booklet: [
          fieldSet.optional,
          fieldSet.optional_booklet
        ],
        collection: [
          fieldSet.optional,
          fieldSet.optional_collection_reference
        ],
        commentary: [
          fieldSet.optional
        ],
        customa: [
          fieldSet.optional
        ],
        customb: [
          fieldSet.optional
        ],
        customc: [
          fieldSet.optional
        ],
        customd: [
          fieldSet.optional
        ],
        custome: [
          fieldSet.optional
        ],
        customf: [
          fieldSet.optional
        ],
        dataset: [
          fieldSet.optional,
          fieldSet.optional_dataset
        ],
        inbook: [
          fieldSet.optional,
          fieldSet.optional_bookinbook_inbook_suppbook
        ],
        incollection: [
          fieldSet.optional,
          fieldSet.optional_incollection_inreference_suppcollection
        ],
        inproceedings: [
          fieldSet.optional,
          fieldSet.optional_inproceedings
        ],
        inreference: [
          fieldSet.optional,
          fieldSet.optional_incollection_inreference_suppcollection
        ],
        image: [
          fieldSet.optional
        ],
        jurisdiction: [
          fieldSet.optional
        ],
        legal: [
          fieldSet.optional
        ],
        legislation: [
          fieldSet.optional
        ],
        letter: [
          fieldSet.optional
        ],
        manual: [
          fieldSet.optional,
          fieldSet.optional_manual
        ],
        misc: [
          fieldSet.optional,
          fieldSet.optional_misc_software
        ],
        movie: [
          fieldSet.optional
        ],
        music: [
          fieldSet.optional
        ],
        mvcollection: [
          fieldSet.optional,
          fieldSet.optional_mvcollection_mvreference
        ],
        mvreference: [
          fieldSet.optional,
          fieldSet.optional_mvcollection_mvreference
        ],
        mvproceedings: [
          fieldSet.optional,
          fieldSet.optional_mvproceedings
        ],
        mvbook: [
          fieldSet.optional,
          fieldSet.optional_mvbook
        ],
        online: [
          fieldSet.optional,
          fieldSet.optional_online
        ],
        patent: [
          fieldSet.optional,
          fieldSet.optional_patent
        ],
        performance: [
          fieldSet.optional
        ],
        periodical: [
          fieldSet.optional,
          fieldSet.optional_periodical
        ],
        proceedings: [
          fieldSet.optional,
          fieldSet.optional_proceedings
        ],
        reference: [
          fieldSet.optional,
          fieldSet.optional_collection_reference
        ],
        report: [
          fieldSet.optional,
          fieldSet.optional_report
        ],
        review: [
          fieldSet.optional
        ],
        set: [
          fieldSet.optional,
          fieldSet.optional_set
        ],
        software: [
          fieldSet.optional,
          fieldSet.optional_misc_software
        ],
        standard: [
          fieldSet.optional
        ],
        suppbook: [
          fieldSet.optional,
          fieldSet.optional_bookinbook_inbook_suppbook
        ],
        suppcollection: [
          fieldSet.optional,
          fieldSet.optional_incollection_inreference_suppcollection
        ],
        suppperiodical: [
          fieldSet.optional
        ],
        thesis: [
          fieldSet.optional,
          fieldSet.optional_thesis
        ],
        unpublished: [
          fieldSet.optional,
          fieldSet.optional_unpublished
        ],
        video: [
          fieldSet.optional
        ],
        xdata: [
          fieldSet.optional
        ]
      };
      var required = [
        {
          types: new Set(["article", "book", "bookinbook", "booklet", "collection", "inbook", "incollection", "inproceedings", "inreference", "manual", "misc", "mvbook", "mvcollection", "online", "patent", "periodical", "proceedings", "reference", "report", "set", "suppbook", "suppcollection", "suppperiodical", "thesis", "unpublished"]),
          check: function(ref, report) {
            if (!ref.has.date === !ref.has.year)
              report.push("Exactly one of 'date' / 'year' must be present");
          }
        },
        {
          types: new Set(["set"]),
          check: function(ref, report) {
            if (!ref.has.entryset)
              report.push("Missing required field 'entryset'");
          }
        },
        {
          types: new Set(["article"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.journaltitle)
              report.push("Missing required field 'journaltitle'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["book", "mvbook"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["bookinbook", "inbook", "suppbook"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!ref.has.booktitle)
              report.push("Missing required field 'booktitle'");
          }
        },
        {
          types: new Set(["booklet"]),
          check: function(ref, report) {
            if (!(ref.has.author || ref.has.editor))
              report.push("At least one of 'author' / 'editor' must be present");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["collection", "mvcollection", "mvreference", "reference"]),
          check: function(ref, report) {
            if (!ref.has.editor)
              report.push("Missing required field 'editor'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["incollection", "inreference", "suppcollection"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.editor)
              report.push("Missing required field 'editor'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!ref.has.booktitle)
              report.push("Missing required field 'booktitle'");
          }
        },
        {
          types: new Set(["dataset"]),
          check: function(ref, report) {
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["manual"]),
          check: function(ref, report) {
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["misc", "software"]),
          check: function(ref, report) {
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["online"]),
          check: function(ref, report) {
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!(ref.has.url || ref.has.doi || ref.has.eprint))
              report.push("At least one of 'url' / 'doi' / 'eprint' must be present");
          }
        },
        {
          types: new Set(["patent"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!ref.has.number)
              report.push("Missing required field 'number'");
          }
        },
        {
          types: new Set(["periodical"]),
          check: function(ref, report) {
            if (!ref.has.editor)
              report.push("Missing required field 'editor'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["mvproceedings", "proceedings"]),
          check: function(ref, report) {
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        },
        {
          types: new Set(["inproceedings"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!ref.has.booktitle)
              report.push("Missing required field 'booktitle'");
          }
        },
        {
          types: new Set(["report"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!ref.has.type)
              report.push("Missing required field 'type'");
            if (!ref.has.institution)
              report.push("Missing required field 'institution'");
          }
        },
        {
          types: new Set(["thesis"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
            if (!ref.has.type)
              report.push("Missing required field 'type'");
            if (!ref.has.institution)
              report.push("Missing required field 'institution'");
          }
        },
        {
          types: new Set(["unpublished"]),
          check: function(ref, report) {
            if (!ref.has.author)
              report.push("Missing required field 'author'");
            if (!ref.has.title)
              report.push("Missing required field 'title'");
          }
        }
      ];
      module.exports = function(explanation) {
        var type2 = this.referencetype.toLowerCase();
        if (!allowed[type2])
          return;
        var unexpected = Object.keys(this.has).filter((field) => !allowed[type2].find((set) => set.has(field)));
        var report = unexpected.map((field) => "Unexpected field '" + field + "'" + (explanation[field] ? " (" + explanation[field] + ")" : ""));
        for (const test of required) {
          if (test.types.has(type2))
            test.check(this, report);
        }
        for (const field of ["isbn"]) {
          if (this.has[field]) {
            const warning = Zotero.BetterBibTeX.qrCheck(this.has[field].value, "isbn", null);
            if (warning)
              report.push("'" + field + "': " + warning);
          }
        }
        for (const field of ["issn"]) {
          if (this.has[field]) {
            const warning = Zotero.BetterBibTeX.qrCheck(this.has[field].value, "issn", null);
            if (warning)
              report.push("'" + field + "': " + warning);
          }
        }
        for (const field of ["ismn"]) {
          if (this.has[field]) {
            const warning = Zotero.BetterBibTeX.qrCheck(this.has[field].value, "ismn", null);
            if (warning)
              report.push("'" + field + "': " + warning);
          }
        }
        for (const field of ["gender"]) {
          if (this.has[field]) {
            const warning = Zotero.BetterBibTeX.qrCheck(this.has[field].value, "pattern", "(?:sf|sm|sn|pf|pm|pn|pp)");
            if (warning)
              report.push("'" + field + "': " + warning);
          }
        }
        return report;
      };
    }
  });

  // translators/Better BibLaTeX.ts
  var Better_BibLaTeX_exports = {};
  __export(Better_BibLaTeX_exports, {
    Translator: () => Translator,
    doExport: () => doExport
  });

  // gen/preferences/meta.ts
  var names = [
    "ascii",
    "asciiBibLaTeX",
    "asciiBibTeX",
    "autoAbbrev",
    "autoAbbrevStyle",
    "autoExport",
    "autoExportDelay",
    "autoExportIdleWait",
    "autoExportPathReplaceDiacritics",
    "autoExportPathReplaceDirSep",
    "autoExportPathReplaceSpace",
    "automaticTags",
    "autoPinDelay",
    "auxImport",
    "baseAttachmentPath",
    "biblatexExtendedDateFormat",
    "biblatexExtendedNameFormat",
    "biblatexExtractEprint",
    "bibtexParticleNoOp",
    "bibtexURL",
    "cacheFlushInterval",
    "caching",
    "citeCommand",
    "citekeyFold",
    "citekeyFormat",
    "citekeySearch",
    "citeprocNoteCitekey",
    "csquotes",
    "DOIandURL",
    "exportBibTeXStrings",
    "exportBraceProtection",
    "exportTitleCase",
    "extraMergeCitekeys",
    "extraMergeCSL",
    "extraMergeTeX",
    "git",
    "import",
    "importBibTeXStrings",
    "importCaseProtection",
    "importCitationKey",
    "importExtra",
    "importJabRefAbbreviations",
    "importJabRefStrings",
    "importSentenceCase",
    "importUnknownTexCommand",
    "itemObserverDelay",
    "jabrefFormat",
    "jieba",
    "keyConflictPolicy",
    "keyScope",
    "kuroshiro",
    "mapMath",
    "mapText",
    "mapUnicode",
    "newTranslatorsAskRestart",
    "parseParticles",
    "patchDates",
    "platform",
    "postscript",
    "postscriptOverride",
    "preferencesOverride",
    "qualityReport",
    "quickCopyEta",
    "quickCopyMode",
    "quickCopyOrgMode",
    "quickCopyPandocBrackets",
    "quickCopySelectLink",
    "rawImports",
    "rawLaTag",
    "relativeFilePaths",
    "retainCache",
    "scrubDatabase",
    "separatorList",
    "separatorNames",
    "skipFields",
    "skipWords",
    "startupProgress",
    "strings",
    "testing",
    "verbatimFields",
    "warnBulkModify",
    "warnTitleCased",
    "workers"
  ];
  var affects = {
    ascii: ["Better BibLaTeX", "Better BibTeX"],
    asciiBibLaTeX: ["Better BibLaTeX"],
    asciiBibTeX: ["Better BibTeX"],
    autoAbbrev: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    autoAbbrevStyle: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    automaticTags: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    baseAttachmentPath: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    biblatexExtendedDateFormat: ["Better BibLaTeX"],
    biblatexExtendedNameFormat: ["Better BibLaTeX"],
    biblatexExtractEprint: ["Better BibLaTeX", "Better BibTeX"],
    bibtexParticleNoOp: ["Better BibTeX"],
    bibtexURL: ["Better BibTeX"],
    caching: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    citeprocNoteCitekey: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    csquotes: ["Better BibLaTeX", "Better BibTeX"],
    DOIandURL: ["Better BibLaTeX", "Better BibTeX"],
    exportBibTeXStrings: ["Better BibLaTeX", "Better BibTeX"],
    exportBraceProtection: ["Better BibLaTeX", "Better BibTeX"],
    exportTitleCase: ["Better BibLaTeX", "Better BibTeX"],
    jabrefFormat: ["Better BibLaTeX", "Better BibTeX"],
    mapMath: ["Better BibLaTeX", "Better BibTeX"],
    mapText: ["Better BibLaTeX", "Better BibTeX"],
    mapUnicode: ["Better BibLaTeX", "Better BibTeX"],
    parseParticles: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    postscript: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    qualityReport: ["Better BibLaTeX", "Better BibTeX"],
    rawLaTag: ["Better BibLaTeX", "Better BibTeX"],
    relativeFilePaths: ["Better BibLaTeX", "Better BibTeX"],
    separatorList: ["Better BibLaTeX", "Better BibTeX"],
    separatorNames: ["Better BibLaTeX", "Better BibTeX"],
    skipFields: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    skipWords: ["Better BibLaTeX", "Better BibTeX"],
    strings: ["Better BibLaTeX", "Better BibTeX"]
  };
  var defaults = {
    ascii: "",
    asciiBibLaTeX: false,
    asciiBibTeX: true,
    autoAbbrev: false,
    autoAbbrevStyle: "",
    autoExport: "immediate",
    autoExportDelay: 5,
    autoExportIdleWait: 10,
    autoExportPathReplaceDiacritics: false,
    autoExportPathReplaceDirSep: "-",
    autoExportPathReplaceSpace: " ",
    automaticTags: true,
    autoPinDelay: 0,
    auxImport: false,
    baseAttachmentPath: "",
    biblatexExtendedDateFormat: true,
    biblatexExtendedNameFormat: false,
    biblatexExtractEprint: true,
    bibtexParticleNoOp: false,
    bibtexURL: "off",
    cacheFlushInterval: 5,
    caching: true,
    citeCommand: "cite",
    citekeyFold: true,
    citekeyFormat: "[auth:lower][shorttitle3_3][year]",
    citekeySearch: true,
    citeprocNoteCitekey: false,
    csquotes: "",
    DOIandURL: "both",
    exportBibTeXStrings: "off",
    exportBraceProtection: true,
    exportTitleCase: true,
    extraMergeCitekeys: false,
    extraMergeCSL: false,
    extraMergeTeX: false,
    git: "config",
    import: true,
    importBibTeXStrings: true,
    importCaseProtection: "as-needed",
    importCitationKey: true,
    importExtra: true,
    importJabRefAbbreviations: true,
    importJabRefStrings: true,
    importSentenceCase: "on+guess",
    importUnknownTexCommand: "ignore",
    itemObserverDelay: 5,
    jabrefFormat: 0,
    jieba: false,
    keyConflictPolicy: "keep",
    keyScope: "library",
    kuroshiro: false,
    mapMath: "",
    mapText: "",
    mapUnicode: "conservative",
    newTranslatorsAskRestart: true,
    parseParticles: true,
    patchDates: "",
    platform: "",
    postscript: "",
    postscriptOverride: "",
    preferencesOverride: "",
    qualityReport: false,
    quickCopyEta: "",
    quickCopyMode: "latex",
    quickCopyOrgMode: "zotero",
    quickCopyPandocBrackets: false,
    quickCopySelectLink: "zotero",
    rawImports: false,
    rawLaTag: "#LaTeX",
    relativeFilePaths: false,
    retainCache: false,
    scrubDatabase: false,
    separatorList: "and",
    separatorNames: "and",
    skipFields: "",
    skipWords: "a,ab,aboard,about,above,across,after,against,al,along,amid,among,an,and,anti,around,as,at,before,behind,below,beneath,beside,besides,between,beyond,but,by,d,da,das,de,del,dell,dello,dei,degli,della,dell,delle,dem,den,der,des,despite,die,do,down,du,during,ein,eine,einem,einen,einer,eines,el,en,et,except,for,from,gli,i,il,in,inside,into,is,l,la,las,le,les,like,lo,los,near,nor,of,off,on,onto,or,over,past,per,plus,round,save,since,so,some,sur,than,the,through,to,toward,towards,un,una,unas,under,underneath,une,unlike,uno,unos,until,up,upon,versus,via,von,while,with,within,without,yet,zu,zum",
    startupProgress: "popup",
    strings: "",
    testing: false,
    verbatimFields: "url,doi,file,ids,eprint,verba,verbb,verbc,groups",
    warnBulkModify: 10,
    warnTitleCased: false,
    workers: 1
  };
  var schema = {
    autoExport: {
      preferences: ["asciiBibLaTeX", "asciiBibTeX", "biblatexExtendedNameFormat", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
      displayOptions: ["useJournalAbbreviation", "exportNotes"]
    },
    translator: {
      "Better CSL JSON": {
        autoexport: true,
        cached: true,
        preferences: [],
        displayOptions: [],
        types: {}
      },
      "BetterBibTeX JSON": {
        autoexport: true,
        cached: false,
        preferences: [],
        displayOptions: ["exportNotes"],
        types: {
          exportNotes: { type: "boolean" }
        }
      },
      "Better BibLaTeX": {
        autoexport: true,
        cached: true,
        preferences: ["asciiBibLaTeX", "biblatexExtendedNameFormat", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"],
        types: {
          asciiBibLaTeX: { type: "boolean" },
          biblatexExtendedNameFormat: { type: "boolean" },
          DOIandURL: { enum: ["both", "doi", "url"] },
          exportNotes: { type: "boolean" },
          useJournalAbbreviation: { type: "boolean" }
        }
      },
      "Better CSL YAML": {
        autoexport: true,
        cached: true,
        preferences: [],
        displayOptions: [],
        types: {}
      },
      "Better BibTeX": {
        autoexport: true,
        cached: true,
        preferences: ["asciiBibTeX", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"],
        types: {
          asciiBibTeX: { type: "boolean" },
          bibtexParticleNoOp: { type: "boolean" },
          bibtexURL: { enum: ["off", "note", "note-url-ish", "url", "url-ish"] },
          DOIandURL: { enum: ["both", "doi", "url"] },
          exportNotes: { type: "boolean" },
          useJournalAbbreviation: { type: "boolean" }
        }
      }
    }
  };

  // content/client.ts
  if (typeof Components !== "undefined")
    Components.utils.import("resource://zotero/config.js");
  var client = ZOTERO_CONFIG.GUID.replace(/@.*/, "").replace("-", "");

  // node_modules/safe-stable-stringify/esm/wrapper.js
  var import__ = __toModule(require_safe_stable_stringify());
  var configure = import__.default.configure;
  var wrapper_default = import__.default;

  // content/stringify.ts
  function asciify(str) {
    return str.replace(/[\u007F-\uFFFF]/g, (chr2) => `\\u${`0000${chr2.charCodeAt(0).toString(16)}`.substr(-4)}`);
  }
  function stringify(obj, replacer, indent, ucode) {
    const stringified = wrapper_default(obj, replacer, indent);
    return ucode ? asciify(stringified) : stringified;
  }

  // content/environment.ts
  var worker = typeof WorkerGlobalScope !== "undefined" && typeof importScripts === "function" && navigator instanceof WorkerNavigator;

  // content/logger.ts
  var inTranslator = worker || typeof ZOTERO_TRANSLATOR_INFO !== "undefined";
  var Logger = class {
    constructor() {
      this.verbose = false;
    }
    format({ error = false, worker: worker2 = "", translator: translator2 = "" }, msg) {
      let diff = null;
      const now = Date.now();
      if (this.timestamp)
        diff = now - this.timestamp;
      this.timestamp = now;
      if (typeof msg !== "string") {
        let output = "";
        for (const m of msg) {
          const type2 = typeof m;
          if (type2 === "string" || m instanceof String || type2 === "number" || type2 === "undefined" || type2 === "boolean" || m === null) {
            output += m;
          } else if (m instanceof Error || m instanceof ErrorEvent || m.toString() === "[object ErrorEvent]") {
            output += this.formatError(m);
          } else if (m && type2 === "object" && m.message) {
            output += this.formatError({ message: m.errorCode ? `${m.message} (${m.errorCode})` : m.message, filename: m.fileName, lineno: m.lineNumber, colno: m.column, stack: m.stack });
          } else if (this.verbose) {
            output += stringify(m, null, 2);
          } else {
            output += stringify(m);
          }
          output += " ";
        }
        msg = output;
      }
      if (worker) {
        worker2 = worker2 || workerContext.worker;
        translator2 = translator2 || workerContext.translator;
      } else {
        if (worker2)
          worker2 = `${worker2} (but inWorker is false?)`;
        if (!translator2 && inTranslator)
          translator2 = ZOTERO_TRANSLATOR_INFO.label;
      }
      const prefix = ["better-bibtex", translator2, error && "error", worker2 && `(worker ${worker2})`].filter((p) => p).join(" ");
      return `{${prefix}} +${diff} ${asciify(msg)}`;
    }
    formatError(e, indent = "") {
      let msg = [e.name, e.message].filter((s) => s).join(": ");
      if (e.filename || e.fileName)
        msg += ` in ${e.filename || e.fileName}`;
      if (e.lineno || e.lineNumber) {
        msg += ` line ${e.lineno}`;
        if (e.colno)
          msg += `, col ${e.colno}`;
      }
      if (e.stack)
        msg += `
${indent}${e.stack.replace(/\n/g, `${indent}
`)}`;
      if (e.error)
        msg += `
${indent}${this.formatError(e.error, "  ")}
`;
      return `${indent}<Error: ${msg}>`;
    }
    get enabled() {
      if (!inTranslator)
        return Zotero.Debug.enabled;
      if (!worker)
        return true;
      return !workerContext || workerContext.debugEnabled;
    }
    debug(...msg) {
      if (this.enabled)
        Zotero.debug(this.format({}, msg));
    }
    error(...msg) {
      Zotero.debug(this.format({ error: true }, msg));
    }
    status({ error = false, worker: worker2 = "", translator: translator2 = "" }, ...msg) {
      if (error || this.enabled)
        Zotero.debug(this.format({ error, worker: worker2, translator: translator2 }, msg));
    }
  };
  var log = new Logger();

  // content/ping.ts
  var Pinger = class {
    constructor({ start = 0, total, step = 5, name = "", callback }) {
      this.incr = 100 / total;
      this.name = name;
      this.pct = start * this.incr;
      this.step = step;
      this.callback = callback;
      this.next = Math.floor(this.pct / step) * step;
      if (this.name)
        Zotero.debug(`ping: ${name} start ${JSON.stringify({ ...this, start, total })}`);
      this.emit();
    }
    update() {
      this.pct += this.incr;
      if (this.name)
        Zotero.debug(`ping: ${this.name} update to ${this.pct}`);
      if (Math.round(this.pct) >= this.next)
        this.emit();
    }
    emit() {
      if (this.callback) {
        if (this.name)
          Zotero.debug(`ping: ${this.name} emit ${Math.min(this.next, 100)}`);
        this.callback(Math.min(this.next, 100));
        if (this.next > 100)
          this.callback = null;
        this.next += this.step;
      }
    }
    done() {
      if (this.name)
        Zotero.debug(`ping: ${this.name} done`);
      if (this.callback && this.pct < this.next)
        this.callback(Math.min(this.next, 100));
    }
  };

  // translators/lib/translator.ts
  var cacheDisabler = new class {
    get(target, property) {
      if (property === "collections") {
        target.$cacheable = false;
      }
      return target[property];
    }
  }();
  var Items = class {
    constructor(cacheable) {
      this.list = [];
      this.map = {};
      let item;
      while (item = Zotero.nextItem()) {
        item.$cacheable = cacheable;
        item.journalAbbreviation = item.journalAbbreviation || item.autoJournalAbbreviation;
        this.list.push(this.map[item.itemID] = this.map[item.itemKey] = new Proxy(item, cacheDisabler));
      }
      this.list.sort((a, b) => {
        const ka2 = [a.citationKey || a.itemType, a.dateModified || a.dateAdded, a.itemID].join("	");
        const kb = [b.citationKey || b.itemType, b.dateModified || b.dateAdded, b.itemID].join("	");
        return ka2.localeCompare(kb, void 0, { sensitivity: "base" });
      });
      this.ping = new Pinger({
        total: this.list.length,
        callback: (pct) => worker ? Zotero.BetterBibTeX.setProgress(pct) : null
      });
    }
    *items() {
      for (const item of this.list) {
        yield this.current = item;
        this.ping.update();
      }
      this.ping.done();
    }
    *references() {
      for (const item of this.list) {
        switch (item.itemType) {
          case "annotation":
          case "note":
          case "attachment":
            break;
          default:
            yield this.current = item;
        }
        this.ping.update();
      }
      this.ping.done();
    }
  };
  function escapeRegExp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  var ITranslator = class {
    constructor() {
      this.export = {
        dir: void 0,
        path: void 0
      };
      this.initialized = false;
      this.header = ZOTERO_TRANSLATOR_INFO;
      this[this.header.label.replace(/[^a-z]/ig, "")] = true;
      this.BetterTeX = this.BetterBibTeX || this.BetterBibLaTeX;
      this.BetterCSL = this.BetterCSLJSON || this.BetterCSLYAML;
      this.preferences = defaults;
      this.options = this.header.displayOptions || {};
      const collator = new Intl.Collator("en");
      this.stringCompare = collator.compare.bind(collator);
    }
    get exportDir() {
      this._items.current.$cacheable = false;
      return this.export.dir;
    }
    get exportPath() {
      this._items.current.$cacheable = false;
      return this.export.path;
    }
    typefield(field) {
      field = field.trim();
      if (field.startsWith("bibtex."))
        return this.BetterBibTeX ? field.replace(/^bibtex\./, "") : "";
      if (field.startsWith("biblatex."))
        return this.BetterBibLaTeX ? field.replace(/^biblatex\./, "") : "";
      return field;
    }
    init(mode) {
      var _a, _b, _c, _d, _e;
      this.platform = Zotero.getHiddenPref("better-bibtex.platform");
      this.isJurisM = client === "jurism";
      this.isZotero = !this.isJurisM;
      this.paths = {
        caseSensitive: this.platform !== "mac" && this.platform !== "win",
        sep: this.platform === "win" ? "\\" : "/"
      };
      for (const key in this.options) {
        if (typeof this.options[key] === "boolean") {
          this.options[key] = !!Zotero.getOption(key);
        } else {
          this.options[key] = Zotero.getOption(key);
        }
      }
      if (mode === "export") {
        this.cache = {
          hits: 0,
          misses: 0
        };
        this.export = {
          dir: Zotero.getOption("exportDir"),
          path: Zotero.getOption("exportPath")
        };
        if ((_a = this.export.dir) == null ? void 0 : _a.endsWith(this.paths.sep))
          this.export.dir = this.export.dir.slice(0, -1);
      }
      for (const pref of Object.keys(this.preferences)) {
        let value;
        try {
          value = Zotero.getOption(`preference_${pref}`);
        } catch (err) {
          value = void 0;
        }
        if (typeof value === "undefined")
          value = Zotero.getHiddenPref(`better-bibtex.${pref}`);
        this.preferences[pref] = value;
      }
      this.skipFields = this.preferences.skipFields.toLowerCase().split(",").map((field) => this.typefield(field)).filter((s) => s);
      this.skipField = this.skipFields.reduce((acc, field) => {
        acc[field] = true;
        return acc;
      }, {});
      this.verbatimFields = this.preferences.verbatimFields.toLowerCase().split(",").map((field) => this.typefield(field)).filter((s) => s);
      if (!this.verbatimFields.length)
        this.verbatimFields = null;
      this.csquotes = this.preferences.csquotes ? { open: this.preferences.csquotes[0], close: this.preferences.csquotes[1] } : null;
      this.preferences.testing = Zotero.getHiddenPref("better-bibtex.testing");
      if (mode === "export") {
        this.unicode = !Translator.preferences[`ascii${this.header.label.replace(/Better /, "")}`];
        if (this.preferences.baseAttachmentPath && (this.export.dir === this.preferences.baseAttachmentPath || ((_b = this.export.dir) == null ? void 0 : _b.startsWith(this.preferences.baseAttachmentPath + this.paths.sep)))) {
          this.preferences.relativeFilePaths = true;
        }
        this.cacheable = Zotero.getOption("caching") && !(this.options.exportFileData || this.preferences.relativeFilePaths || this.preferences.baseAttachmentPath && ((_c = this.export.dir) == null ? void 0 : _c.startsWith(this.preferences.baseAttachmentPath)));
        if (this.BetterTeX) {
          Translator.preferences.separatorList = Translator.preferences.separatorList.trim();
          Translator.preferences.separatorNames = Translator.preferences.separatorNames.trim();
          this.and = {
            list: {
              re: new RegExp(escapeRegExp(Translator.preferences.separatorList), "g"),
              repl: ` {${Translator.preferences.separatorList}} `
            },
            names: {
              re: new RegExp(` ${escapeRegExp(Translator.preferences.separatorNames)} `, "g"),
              repl: ` {${Translator.preferences.separatorNames}} `
            }
          };
          Translator.preferences.separatorList = ` ${Translator.preferences.separatorList} `;
          Translator.preferences.separatorNames = ` ${Translator.preferences.separatorNames} `;
        }
      }
      this.collections = {};
      if (mode === "export" && ((_d = this.header.configOptions) == null ? void 0 : _d.getCollections) && Zotero.nextCollection) {
        let collection;
        while (collection = Zotero.nextCollection()) {
          log.debug("getCollection:", collection);
          this.registerCollection(collection, "");
        }
      }
      if (!this.initialized && mode === "export" && this.preferences.testing && typeof __estrace === "undefined" && ((_e = schema.translator[this.header.label]) == null ? void 0 : _e.cached)) {
        const ignored = ["testing"];
        this.preferences = new Proxy(this.preferences, {
          set: (object, property, _value) => {
            throw new TypeError(`Unexpected set of preference ${String(property)}`);
          },
          get: (object, property) => {
            var _a2;
            if (property === "toJSON")
              return object[property];
            if (!names.includes(property))
              throw new TypeError(`Unsupported preference ${property}`);
            if (!ignored.includes(property) && !((_a2 = affects[property]) == null ? void 0 : _a2.includes(this.header.label)))
              throw new TypeError(`Preference ${property} claims not to affect ${this.header.label}`);
            return object[property];
          }
        });
      }
      this.initialized = true;
    }
    registerCollection(collection, parent) {
      const key = (collection.primary ? collection.primary : collection).key;
      const children = collection.children || collection.descendents || [];
      const collections = children.filter((coll) => coll.type === "collection");
      this.collections[key] = {
        key,
        parent,
        name: collection.name,
        collections: collections.map((coll) => coll.key),
        items: children.filter((coll) => coll.type === "item").map((item) => item.id)
      };
      for (collection of collections) {
        this.registerCollection(collection, key);
      }
    }
    get collectionTree() {
      return Object.values(this.collections).filter((coll) => !coll.parent).map((coll) => this.nestedCollection(coll));
    }
    nestedCollection(collection) {
      this._items = this._items || new Items(this.cacheable);
      const nested = {
        key: collection.key,
        name: collection.name,
        items: collection.items.map((itemID) => this._items.map[itemID]).filter((item) => item),
        collections: collection.collections.map((key) => this.nestedCollection(this.collections[key])).filter((coll) => coll)
      };
      for (const coll of nested.collections) {
        coll.parent = nested;
      }
      return nested;
    }
    get items() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.items();
    }
    get references() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.references();
    }
  };
  var Translator = new ITranslator();

  // translators/lib/postscript.ts
  function body(script, guard) {
    script = `
    const result = (() => {
      ${script};
    })()
    switch (typeof result) {
      case 'undefined': return { cache: true, write: true }
      case 'boolean': return { cache: result, write: true }
      default: return { cache: true, write: true, ...result }
    }
  `;
    if (guard) {
      script = `
      ${guard} = true;
      try {
        ${script}
      }
      finally {
        ${guard} = false;
      }
    `;
    }
    return script;
  }
  function noop(_reference, _item) {
    return { cache: true, write: true };
  }

  // translators/bibtex/jabref.ts
  var JabRef = class {
    constructor() {
      this.citekeys = new Map();
    }
    exportGroups() {
      if (Object.keys(Translator.collections).length === 0 || !Translator.preferences.jabrefFormat)
        return;
      let meta2;
      if (Translator.preferences.jabrefFormat === 3) {
        meta2 = "groupsversion:3";
      } else if (Translator.BetterBibLaTeX) {
        meta2 = "databaseType:biblatex";
      } else {
        meta2 = "databaseType:bibtex";
      }
      Zotero.write(`@comment{jabref-meta: ${meta2};}
`);
      Zotero.write(`@comment{jabref-meta: ${Translator.preferences.jabrefFormat === 5 ? "grouping" : "groupstree"}:
`);
      this.groups = ["0 AllEntriesGroup:"];
      const collections = Object.values(Translator.collections).filter((coll) => !coll.parent);
      if (Translator.preferences.testing)
        collections.sort((a, b) => Translator.stringCompare(a.name, b.name));
      for (const collection of collections) {
        this.exportGroup(collection, 1);
      }
      Zotero.write(this.groups.map((group) => this.quote(group, true)).concat("").join(";\n"));
      Zotero.write("}\n");
    }
    exportGroup(collection, level) {
      let group = [`${level} ${Translator.preferences.jabrefFormat === 5 ? "Static" : "Explicit"}Group:${this.quote(collection.name)}`, "0"];
      if (Translator.preferences.jabrefFormat === 3) {
        const references2 = (collection.items || []).filter((id2) => this.citekeys.has(id2)).map((id2) => this.quote(this.citekeys.get(id2)));
        if (Translator.preferences.testing)
          references2.sort();
        group = group.concat(references2);
      }
      if (Translator.preferences.jabrefFormat === 5) {
        group = group.concat(["1", "0x8a8a8aff", "", ""]);
      } else {
        group.push("");
      }
      this.groups.push(group.join(";"));
      const children = (collection.collections || []).map((key) => Translator.collections[key]).filter((coll) => coll);
      if (Translator.preferences.testing)
        children.sort((a, b) => Translator.stringCompare(a.name, b.name));
      for (const child of children) {
        this.exportGroup(child, level + 1);
      }
    }
    quote(s, wrap = false) {
      s = s.replace(/([\\;])/g, "\\$1");
      if (wrap)
        s = s.match(/.{1,70}/g).join("\n");
      return s;
    }
  };

  // gen/items/items.ts
  var jurism = client === "jurism";
  var zotero = !jurism;
  function unalias(item, { scrub = true } = {}) {
    delete item.inPublications;
    let v;
    if (v = item.artworkMedium || item.audioRecordingFormat || item.videoRecordingFormat || item.interviewMedium || item.audioFileType)
      item.medium = v;
    if (scrub) {
      delete item.artworkMedium;
      delete item.audioRecordingFormat;
      delete item.videoRecordingFormat;
      delete item.interviewMedium;
      delete item.audioFileType;
    }
    if (v = item.label || item.company || item.distributor || item.network || item.university || item.studio)
      item.publisher = v;
    if (scrub) {
      delete item.label;
      delete item.company;
      delete item.distributor;
      delete item.network;
      delete item.university;
      delete item.studio;
    }
    if (v = item.billNumber || item.docketNumber || item.patentNumber || item.episodeNumber || item.reportNumber || item.publicLawNumber)
      item.number = v;
    if (scrub) {
      delete item.billNumber;
      delete item.docketNumber;
      delete item.patentNumber;
      delete item.episodeNumber;
      delete item.reportNumber;
      delete item.publicLawNumber;
    }
    if (v = item.codeVolume || item.reporterVolume)
      item.volume = v;
    if (scrub) {
      delete item.codeVolume;
      delete item.reporterVolume;
    }
    if (v = item.codePages || item.firstPage)
      item.pages = v;
    if (scrub) {
      delete item.codePages;
      delete item.firstPage;
    }
    if (v = item.blogTitle || item.bookTitle || item.proceedingsTitle || item.dictionaryTitle || item.encyclopediaTitle || item.forumTitle || item.programTitle || item.websiteTitle)
      item.publicationTitle = v;
    if (scrub) {
      delete item.blogTitle;
      delete item.bookTitle;
      delete item.proceedingsTitle;
      delete item.dictionaryTitle;
      delete item.encyclopediaTitle;
      delete item.forumTitle;
      delete item.programTitle;
      delete item.websiteTitle;
    }
    if (v = item.websiteType || item.genre || item.postType || item.letterType || item.manuscriptType || item.mapType || item.presentationType || item.reportType || item.thesisType)
      item.type = v;
    if (scrub) {
      delete item.websiteType;
      delete item.genre;
      delete item.postType;
      delete item.letterType;
      delete item.manuscriptType;
      delete item.mapType;
      delete item.presentationType;
      delete item.reportType;
      delete item.thesisType;
    }
    if (v = item.caseName || item.subject || item.nameOfAct)
      item.title = v;
    if (scrub) {
      delete item.caseName;
      delete item.subject;
      delete item.nameOfAct;
    }
    if (v = item.dateDecided || item.issueDate || item.dateEnacted)
      item.date = v;
    if (scrub) {
      delete item.dateDecided;
      delete item.issueDate;
      delete item.dateEnacted;
    }
    if (zotero) {
      if (item.documentNumber)
        item.number = item.documentNumber;
      if (scrub) {
        delete item.documentNumber;
      }
      if (item.institution)
        item.publisher = item.institution;
      if (scrub) {
        delete item.institution;
      }
    }
    if (jurism) {
      if (v = item.album || item.reporter)
        item.publicationTitle = v;
      if (scrub) {
        delete item.album;
        delete item.reporter;
      }
      if (item.release)
        item.edition = item.release;
      if (scrub) {
        delete item.release;
      }
      if (item.assemblyNumber)
        item.seriesNumber = item.assemblyNumber;
      if (scrub) {
        delete item.assemblyNumber;
      }
      if (v = item.sessionType || item.regulationType)
        item.type = v;
      if (scrub) {
        delete item.sessionType;
        delete item.regulationType;
      }
      if (item.bookAbbreviation)
        item.journalAbbreviation = item.bookAbbreviation;
      if (scrub) {
        delete item.bookAbbreviation;
      }
      if (item.regulatoryBody)
        item.legislativeBody = item.regulatoryBody;
      if (scrub) {
        delete item.regulatoryBody;
      }
      if (item.treatyNumber)
        item.number = item.treatyNumber;
      if (scrub) {
        delete item.treatyNumber;
      }
    }
  }
  function simplifyForExport(item, { dropAttachments = false, scrub = true } = {}) {
    unalias(item, { scrub });
    if (item.filingDate)
      item.filingDate = item.filingDate.replace(/^0000-00-00 /, "");
    if (item.creators) {
      for (const creator of item.creators) {
        if (creator.fieldMode) {
          creator.name = creator.name || creator.lastName;
          delete creator.lastName;
          delete creator.firstName;
          delete creator.fieldMode;
        }
      }
    }
    if (item.itemType === "attachment" || item.itemType === "note") {
      delete item.attachments;
      delete item.notes;
    } else {
      item.attachments = !dropAttachments && item.attachments || [];
    }
    return item;
  }

  // translators/bibtex/exporter.ts
  var bibtexParser = __toModule(require_bibtex_parser());

  // translators/bibtex/postfix.ts
  var Postfix = class {
    constructor(qualityReport) {
      this.qr = qualityReport;
      this.packages = {};
      this.noopsort = false;
      this.declarePrefChars = "";
    }
    add(metadata) {
      if (!metadata)
        return;
      if (metadata.DeclarePrefChars)
        this.declarePrefChars += metadata.DeclarePrefChars;
      if (metadata.noopsort)
        this.noopsort = true;
      if (metadata.packages) {
        for (const pkg of metadata.packages) {
          this.packages[pkg] = true;
        }
      }
    }
    toString() {
      let postfix = "";
      let preamble = [];
      if (this.declarePrefChars)
        preamble.push("\\ifdefined\\DeclarePrefChars\\DeclarePrefChars{'\u2019-}\\else\\fi");
      if (this.noopsort)
        preamble.push("\\newcommand{\\noopsort}[1]{}");
      if (preamble.length > 0) {
        preamble = preamble.map((cmd) => `"${cmd} "`);
        postfix += `@preamble{ ${preamble.join(" \n # ")} }
`;
      }
      if (this.qr) {
        const packages = Object.keys(this.packages).sort();
        if (packages.length) {
          postfix += "\n% Required packages:\n";
          for (const pkg of packages) {
            postfix += `% * ${pkg}
`;
          }
        }
      }
      return postfix;
    }
  };

  // gen/items/extra-fields.json
  var extra_fields_exports = {};
  __export(extra_fields_exports, {
    DOI: () => DOI,
    ISBN: () => ISBN,
    ISSN: () => ISSN,
    PMCID: () => PMCID,
    PMID: () => PMID,
    URL: () => URL,
    "access date": () => access_date,
    accessDate: () => accessDate,
    accessed: () => accessed,
    "admin flag": () => admin_flag,
    "admin-flag": () => admin_flag2,
    adminFlag: () => adminFlag,
    "adoption date": () => adoption_date,
    adoptionDate: () => adoptionDate,
    album: () => album,
    "application number": () => application_number,
    applicationNumber: () => applicationNumber,
    archive: () => archive,
    "archive collection": () => archive_collection,
    "archive location": () => archive_location,
    "archive place": () => archive_place,
    "archive-place": () => archive_place2,
    archiveCollection: () => archiveCollection,
    archiveLocation: () => archiveLocation,
    archive_collection: () => archive_collection2,
    archive_location: () => archive_location2,
    artist: () => artist,
    "artwork medium": () => artwork_medium,
    "artwork size": () => artwork_size,
    artworkMedium: () => artworkMedium,
    artworkSize: () => artworkSize,
    "assembly number": () => assembly_number,
    assemblyNumber: () => assemblyNumber,
    assignee: () => assignee,
    "attorney agent": () => attorney_agent,
    attorneyAgent: () => attorneyAgent,
    "audio file type": () => audio_file_type,
    "audio recording format": () => audio_recording_format,
    audioFileType: () => audioFileType,
    audioRecordingFormat: () => audioRecordingFormat,
    author: () => author,
    authority: () => authority,
    "bill number": () => bill_number,
    billNumber: () => billNumber,
    "blog title": () => blog_title,
    blogTitle: () => blogTitle,
    "book abbreviation": () => book_abbreviation,
    "book author": () => book_author,
    "book title": () => book_title,
    bookAbbreviation: () => bookAbbreviation,
    bookAuthor: () => bookAuthor,
    bookTitle: () => bookTitle,
    "call number": () => call_number,
    "call-number": () => call_number2,
    callNumber: () => callNumber,
    cartographer: () => cartographer,
    "case name": () => case_name,
    caseName: () => caseName,
    "cast member": () => cast_member,
    castMember: () => castMember,
    "chapter number": () => chapter_number,
    "chapter-number": () => chapter_number2,
    code: () => code,
    "code number": () => code_number,
    "code pages": () => code_pages,
    "code volume": () => code_volume,
    codeNumber: () => codeNumber,
    codePages: () => codePages,
    codeVolume: () => codeVolume,
    "collection editor": () => collection_editor,
    "collection number": () => collection_number,
    "collection title": () => collection_title,
    "collection-editor": () => collection_editor2,
    "collection-number": () => collection_number2,
    "collection-title": () => collection_title2,
    commenter: () => commenter,
    committee: () => committee,
    company: () => company,
    composer: () => composer,
    "conference date": () => conference_date,
    "conference name": () => conference_name,
    conferenceDate: () => conferenceDate,
    conferenceName: () => conferenceName,
    "container author": () => container_author,
    "container title": () => container_title,
    "container title short": () => container_title_short,
    "container-author": () => container_author2,
    "container-title": () => container_title2,
    "container-title-short": () => container_title_short2,
    contributor: () => contributor,
    cosponsor: () => cosponsor,
    counsel: () => counsel,
    country: () => country,
    court: () => court,
    "csl type": () => csl_type,
    "csl-type": () => csl_type2,
    date: () => date,
    "date amended": () => date_amended,
    "date decided": () => date_decided,
    "date enacted": () => date_enacted,
    dateAmended: () => dateAmended,
    dateDecided: () => dateDecided,
    dateEnacted: () => dateEnacted,
    default: () => extra_fields_default,
    "dictionary title": () => dictionary_title,
    dictionaryTitle: () => dictionaryTitle,
    dimensions: () => dimensions,
    director: () => director,
    distributor: () => distributor,
    division: () => division,
    "docket number": () => docket_number,
    docketNumber: () => docketNumber,
    "document name": () => document_name,
    "document number": () => document_number,
    "document-name": () => document_name2,
    "document-number": () => document_number2,
    documentName: () => documentName,
    documentNumber: () => documentNumber,
    doi: () => doi,
    edition: () => edition,
    editor: () => editor,
    "editorial director": () => editorial_director,
    "editorial-director": () => editorial_director2,
    "encyclopedia title": () => encyclopedia_title,
    encyclopediaTitle: () => encyclopediaTitle,
    "episode number": () => episode_number,
    episodeNumber: () => episodeNumber,
    event: () => event,
    "event date": () => event_date,
    "event place": () => event_place,
    "event-date": () => event_date2,
    "event-place": () => event_place2,
    "filing date": () => filing_date,
    filingDate: () => filingDate,
    "first page": () => first_page,
    firstPage: () => firstPage,
    "forum title": () => forum_title,
    forumTitle: () => forumTitle,
    "gazette flag": () => gazette_flag,
    "gazette-flag": () => gazette_flag2,
    gazetteFlag: () => gazetteFlag,
    genre: () => genre,
    guest: () => guest,
    history: () => history,
    illustrator: () => illustrator,
    institution: () => institution,
    "interview medium": () => interview_medium,
    interviewMedium: () => interviewMedium,
    interviewee: () => interviewee,
    interviewer: () => interviewer,
    inventor: () => inventor,
    isbn: () => isbn,
    issn: () => issn,
    issue: () => issue,
    "issue date": () => issue_date,
    issueDate: () => issueDate,
    issued: () => issued,
    "issuing authority": () => issuing_authority,
    issuingAuthority: () => issuingAuthority,
    "journal abbreviation": () => journal_abbreviation,
    journalAbbreviation: () => journalAbbreviation,
    jurisdiction: () => jurisdiction,
    label: () => label,
    language: () => language,
    "legal status": () => legal_status,
    legalStatus: () => legalStatus,
    "legislative body": () => legislative_body,
    legislativeBody: () => legislativeBody,
    "letter type": () => letter_type,
    letterType: () => letterType,
    "library catalog": () => library_catalog,
    libraryCatalog: () => libraryCatalog,
    "manuscript type": () => manuscript_type,
    manuscriptType: () => manuscriptType,
    "map type": () => map_type,
    mapType: () => mapType,
    medium: () => medium,
    "meeting name": () => meeting_name,
    "meeting number": () => meeting_number,
    meetingName: () => meetingName,
    meetingNumber: () => meetingNumber,
    "name of act": () => name_of_act,
    nameOfAct: () => nameOfAct,
    network: () => network,
    "news case date": () => news_case_date,
    newsCaseDate: () => newsCaseDate,
    "num pages": () => num_pages,
    numPages: () => numPages,
    number: () => number,
    "number of pages": () => number_of_pages,
    "number of volumes": () => number_of_volumes,
    "number-of-pages": () => number_of_pages2,
    "number-of-volumes": () => number_of_volumes2,
    numberOfVolumes: () => numberOfVolumes,
    "opening date": () => opening_date,
    "opening-date": () => opening_date2,
    openingDate: () => openingDate,
    opus: () => opus,
    "original author": () => original_author,
    "original date": () => original_date,
    "original publisher": () => original_publisher,
    "original publisher place": () => original_publisher_place,
    "original title": () => original_title,
    "original-author": () => original_author2,
    "original-date": () => original_date2,
    "original-publisher": () => original_publisher2,
    "original-publisher-place": () => original_publisher_place2,
    "original-title": () => original_title2,
    originalDate: () => originalDate,
    page: () => page,
    pages: () => pages,
    "parent treaty": () => parent_treaty,
    parentTreaty: () => parentTreaty,
    "patent number": () => patent_number,
    patentNumber: () => patentNumber,
    performer: () => performer,
    place: () => place,
    pmcid: () => pmcid,
    pmid: () => pmid,
    podcaster: () => podcaster,
    "post type": () => post_type,
    postType: () => postType,
    "presentation type": () => presentation_type,
    presentationType: () => presentationType,
    presenter: () => presenter,
    "priority date": () => priority_date,
    "priority numbers": () => priority_numbers,
    priorityDate: () => priorityDate,
    priorityNumbers: () => priorityNumbers,
    "proceedings title": () => proceedings_title,
    proceedingsTitle: () => proceedingsTitle,
    producer: () => producer,
    "program title": () => program_title,
    programTitle: () => programTitle,
    programmer: () => programmer,
    "programming language": () => programming_language,
    programmingLanguage: () => programmingLanguage,
    "public law number": () => public_law_number,
    publicLawNumber: () => publicLawNumber,
    "publication date": () => publication_date,
    "publication number": () => publication_number,
    "publication title": () => publication_title,
    "publication-date": () => publication_date2,
    "publication-number": () => publication_number2,
    publicationDate: () => publicationDate,
    publicationNumber: () => publicationNumber,
    publicationTitle: () => publicationTitle,
    publisher: () => publisher,
    "publisher place": () => publisher_place,
    "publisher-place": () => publisher_place2,
    recipient: () => recipient,
    references: () => references,
    "regnal year": () => regnal_year,
    regnalYear: () => regnalYear,
    "regulation type": () => regulation_type,
    regulationType: () => regulationType,
    "regulatory body": () => regulatory_body,
    regulatoryBody: () => regulatoryBody,
    reign: () => reign,
    release: () => release,
    "report number": () => report_number,
    "report type": () => report_type,
    reportNumber: () => reportNumber,
    reportType: () => reportType,
    reporter: () => reporter,
    "reporter volume": () => reporter_volume,
    reporterVolume: () => reporterVolume,
    "resolution label": () => resolution_label,
    resolutionLabel: () => resolutionLabel,
    "reviewed author": () => reviewed_author,
    "reviewed title": () => reviewed_title,
    "reviewed-author": () => reviewed_author2,
    "reviewed-title": () => reviewed_title2,
    reviewedAuthor: () => reviewedAuthor,
    rights: () => rights,
    "running time": () => running_time,
    runningTime: () => runningTime,
    scale: () => scale,
    scriptwriter: () => scriptwriter,
    section: () => section,
    series: () => series,
    "series editor": () => series_editor,
    "series number": () => series_number,
    "series text": () => series_text,
    "series title": () => series_title,
    seriesEditor: () => seriesEditor,
    seriesNumber: () => seriesNumber,
    seriesText: () => seriesText,
    seriesTitle: () => seriesTitle,
    session: () => session,
    "session type": () => session_type,
    sessionType: () => sessionType,
    "short title": () => short_title,
    shortTitle: () => shortTitle,
    "signing date": () => signing_date,
    signingDate: () => signingDate,
    source: () => source,
    sponsor: () => sponsor,
    status: () => status,
    studio: () => studio,
    subject: () => subject,
    submitted: () => submitted,
    supplement: () => supplement,
    "supplement name": () => supplement_name,
    supplementName: () => supplementName,
    system: () => system,
    "testimony by": () => testimony_by,
    testimonyBy: () => testimonyBy,
    "thesis type": () => thesis_type,
    thesisType: () => thesisType,
    title: () => title,
    "title short": () => title_short,
    "title-short": () => title_short2,
    translator: () => translator,
    "treaty number": () => treaty_number,
    treatyNumber: () => treatyNumber,
    type: () => type,
    university: () => university,
    url: () => url,
    version: () => version,
    "version number": () => version_number,
    versionNumber: () => versionNumber,
    "video recording format": () => video_recording_format,
    videoRecordingFormat: () => videoRecordingFormat,
    volume: () => volume,
    "volume title": () => volume_title,
    "volume-title": () => volume_title2,
    volumeTitle: () => volumeTitle,
    "website title": () => website_title,
    "website type": () => website_type,
    websiteTitle: () => websiteTitle,
    websiteType: () => websiteType,
    "words by": () => words_by,
    wordsBy: () => wordsBy,
    "year as volume": () => year_as_volume,
    yearAsVolume: () => yearAsVolume
  });
  var DOI = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var ISBN = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var ISSN = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var PMCID = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var PMID = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var URL = {
    csl: [
      "URL"
    ],
    type: "text"
  };
  var access_date = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessDate = {
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessed = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var admin_flag = {
    csl: [
      "admin-flag"
    ],
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var admin_flag2 = {
    csl: [
      "admin-flag"
    ],
    type: "text"
  };
  var adminFlag = {
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var adoption_date = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var adoptionDate = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var album = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var application_number = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var applicationNumber = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var archive = {
    csl: [
      "archive"
    ],
    type: "text",
    zotero: [
      "archive"
    ]
  };
  var archive_collection = {
    csl: [
      "archive_collection"
    ],
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archive_location = {
    csl: [
      "archive_location"
    ],
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_place = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archive_place2 = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archiveCollection = {
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archiveLocation = {
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_collection2 = {
    csl: [
      "archive_collection"
    ],
    type: "text"
  };
  var archive_location2 = {
    csl: [
      "archive_location"
    ],
    type: "text"
  };
  var artist = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "artist"
    ]
  };
  var artwork_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artwork_size = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var artworkMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artworkSize = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var assembly_number = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assemblyNumber = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assignee = {
    type: "text",
    zotero: [
      "assignee"
    ]
  };
  var attorney_agent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var attorneyAgent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var audio_file_type = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audio_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioFileType = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var author = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "author"
    ]
  };
  var authority = {
    csl: [
      "authority"
    ],
    type: "text",
    zotero: [
      "court",
      "legislativeBody",
      "issuingAuthority",
      "institution",
      "regulatoryBody"
    ]
  };
  var bill_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var billNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var blog_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var blogTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var book_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var book_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var book_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var bookAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var bookAuthor = {
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var bookTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var call_number = {
    csl: [
      "call-number"
    ],
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var call_number2 = {
    csl: [
      "call-number"
    ],
    type: "text"
  };
  var callNumber = {
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var cartographer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "cartographer"
    ]
  };
  var case_name = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var caseName = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var cast_member = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var castMember = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var chapter_number = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var chapter_number2 = {
    csl: [
      "chapter-number"
    ],
    type: "text"
  };
  var code = {
    type: "text",
    zotero: [
      "code"
    ]
  };
  var code_number = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var code_pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var code_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var codeNumber = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var codePages = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var codeVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var collection_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var collection_number = {
    csl: [
      "collection-number"
    ],
    type: "text",
    zotero: [
      "seriesNumber",
      "assemblyNumber",
      "regnalYear",
      "yearAsVolume"
    ]
  };
  var collection_title = {
    csl: [
      "collection-title"
    ],
    type: "text",
    zotero: [
      "seriesTitle",
      "series",
      "parentTreaty"
    ]
  };
  var collection_editor2 = {
    csl: [
      "collection-editor"
    ],
    type: "name"
  };
  var collection_number2 = {
    csl: [
      "collection-number"
    ],
    type: "text"
  };
  var collection_title2 = {
    csl: [
      "collection-title"
    ],
    type: "text"
  };
  var commenter = {
    csl: [
      "commenter"
    ],
    type: "name",
    zotero: [
      "commenter"
    ]
  };
  var committee = {
    csl: [
      "committee"
    ],
    type: "text",
    zotero: [
      "committee"
    ]
  };
  var company = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var composer = {
    csl: [
      "composer"
    ],
    type: "name",
    zotero: [
      "composer"
    ]
  };
  var conference_date = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conference_name = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var conferenceDate = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conferenceName = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var container_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var container_title = {
    csl: [
      "container-title"
    ],
    type: "text",
    zotero: [
      "publicationTitle",
      "reporter",
      "code"
    ]
  };
  var container_title_short = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var container_author2 = {
    csl: [
      "container-author"
    ],
    type: "name"
  };
  var container_title2 = {
    csl: [
      "container-title"
    ],
    type: "text"
  };
  var container_title_short2 = {
    csl: [
      "container-title-short"
    ],
    type: "text"
  };
  var contributor = {
    csl: [
      "contributor"
    ],
    type: "name",
    zotero: [
      "contributor"
    ]
  };
  var cosponsor = {
    csl: [
      "cosponsor"
    ],
    type: "name",
    zotero: [
      "cosponsor"
    ]
  };
  var counsel = {
    csl: [
      "counsel"
    ],
    type: "name",
    zotero: [
      "counsel"
    ]
  };
  var country = {
    type: "text",
    zotero: [
      "country"
    ]
  };
  var court = {
    type: "text",
    zotero: [
      "court"
    ]
  };
  var csl_type = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var csl_type2 = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_amended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var date_decided = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_enacted = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateAmended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var dateDecided = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateEnacted = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dictionary_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dictionaryTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dimensions = {
    csl: [
      "dimensions"
    ],
    type: "text",
    zotero: [
      "artworkSize",
      "runningTime"
    ]
  };
  var director = {
    csl: [
      "director"
    ],
    type: "name",
    zotero: [
      "director"
    ]
  };
  var distributor = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var division = {
    csl: [
      "division"
    ],
    type: "text",
    zotero: [
      "division"
    ]
  };
  var docket_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var docketNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var document_name = {
    csl: [
      "document-name"
    ],
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var document_number = {
    csl: [
      "document-number"
    ],
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var document_name2 = {
    csl: [
      "document-name"
    ],
    type: "text"
  };
  var document_number2 = {
    csl: [
      "document-number"
    ],
    type: "text"
  };
  var documentName = {
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var documentNumber = {
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var doi = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var edition = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var editor = {
    csl: [
      "editor"
    ],
    type: "name",
    zotero: [
      "editor"
    ]
  };
  var editorial_director = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var editorial_director2 = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var encyclopedia_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var encyclopediaTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var episode_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var episodeNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var event = {
    csl: [
      "event"
    ],
    type: "text",
    zotero: [
      "meetingName",
      "conferenceName",
      "resolutionLabel"
    ]
  };
  var event_date = {
    csl: [
      "event-date"
    ],
    type: "date",
    zotero: [
      "dateAmended",
      "signingDate",
      "conferenceDate"
    ]
  };
  var event_place = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var event_date2 = {
    csl: [
      "event-date"
    ],
    type: "date"
  };
  var event_place2 = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var filing_date = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var filingDate = {
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var first_page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var firstPage = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var forum_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var forumTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var gazette_flag = {
    csl: [
      "gazette-flag"
    ],
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var gazette_flag2 = {
    csl: [
      "gazette-flag"
    ],
    type: "text"
  };
  var gazetteFlag = {
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var genre = {
    csl: [
      "genre"
    ],
    type: "text",
    zotero: [
      "genre",
      "type"
    ]
  };
  var guest = {
    csl: [
      "guest"
    ],
    type: "name",
    zotero: [
      "guest"
    ]
  };
  var history = {
    type: "text",
    zotero: [
      "history"
    ]
  };
  var illustrator = {
    csl: [
      "illustrator"
    ],
    type: "name"
  };
  var institution = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "institution",
      "publisher"
    ]
  };
  var interview_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewee = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "interviewee"
    ]
  };
  var interviewer = {
    csl: [
      "interviewer"
    ],
    type: "name",
    zotero: [
      "interviewer"
    ]
  };
  var inventor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "inventor"
    ]
  };
  var isbn = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var issn = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var issue = {
    csl: [
      "issue"
    ],
    type: "text",
    zotero: [
      "issue"
    ]
  };
  var issue_date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issueDate = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issued = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issuing_authority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var issuingAuthority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var journal_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var journalAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var jurisdiction = {
    csl: [
      "jurisdiction"
    ],
    type: "text",
    zotero: [
      "jurisdiction"
    ]
  };
  var label = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var language = {
    csl: [
      "language"
    ],
    type: "text",
    zotero: [
      "language"
    ]
  };
  var legal_status = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legalStatus = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legislative_body = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var legislativeBody = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var letter_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var letterType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var library_catalog = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var libraryCatalog = {
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var manuscript_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var manuscriptType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var map_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var mapType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var medium = {
    csl: [
      "medium"
    ],
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var meeting_name = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meeting_number = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var meetingName = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meetingNumber = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var name_of_act = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var nameOfAct = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var network = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var news_case_date = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var newsCaseDate = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var num_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var numPages = {
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var number_of_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number_of_volumes = {
    csl: [
      "number-of-volumes"
    ],
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var number_of_pages2 = {
    csl: [
      "number-of-pages"
    ],
    type: "text"
  };
  var number_of_volumes2 = {
    csl: [
      "number-of-volumes"
    ],
    type: "text"
  };
  var numberOfVolumes = {
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var opening_date = {
    csl: [
      "opening-date"
    ],
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opening_date2 = {
    csl: [
      "opening-date"
    ],
    type: "date"
  };
  var openingDate = {
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opus = {
    type: "text",
    zotero: [
      "opus"
    ]
  };
  var original_author = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date = {
    csl: [
      "original-date"
    ],
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var original_publisher = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var original_author2 = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date2 = {
    csl: [
      "original-date"
    ],
    type: "date"
  };
  var original_publisher2 = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place2 = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title2 = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var originalDate = {
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var parent_treaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var parentTreaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var patent_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var patentNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var performer = {
    csl: [
      "performer"
    ],
    type: "name",
    zotero: [
      "performer"
    ]
  };
  var place = {
    csl: [
      "event-place",
      "publisher-place"
    ],
    type: "text",
    zotero: [
      "place"
    ]
  };
  var pmcid = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var pmid = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var podcaster = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "podcaster"
    ]
  };
  var post_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var postType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentation_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentationType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presenter = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "presenter"
    ]
  };
  var priority_date = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priority_numbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var priorityDate = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priorityNumbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var proceedings_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var proceedingsTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var producer = {
    csl: [
      "producer"
    ],
    type: "name",
    zotero: [
      "producer"
    ]
  };
  var program_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programmer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "programmer"
    ]
  };
  var programming_language = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var programmingLanguage = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var public_law_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publicLawNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publication_date = {
    csl: [
      "publication-date"
    ],
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publication_number = {
    csl: [
      "publication-number"
    ],
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publication_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publication_date2 = {
    csl: [
      "publication-date"
    ],
    type: "date"
  };
  var publication_number2 = {
    csl: [
      "publication-number"
    ],
    type: "text"
  };
  var publicationDate = {
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publicationNumber = {
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publicationTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publisher = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var publisher_place = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var publisher_place2 = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var recipient = {
    csl: [
      "recipient"
    ],
    type: "name",
    zotero: [
      "recipient"
    ]
  };
  var references = {
    csl: [
      "references"
    ],
    type: "text",
    zotero: [
      "references"
    ]
  };
  var regnal_year = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regnalYear = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regulation_type = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulationType = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulatory_body = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var regulatoryBody = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var reign = {
    type: "text",
    zotero: [
      "reign"
    ]
  };
  var release = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var report_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var report_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reportNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var reportType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reporter = {
    type: "text",
    zotero: [
      "reporter",
      "publicationTitle"
    ]
  };
  var reporter_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var reporterVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var resolution_label = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var resolutionLabel = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var reviewed_author = {
    csl: [
      "reviewed-author"
    ],
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var reviewed_title = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewed_author2 = {
    csl: [
      "reviewed-author"
    ],
    type: "name"
  };
  var reviewed_title2 = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewedAuthor = {
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var rights = {
    csl: [
      "rights"
    ],
    type: "text",
    zotero: [
      "rights"
    ]
  };
  var running_time = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var runningTime = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var scale = {
    csl: [
      "scale"
    ],
    type: "text",
    zotero: [
      "scale"
    ]
  };
  var scriptwriter = {
    csl: [
      "scriptwriter"
    ],
    type: "name",
    zotero: [
      "scriptwriter"
    ]
  };
  var section = {
    csl: [
      "section"
    ],
    type: "text",
    zotero: [
      "section"
    ]
  };
  var series = {
    type: "text",
    zotero: [
      "series"
    ]
  };
  var series_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var series_number = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var series_text = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var series_title = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var seriesEditor = {
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var seriesNumber = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var seriesText = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var seriesTitle = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var session = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var session_type = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var sessionType = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var short_title = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var shortTitle = {
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var signing_date = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var signingDate = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var source = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var sponsor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "sponsor"
    ]
  };
  var status = {
    csl: [
      "status"
    ],
    type: "text",
    zotero: [
      "status"
    ]
  };
  var studio = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var subject = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var submitted = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var supplement = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplement_name = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplementName = {
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var system = {
    type: "text",
    zotero: [
      "system"
    ]
  };
  var testimony_by = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var testimonyBy = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var thesis_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var thesisType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var title = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var title_short = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var title_short2 = {
    csl: [
      "title-short"
    ],
    type: "text"
  };
  var translator = {
    csl: [
      "translator"
    ],
    type: "name",
    zotero: [
      "translator"
    ]
  };
  var treaty_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var treatyNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var university = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var url = {
    csl: [
      "URL"
    ],
    type: "text",
    zotero: [
      "url"
    ]
  };
  var version = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var version_number = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var versionNumber = {
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var video_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var videoRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var volume = {
    csl: [
      "volume"
    ],
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var volume_title = {
    csl: [
      "volume-title"
    ],
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var volume_title2 = {
    csl: [
      "volume-title"
    ],
    type: "text"
  };
  var volumeTitle = {
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var website_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var website_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var websiteTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var websiteType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var words_by = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var wordsBy = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var year_as_volume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var yearAsVolume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var extra_fields_default = {
    DOI,
    ISBN,
    ISSN,
    PMCID,
    PMID,
    URL,
    "access date": access_date,
    accessDate,
    accessed,
    "admin flag": admin_flag,
    "admin-flag": admin_flag2,
    adminFlag,
    "adoption date": adoption_date,
    adoptionDate,
    album,
    "application number": application_number,
    applicationNumber,
    archive,
    "archive collection": archive_collection,
    "archive location": archive_location,
    "archive place": archive_place,
    "archive-place": archive_place2,
    archiveCollection,
    archiveLocation,
    archive_collection: archive_collection2,
    archive_location: archive_location2,
    artist,
    "artwork medium": artwork_medium,
    "artwork size": artwork_size,
    artworkMedium,
    artworkSize,
    "assembly number": assembly_number,
    assemblyNumber,
    assignee,
    "attorney agent": attorney_agent,
    attorneyAgent,
    "audio file type": audio_file_type,
    "audio recording format": audio_recording_format,
    audioFileType,
    audioRecordingFormat,
    author,
    authority,
    "bill number": bill_number,
    billNumber,
    "blog title": blog_title,
    blogTitle,
    "book abbreviation": book_abbreviation,
    "book author": book_author,
    "book title": book_title,
    bookAbbreviation,
    bookAuthor,
    bookTitle,
    "call number": call_number,
    "call-number": call_number2,
    callNumber,
    cartographer,
    "case name": case_name,
    caseName,
    "cast member": cast_member,
    castMember,
    "chapter number": chapter_number,
    "chapter-number": chapter_number2,
    code,
    "code number": code_number,
    "code pages": code_pages,
    "code volume": code_volume,
    codeNumber,
    codePages,
    codeVolume,
    "collection editor": collection_editor,
    "collection number": collection_number,
    "collection title": collection_title,
    "collection-editor": collection_editor2,
    "collection-number": collection_number2,
    "collection-title": collection_title2,
    commenter,
    committee,
    company,
    composer,
    "conference date": conference_date,
    "conference name": conference_name,
    conferenceDate,
    conferenceName,
    "container author": container_author,
    "container title": container_title,
    "container title short": container_title_short,
    "container-author": container_author2,
    "container-title": container_title2,
    "container-title-short": container_title_short2,
    contributor,
    cosponsor,
    counsel,
    country,
    court,
    "csl type": csl_type,
    "csl-type": csl_type2,
    date,
    "date amended": date_amended,
    "date decided": date_decided,
    "date enacted": date_enacted,
    dateAmended,
    dateDecided,
    dateEnacted,
    "dictionary title": dictionary_title,
    dictionaryTitle,
    dimensions,
    director,
    distributor,
    division,
    "docket number": docket_number,
    docketNumber,
    "document name": document_name,
    "document number": document_number,
    "document-name": document_name2,
    "document-number": document_number2,
    documentName,
    documentNumber,
    doi,
    edition,
    editor,
    "editorial director": editorial_director,
    "editorial-director": editorial_director2,
    "encyclopedia title": encyclopedia_title,
    encyclopediaTitle,
    "episode number": episode_number,
    episodeNumber,
    event,
    "event date": event_date,
    "event place": event_place,
    "event-date": event_date2,
    "event-place": event_place2,
    "filing date": filing_date,
    filingDate,
    "first page": first_page,
    firstPage,
    "forum title": forum_title,
    forumTitle,
    "gazette flag": gazette_flag,
    "gazette-flag": gazette_flag2,
    gazetteFlag,
    genre,
    guest,
    history,
    illustrator,
    institution,
    "interview medium": interview_medium,
    interviewMedium,
    interviewee,
    interviewer,
    inventor,
    isbn,
    issn,
    issue,
    "issue date": issue_date,
    issueDate,
    issued,
    "issuing authority": issuing_authority,
    issuingAuthority,
    "journal abbreviation": journal_abbreviation,
    journalAbbreviation,
    jurisdiction,
    label,
    language,
    "legal status": legal_status,
    legalStatus,
    "legislative body": legislative_body,
    legislativeBody,
    "letter type": letter_type,
    letterType,
    "library catalog": library_catalog,
    libraryCatalog,
    "manuscript type": manuscript_type,
    manuscriptType,
    "map type": map_type,
    mapType,
    medium,
    "meeting name": meeting_name,
    "meeting number": meeting_number,
    meetingName,
    meetingNumber,
    "name of act": name_of_act,
    nameOfAct,
    network,
    "news case date": news_case_date,
    newsCaseDate,
    "num pages": num_pages,
    numPages,
    number,
    "number of pages": number_of_pages,
    "number of volumes": number_of_volumes,
    "number-of-pages": number_of_pages2,
    "number-of-volumes": number_of_volumes2,
    numberOfVolumes,
    "opening date": opening_date,
    "opening-date": opening_date2,
    openingDate,
    opus,
    "original author": original_author,
    "original date": original_date,
    "original publisher": original_publisher,
    "original publisher place": original_publisher_place,
    "original title": original_title,
    "original-author": original_author2,
    "original-date": original_date2,
    "original-publisher": original_publisher2,
    "original-publisher-place": original_publisher_place2,
    "original-title": original_title2,
    originalDate,
    page,
    pages,
    "parent treaty": parent_treaty,
    parentTreaty,
    "patent number": patent_number,
    patentNumber,
    performer,
    place,
    pmcid,
    pmid,
    podcaster,
    "post type": post_type,
    postType,
    "presentation type": presentation_type,
    presentationType,
    presenter,
    "priority date": priority_date,
    "priority numbers": priority_numbers,
    priorityDate,
    priorityNumbers,
    "proceedings title": proceedings_title,
    proceedingsTitle,
    producer,
    "program title": program_title,
    programTitle,
    programmer,
    "programming language": programming_language,
    programmingLanguage,
    "public law number": public_law_number,
    publicLawNumber,
    "publication date": publication_date,
    "publication number": publication_number,
    "publication title": publication_title,
    "publication-date": publication_date2,
    "publication-number": publication_number2,
    publicationDate,
    publicationNumber,
    publicationTitle,
    publisher,
    "publisher place": publisher_place,
    "publisher-place": publisher_place2,
    recipient,
    references,
    "regnal year": regnal_year,
    regnalYear,
    "regulation type": regulation_type,
    regulationType,
    "regulatory body": regulatory_body,
    regulatoryBody,
    reign,
    release,
    "report number": report_number,
    "report type": report_type,
    reportNumber,
    reportType,
    reporter,
    "reporter volume": reporter_volume,
    reporterVolume,
    "resolution label": resolution_label,
    resolutionLabel,
    "reviewed author": reviewed_author,
    "reviewed title": reviewed_title,
    "reviewed-author": reviewed_author2,
    "reviewed-title": reviewed_title2,
    reviewedAuthor,
    rights,
    "running time": running_time,
    runningTime,
    scale,
    scriptwriter,
    section,
    series,
    "series editor": series_editor,
    "series number": series_number,
    "series text": series_text,
    "series title": series_title,
    seriesEditor,
    seriesNumber,
    seriesText,
    seriesTitle,
    session,
    "session type": session_type,
    sessionType,
    "short title": short_title,
    shortTitle,
    "signing date": signing_date,
    signingDate,
    source,
    sponsor,
    status,
    studio,
    subject,
    submitted,
    supplement,
    "supplement name": supplement_name,
    supplementName,
    system,
    "testimony by": testimony_by,
    testimonyBy,
    "thesis type": thesis_type,
    thesisType,
    title,
    "title short": title_short,
    "title-short": title_short2,
    translator,
    "treaty number": treaty_number,
    treatyNumber,
    type,
    university,
    url,
    version,
    "version number": version_number,
    versionNumber,
    "video recording format": video_recording_format,
    videoRecordingFormat,
    volume,
    "volume title": volume_title,
    "volume-title": volume_title2,
    volumeTitle,
    "website title": website_title,
    "website type": website_type,
    websiteTitle,
    websiteType,
    "words by": words_by,
    wordsBy,
    "year as volume": year_as_volume,
    yearAsVolume
  };

  // content/extra.ts
  var CSL = __toModule(require_citeproc_commonjs());
  function zoteroCreator(value, creatorType) {
    const creator = value.split(/\s*\|\|\s*/);
    if (creator.length === 2) {
      return { lastName: creator[0] || "", firstName: creator[1] || "", creatorType };
    } else {
      return { name: value, creatorType };
    }
  }
  var re = {
    old: /^{:((?:bib(?:la)?)?tex\.)?([^:]+)(:)\s*([^}]+)}$/,
    new: /^((?:bib(?:la)?)?tex\.)?([^:=]+)\s*([:=])\s*([\S\s]*)/
  };
  var otherFields = ["lccn", "mr", "zbl", "arxiv", "jstor", "hdl", "googlebooksid"];
  function get(extra, mode, options) {
    if (!options)
      options = { citationKey: true, aliases: true, kv: true, tex: true };
    const other = { zotero: "csl", csl: "zotero" }[mode];
    extra = extra || "";
    const extraFields = {
      kv: {},
      creator: {},
      tex: {},
      citationKey: "",
      aliases: []
    };
    let ef;
    extra = extra.split("\n").filter((line) => {
      const m = line.match(re.old) || line.match(re.new);
      if (!m)
        return true;
      let [, tex, key, assign, value] = m;
      const raw = assign === "=";
      if (!tex && raw)
        return true;
      if (tex) {
        key = key.trim().toLowerCase();
      } else {
        key = key.trim().replace(/[-_]/g, " ").replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
      }
      value = value.trim();
      if (options.citationKey && !tex && ["citation key", "bibtex"].includes(key)) {
        extraFields.citationKey = value;
        return false;
      }
      if (options.aliases && !tex && key === "citation key alias") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options.aliases && tex && options.aliases && key === "ids") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options.kv && (ef = extra_fields_exports[key]) && !tex) {
        for (const field of ef[mode] || ef[other]) {
          switch (ef.type) {
            case "name":
              extraFields.creator[field] = extraFields.creator[key] || [];
              extraFields.creator[field].push(value);
              break;
            case "text":
            case "date":
              extraFields.kv[field] = value;
              break;
            default:
              throw new Error(`Unexpected extra field type ${ef.type}`);
          }
        }
        return false;
      }
      if (options.tex && tex && !key.includes(" ")) {
        extraFields.tex[tex + key] = { value, raw };
        return false;
      }
      if (options.tex && !tex && otherFields.includes(key.replace(/[- ]/g, ""))) {
        extraFields.tex[`tex.${key.replace(/[- ]/g, "")}`] = { value };
        return false;
      }
      return true;
    }).join("\n").trim();
    extraFields.aliases = Array.from(new Set(extraFields.aliases)).filter((key) => key !== extraFields.citationKey);
    return { extra, extraFields };
  }

  // translators/bibtex/exporter.ts
  var Exporter = new class {
    constructor() {
      this.strings = {};
      this.strings_reverse = {};
      this.citekeys = {};
      this.jabref = new JabRef();
    }
    prepare_strings() {
      if (!Translator.BetterTeX || !Translator.preferences.strings)
        return;
      if (Translator.BetterTeX && Translator.preferences.exportBibTeXStrings.startsWith("match")) {
        this.strings = bibtexParser.parse(Translator.preferences.strings, { markup: Translator.csquotes ? { enquote: Translator.csquotes } : {} }).strings;
        for (const [k, v] of Object.entries(this.strings)) {
          this.strings_reverse[v.toUpperCase()] = k.toUpperCase();
        }
      }
    }
    unique_chars(str) {
      let uniq = "";
      for (const c of str) {
        if (uniq.indexOf(c) < 0)
          uniq += c;
      }
      return uniq;
    }
    get items() {
      return this.itemsGenerator();
    }
    *itemsGenerator() {
      var _a;
      if (!this.postfix && Translator.BetterTeX)
        this.postfix = new Postfix(Translator.preferences.qualityReport);
      for (const item of Translator.references) {
        if (!item.citationKey) {
          throw new Error(`No citation key in ${JSON.stringify(item)}`);
        }
        this.citekeys[item.citationKey] = (this.citekeys[item.citationKey] || 0) + 1;
        this.jabref.citekeys.set(item.itemID, item.citationKey);
        const cached = item.$cacheable && Translator.BetterTeX ? Zotero.BetterBibTeX.cacheFetch(item.itemID, Translator.options, Translator.preferences) : null;
        Translator.cache[cached ? "hits" : "misses"] += 1;
        if (cached) {
          Zotero.write(cached.reference);
          (_a = this.postfix) == null ? void 0 : _a.add(cached.metadata);
          continue;
        }
        simplifyForExport(item);
        Object.assign(item, get(item.extra, "zotero"));
        const prefix = Translator.BetterBibLaTeX ? "biblatex." : "bibtex.";
        for (const [name, field] of Object.entries(item.extraFields.tex).sort((a, b) => b[0].localeCompare(a[0]))) {
          for (const type2 of [prefix, "tex."]) {
            if (name.startsWith(type2)) {
              item.extraFields.tex[name.substr(type2.length)] = field;
              break;
            }
          }
          delete item.extraFields.tex[name];
        }
        item.raw = Translator.BetterTeX && Translator.preferences.rawLaTag === "*";
        item.tags = item.tags.filter((tag) => {
          if (Translator.BetterTeX && tag.tag === Translator.preferences.rawLaTag) {
            item.raw = true;
            return false;
          }
          return true;
        });
        yield item;
      }
    }
    complete() {
      this.jabref.exportGroups();
      if (this.postfix)
        Zotero.write(this.postfix.toString());
      if (Translator.BetterTeX && Translator.preferences.qualityReport) {
        let sep = "\n% == Citekey duplicates in this file:\n";
        for (const [citekey, n] of Object.entries(this.citekeys).sort((a, b) => a[0].localeCompare(b[0]))) {
          if (n > 1) {
            Zotero.write(`${sep}% ${citekey} duplicates: ${n}
`);
            sep = "% ";
          }
        }
      }
    }
  }();

  // translators/bibtex/unicode_translator.ts
  var unicode2latex = __toModule(require_unicode2latex());
  var HE = require_he();
  var combining_diacritics = /^[^\u0300-\u036F][\u0300-\u036F]+/;
  var switchMode = {
    math: "text",
    text: "math"
  };
  function replace_command_spacers(latex) {
    return latex.replace(/\0(\s)/g, "{}$1").replace(/\0([^;.,!?${}_^\\/])/g, " $1").replace(/\0/g, "");
  }
  var htmlConverter = new class HTMLConverter {
    constructor() {
      this.latex = "";
      this.mapping = {};
      this.stack = [];
      this.options = {};
      this.packages = {};
    }
    convert(html, options) {
      this.embraced = false;
      this.options = options;
      this.latex = "";
      this.packages = {};
      if (Translator.unicode) {
        this.mapping = unicode2latex.unicode;
      } else if (options.creator && Translator.BetterBibTeX) {
        this.mapping = unicode2latex.ascii_bibtex_creator;
      } else {
        this.mapping = unicode2latex.ascii;
      }
      if (!this.mapping.initialized) {
        for (const c of Translator.preferences.ascii) {
          this.mapping[c] = unicode2latex.ascii[c];
        }
        if (Translator.preferences.mapUnicode === "conservative") {
          for (const keep of Object.keys(switchMode).sort()) {
            const remove = switchMode[keep];
            const unicode2 = Translator.preferences[`map${keep[0].toUpperCase()}${keep.slice(1)}`];
            for (const c of unicode2) {
              if (this.mapping[c] && this.mapping[c].text && this.mapping[c].math) {
                delete this.mapping[c][remove];
              }
            }
          }
        } else if (Translator.preferences.mapUnicode === "minimal-packages") {
          for (const tex of Object.values(this.mapping)) {
            if (tex.text && tex.math) {
              if (tex.textpackages && !tex.mathpackages) {
                delete tex.text;
                delete tex.textpackages;
              } else if (!tex.textpackages && tex.mathpackages) {
                delete tex.math;
                delete tex.mathpackages;
              }
            }
          }
        } else {
          const remove = switchMode[Translator.preferences.mapUnicode];
          if (remove) {
            for (const tex of Object.values(this.mapping)) {
              if (tex.text && tex.math)
                delete tex[remove];
            }
          }
        }
        this.mapping.initialized = true;
      }
      this.stack = [];
      const ast2 = Zotero.BetterBibTeX.parseHTML(html, this.options);
      this.walk(ast2);
      if (!options.commandspacers)
        this.latex = replace_command_spacers(this.latex);
      this.latex = this.latex.replace(/(\\\\)+\n\n/g, "\n\n").replace(/\n\n\n+/g, "\n\n").replace(/(\\par[\n\s~]+)+/g, "\\par\n").replace(/\n*\\par\n*$/, "").replace(/^\n*\\par\n*/, "");
      return { latex: this.latex, raw: ast2.nodeName === "pre", packages: Object.keys(this.packages) };
    }
    walk(tag, nocased = false) {
      if (!tag)
        return;
      switch (tag.nodeName) {
        case "#text":
          this.chars(tag.value, nocased);
          return;
        case "pre":
        case "script":
          this.latex += tag.value;
          return;
      }
      this.stack.unshift(tag);
      let latex = "...";
      switch (tag.nodeName) {
        case "i":
        case "em":
        case "italic":
        case "emphasis":
          latex = "\\emph{...}";
          break;
        case "b":
        case "strong":
          latex = "\\textbf{...}";
          break;
        case "a":
          if (tag.attr.href && tag.attr.href.length)
            latex = `\\href{${tag.attr.href}}{...}`;
          break;
        case "sup":
          latex = "\\textsuperscript{...}";
          break;
        case "sub":
          latex = "\\textsubscript{...}";
          break;
        case "br":
          latex = "";
          if (this.latex !== "" && this.latex[this.latex.length - 1] !== "\n")
            latex = "\\\\";
          latex += "\n...";
          break;
        case "p":
        case "div":
        case "table":
        case "tr":
          latex = "\n\\par\n...\n\\par\n";
          break;
        case "h1":
        case "h2":
        case "h3":
        case "h4":
          latex = `

\\${"sub".repeat(parseInt(tag.nodeName[1]) - 1)}section{...}

`;
          break;
        case "ol":
          latex = "\n\n\\begin{enumerate}\n...\n\n\\end{enumerate}\n";
          break;
        case "ul":
          latex = "\n\n\\begin{itemize}\n...\n\n\\end{itemize}\n";
          break;
        case "li":
          latex = "\n\\item ...";
          break;
        case "span":
        case "sc":
        case "nc":
          break;
        case "header":
        case "section":
          break;
        case "td":
        case "th":
          latex = " ... ";
          break;
        case "#comment":
        case "#document":
        case "#document-fragment":
        case "tbody":
        case "html":
        case "head":
        case "body":
          break;
        case "blockquote":
          latex = "\n\n\\begin{quotation}\n...\n\n\\end{quotation}\n";
          break;
        default:
          log.debug(`unexpected tag '${tag.nodeName}' (${Object.keys(tag)})`);
          break;
      }
      if (latex !== "...")
        latex = this.embrace(latex, /^\\[a-z]+{\.\.\.}$/.test(latex));
      if (tag.smallcaps)
        latex = this.embrace(`\\textsc{${latex}}`, true);
      if (tag.nocase)
        latex = `{{${latex}}}`;
      if (tag.relax)
        latex = `{\\relax ${latex}}`;
      if (tag.enquote) {
        if (Translator.BetterBibTeX) {
          latex = `\\enquote{${latex}}`;
        } else {
          latex = `\\mkbibquote{${latex}}`;
        }
      }
      const [prefix, postfix] = latex.split("...");
      this.latex += prefix;
      for (const child of tag.childNodes) {
        this.walk(child, nocased || tag.nocase);
      }
      this.latex += postfix;
      this.stack.shift();
    }
    embrace(latex, condition) {
      if (!this.embraced)
        this.embraced = this.options.caseConversion && ((this.latex || latex)[0] !== "\\" || Translator.BetterBibTeX);
      if (!this.embraced || !condition)
        return latex;
      return `{${latex}}`;
    }
    chars(text, nocased) {
      if (this.options.html)
        text = HE.decode(text, { isAttributeValue: true });
      let latex = "";
      let mode = "text";
      let braced = 0;
      const switchTo = {
        math: nocased ? "$" : "{$",
        text: nocased ? "$" : "$}"
      };
      text = text.normalize("NFD");
      let mapped;
      let switched;
      let m;
      let i;
      let diacritic;
      const l = text.length;
      for (i = 0; i < l; i++) {
        mapped = null;
        if (text[i + 1] === "\uFE20" && text[i + 3] === "\uFE21") {
          mapped = this.mapping[text.substr(i, 4)] || { text: `${text[i]}${text[i + 2]}` };
          i += 3;
        }
        if (!mapped && !Translator.unicode) {
          if (m = combining_diacritics.exec(text.substring(i))) {
            mapped = this.mapping[m[0].normalize("NFC")];
            if (!mapped && (diacritic = unicode2latex.diacritics.tolatex[m[0].substr(1, 2)])) {
              const char = (this.mapping[text[i]] || { text: text[i], math: text[i] })[diacritic.mode];
              if (char) {
                const cmd = diacritic.command.match(/[a-z]/);
                if (Translator.BetterBibTeX && diacritic.mode === "text") {
                  mapped = { [diacritic.mode]: `{\\${diacritic.command}${cmd ? " " : ""}${char}}` };
                } else if (cmd && char.length === 1) {
                  mapped = { [diacritic.mode]: `\\${diacritic.command} ${char}` };
                } else if (cmd) {
                  mapped = { [diacritic.mode]: `\\${diacritic.command}{${char}}` };
                } else {
                  mapped = { [diacritic.mode]: `\\${diacritic.command}${char}` };
                }
                if (m[0].length > 3)
                  log.error("discarding diacritics > 2 from", m[0]);
              }
            }
            if (mapped)
              i += m[0].length - 1;
          }
        }
        if (!mapped && text[i + 1] && (mapped = this.mapping[text.substr(i, 2)])) {
          i += 1;
        }
        if (!mapped)
          mapped = this.mapping[text[i]] || { text: text[i] };
        if (!mapped[mode]) {
          mode = switchMode[mode];
          latex += switchTo[mode];
          switched = true;
        } else {
          switched = false;
        }
        switch (mapped[mode]) {
          case "\\{":
            braced += 1;
            break;
          case "\\}":
            braced -= 1;
            break;
        }
        if (braced < 0) {
          latex += "\\vphantom\\{";
          braced = 0;
        }
        if (switched && mode === "text" && (m = latex.match(/([\^_])\{(.)\}(\$\}?)$/))) {
          latex = latex.slice(0, latex.length - m[0].length) + m[1] + m[2] + m[3];
        }
        latex += mapped[mode];
        if (mapped.commandspacer)
          latex += "\0";
        if (!switched && mode === "math" && (m = latex.match(/(([\^_])\{[^{}]+)\}\2{(.\})$/))) {
          latex = latex.slice(0, latex.length - m[0].length) + m[1] + m[3];
        }
        const pkgs = mapped[`${mode}packages`];
        if (pkgs) {
          for (const pkg of pkgs) {
            this.packages[pkg] = true;
          }
        }
      }
      switch (braced) {
        case 0:
          break;
        case 1:
          latex += "\\vphantom\\}";
          break;
        default:
          latex += `\\vphantom{${"\\}".repeat(braced)}}`;
          break;
      }
      if (mode === "math")
        latex += switchTo.text;
      this.latex += latex.normalize("NFC");
    }
  }();
  function html2latex(html, options) {
    if (typeof options.html === "undefined")
      options.html = true;
    return htmlConverter.convert(html, options);
  }
  function text2latex(text, options = {}) {
    if (typeof options.html === "undefined")
      options.html = false;
    return html2latex(text, options);
  }

  // translators/bibtex/datefield.ts
  function pad(v, padding) {
    if (v.length >= padding.length)
      return v;
    return (padding + v).slice(-padding.length);
  }
  function year(y) {
    if (Math.abs(y) > 999) {
      return `${y}`;
    } else {
      return (y < 0 ? "-" : "") + `000${Math.abs(y)}`.slice(-4);
    }
  }
  function format(date2) {
    let formatted;
    if (typeof date2.year === "number" && date2.month && date2.day) {
      formatted = `${year(date2.year)}-${pad(date2.month, "00")}-${pad(date2.day, "00")}`;
    } else if (typeof date2.year === "number" && (date2.month || date2.season)) {
      formatted = `${year(date2.year)}-${pad(date2.month || date2.season + 20, "00")}`;
    } else if (typeof date2.year === "number") {
      formatted = year(date2.year);
    } else {
      formatted = "";
    }
    if (formatted && Translator.BetterBibLaTeX && Translator.preferences.biblatexExtendedDateFormat) {
      if (date2.uncertain)
        formatted += "?";
      if (date2.approximate)
        formatted += "~";
    }
    return formatted;
  }
  function datefield(date2, field) {
    field = JSON.parse(JSON.stringify({ ...field, value: "", enc: "latex" }));
    if (!date2)
      return field;
    if (date2 && !date2.type && date2.orig)
      return field;
    if (!date2.type)
      throw new Error(`Failed to parse ${JSON.stringify(date2)}`);
    if (date2.type === "verbatim") {
      field.name = field.verbatim || field.name;
      if (date2.verbatim === "n.d.") {
        field.value = "<pre>\\bibstring{nodate}</pre>";
      } else {
        field.value = date2.verbatim;
      }
    } else if (date2.type === "date" || date2.type === "season") {
      field.value = format(date2);
    } else if (date2.type === "interval") {
      field.value = `${format(date2.from)}/${format(date2.to)}`;
    } else if (date2.year) {
      field.value = format(date2);
    }
    if (!field.value || !field.name)
      return field;
    if (date2.type !== "verbatim" && typeof field.value == "string")
      field.value = field.value.replace(/~/g, "\xA0");
    return field;
  }

  // translators/bibtex/reference.ts
  var CSL3 = __toModule(require_citeproc_commonjs());

  // content/csl-titlecase.ts
  var CSL2 = __toModule(require_citeproc_commonjs());
  function makeRegExp(lst) {
    lst = lst.slice();
    const ret = new RegExp("(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
    return ret;
  }
  var State = class {
    constructor() {
      this.opt = { lang: "en" };
      this.locale = {};
      this.locale[this.opt.lang] = { opts: {} };
      this.locale[this.opt.lang].opts["skip-words"] = CSL2.SKIP_WORDS;
      this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);
      this.tmp = {};
    }
  };
  function titleCased(text) {
    return CSL2.Output.Formatters.title(new State(), text);
  }

  // gen/babel/langmap.json
  var af = "afrikaans";
  var af_af = "afrikaans";
  var afr = "afrikaans";
  var afrikaans = "afrikaans";
  var agh = "aghem";
  var aghem = "aghem";
  var agq = "aghem";
  var ak = "akan";
  var ak_ak = "akan";
  var aka = "akan";
  var akan = "akan";
  var alb = "albanian";
  var albanian = "albanian";
  var am = "amharic";
  var am_am = "amharic";
  var ame = "american";
  var american = "american";
  var amh = "amharic";
  var amharic = "amharic";
  var anar\u00E2\u0161kiel\u00E2 = "inarisami";
  var ancient_greek = "greek";
  var ar = "arabic";
  var ar_ar = "arabic";
  var ar_dz = "arabic-algeria";
  var ar_ma = "arabic-morocco";
  var ar_sy = "arabic-syria";
  var arabic = "arabic";
  var arabic_algeria = "arabic-algeria";
  var arabic_dz = "arabic-algeria";
  var arabic_ma = "arabic-morocco";
  var arabic_morocco = "arabic-morocco";
  var arabic_sy = "arabic-syria";
  var arabic_syria = "arabic-syria";
  var arm = "armenian";
  var armenian = "armenian";
  var as = "assamese";
  var as_as = "assamese";
  var asa = "asu";
  var ass = "assamese";
  var assamese = "assamese";
  var ast = "asturian";
  var asturian = "asturian";
  var asturianu = "asturian";
  var asu = "asu";
  var australian = "australian";
  var austrian = "austrian";
  var az = "azerbaijani";
  var az_az = "azerbaijani";
  var az_cyrl = "azerbaijani-cyrillic";
  var az_latn = "azerbaijani-latin";
  var azerbaijani = "azerbaijani";
  var azerbaijani_cyrillic = "azerbaijani-cyrillic";
  var azerbaijani_cyrl = "azerbaijani-cyrillic";
  var azerbaijani_latin = "azerbaijani-latin";
  var azerbaijani_latn = "azerbaijani-latin";
  var az\u0259rbaycan = "azerbaijani";
  var baf = "bafia";
  var bafia = "bafia";
  var bahasa_melayu = "malay";
  var bam = "bambara";
  var bamanakan = "bambara";
  var bambara = "bambara";
  var bangla = "bengali";
  var bas = "basaa";
  var basaa = "basaa";
  var basque = "basque";
  var be = "belarusian";
  var be_be = "belarusian";
  var bel = "belarusian";
  var belarusian = "belarusian";
  var bem = "bemba";
  var bemba = "bemba";
  var bena = "bena";
  var bengali = "bengali";
  var bez = "bena";
  var bg = "bulgarian";
  var bg_bg = "bulgarian";
  var bm = "bambara";
  var bm_bm = "bambara";
  var bn = "bengali";
  var bn_bn = "bengali";
  var bo = "tibetan";
  var bo_bo = "tibetan";
  var bod = "bodo";
  var bodo = "bodo";
  var bosanski = "bosnian";
  var bosnian = "bosnian";
  var bosnian_cyrillic = "bosnian-cyrillic";
  var bosnian_cyrl = "bosnian-cyrillic";
  var bosnian_latin = "bosnian-latin";
  var bosnian_latn = "bosnian-latin";
  var br = "breton";
  var br_br = "breton";
  var bra = "brazilian";
  var brazilian = "brazilian";
  var bre = "breton";
  var breton = "breton";
  var brezhoneg = "breton";
  var bri = "british";
  var british = "british";
  var brx = "bodo";
  var bs = "bosnian";
  var bs_bs = "bosnian";
  var bs_cyrl = "bosnian-cyrillic";
  var bs_latn = "bosnian-latin";
  var bul = "bulgarian";
  var bulgarian = "bulgarian";
  var bur = "burmese";
  var burmese = "burmese";
  var ca = "catalan";
  var ca_ca = "catalan";
  var canadian = "canadian";
  var cantonese = "cantonese";
  var cat = "catalan";
  var catalan = "catalan";
  var catal\u00E0 = "catalan";
  var ce = "chechen";
  var ce_ce = "chechen";
  var cen = "centralatlastamazight";
  var central_atlas_tamazight = "centralatlastamazight";
  var central_kurdish = "sorani";
  var centralatlastamazight = "centralatlastamazight";
  var centralkurdish = "sorani";
  var centralkurdish_latin = "sorani";
  var cgg = "chiga";
  var chechen = "chechen";
  var cherokee = "cherokee";
  var chiga = "chiga";
  var chimakonde = "makonde";
  var chinese = "chinese";
  var chinese_hans = "chinese-simplified";
  var chinese_hans_hk = "chinese-simplified-hongkongsarchina";
  var chinese_hans_mo = "chinese-simplified-macausarchina";
  var chinese_hans_sg = "chinese-simplified-singapore";
  var chinese_hant = "chinese-traditional";
  var chinese_hant_hk = "chinese-traditional-hongkongsarchina";
  var chinese_hant_mo = "chinese-traditional-macausarchina";
  var chinese_simplified = "chinese-simplified";
  var chinese_simplified_hongkongsarchina = "chinese-simplified-hongkongsarchina";
  var chinese_simplified_macausarchina = "chinese-simplified-macausarchina";
  var chinese_simplified_singapore = "chinese-simplified-singapore";
  var chinese_traditional = "chinese-traditional";
  var chinese_traditional_hongkongsarchina = "chinese-traditional-hongkongsarchina";
  var chinese_traditional_macausarchina = "chinese-traditional-macausarchina";
  var chishona = "shona";
  var chr = "cherokee";
  var church_slavic = "churchslavic";
  var churchslavic = "churchslavic";
  var churchslavic_glagolitic = "churchslavic-glagolitic";
  var churchslavic_oldcyrillic = "churchslavic-oldcyrillic";
  var churchslavonic = "churchslavic";
  var ckb = "sorani";
  var ckb_arab = "sorani";
  var ckb_latn = "sorani";
  var col = "colognian";
  var colognian = "colognian";
  var cop = "coptic";
  var coptic = "coptic";
  var cor = "cornish";
  var cornish = "cornish";
  var cro = "croatian";
  var croatian = "croatian";
  var cs = "czech";
  var cs_cs = "czech";
  var cu = "churchslavic";
  var cu_cu = "churchslavic";
  var cu_cyrs = "churchslavic-oldcyrillic";
  var cu_glag = "churchslavic-glagolitic";
  var cy = "welsh";
  var cy_cy = "welsh";
  var cymraeg = "welsh";
  var cze = "czech";
  var czech = "czech";
  var da = "danish";
  var da_da = "danish";
  var dan = "danish";
  var danish = "danish";
  var dansk = "danish";
  var dav = "taita";
  var davvis\u00E1megiella = "samin";
  var de = "german";
  var de_1901 = "german";
  var de_at = "austrian";
  var de_at_1901 = "austrian";
  var de_ch = "nswissgerman";
  var de_ch_1901 = "swissgerman";
  var de_ch_1996 = "nswissgerman";
  var de_de = "german";
  var deutsch = "german";
  var dholuo = "luo";
  var dje = "zarma";
  var dolnoserb\u0161\u0107ina = "lsorbian";
  var dsb = "lsorbian";
  var dua = "duala";
  var duala = "duala";
  var dut = "dutch";
  var dutch = "dutch";
  var du\u00E1l\u00E1 = "duala";
  var dyo = "jolafonyi";
  var dz = "dzongkha";
  var dz_dz = "dzongkha";
  var dzo = "dzongkha";
  var dzongkha = "dzongkha";
  var ebu = "embu";
  var ee = "ewe";
  var ee_ee = "ewe";
  var eesti = "estonian";
  var ekegusii = "gusii";
  var el = "greek";
  var el_el = "greek";
  var el_polyton = "greek";
  var emb = "embu";
  var embu = "embu";
  var en = "english";
  var en_au = "australian";
  var en_ca = "canadian";
  var en_en = "english";
  var en_gb = "british";
  var en_nz = "newzealand";
  var en_us = "american";
  var eng = "english";
  var english = "english";
  var english_au = "australian";
  var english_australia = "australian";
  var english_ca = "canadian";
  var english_canada = "canadian";
  var english_gb = "british";
  var english_newzealand = "newzealand";
  var english_nz = "newzealand";
  var english_unitedkingdom = "british";
  var english_unitedstates = "american";
  var english_us = "american";
  var eo = "esperanto";
  var eo_eo = "esperanto";
  var es = "spanish";
  var es_es = "spanish";
  var es_mx = "mexican";
  var esp = "esperanto";
  var espa\u00F1ol = "spanish";
  var esperanto = "esperanto";
  var est = "estonian";
  var estonian = "estonian";
  var et = "estonian";
  var et_et = "estonian";
  var eu = "basque";
  var eu_eu = "basque";
  var euskara = "basque";
  var ewe = "ewe";
  var ewo = "ewondo";
  var ewondo = "ewondo";
  var e\u028Begbe = "ewe";
  var fa = "persian";
  var fa_fa = "persian";
  var far = "faroese";
  var faroese = "faroese";
  var ff = "fulah";
  var ff_ff = "fulah";
  var fi = "finnish";
  var fi_fi = "finnish";
  var fil = "filipino";
  var filipino = "filipino";
  var fin = "finnish";
  var finnish = "finnish";
  var fo = "faroese";
  var fo_fo = "faroese";
  var fr = "french";
  var fr_be = "french";
  var fr_ca = "french";
  var fr_ch = "french";
  var fr_fr = "french";
  var fr_lu = "french";
  var fran\u00E7ais = "french";
  var fre = "french";
  var french = "french";
  var french_be = "french";
  var french_belgium = "french";
  var french_ca = "french";
  var french_canada = "french";
  var french_ch = "french";
  var french_lu = "french";
  var french_luxembourg = "french";
  var french_switzerland = "french";
  var fri = "friulian";
  var friulian = "friulian";
  var ful = "fulah";
  var fulah = "fulah";
  var fur = "friulian";
  var furlan = "friulian";
  var fy = "westernfrisian";
  var fy_fy = "westernfrisian";
  var f\u00F8royskt = "faroese";
  var ga = "irish";
  var ga_ga = "irish";
  var gaeilge = "irish";
  var gaelg = "manx";
  var gaelic = "scottishgaelic";
  var gal = "galician";
  var galego = "galician";
  var galician = "galician";
  var gan = "ganda";
  var ganda = "ganda";
  var gd = "scottishgaelic";
  var gd_gd = "scottishgaelic";
  var geo = "georgian";
  var georgian = "georgian";
  var ger = "german";
  var german = "german";
  var german_at = "austrian";
  var german_austria = "austrian";
  var german_ch = "nswissgerman";
  var german_switzerland = "nswissgerman";
  var gikuyu = "kikuyu";
  var gl = "galician";
  var gl_gl = "galician";
  var grc = "greek";
  var gre = "greek";
  var greek = "greek";
  var gsw = "swissgerman";
  var gu = "gujarati";
  var gu_gu = "gujarati";
  var guj = "gujarati";
  var gujarati = "gujarati";
  var gus = "gusii";
  var gusii = "gusii";
  var guz = "gusii";
  var gv = "manx";
  var gv_gv = "manx";
  var g\u00E0idhlig = "scottishgaelic";
  var ha = "hausa";
  var ha_gh = "hausa-ghana";
  var ha_ha = "hausa";
  var ha_ne = "hausa-niger";
  var hausa = "hausa";
  var hausa_gh = "hausa-ghana";
  var hausa_ghana = "hausa-ghana";
  var hausa_ne = "hausa-niger";
  var hausa_niger = "hausa-niger";
  var haw = "hawaiian";
  var hawaiian = "hawaiian";
  var he = "hebrew";
  var he_he = "hebrew";
  var heb = "hebrew";
  var hebrew = "hebrew";
  var hi = "hindi";
  var hi_hi = "hindi";
  var hibena = "bena";
  var hin = "hindi";
  var hindi = "hindi";
  var hornjoserb\u0161\u0107ina = "usorbian";
  var hr = "croatian";
  var hr_hr = "croatian";
  var hrvatski = "croatian";
  var hsb = "usorbian";
  var hu = "hungarian";
  var hu_hu = "hungarian";
  var hun = "hungarian";
  var hungarian = "hungarian";
  var hy = "armenian";
  var hy_hy = "armenian";
  var ia = "interlingua";
  var ia_ia = "interlingua";
  var ice = "icelandic";
  var icelandic = "icelandic";
  var ichibemba = "bemba";
  var id = "indonesian";
  var id_id = "indonesian";
  var ig = "igbo";
  var ig_ig = "igbo";
  var igb = "igbo";
  var igbo = "igbo";
  var ii = "sichuanyi";
  var ii_ii = "sichuanyi";
  var ikirundi = "rundi";
  var ina = "inarisami";
  var inari_sami = "inarisami";
  var inarisami = "inarisami";
  var ind = "indonesian";
  var indonesia = "indonesian";
  var indonesian = "indonesian";
  var int = "interlingua";
  var interlingua = "interlingua";
  var iri = "irish";
  var irish = "irish";
  var is = "icelandic";
  var is_is = "icelandic";
  var ishisangu = "sangu";
  var isindebele = "northndebele";
  var isizulu = "zulu";
  var it = "italian";
  var it_it = "italian";
  var ita = "italian";
  var italian = "italian";
  var italiano = "italian";
  var ja = "japanese";
  var ja_ja = "japanese";
  var jap = "japanese";
  var japanese = "japanese";
  var jgo = "ngomba";
  var jmc = "machame";
  var jol = "jolafonyi";
  var jola_fonyi = "jolafonyi";
  var jolafonyi = "jolafonyi";
  var joola = "jolafonyi";
  var ka = "georgian";
  var ka_ka = "georgian";
  var kab = "kabyle";
  var kabuverdianu = "kabuverdianu";
  var kabyle = "kabyle";
  var kak = "kako";
  var kako = "kako";
  var kak\u0254 = "kako";
  var kalaallisut = "kalaallisut";
  var kalenjin = "kalenjin";
  var kam = "kamba";
  var kamba = "kamba";
  var kan = "kannada";
  var kannada = "kannada";
  var kas = "kashmiri";
  var kashmiri = "kashmiri";
  var kaz = "kazakh";
  var kazakh = "kazakh";
  var kde = "makonde";
  var kea = "kabuverdianu";
  var kernewek = "cornish";
  var khm = "khmer";
  var khmer = "khmer";
  var khoekhoegowab = "nama";
  var khq = "koyrachiini";
  var ki = "kikuyu";
  var ki_ki = "kikuyu";
  var kihorombo = "rombo";
  var kik = "kikuyu";
  var kikamba = "kamba";
  var kikuyu = "kikuyu";
  var kimachame = "machame";
  var kin = "kinyarwanda";
  var kinyarwanda = "kinyarwanda";
  var kipare = "asu";
  var kiruwa = "rwa";
  var kisampur = "samburu";
  var kishambaa = "shambala";
  var kiswahili = "swahili";
  var kitaita = "taita";
  var kiteso = "teso";
  var kk = "kazakh";
  var kk_kk = "kazakh";
  var kkj = "kako";
  var kl = "kalaallisut";
  var kl_kl = "kalaallisut";
  var kln = "kalenjin";
  var km = "khmer";
  var km_km = "khmer";
  var kmr = "kurmanji";
  var kmr_arab = "kurmanji";
  var kmr_latn = "kurmanji";
  var kn = "kannada";
  var kn_kn = "kannada";
  var ko = "korean-han";
  var ko_ko = "korean-han";
  var kok = "konkani";
  var kon = "konkani";
  var konkani = "konkani";
  var kor = "korean-han";
  var korean = "korean-han";
  var korean_han = "korean-han";
  var korean_hani = "korean-han";
  var koyra_chiini = "koyrachiini";
  var koyra_ciini = "koyrachiini";
  var koyraboro_senni = "koyraborosenni";
  var koyraborosenni = "koyraborosenni";
  var koyrachiini = "koyrachiini";
  var kreol_morisien = "morisyen";
  var ks = "kashmiri";
  var ks_ks = "kashmiri";
  var ksb = "shambala";
  var ksf = "bafia";
  var ksh = "colognian";
  var kur = "kurmanji";
  var kurd\u00EEy_nawend\u00EE = "sorani";
  var kurmanc\u00EE = "kurmanji";
  var kurmanji = "kurmanji";
  var kw = "cornish";
  var kw_kw = "cornish";
  var kwa = "kwasio";
  var kwasio = "kwasio";
  var ky = "kyrgyz";
  var ky_ky = "kyrgyz";
  var kyivunjo = "vunjo";
  var kyr = "kyrgyz";
  var kyrgyz = "kyrgyz";
  var k\u00F6lsch = "colognian";
  var k\u0129embu = "embu";
  var k\u0129m\u0129r\u0169 = "meru";
  var k\u0268laangi = "langi";
  var la = "latin";
  var la_la = "latin";
  var lag = "langi";
  var lak = "lakota";
  var lakota = "lakota";
  var lak\u021F\u00F3l\u02BCiyapi = "lakota";
  var lan = "langi";
  var langi = "langi";
  var lao = "lao";
  var latin = "latin";
  var latvian = "latvian";
  var latvie\u0161u = "latvian";
  var lb = "luxembourgish";
  var lb_lb = "luxembourgish";
  var lea_fakatonga = "tongan";
  var lg = "ganda";
  var lg_lg = "ganda";
  var lietuvi\u0173 = "lithuanian";
  var lin = "lingala";
  var lingala = "lingala";
  var ling\u00E1la = "lingala";
  var lit = "lithuanian";
  var lithuanian = "lithuanian";
  var lkt = "lakota";
  var ln = "lingala";
  var ln_ln = "lingala";
  var lo = "lao";
  var lo_lo = "lao";
  var lower_sorbian = "lsorbian";
  var lowersorbian = "lsorbian";
  var lrc = "northernluri";
  var lso = "lsorbian";
  var lsorbian = "lsorbian";
  var lt = "lithuanian";
  var lt_lt = "lithuanian";
  var lu = "lubakatanga";
  var lu_lu = "lubakatanga";
  var lub = "lubakatanga";
  var luba_katanga = "lubakatanga";
  var lubakatanga = "lubakatanga";
  var luganda = "ganda";
  var luluhia = "luyia";
  var luo = "luo";
  var lux = "luxembourgish";
  var luxembourgish = "luxembourgish";
  var luy = "luyia";
  var luyia = "luyia";
  var lv = "latvian";
  var lv_lv = "latvian";
  var l\u00EBtzebuergesch = "luxembourgish";
  var maa = "masai";
  var macedonian = "macedonian";
  var machame = "machame";
  var magyar = "hungarian";
  var makhuwa_meetto = "makhuwameetto";
  var makhuwameetto = "makhuwameetto";
  var makonde = "makonde";
  var makua = "makhuwameetto";
  var malagasy = "malagasy";
  var malay = "malay";
  var malay_bn = "malay-brunei";
  var malay_brunei = "malay-brunei";
  var malay_sg = "malay-singapore";
  var malay_singapore = "malay-singapore";
  var malayalam = "malayalam";
  var maltese = "maltese";
  var malti = "maltese";
  var man = "manx";
  var manx = "manx";
  var mar = "marathi";
  var marathi = "marathi";
  var mas = "masai";
  var masai = "masai";
  var maz = "mazanderani";
  var mazanderani = "mazanderani";
  var mer = "meru";
  var meru = "meru";
  var met = "meta";
  var meta = "meta";
  var meta\u02BC = "meta";
  var mex = "mexican";
  var mexican = "mexican";
  var mfe = "morisyen";
  var mg = "malagasy";
  var mg_mg = "malagasy";
  var mgh = "makhuwameetto";
  var mgo = "meta";
  var mk = "macedonian";
  var mk_mk = "macedonian";
  var ml = "malayalam";
  var ml_ml = "malayalam";
  var mn = "mongolian";
  var mn_mn = "mongolian";
  var mon = "mongolian";
  var mongolian = "mongolian";
  var mor = "morisyen";
  var morisyen = "morisyen";
  var mr = "marathi";
  var mr_mr = "marathi";
  var ms = "malay";
  var ms_bn = "malay-brunei";
  var ms_ms = "malay";
  var ms_sg = "malay-singapore";
  var mt = "maltese";
  var mt_mt = "maltese";
  var mua = "mundang";
  var mun = "mundang";
  var mundang = "mundang";
  var munda\u014B = "mundang";
  var my = "burmese";
  var my_my = "burmese";
  var mzn = "mazanderani";
  var nam = "nama";
  var nama = "nama";
  var naq = "nama";
  var nb = "norwegianbokmal";
  var nb_nb = "norwegianbokmal";
  var nd = "northndebele";
  var nd_nd = "northndebele";
  var nda\uA78Ca = "ngomba";
  var ne = "nepali";
  var ne_ne = "nepali";
  var nederlands = "dutch";
  var nep = "nepali";
  var nepali = "nepali";
  var new2 = "newzealand";
  var newzealand = "newzealand";
  var ngi = "ngiemboon";
  var ngiemboon = "ngiemboon";
  var ngo = "ngomba";
  var ngomba = "ngomba";
  var nl = "dutch";
  var nl_nl = "dutch";
  var nmg = "kwasio";
  var nn = "nynorsk";
  var nn_nn = "nynorsk";
  var nnh = "ngiemboon";
  var no = "norsk";
  var no_no = "norsk";
  var norsk = "norsk";
  var norsk_bokm\u00E5l = "norwegianbokmal";
  var north_ndebele = "northndebele";
  var northern_kurdish = "kurmanji";
  var northern_luri = "northernluri";
  var northern_sami = "samin";
  var northernkurdish = "kurmanji";
  var northernkurdish_arabic = "kurmanji";
  var northernluri = "northernluri";
  var northernsami = "samin";
  var northndebele = "northndebele";
  var norwegian = "norsk";
  var norwegian_bokm\u00E5l = "norwegianbokmal";
  var norwegian_nynorsk = "nynorsk";
  var norwegianbokmal = "norwegianbokmal";
  var norwegiannynorsk = "nynorsk";
  var nsw = "nswissgerman";
  var nswissgerman = "nswissgerman";
  var nuasue = "yangben";
  var nue = "nuer";
  var nuer = "nuer";
  var nus = "nuer";
  var nya = "nyankole";
  var nyankole = "nyankole";
  var nyn = "nyankole";
  var nynorsk = "nynorsk";
  var oc = "occitan";
  var oc_oc = "occitan";
  var occ = "occitan";
  var occitan = "occitan";
  var odia = "oriya";
  var olusoga = "soga";
  var om = "oromo";
  var om_om = "oromo";
  var or = "oriya";
  var or_or = "oriya";
  var ori = "oriya";
  var oriya = "oriya";
  var oro = "oromo";
  var oromo = "oromo";
  var oromoo = "oromo";
  var os = "ossetic";
  var os_os = "ossetic";
  var oss = "ossetic";
  var ossetic = "ossetic";
  var o_zbek = "uzbek";
  var pa = "punjabi";
  var pa_arab = "punjabi-arabic";
  var pa_guru = "punjabi-gurmukhi";
  var pa_pa = "punjabi";
  var pas = "pashto";
  var pashto = "pashto";
  var per = "persian";
  var persian = "persian";
  var pie = "piedmontese";
  var piedmontese = "piedmontese";
  var pl = "polish";
  var pl_pl = "polish";
  var pms = "piedmontese";
  var pol = "polish";
  var polish = "polish";
  var polski = "polish";
  var polytonic_greek = "greek";
  var por = "portuguese";
  var portuguese = "portuguese";
  var portuguese_br = "brazilian";
  var portuguese_brazil = "brazilian";
  var portuguese_portugal = "portuguese";
  var portuguese_pt = "portuguese";
  var portugu\u00EAs = "portuguese";
  var ps = "pashto";
  var ps_ps = "pashto";
  var pt = "portuguese";
  var pt_br = "brazilian";
  var pt_pt = "portuguese";
  var pulaar = "fulah";
  var punjabi = "punjabi";
  var punjabi_arab = "punjabi-arabic";
  var punjabi_arabic = "punjabi-arabic";
  var punjabi_gurmukhi = "punjabi-gurmukhi";
  var punjabi_guru = "punjabi-gurmukhi";
  var qu = "quechua";
  var qu_qu = "quechua";
  var que = "quechua";
  var quechua = "quechua";
  var rikpa = "bafia";
  var rm = "romansh";
  var rm_rm = "romansh";
  var rn = "rundi";
  var rn_rn = "rundi";
  var ro = "romanian";
  var ro_ro = "romanian";
  var rof = "rombo";
  var romanian = "romanian";
  var romansh = "romansh";
  var rombo = "rombo";
  var rom\u00E2n\u0103 = "romanian";
  var ru = "russian";
  var ru_ru = "russian";
  var rukiga = "chiga";
  var rumantsch = "romansh";
  var run = "rundi";
  var runasimi = "quechua";
  var rundi = "rundi";
  var runyankore = "nyankole";
  var rus = "russian";
  var russian = "russian";
  var rw = "kinyarwanda";
  var rw_rw = "kinyarwanda";
  var rwa = "rwa";
  var rwk = "rwa";
  var sa = "sanskrit";
  var sa_beng = "sanskrit";
  var sa_deva = "sanskrit";
  var sa_gujr = "sanskrit";
  var sa_knda = "sanskrit";
  var sa_mlym = "sanskrit";
  var sa_sa = "sanskrit";
  var sa_telu = "sanskrit";
  var sah = "sakha";
  var sak = "sakha";
  var sakha = "sakha";
  var samburu = "samburu";
  var sami = "samin";
  var samin = "samin";
  var sango = "sango";
  var sangu = "sangu";
  var sanskrit = "sanskrit";
  var saq = "samburu";
  var sbp = "sangu";
  var schwiizert\u00FC\u00FCtsch = "swissgerman";
  var sco = "scottishgaelic";
  var scottish_gaelic = "scottishgaelic";
  var scottishgaelic = "scottishgaelic";
  var se = "samin";
  var se_se = "samin";
  var seh = "sena";
  var sen = "sena";
  var sena = "sena";
  var ser = "serbian";
  var serbian = "serbian";
  var serbian_cyrillic = "serbian";
  var serbian_cyrillic_bosniaherzegovina = "serbian";
  var serbian_cyrillic_kosovo = "serbian";
  var serbian_cyrillic_montenegro = "serbian";
  var serbian_cyrl = "serbian";
  var serbian_cyrl_ba = "serbian";
  var serbian_cyrl_me = "serbian";
  var serbian_cyrl_xk = "serbian";
  var serbian_latin = "serbian";
  var serbian_latin_bosniaherzegovina = "serbian";
  var serbian_latin_kosovo = "serbian";
  var serbian_latin_montenegro = "serbian";
  var serbian_latn = "serbian";
  var serbian_latn_ba = "serbian";
  var serbian_latn_me = "serbian";
  var serbian_latn_xk = "serbian";
  var ses = "koyraborosenni";
  var sg = "sango";
  var sg_sg = "sango";
  var sha = "shambala";
  var shambala = "shambala";
  var shi = "tachelhit";
  var shi_latn = "tachelhit-latin";
  var shi_tfng = "tachelhit-tifinagh";
  var sho = "shona";
  var shona = "shona";
  var shqip = "albanian";
  var shw\u00F3\u014B\u00F2_ngiemb\u0254\u0254n = "ngiemboon";
  var si = "sinhala";
  var si_si = "sinhala";
  var sic = "sichuanyi";
  var sichuan_yi = "sichuanyi";
  var sichuanyi = "sichuanyi";
  var sin = "sinhala";
  var sinhala = "sinhala";
  var sk = "slovak";
  var sk_sk = "slovak";
  var sl = "slovene";
  var sl_sl = "slovene";
  var slovak = "slovak";
  var slovene = "slovene";
  var slovenian = "slovene";
  var sloven\u010Dina = "slovak";
  var sloven\u0161\u010Dina = "slovene";
  var smn = "inarisami";
  var sn = "shona";
  var sn_sn = "shona";
  var so = "somali";
  var so_so = "somali";
  var sog = "soga";
  var soga = "soga";
  var som = "somali";
  var somali = "somali";
  var soomaali = "somali";
  var sor = "sorani";
  var sorani = "sorani";
  var spa = "spanish";
  var spanish = "spanish";
  var spanish_mexico = "mexican";
  var spanish_mx = "mexican";
  var sq = "albanian";
  var sq_sq = "albanian";
  var sr = "serbian";
  var sr_cyrl = "serbian";
  var sr_cyrl_ba = "serbian";
  var sr_cyrl_me = "serbian";
  var sr_cyrl_xk = "serbian";
  var sr_latn = "serbian";
  var sr_latn_ba = "serbian";
  var sr_latn_me = "serbian";
  var sr_latn_xk = "serbian";
  var sr_sr = "serbian";
  var srpski = "serbian";
  var sta = "standardmoroccantamazight";
  var standard_moroccan_tamazight = "standardmoroccantamazight";
  var standardmoroccantamazight = "standardmoroccantamazight";
  var suomi = "finnish";
  var sv = "swedish";
  var sv_sv = "swedish";
  var svenska = "swedish";
  var sw = "swahili";
  var sw_sw = "swahili";
  var swa = "swahili";
  var swahili = "swahili";
  var swe = "swedish";
  var swedish = "swedish";
  var swi = "swissgerman";
  var swiss_german = "swissgerman";
  var swissgerman = "swissgerman";
  var syr = "syriac";
  var syriac = "syriac";
  var s\u00E4ng\u00F6 = "sango";
  var ta = "tamil";
  var ta_ta = "tamil";
  var tachelhit = "tachelhit";
  var tachelhit_latin = "tachelhit-latin";
  var tachelhit_latn = "tachelhit-latin";
  var tachelhit_tfng = "tachelhit-tifinagh";
  var tachelhit_tifinagh = "tachelhit-tifinagh";
  var tai = "taita";
  var taita = "taita";
  var tam = "tamil";
  var tamazi\u0263t_n_la\u1E6Dla\u1E63 = "centralatlastamazight";
  var tamil = "tamil";
  var taqbaylit = "kabyle";
  var tas = "tasawaq";
  var tasawaq = "tasawaq";
  var tasawaq_senni = "tasawaq";
  var tashel\u1E25iyt = "tachelhit-latin";
  var te = "telugu";
  var te_te = "telugu";
  var tel = "telugu";
  var telugu = "telugu";
  var teo = "teso";
  var tes = "teso";
  var teso = "teso";
  var th = "thai";
  var th_th = "thai";
  var tha = "thai";
  var thai = "thai";
  var thok_nath = "nuer";
  var ti = "tigrinya";
  var ti_ti = "tigrinya";
  var tib = "tibetan";
  var tibetan = "tibetan";
  var tig = "tigrinya";
  var tigrinya = "tigrinya";
  var ti\u1EBFng_vi\u1EC7t = "vietnamese";
  var tk = "turkmen";
  var tk_tk = "turkmen";
  var to = "tongan";
  var to_to = "tongan";
  var ton = "tongan";
  var tongan = "tongan";
  var tr = "turkish";
  var tr_tr = "turkish";
  var tshiluba = "lubakatanga";
  var turkish = "turkish";
  var turkmen = "turkmen";
  var twq = "tasawaq";
  var tzm = "centralatlastamazight";
  var t\u00FCrk\u00E7e = "turkish";
  var ug = "uyghur";
  var ug_ug = "uyghur";
  var uk = "ukrainian";
  var uk_uk = "ukrainian";
  var ukenglish = "british";
  var ukr = "ukrainian";
  var ukrainian = "ukrainian";
  var upper_sorbian = "usorbian";
  var uppersorbian = "usorbian";
  var ur = "urdu";
  var ur_ur = "urdu";
  var urd = "urdu";
  var urdu = "urdu";
  var usenglish = "american";
  var uso = "usorbian";
  var usorbian = "usorbian";
  var uyg = "uyghur";
  var uyghur = "uyghur";
  var uz = "uzbek";
  var uz_arab = "uzbek-arabic";
  var uz_cyrl = "uzbek-cyrillic";
  var uz_latn = "uzbek-latin";
  var uz_uz = "uzbek";
  var uzbek = "uzbek";
  var uzbek_arab = "uzbek-arabic";
  var uzbek_arabic = "uzbek-arabic";
  var uzbek_cyrillic = "uzbek-cyrillic";
  var uzbek_cyrl = "uzbek-cyrillic";
  var uzbek_latin = "uzbek-latin";
  var uzbek_latn = "uzbek-latin";
  var vai = "vai";
  var vai_latin = "vai-latin";
  var vai_latn = "vai-latin";
  var vai_vai = "vai-vai";
  var vai_vaii = "vai-vai";
  var vi = "vietnamese";
  var vi_vi = "vietnamese";
  var vie = "vietnamese";
  var vietnam = "vietnamese";
  var vietnamese = "vietnamese";
  var vun = "vunjo";
  var vunjo = "vunjo";
  var wae = "walser";
  var wal = "walser";
  var walser = "walser";
  var wel = "welsh";
  var welsh = "welsh";
  var wes = "westernfrisian";
  var west_frysk = "westernfrisian";
  var western_frisian = "westernfrisian";
  var westernfrisian = "westernfrisian";
  var xog = "soga";
  var yan = "yangben";
  var yangben = "yangben";
  var yav = "yangben";
  var yi = "yiddish";
  var yi_yi = "yiddish";
  var yid = "yiddish";
  var yiddish = "yiddish";
  var yo = "yoruba";
  var yo_yo = "yoruba";
  var yor = "yoruba";
  var yoruba = "yoruba";
  var yue = "cantonese";
  var zar = "zarma";
  var zarma = "zarma";
  var zarmaciine = "zarma";
  var zgh = "standardmoroccantamazight";
  var zh = "chinese";
  var zh_hans = "chinese-simplified";
  var zh_hans_hk = "chinese-simplified-hongkongsarchina";
  var zh_hans_mo = "chinese-simplified-macausarchina";
  var zh_hans_sg = "chinese-simplified-singapore";
  var zh_hant = "chinese-traditional";
  var zh_hant_hk = "chinese-traditional-hongkongsarchina";
  var zh_hant_mo = "chinese-traditional-macausarchina";
  var zh_zh = "chinese";
  var zu = "zulu";
  var zu_zu = "zulu";
  var zul = "zulu";
  var zulu = "zulu";
  var \u00E8d\u00E8_yor\u00F9b\u00E1 = "yoruba";
  var \u00EDslenska = "icelandic";
  var \u010De\u0161tina = "czech";
  var \u0253\u00E0s\u00E0a = "basaa";
  var \u02BB\u014Dlelo_hawai\u02BBi = "hawaiian";
  var \u03B1\u03C1\u03C7\u03B1\u03AF\u03B1_\u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC = "greek";
  var \u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC = "greek";
  var \u0430\u0437\u04D9\u0440\u0431\u0430\u0458\u04B9\u0430\u043D = "azerbaijani-cyrillic";
  var \u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F = "belarusian";
  var \u0431\u043E\u0441\u0430\u043D\u0441\u043A\u0438 = "bosnian-cyrillic";
  var \u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 = "bulgarian";
  var \u0438\u0440\u043E\u043D = "ossetic";
  var \u043A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 = "kyrgyz";
  var \u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 = "macedonian";
  var \u043C\u043E\u043D\u0433\u043E\u043B = "mongolian";
  var \u043D\u043E\u0445\u0447\u0438\u0439\u043D = "chechen";
  var \u0440\u0443\u0441\u0441\u043A\u0438\u0439 = "russian";
  var \u0441\u0430\u0445\u0430_\u0442\u044B\u043B\u0430 = "sakha";
  var \u0441\u043B\u043E\u0432\u0463\u0301\u043D\u044C\u0441\u043A\u044A_\u0469\uA641\uA651\u0301\u043A\u044A = "churchslavic-oldcyrillic";
  var \u0441\u0440\u043F\u0441\u043A\u0438 = "serbian";
  var \u0443\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 = "ukrainian";
  var \u0446\u0440\u044C\u043A\u044A\u0432\u044C\u043D\u043E\u0441\u043B\u043E\u0432\u0463\u043D\u044C\u0441\u043A\u044A_\u0469\u0437\u044B\u043A\u044A = "churchslavic";
  var \u045E\u0437\u0431\u0435\u043A\u0447\u0430 = "uzbek-cyrillic";
  var \u049B\u0430\u0437\u0430\u049B_\u0442\u0456\u043B\u0456 = "kazakh";
  var \u0570\u0561\u0575\u0565\u0580\u0565\u0576 = "armenian";
  var \u05D9\u05D9\u05B4\u05D3\u05D9\u05E9 = "yiddish";
  var \u05E2\u05D1\u05E8\u05D9\u05EA = "hebrew";
  var \u0626\u06C7\u064A\u063A\u06C7\u0631\u0686\u06D5 = "uyghur";
  var \u0627\u0631\u062F\u0648 = "urdu";
  var \u0627\u0644\u0639\u0631\u0628\u064A\u0629 = "arabic";
  var \u0627\u0648\u0632\u0628\u06CC\u06A9 = "uzbek-arabic";
  var \u0641\u0627\u0631\u0633\u06CC = "persian";
  var \u0644\u06CA\u0631\u06CC_\u0634\u0648\u0645\u0627\u0644\u06CC = "northernluri";
  var \u0645\u0627\u0632\u0631\u0648\u0646\u06CC = "mazanderani";
  var \u067E\u0646\u062C\u0627\u0628\u06CC = "punjabi-arabic";
  var \u067E\u069A\u062A\u0648 = "pashto";
  var \u06A9\u0648\u0631\u062F\u06CC\u06CC_\u0646\u0627\u0648\u06D5\u0646\u062F\u06CC = "sorani";
  var \u06A9\u0648\u0631\u0645\u0627\u0646\u062C\u06CC = "kurmanji";
  var \u06A9\u0672\u0634\u064F\u0631 = "kashmiri";
  var \u0720\u072B\u0722\u0710_\u0723\u0718\u072A\u071D\u071D\u0710 = "syriac";
  var \u0915\u094B\u0902\u0915\u0923\u0940 = "konkani";
  var \u0928\u0947\u092A\u093E\u0932\u0940 = "nepali";
  var \u092C\u0921\u093C\u094B = "bodo";
  var \u092E\u0930\u093E\u0920\u0940 = "marathi";
  var \u0938\u0902\u0938\u094D\u0915\u0943\u0924 = "sanskrit";
  var \u0939\u093F\u0928\u094D\u0926\u0940 = "hindi";
  var \u0985\u09B8\u09AE\u09C0\u09AF\u09BC\u09BE = "assamese";
  var \u09AC\u09BE\u0982\u09B2\u09BE = "bengali";
  var \u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 = "punjabi";
  var \u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 = "gujarati";
  var \u0B13\u0B21\u0B3C\u0B3F\u0B06 = "oriya";
  var \u0BA4\u0BAE\u0BBF\u0BB4\u0BCD = "tamil";
  var \u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 = "telugu";
  var \u0C95\u0CA8\u0CCD\u0CA8\u0CA1 = "kannada";
  var \u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02 = "malayalam";
  var \u0DC3\u0DD2\u0D82\u0DC4\u0DBD = "sinhala";
  var \u0E44\u0E17\u0E22 = "thai";
  var \u0EA5\u0EB2\u0EA7 = "lao";
  var \u0F56\u0F7C\u0F51_\u0F66\u0F90\u0F51_ = "tibetan";
  var \u0F62\u0FAB\u0F7C\u0F44_\u0F41 = "dzongkha";
  var \u1019\u103C\u1014\u103A\u1019\u102C = "burmese";
  var \u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 = "georgian";
  var \u1275\u130D\u122D\u129B = "tigrinya";
  var \u12A0\u121B\u122D\u129B = "amharic";
  var \u1781\u17D2\u1798\u17C2\u179A = "khmer";
  var \u1F10\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC = "greek";
  var \u2C44\u2C3E\u2C41\u2C32\u2C51\u2C40\u2C50\u2C44\u2C3D\u2C4F_\u2C57\u2C38\u2C4F\u2C3A\u2C3D\u2C4F = "churchslavic-glagolitic";
  var \u2CA7\u2C99\u2C9B\u0304\u2CA7\u2CA3\u2C99\u0304\u2C9B\u0304\u2C95\u2C8F\u2C99\u2C89 = "coptic";
  var \u2D5C\u2D30\u2D4E\u2D30\u2D63\u2D49\u2D56\u2D5C = "standardmoroccantamazight";
  var \u2D5C\u2D30\u2D5B\u2D4D\u2D43\u2D49\u2D5C = "tachelhit";
  var \u4E2D\u6587 = "chinese";
  var \u65E5\u672C\u8A9E = "japanese";
  var \u7CB5\u8A9E = "cantonese";
  var \u7CB5\u8A9E_\u7CB5\u8A9E = "cantonese";
  var \uA188\uA320\uA259 = "sichuanyi";
  var \uA559\uA524 = "vai";
  var \uABB3\uAB83\uAB79 = "cherokee";
  var \uD55C\uAD6D\uC5B4 = "korean-han";
  var langmap_default = {
    af,
    "af-af": af_af,
    afr,
    afrikaans,
    agh,
    aghem,
    agq,
    ak,
    "ak-ak": ak_ak,
    aka,
    akan,
    alb,
    albanian,
    am,
    "am-am": am_am,
    ame,
    american,
    amh,
    amharic,
    anar\u00E2\u0161kiel\u00E2,
    "ancient greek": ancient_greek,
    ar,
    "ar-ar": ar_ar,
    "ar-dz": ar_dz,
    "ar-ma": ar_ma,
    "ar-sy": ar_sy,
    arabic,
    "arabic-algeria": arabic_algeria,
    "arabic-dz": arabic_dz,
    "arabic-ma": arabic_ma,
    "arabic-morocco": arabic_morocco,
    "arabic-sy": arabic_sy,
    "arabic-syria": arabic_syria,
    arm,
    armenian,
    as,
    "as-as": as_as,
    asa,
    ass,
    assamese,
    ast,
    asturian,
    asturianu,
    asu,
    australian,
    austrian,
    az,
    "az-az": az_az,
    "az-cyrl": az_cyrl,
    "az-latn": az_latn,
    azerbaijani,
    "azerbaijani-cyrillic": azerbaijani_cyrillic,
    "azerbaijani-cyrl": azerbaijani_cyrl,
    "azerbaijani-latin": azerbaijani_latin,
    "azerbaijani-latn": azerbaijani_latn,
    az\u0259rbaycan,
    baf,
    bafia,
    "bahasa melayu": bahasa_melayu,
    bam,
    bamanakan,
    bambara,
    bangla,
    bas,
    basaa,
    basque,
    be,
    "be-be": be_be,
    bel,
    belarusian,
    bem,
    bemba,
    bena,
    bengali,
    bez,
    bg,
    "bg-bg": bg_bg,
    bm,
    "bm-bm": bm_bm,
    bn,
    "bn-bn": bn_bn,
    bo,
    "bo-bo": bo_bo,
    bod,
    bodo,
    bosanski,
    bosnian,
    "bosnian-cyrillic": bosnian_cyrillic,
    "bosnian-cyrl": bosnian_cyrl,
    "bosnian-latin": bosnian_latin,
    "bosnian-latn": bosnian_latn,
    br,
    "br-br": br_br,
    bra,
    brazilian,
    bre,
    breton,
    brezhoneg,
    bri,
    british,
    brx,
    bs,
    "bs-bs": bs_bs,
    "bs-cyrl": bs_cyrl,
    "bs-latn": bs_latn,
    bul,
    bulgarian,
    bur,
    burmese,
    ca,
    "ca-ca": ca_ca,
    canadian,
    cantonese,
    cat,
    catalan,
    catal\u00E0,
    ce,
    "ce-ce": ce_ce,
    cen,
    "central atlas tamazight": central_atlas_tamazight,
    "central kurdish": central_kurdish,
    centralatlastamazight,
    centralkurdish,
    "centralkurdish-latin": centralkurdish_latin,
    cgg,
    chechen,
    cherokee,
    chiga,
    chimakonde,
    chinese,
    "chinese-hans": chinese_hans,
    "chinese-hans-hk": chinese_hans_hk,
    "chinese-hans-mo": chinese_hans_mo,
    "chinese-hans-sg": chinese_hans_sg,
    "chinese-hant": chinese_hant,
    "chinese-hant-hk": chinese_hant_hk,
    "chinese-hant-mo": chinese_hant_mo,
    "chinese-simplified": chinese_simplified,
    "chinese-simplified-hongkongsarchina": chinese_simplified_hongkongsarchina,
    "chinese-simplified-macausarchina": chinese_simplified_macausarchina,
    "chinese-simplified-singapore": chinese_simplified_singapore,
    "chinese-traditional": chinese_traditional,
    "chinese-traditional-hongkongsarchina": chinese_traditional_hongkongsarchina,
    "chinese-traditional-macausarchina": chinese_traditional_macausarchina,
    chishona,
    chr,
    "church slavic": church_slavic,
    churchslavic,
    "churchslavic-glagolitic": churchslavic_glagolitic,
    "churchslavic-oldcyrillic": churchslavic_oldcyrillic,
    churchslavonic,
    ckb,
    "ckb-arab": ckb_arab,
    "ckb-latn": ckb_latn,
    col,
    colognian,
    cop,
    coptic,
    cor,
    cornish,
    cro,
    croatian,
    cs,
    "cs-cs": cs_cs,
    cu,
    "cu-cu": cu_cu,
    "cu-cyrs": cu_cyrs,
    "cu-glag": cu_glag,
    cy,
    "cy-cy": cy_cy,
    cymraeg,
    cze,
    czech,
    da,
    "da-da": da_da,
    dan,
    danish,
    dansk,
    dav,
    davvis\u00E1megiella,
    de,
    "de-1901": de_1901,
    "de-at": de_at,
    "de-at-1901": de_at_1901,
    "de-ch": de_ch,
    "de-ch-1901": de_ch_1901,
    "de-ch-1996": de_ch_1996,
    "de-de": de_de,
    deutsch,
    dholuo,
    dje,
    dolnoserb\u0161\u0107ina,
    dsb,
    dua,
    duala,
    dut,
    dutch,
    du\u00E1l\u00E1,
    dyo,
    dz,
    "dz-dz": dz_dz,
    dzo,
    dzongkha,
    ebu,
    ee,
    "ee-ee": ee_ee,
    eesti,
    ekegusii,
    el,
    "el-el": el_el,
    "el-polyton": el_polyton,
    emb,
    embu,
    en,
    "en-au": en_au,
    "en-ca": en_ca,
    "en-en": en_en,
    "en-gb": en_gb,
    "en-nz": en_nz,
    "en-us": en_us,
    eng,
    english,
    "english-au": english_au,
    "english-australia": english_australia,
    "english-ca": english_ca,
    "english-canada": english_canada,
    "english-gb": english_gb,
    "english-newzealand": english_newzealand,
    "english-nz": english_nz,
    "english-unitedkingdom": english_unitedkingdom,
    "english-unitedstates": english_unitedstates,
    "english-us": english_us,
    eo,
    "eo-eo": eo_eo,
    es,
    "es-es": es_es,
    "es-mx": es_mx,
    esp,
    espa\u00F1ol,
    esperanto,
    est,
    estonian,
    et,
    "et-et": et_et,
    eu,
    "eu-eu": eu_eu,
    euskara,
    ewe,
    ewo,
    ewondo,
    e\u028Begbe,
    fa,
    "fa-fa": fa_fa,
    far,
    faroese,
    ff,
    "ff-ff": ff_ff,
    fi,
    "fi-fi": fi_fi,
    fil,
    filipino,
    fin,
    finnish,
    fo,
    "fo-fo": fo_fo,
    fr,
    "fr-be": fr_be,
    "fr-ca": fr_ca,
    "fr-ch": fr_ch,
    "fr-fr": fr_fr,
    "fr-lu": fr_lu,
    fran\u00E7ais,
    fre,
    french,
    "french-be": french_be,
    "french-belgium": french_belgium,
    "french-ca": french_ca,
    "french-canada": french_canada,
    "french-ch": french_ch,
    "french-lu": french_lu,
    "french-luxembourg": french_luxembourg,
    "french-switzerland": french_switzerland,
    fri,
    friulian,
    ful,
    fulah,
    fur,
    furlan,
    fy,
    "fy-fy": fy_fy,
    f\u00F8royskt,
    ga,
    "ga-ga": ga_ga,
    gaeilge,
    gaelg,
    gaelic,
    gal,
    galego,
    galician,
    gan,
    ganda,
    gd,
    "gd-gd": gd_gd,
    geo,
    georgian,
    ger,
    german,
    "german-at": german_at,
    "german-austria": german_austria,
    "german-ch": german_ch,
    "german-switzerland": german_switzerland,
    gikuyu,
    gl,
    "gl-gl": gl_gl,
    grc,
    gre,
    greek,
    gsw,
    gu,
    "gu-gu": gu_gu,
    guj,
    gujarati,
    gus,
    gusii,
    guz,
    gv,
    "gv-gv": gv_gv,
    g\u00E0idhlig,
    ha,
    "ha-gh": ha_gh,
    "ha-ha": ha_ha,
    "ha-ne": ha_ne,
    hausa,
    "hausa-gh": hausa_gh,
    "hausa-ghana": hausa_ghana,
    "hausa-ne": hausa_ne,
    "hausa-niger": hausa_niger,
    haw,
    hawaiian,
    he,
    "he-he": he_he,
    heb,
    hebrew,
    hi,
    "hi-hi": hi_hi,
    hibena,
    hin,
    hindi,
    hornjoserb\u0161\u0107ina,
    hr,
    "hr-hr": hr_hr,
    hrvatski,
    hsb,
    hu,
    "hu-hu": hu_hu,
    hun,
    hungarian,
    hy,
    "hy-hy": hy_hy,
    ia,
    "ia-ia": ia_ia,
    ice,
    icelandic,
    ichibemba,
    id,
    "id-id": id_id,
    ig,
    "ig-ig": ig_ig,
    igb,
    igbo,
    ii,
    "ii-ii": ii_ii,
    ikirundi,
    ina,
    "inari sami": inari_sami,
    inarisami,
    ind,
    indonesia,
    indonesian,
    int,
    interlingua,
    iri,
    irish,
    is,
    "is-is": is_is,
    ishisangu,
    isindebele,
    isizulu,
    it,
    "it-it": it_it,
    ita,
    italian,
    italiano,
    ja,
    "ja-ja": ja_ja,
    jap,
    japanese,
    jgo,
    jmc,
    jol,
    "jola-fonyi": jola_fonyi,
    jolafonyi,
    joola,
    ka,
    "ka-ka": ka_ka,
    kab,
    kabuverdianu,
    kabyle,
    kak,
    kako,
    kak\u0254,
    kalaallisut,
    kalenjin,
    kam,
    kamba,
    kan,
    kannada,
    kas,
    kashmiri,
    kaz,
    kazakh,
    kde,
    kea,
    kernewek,
    khm,
    khmer,
    khoekhoegowab,
    khq,
    ki,
    "ki-ki": ki_ki,
    kihorombo,
    kik,
    kikamba,
    kikuyu,
    kimachame,
    kin,
    kinyarwanda,
    kipare,
    kiruwa,
    kisampur,
    kishambaa,
    kiswahili,
    kitaita,
    kiteso,
    kk,
    "kk-kk": kk_kk,
    kkj,
    kl,
    "kl-kl": kl_kl,
    kln,
    km,
    "km-km": km_km,
    kmr,
    "kmr-arab": kmr_arab,
    "kmr-latn": kmr_latn,
    kn,
    "kn-kn": kn_kn,
    ko,
    "ko-ko": ko_ko,
    kok,
    kon,
    konkani,
    kor,
    korean,
    "korean-han": korean_han,
    "korean-hani": korean_hani,
    "koyra chiini": koyra_chiini,
    "koyra ciini": koyra_ciini,
    "koyraboro senni": koyraboro_senni,
    koyraborosenni,
    koyrachiini,
    "kreol morisien": kreol_morisien,
    ks,
    "ks-ks": ks_ks,
    ksb,
    ksf,
    ksh,
    kur,
    "kurd\xEEy nawend\xEE": kurd\u00EEy_nawend\u00EE,
    kurmanc\u00EE,
    kurmanji,
    kw,
    "kw-kw": kw_kw,
    kwa,
    kwasio,
    ky,
    "ky-ky": ky_ky,
    kyivunjo,
    kyr,
    kyrgyz,
    k\u00F6lsch,
    k\u0129embu,
    k\u0129m\u0129r\u0169,
    k\u0268laangi,
    la,
    "la-la": la_la,
    lag,
    lak,
    lakota,
    lak\u021F\u00F3l\u02BCiyapi,
    lan,
    langi,
    lao,
    latin,
    latvian,
    latvie\u0161u,
    lb,
    "lb-lb": lb_lb,
    "lea fakatonga": lea_fakatonga,
    lg,
    "lg-lg": lg_lg,
    lietuvi\u0173,
    lin,
    lingala,
    ling\u00E1la,
    lit,
    lithuanian,
    lkt,
    ln,
    "ln-ln": ln_ln,
    lo,
    "lo-lo": lo_lo,
    "lower sorbian": lower_sorbian,
    lowersorbian,
    lrc,
    lso,
    lsorbian,
    lt,
    "lt-lt": lt_lt,
    lu,
    "lu-lu": lu_lu,
    lub,
    "luba-katanga": luba_katanga,
    lubakatanga,
    luganda,
    luluhia,
    luo,
    lux,
    luxembourgish,
    luy,
    luyia,
    lv,
    "lv-lv": lv_lv,
    l\u00EBtzebuergesch,
    maa,
    macedonian,
    machame,
    magyar,
    "makhuwa-meetto": makhuwa_meetto,
    makhuwameetto,
    makonde,
    makua,
    malagasy,
    malay,
    "malay-bn": malay_bn,
    "malay-brunei": malay_brunei,
    "malay-sg": malay_sg,
    "malay-singapore": malay_singapore,
    malayalam,
    maltese,
    malti,
    man,
    manx,
    mar,
    marathi,
    mas,
    masai,
    maz,
    mazanderani,
    mer,
    meru,
    met,
    meta,
    meta\u02BC,
    mex,
    mexican,
    mfe,
    mg,
    "mg-mg": mg_mg,
    mgh,
    mgo,
    mk,
    "mk-mk": mk_mk,
    ml,
    "ml-ml": ml_ml,
    mn,
    "mn-mn": mn_mn,
    mon,
    mongolian,
    mor,
    morisyen,
    mr,
    "mr-mr": mr_mr,
    ms,
    "ms-bn": ms_bn,
    "ms-ms": ms_ms,
    "ms-sg": ms_sg,
    mt,
    "mt-mt": mt_mt,
    mua,
    mun,
    mundang,
    munda\u014B,
    my,
    "my-my": my_my,
    mzn,
    nam,
    nama,
    naq,
    nb,
    "nb-nb": nb_nb,
    nd,
    "nd-nd": nd_nd,
    "nda\uA78Ca": nda\uA78Ca,
    ne,
    "ne-ne": ne_ne,
    nederlands,
    nep,
    nepali,
    new: new2,
    newzealand,
    ngi,
    ngiemboon,
    ngo,
    ngomba,
    nl,
    "nl-nl": nl_nl,
    nmg,
    nn,
    "nn-nn": nn_nn,
    nnh,
    no,
    "no-no": no_no,
    norsk,
    "norsk bokm\xE5l": norsk_bokm\u00E5l,
    "north ndebele": north_ndebele,
    "northern kurdish": northern_kurdish,
    "northern luri": northern_luri,
    "northern sami": northern_sami,
    northernkurdish,
    "northernkurdish-arabic": northernkurdish_arabic,
    northernluri,
    northernsami,
    northndebele,
    norwegian,
    "norwegian bokm\xE5l": norwegian_bokm\u00E5l,
    "norwegian nynorsk": norwegian_nynorsk,
    norwegianbokmal,
    norwegiannynorsk,
    nsw,
    nswissgerman,
    nuasue,
    nue,
    nuer,
    nus,
    nya,
    nyankole,
    nyn,
    nynorsk,
    oc,
    "oc-oc": oc_oc,
    occ,
    occitan,
    odia,
    olusoga,
    om,
    "om-om": om_om,
    or,
    "or-or": or_or,
    ori,
    oriya,
    oro,
    oromo,
    oromoo,
    os,
    "os-os": os_os,
    oss,
    ossetic,
    "o\u2018zbek": o_zbek,
    pa,
    "pa-arab": pa_arab,
    "pa-guru": pa_guru,
    "pa-pa": pa_pa,
    pas,
    pashto,
    per,
    persian,
    pie,
    piedmontese,
    pl,
    "pl-pl": pl_pl,
    pms,
    pol,
    polish,
    polski,
    "polytonic greek": polytonic_greek,
    por,
    portuguese,
    "portuguese-br": portuguese_br,
    "portuguese-brazil": portuguese_brazil,
    "portuguese-portugal": portuguese_portugal,
    "portuguese-pt": portuguese_pt,
    portugu\u00EAs,
    ps,
    "ps-ps": ps_ps,
    pt,
    "pt-br": pt_br,
    "pt-pt": pt_pt,
    pulaar,
    punjabi,
    "punjabi-arab": punjabi_arab,
    "punjabi-arabic": punjabi_arabic,
    "punjabi-gurmukhi": punjabi_gurmukhi,
    "punjabi-guru": punjabi_guru,
    qu,
    "qu-qu": qu_qu,
    que,
    quechua,
    rikpa,
    rm,
    "rm-rm": rm_rm,
    rn,
    "rn-rn": rn_rn,
    ro,
    "ro-ro": ro_ro,
    rof,
    romanian,
    romansh,
    rombo,
    rom\u00E2n\u0103,
    ru,
    "ru-ru": ru_ru,
    rukiga,
    rumantsch,
    run,
    runasimi,
    rundi,
    runyankore,
    rus,
    russian,
    rw,
    "rw-rw": rw_rw,
    rwa,
    rwk,
    sa,
    "sa-beng": sa_beng,
    "sa-deva": sa_deva,
    "sa-gujr": sa_gujr,
    "sa-knda": sa_knda,
    "sa-mlym": sa_mlym,
    "sa-sa": sa_sa,
    "sa-telu": sa_telu,
    sah,
    sak,
    sakha,
    samburu,
    sami,
    samin,
    sango,
    sangu,
    sanskrit,
    saq,
    sbp,
    schwiizert\u00FC\u00FCtsch,
    sco,
    "scottish gaelic": scottish_gaelic,
    scottishgaelic,
    se,
    "se-se": se_se,
    seh,
    sen,
    sena,
    ser,
    serbian,
    "serbian-cyrillic": serbian_cyrillic,
    "serbian-cyrillic-bosniaherzegovina": serbian_cyrillic_bosniaherzegovina,
    "serbian-cyrillic-kosovo": serbian_cyrillic_kosovo,
    "serbian-cyrillic-montenegro": serbian_cyrillic_montenegro,
    "serbian-cyrl": serbian_cyrl,
    "serbian-cyrl-ba": serbian_cyrl_ba,
    "serbian-cyrl-me": serbian_cyrl_me,
    "serbian-cyrl-xk": serbian_cyrl_xk,
    "serbian-latin": serbian_latin,
    "serbian-latin-bosniaherzegovina": serbian_latin_bosniaherzegovina,
    "serbian-latin-kosovo": serbian_latin_kosovo,
    "serbian-latin-montenegro": serbian_latin_montenegro,
    "serbian-latn": serbian_latn,
    "serbian-latn-ba": serbian_latn_ba,
    "serbian-latn-me": serbian_latn_me,
    "serbian-latn-xk": serbian_latn_xk,
    ses,
    sg,
    "sg-sg": sg_sg,
    sha,
    shambala,
    shi,
    "shi-latn": shi_latn,
    "shi-tfng": shi_tfng,
    sho,
    shona,
    shqip,
    "shw\xF3\u014B\xF2 ngiemb\u0254\u0254n": shw\u00F3\u014B\u00F2_ngiemb\u0254\u0254n,
    si,
    "si-si": si_si,
    sic,
    "sichuan yi": sichuan_yi,
    sichuanyi,
    sin,
    sinhala,
    sk,
    "sk-sk": sk_sk,
    sl,
    "sl-sl": sl_sl,
    slovak,
    slovene,
    slovenian,
    sloven\u010Dina,
    sloven\u0161\u010Dina,
    smn,
    sn,
    "sn-sn": sn_sn,
    so,
    "so-so": so_so,
    sog,
    soga,
    som,
    somali,
    soomaali,
    sor,
    sorani,
    spa,
    spanish,
    "spanish-mexico": spanish_mexico,
    "spanish-mx": spanish_mx,
    sq,
    "sq-sq": sq_sq,
    sr,
    "sr-cyrl": sr_cyrl,
    "sr-cyrl-ba": sr_cyrl_ba,
    "sr-cyrl-me": sr_cyrl_me,
    "sr-cyrl-xk": sr_cyrl_xk,
    "sr-latn": sr_latn,
    "sr-latn-ba": sr_latn_ba,
    "sr-latn-me": sr_latn_me,
    "sr-latn-xk": sr_latn_xk,
    "sr-sr": sr_sr,
    srpski,
    sta,
    "standard moroccan tamazight": standard_moroccan_tamazight,
    standardmoroccantamazight,
    suomi,
    sv,
    "sv-sv": sv_sv,
    svenska,
    sw,
    "sw-sw": sw_sw,
    swa,
    swahili,
    swe,
    swedish,
    swi,
    "swiss german": swiss_german,
    swissgerman,
    syr,
    syriac,
    s\u00E4ng\u00F6,
    ta,
    "ta-ta": ta_ta,
    tachelhit,
    "tachelhit-latin": tachelhit_latin,
    "tachelhit-latn": tachelhit_latn,
    "tachelhit-tfng": tachelhit_tfng,
    "tachelhit-tifinagh": tachelhit_tifinagh,
    tai,
    taita,
    tam,
    "tamazi\u0263t n la\u1E6Dla\u1E63": tamazi\u0263t_n_la\u1E6Dla\u1E63,
    tamil,
    taqbaylit,
    tas,
    tasawaq,
    "tasawaq senni": tasawaq_senni,
    tashel\u1E25iyt,
    te,
    "te-te": te_te,
    tel,
    telugu,
    teo,
    tes,
    teso,
    th,
    "th-th": th_th,
    tha,
    thai,
    "thok nath": thok_nath,
    ti,
    "ti-ti": ti_ti,
    tib,
    tibetan,
    tig,
    tigrinya,
    "ti\u1EBFng vi\u1EC7t": ti\u1EBFng_vi\u1EC7t,
    tk,
    "tk-tk": tk_tk,
    to,
    "to-to": to_to,
    ton,
    tongan,
    tr,
    "tr-tr": tr_tr,
    tshiluba,
    turkish,
    turkmen,
    twq,
    tzm,
    t\u00FCrk\u00E7e,
    ug,
    "ug-ug": ug_ug,
    uk,
    "uk-uk": uk_uk,
    ukenglish,
    ukr,
    ukrainian,
    "upper sorbian": upper_sorbian,
    uppersorbian,
    ur,
    "ur-ur": ur_ur,
    urd,
    urdu,
    usenglish,
    uso,
    usorbian,
    uyg,
    uyghur,
    uz,
    "uz-arab": uz_arab,
    "uz-cyrl": uz_cyrl,
    "uz-latn": uz_latn,
    "uz-uz": uz_uz,
    uzbek,
    "uzbek-arab": uzbek_arab,
    "uzbek-arabic": uzbek_arabic,
    "uzbek-cyrillic": uzbek_cyrillic,
    "uzbek-cyrl": uzbek_cyrl,
    "uzbek-latin": uzbek_latin,
    "uzbek-latn": uzbek_latn,
    vai,
    "vai-latin": vai_latin,
    "vai-latn": vai_latn,
    "vai-vai": vai_vai,
    "vai-vaii": vai_vaii,
    vi,
    "vi-vi": vi_vi,
    vie,
    vietnam,
    vietnamese,
    vun,
    vunjo,
    wae,
    wal,
    walser,
    wel,
    welsh,
    wes,
    "west-frysk": west_frysk,
    "western frisian": western_frisian,
    westernfrisian,
    xog,
    yan,
    yangben,
    yav,
    yi,
    "yi-yi": yi_yi,
    yid,
    yiddish,
    yo,
    "yo-yo": yo_yo,
    yor,
    yoruba,
    yue,
    zar,
    zarma,
    zarmaciine,
    zgh,
    zh,
    "zh-hans": zh_hans,
    "zh-hans-hk": zh_hans_hk,
    "zh-hans-mo": zh_hans_mo,
    "zh-hans-sg": zh_hans_sg,
    "zh-hant": zh_hant,
    "zh-hant-hk": zh_hant_hk,
    "zh-hant-mo": zh_hant_mo,
    "zh-zh": zh_zh,
    zu,
    "zu-zu": zu_zu,
    zul,
    zulu,
    "\xE8d\xE8 yor\xF9b\xE1": \u00E8d\u00E8_yor\u00F9b\u00E1,
    \u00EDslenska,
    \u010De\u0161tina,
    \u0253\u00E0s\u00E0a,
    "\u02BB\u014Dlelo hawai\u02BBi": \u02BB\u014Dlelo_hawai\u02BBi,
    "\u03B1\u03C1\u03C7\u03B1\u03AF\u03B1 \u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC": \u03B1\u03C1\u03C7\u03B1\u03AF\u03B1_\u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC,
    \u03B5\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC,
    \u0430\u0437\u04D9\u0440\u0431\u0430\u0458\u04B9\u0430\u043D,
    \u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F,
    \u0431\u043E\u0441\u0430\u043D\u0441\u043A\u0438,
    \u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438,
    \u0438\u0440\u043E\u043D,
    \u043A\u044B\u0440\u0433\u044B\u0437\u0447\u0430,
    \u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438,
    \u043C\u043E\u043D\u0433\u043E\u043B,
    \u043D\u043E\u0445\u0447\u0438\u0439\u043D,
    \u0440\u0443\u0441\u0441\u043A\u0438\u0439,
    "\u0441\u0430\u0445\u0430 \u0442\u044B\u043B\u0430": \u0441\u0430\u0445\u0430_\u0442\u044B\u043B\u0430,
    "\u0441\u043B\u043E\u0432\u0463\u0301\u043D\u044C\u0441\u043A\u044A \u0469\uA641\uA651\u0301\u043A\u044A": \u0441\u043B\u043E\u0432\u0463\u0301\u043D\u044C\u0441\u043A\u044A_\u0469\uA641\uA651\u0301\u043A\u044A,
    \u0441\u0440\u043F\u0441\u043A\u0438,
    \u0443\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430,
    "\u0446\u0440\u044C\u043A\u044A\u0432\u044C\u043D\u043E\u0441\u043B\u043E\u0432\u0463\u043D\u044C\u0441\u043A\u044A \u0469\u0437\u044B\u043A\u044A": \u0446\u0440\u044C\u043A\u044A\u0432\u044C\u043D\u043E\u0441\u043B\u043E\u0432\u0463\u043D\u044C\u0441\u043A\u044A_\u0469\u0437\u044B\u043A\u044A,
    \u045E\u0437\u0431\u0435\u043A\u0447\u0430,
    "\u049B\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456": \u049B\u0430\u0437\u0430\u049B_\u0442\u0456\u043B\u0456,
    \u0570\u0561\u0575\u0565\u0580\u0565\u0576,
    \u05D9\u05D9\u05B4\u05D3\u05D9\u05E9,
    \u05E2\u05D1\u05E8\u05D9\u05EA,
    \u0626\u06C7\u064A\u063A\u06C7\u0631\u0686\u06D5,
    \u0627\u0631\u062F\u0648,
    \u0627\u0644\u0639\u0631\u0628\u064A\u0629,
    \u0627\u0648\u0632\u0628\u06CC\u06A9,
    \u0641\u0627\u0631\u0633\u06CC,
    "\u0644\u06CA\u0631\u06CC \u0634\u0648\u0645\u0627\u0644\u06CC": \u0644\u06CA\u0631\u06CC_\u0634\u0648\u0645\u0627\u0644\u06CC,
    \u0645\u0627\u0632\u0631\u0648\u0646\u06CC,
    \u067E\u0646\u062C\u0627\u0628\u06CC,
    \u067E\u069A\u062A\u0648,
    "\u06A9\u0648\u0631\u062F\u06CC\u06CC \u0646\u0627\u0648\u06D5\u0646\u062F\u06CC": \u06A9\u0648\u0631\u062F\u06CC\u06CC_\u0646\u0627\u0648\u06D5\u0646\u062F\u06CC,
    \u06A9\u0648\u0631\u0645\u0627\u0646\u062C\u06CC,
    \u06A9\u0672\u0634\u064F\u0631,
    "\u0720\u072B\u0722\u0710 \u0723\u0718\u072A\u071D\u071D\u0710": \u0720\u072B\u0722\u0710_\u0723\u0718\u072A\u071D\u071D\u0710,
    \u0915\u094B\u0902\u0915\u0923\u0940,
    \u0928\u0947\u092A\u093E\u0932\u0940,
    \u092C\u0921\u093C\u094B,
    \u092E\u0930\u093E\u0920\u0940,
    \u0938\u0902\u0938\u094D\u0915\u0943\u0924,
    \u0939\u093F\u0928\u094D\u0926\u0940,
    \u0985\u09B8\u09AE\u09C0\u09AF\u09BC\u09BE,
    \u09AC\u09BE\u0982\u09B2\u09BE,
    \u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40,
    \u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0,
    \u0B13\u0B21\u0B3C\u0B3F\u0B06,
    \u0BA4\u0BAE\u0BBF\u0BB4\u0BCD,
    \u0C24\u0C46\u0C32\u0C41\u0C17\u0C41,
    \u0C95\u0CA8\u0CCD\u0CA8\u0CA1,
    \u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02,
    \u0DC3\u0DD2\u0D82\u0DC4\u0DBD,
    \u0E44\u0E17\u0E22,
    \u0EA5\u0EB2\u0EA7,
    "\u0F56\u0F7C\u0F51\u0F0B\u0F66\u0F90\u0F51\u0F0B": \u0F56\u0F7C\u0F51_\u0F66\u0F90\u0F51_,
    "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41": \u0F62\u0FAB\u0F7C\u0F44_\u0F41,
    "\u1019\u103C\u1014\u103A\u1019\u102C": \u1019\u103C\u1014\u103A\u1019\u102C,
    \u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8,
    \u1275\u130D\u122D\u129B,
    \u12A0\u121B\u122D\u129B,
    \u1781\u17D2\u1798\u17C2\u179A,
    \u1F10\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC,
    "\u2C44\u2C3E\u2C41\u2C32\u2C51\u2C40\u2C50\u2C44\u2C3D\u2C4F \u2C57\u2C38\u2C4F\u2C3A\u2C3D\u2C4F": \u2C44\u2C3E\u2C41\u2C32\u2C51\u2C40\u2C50\u2C44\u2C3D\u2C4F_\u2C57\u2C38\u2C4F\u2C3A\u2C3D\u2C4F,
    "\u2CA7\u2C99\u2C9B\u0304\u2CA7\u2CA3\u2C99\u0304\u2C9B\u0304\u2C95\u2C8F\u2C99\u2C89": \u2CA7\u2C99\u2C9B\u0304\u2CA7\u2CA3\u2C99\u0304\u2C9B\u0304\u2C95\u2C8F\u2C99\u2C89,
    "\u2D5C\u2D30\u2D4E\u2D30\u2D63\u2D49\u2D56\u2D5C": \u2D5C\u2D30\u2D4E\u2D30\u2D63\u2D49\u2D56\u2D5C,
    "\u2D5C\u2D30\u2D5B\u2D4D\u2D43\u2D49\u2D5C": \u2D5C\u2D30\u2D5B\u2D4D\u2D43\u2D49\u2D5C,
    \u4E2D\u6587,
    \u65E5\u672C\u8A9E,
    \u7CB5\u8A9E,
    "\u7CB5\u8A9E-\u7CB5\u8A9E": \u7CB5\u8A9E_\u7CB5\u8A9E,
    \uA188\uA320\uA259,
    "\uA559\uA524": \uA559\uA524,
    "\uABB3\uAB83\uAB79": \uABB3\uAB83\uAB79,
    \uD55C\uAD6D\uC5B4
  };

  // gen/babel/tag.json
  var ame2 = "en";
  var american2 = "en";
  var australian2 = "en";
  var bri2 = "en";
  var british2 = "en";
  var canadian2 = "en";
  var en2 = "en";
  var en_au2 = "en";
  var en_ca2 = "en";
  var en_en2 = "en";
  var en_gb2 = "en";
  var en_nz2 = "en";
  var en_us2 = "en";
  var eng2 = "en";
  var english2 = "en";
  var english_au2 = "en";
  var english_australia2 = "en";
  var english_ca2 = "en";
  var english_canada2 = "en";
  var english_gb2 = "en";
  var english_newzealand2 = "en";
  var english_nz2 = "en";
  var english_unitedkingdom2 = "en";
  var english_unitedstates2 = "en";
  var english_us2 = "en";
  var new3 = "en";
  var newzealand2 = "en";
  var ukenglish2 = "en";
  var usenglish2 = "en";
  var ja2 = "ja";
  var ja_ja2 = "ja";
  var jap2 = "ja";
  var japanese2 = "ja";
  var \u65E5\u672C\u8A9E2 = "ja";
  var chinese2 = "zh";
  var chinese_hans2 = "zh";
  var chinese_hans_hk2 = "zh";
  var chinese_hans_mo2 = "zh";
  var chinese_hans_sg2 = "zh";
  var chinese_hant2 = "zh";
  var chinese_hant_hk2 = "zh";
  var chinese_hant_mo2 = "zh";
  var chinese_simplified2 = "zh";
  var chinese_simplified_hongkongsarchina2 = "zh";
  var chinese_simplified_macausarchina2 = "zh";
  var chinese_simplified_singapore2 = "zh";
  var chinese_traditional2 = "zh";
  var chinese_traditional_hongkongsarchina2 = "zh";
  var chinese_traditional_macausarchina2 = "zh";
  var zh2 = "zh";
  var zh_hans2 = "zh";
  var zh_hans_hk2 = "zh";
  var zh_hans_mo2 = "zh";
  var zh_hans_sg2 = "zh";
  var zh_hant2 = "zh";
  var zh_hant_hk2 = "zh";
  var zh_hant_mo2 = "zh";
  var zh_zh2 = "zh";
  var \u4E2D\u65872 = "zh";
  var austrian2 = "de";
  var de2 = "de";
  var de_19012 = "de";
  var de_at2 = "de";
  var de_at_19012 = "de";
  var de_ch2 = "de";
  var de_ch_19012 = "de";
  var de_ch_19962 = "de";
  var de_de2 = "de";
  var deutsch2 = "de";
  var ger2 = "de";
  var german2 = "de";
  var german_at2 = "de";
  var german_austria2 = "de";
  var german_ch2 = "de";
  var german_switzerland2 = "de";
  var gsw2 = "de";
  var nsw2 = "de";
  var nswissgerman2 = "de";
  var schwiizert\u00FC\u00FCtsch2 = "de";
  var swi2 = "de";
  var swiss_german2 = "de";
  var swissgerman2 = "de";
  var tag_default = {
    ame: ame2,
    american: american2,
    australian: australian2,
    bri: bri2,
    british: british2,
    canadian: canadian2,
    en: en2,
    "en-au": en_au2,
    "en-ca": en_ca2,
    "en-en": en_en2,
    "en-gb": en_gb2,
    "en-nz": en_nz2,
    "en-us": en_us2,
    eng: eng2,
    english: english2,
    "english-au": english_au2,
    "english-australia": english_australia2,
    "english-ca": english_ca2,
    "english-canada": english_canada2,
    "english-gb": english_gb2,
    "english-newzealand": english_newzealand2,
    "english-nz": english_nz2,
    "english-unitedkingdom": english_unitedkingdom2,
    "english-unitedstates": english_unitedstates2,
    "english-us": english_us2,
    new: new3,
    newzealand: newzealand2,
    ukenglish: ukenglish2,
    usenglish: usenglish2,
    ja: ja2,
    "ja-ja": ja_ja2,
    jap: jap2,
    japanese: japanese2,
    \u65E5\u672C\u8A9E: \u65E5\u672C\u8A9E2,
    chinese: chinese2,
    "chinese-hans": chinese_hans2,
    "chinese-hans-hk": chinese_hans_hk2,
    "chinese-hans-mo": chinese_hans_mo2,
    "chinese-hans-sg": chinese_hans_sg2,
    "chinese-hant": chinese_hant2,
    "chinese-hant-hk": chinese_hant_hk2,
    "chinese-hant-mo": chinese_hant_mo2,
    "chinese-simplified": chinese_simplified2,
    "chinese-simplified-hongkongsarchina": chinese_simplified_hongkongsarchina2,
    "chinese-simplified-macausarchina": chinese_simplified_macausarchina2,
    "chinese-simplified-singapore": chinese_simplified_singapore2,
    "chinese-traditional": chinese_traditional2,
    "chinese-traditional-hongkongsarchina": chinese_traditional_hongkongsarchina2,
    "chinese-traditional-macausarchina": chinese_traditional_macausarchina2,
    zh: zh2,
    "zh-hans": zh_hans2,
    "zh-hans-hk": zh_hans_hk2,
    "zh-hans-mo": zh_hans_mo2,
    "zh-hans-sg": zh_hans_sg2,
    "zh-hant": zh_hant2,
    "zh-hant-hk": zh_hant_hk2,
    "zh-hant-mo": zh_hant_mo2,
    "zh-zh": zh_zh2,
    \u4E2D\u6587: \u4E2D\u65872,
    austrian: austrian2,
    de: de2,
    "de-1901": de_19012,
    "de-at": de_at2,
    "de-at-1901": de_at_19012,
    "de-ch": de_ch2,
    "de-ch-1901": de_ch_19012,
    "de-ch-1996": de_ch_19962,
    "de-de": de_de2,
    deutsch: deutsch2,
    ger: ger2,
    german: german2,
    "german-at": german_at2,
    "german-austria": german_austria2,
    "german-ch": german_ch2,
    "german-switzerland": german_switzerland2,
    gsw: gsw2,
    nsw: nsw2,
    nswissgerman: nswissgerman2,
    schwiizert\u00FC\u00FCtsch: schwiizert\u00FC\u00FCtsch2,
    swi: swi2,
    "swiss german": swiss_german2,
    swissgerman: swissgerman2
  };

  // content/text.ts
  var parse5 = require_parser();
  var htmlParser = new parse5({ sourceCodeLocationInfo: true });
  var LanguagePrefixes = Object.keys(langmap_default).sort().reverse().filter((prefix) => prefix.length > 3);
  var charCategories = require_categories();
  var re2 = {
    Nl: charCategories.find((cat2) => cat2.alias === "Letter_Number").bmp,
    Nd: charCategories.find((cat2) => cat2.alias === "Decimal_Number").bmp,
    Mn: charCategories.find((cat2) => cat2.alias === "Nonspacing_Mark").bmp,
    Mc: charCategories.find((cat2) => cat2.alias === "Spacing_Mark").bmp,
    Lu: charCategories.find((cat2) => cat2.alias === "Uppercase_Letter").bmp,
    Lt: charCategories.find((cat2) => cat2.alias === "Titlecase_Letter").bmp,
    Ll: charCategories.find((cat2) => cat2.alias === "Lowercase_Letter").bmp,
    Lm: charCategories.find((cat2) => cat2.alias === "Modifier_Letter").bmp,
    Lo: charCategories.find((cat2) => cat2.alias === "Other_Letter").bmp,
    P: /\.\u002D\u2000-\u206F\u2E00-\u2E7F\\'!"#\$%&\(\)\*\+,\/:;<=>\?@\[\]^_`{\|}~/.source,
    Whitespace: / \t\n\r\u00A0/.source,
    lcChar: null,
    char: null,
    L: null,
    protectedWord: null,
    leadingUnprotectedWord: null,
    protectedWords: null,
    unprotectedWord: null,
    url: null,
    whitespace: null,
    sentenceEnd: /^[:?]/
  };
  re2.lcChar = re2.Ll + re2.Lt + re2.Lm + re2.Lo + re2.Mn + re2.Mc + re2.Nd + re2.Nl;
  re2.char = re2.Lu + re2.lcChar;
  re2.L = `${re2.Lu}${re2.Ll}${re2.Lt}${re2.Lm}${re2.Lo}`;
  re2.protectedWord = `[${re2.lcChar}]*[${re2.Lu}][${re2.char}]*`;
  re2.leadingUnprotectedWord = new RegExp(`^([${re2.Lu}][${re2.lcChar}]*)[${re2.Whitespace}${re2.P}]`);
  re2.protectedWords = new RegExp(`^(${re2.protectedWord})(([${re2.Whitespace}])(${re2.protectedWord}))*`);
  re2.unprotectedWord = new RegExp(`^[${re2.char}]+`);
  re2.url = /^(https?|mailto):\/\/[^\s]+/;
  re2.whitespace = new RegExp(`^[${re2.Whitespace}]+`);
  var ligatures = {
    "\u01F1": "DZ",
    "\u01F2": "Dz",
    "\u01F3": "dz",
    "\u01C4": "D\u017D",
    "\u01C5": "D\u017E",
    "\u01C6": "d\u017E",
    "\uFB00": "ff",
    "\uFB01": "fi",
    "\uFB02": "fl",
    "\uFB03": "ffi",
    "\uFB04": "ffl",
    "\uFB05": "\u017Ft",
    "\uFB06": "st",
    "\u0132": "IJ",
    "\u0133": "ij",
    "\u01C7": "LJ",
    "\u01C8": "Lj",
    "\u01C9": "lj",
    "\u01CA": "NJ",
    "\u01CB": "Nj",
    "\u01CC": "nj"
  };
  var titleCaseKeep = new RegExp(`(?:(?:[>:?]?[${re2.Whitespace}]+)[${re2.L}][${re2.P}]?(?:[${re2.Whitespace}]|$))|(?:(?:<span class="nocase">.*?</span>)|(?:<nc>.*?</nc>))`, "gi");
  var singleLetter = new RegExp(`^([>:?])?[${re2.Whitespace}]+(.)`);
  function titleCase(text) {
    let titlecased = titleCased(text);
    text.replace(titleCaseKeep, (match, offset) => {
      if (match[0] !== "<") {
        const [, punc, l] = match.match(singleLetter);
        if (punc && (l === "a" || l === "A")) {
          match = match.toUpperCase();
        }
      }
      titlecased = titlecased.substr(0, offset) + match + titlecased.substr(offset + match.length);
      return match;
    });
    Zotero.debug(`titleCase: ${JSON.stringify(text)} => ${JSON.stringify(titlecased)}`);
    return titlecased;
  }
  var HTMLParser = new class {
    constructor() {
      this.spuriousNode = new Set(["#document-fragment", "#document", "div", "span"]);
      this.ligatures = new RegExp(`[${Object.keys(ligatures).join("")}]`, "g");
    }
    parse(html, options) {
      this.html = html;
      let doc;
      this.options = { ...options, exportBraceProtection: options.caseConversion && options.exportBraceProtection };
      this.sentenceStart = true;
      const csquotes = this.options.csquotes;
      if (csquotes) {
        const space = "\\s*";
        for (const close of [0, 1]) {
          const chars = csquotes.replace(/./g, (c, i) => [c, ""][i + close & 1]).replace(/[-[\]/{}()*+?.\\^$|]\s*/g, "\\$&");
          this.html = this.html.replace(new RegExp(`${close ? space : ""}[${chars}]${close ? "" : space}`, "g"), close ? "</span>" : '<span class="enquote">');
        }
      }
      if (!this.options.html) {
        this.html = this.html.replace(/&/g, "&amp;");
        this.html = this.html.replace(/<(\/?)([^<>]*)>/g, (match, close, body2) => {
          if (body2.match(/^(emphasis|span|nc|sc|i|b|sup|sub|script)($|\n|\s)/i))
            return match;
          if (body2.match(/^pre$/i))
            return `<${close || ""}script>`;
          return match.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        });
      }
      doc = this.walk(htmlParser.parseFragment(this.html));
      if (this.options.caseConversion) {
        if (this.options.exportTitleCase) {
          this.titleCased = "";
          this.collectText(doc);
          this.titleCased = titleCase(this.titleCased);
          this.titleCase(doc);
        }
        const unwrapped = this.unwrapNocase(doc);
        if (unwrapped.length === 1) {
          doc = unwrapped[0];
        } else {
          doc = { nodeName: "span", attr: {}, class: {}, childNodes: unwrapped };
        }
        this.cleanupNocase(doc);
      }
      doc = this.unwrapSpurious(doc);
      doc.source = this.html;
      return doc;
    }
    titleCase(node) {
      if (node.nodeName === "#text") {
        node.value = this.titleCased.substr(node.titleCased, node.value.length);
        return;
      }
      for (const child of node.childNodes) {
        if (child.nocase || child.nodeName === "sup" || child.nodeName === "sub")
          continue;
        this.titleCase(child);
      }
    }
    unwrapSpurious(node) {
      if (node.nodeName === "#text")
        return node;
      node.childNodes = node.childNodes.map((child) => this.unwrapSpurious(child));
      while (this.spuriousNode.has(node.nodeName) && Object.keys(node.attr).length === 0 && !node.nocase && node.childNodes.length === 1)
        node = node.childNodes[0];
      return node;
    }
    unwrapNocase(node) {
      if (node.nodeName === "#text")
        return [node];
      node.childNodes = [].concat(...node.childNodes.map((child) => this.unwrapNocase(child)));
      if (node.nocase || !node.childNodes.find((child) => child.nocase))
        return [node];
      return node.childNodes.map((child) => {
        if (child.nocase) {
          return {
            ...child,
            childNodes: [{ ...node, childNodes: child.childNodes }]
          };
        }
        return {
          ...node,
          childNodes: [child]
        };
      });
    }
    cleanupNocase(node, nocased = false) {
      if (node.nodeName === "#text")
        return null;
      if (nocased)
        delete node.nocase;
      for (const child of node.childNodes) {
        this.cleanupNocase(child, node.nocase || nocased);
      }
    }
    collectText(node) {
      switch (node.nodeName) {
        case "#text":
          node.titleCased = this.titleCased.length;
          this.titleCased += node.value;
          break;
        case "script":
          this.titleCased += "".padStart(node.value.length, "latex");
          break;
        default:
          for (const child of node.childNodes) {
            this.collectText(child);
          }
      }
    }
    plaintext(childNodes, text, offset) {
      text = text.replace(this.ligatures, (ligature) => ligatures[ligature]);
      const l = childNodes.length;
      if (l === 0 || childNodes[l - 1].nodeName !== "#text") {
        childNodes.push({ nodeName: "#text", offset, value: text, attr: {}, class: {} });
      } else {
        childNodes[l - 1].value += text;
      }
    }
    nocase(childNodes, text, offset) {
      childNodes.push({
        nodeName: "span",
        nocase: true,
        attr: {},
        class: {},
        childNodes: [{
          nodeName: "#text",
          offset,
          value: text,
          attr: {},
          class: {}
        }]
      });
    }
    walk(node, isNocased = false) {
      var _a;
      const normalized_node = { nodeName: node.nodeName, childNodes: [], attr: {}, class: {} };
      for (const { name, value } of node.attrs || []) {
        normalized_node.attr[name] = value;
      }
      for (const cls of (normalized_node.attr.class || "").trim().split(/\s+/)) {
        if (cls)
          normalized_node.class[cls] = true;
      }
      switch ((_a = node.type) == null ? void 0 : _a.toLowerCase()) {
        case "smallcaps":
          normalized_node.attr.smallcaps = "smallcaps";
          break;
      }
      if (node.type)
        normalized_node.class[node.type] = true;
      switch (node.nodeName) {
        case "#document":
        case "#document-fragment":
        case "pre":
          normalized_node.nodeName = "span";
          break;
        case "nc":
          normalized_node.nodeName = "span";
          normalized_node.attr.nocase = "nocase";
          break;
        case "emphasis":
          normalized_node.nodeName = "i";
          break;
        case "sc":
          normalized_node.nodeName = "span";
          normalized_node.attr.smallcaps = "smallcaps";
          break;
      }
      if (normalized_node.attr.nocase || normalized_node.class.nocase)
        normalized_node.nocase = !isNocased;
      if (normalized_node.attr.relax || normalized_node.class.relax)
        normalized_node.relax = true;
      if (normalized_node.class.enquote || normalized_node.attr.enquote)
        normalized_node.enquote = true;
      if (!normalized_node.attr.smallcaps && (normalized_node.attr.style || "").match(/small-caps/i))
        normalized_node.attr.smallcaps = "smallcaps";
      if (normalized_node.class.smallcaps || normalized_node.attr.smallcaps)
        normalized_node.smallcaps = true;
      if (normalized_node.nodeName === "script") {
        if (!node.childNodes || node.childNodes.length === 0) {
          normalized_node.value = "";
          normalized_node.childNodes = [];
        } else if (node.childNodes.length === 1 && node.childNodes[0].nodeName === "#text") {
          normalized_node.value = node.childNodes[0].value;
          normalized_node.childNodes = [];
        } else {
          throw new Error(`Unexpected script body ${JSON.stringify(node)}`);
        }
      } else if (node.childNodes) {
        let m;
        for (const child of node.childNodes) {
          if (child.nodeName !== "#text") {
            normalized_node.childNodes.push(this.walk(child, isNocased || normalized_node.nocase));
            continue;
          }
          if (!this.options.caseConversion || isNocased) {
            this.plaintext(normalized_node.childNodes, child.value, child.sourceCodeLocation.startOffset);
            continue;
          }
          let text = child.value;
          const length = text.length;
          while (text) {
            if (m = re2.whitespace.exec(text)) {
              this.plaintext(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
              continue;
            }
            if (m = re2.sentenceEnd.exec(text)) {
              this.plaintext(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
              this.sentenceStart = true;
              continue;
            }
            if (this.sentenceStart && (m = re2.leadingUnprotectedWord.exec(`${text} `))) {
              this.sentenceStart = false;
              this.plaintext(normalized_node.childNodes, m[1], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[1].length);
              continue;
            }
            this.sentenceStart = false;
            if (!isNocased && this.options.exportBraceProtection && (m = re2.protectedWords.exec(text))) {
              this.nocase(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
            } else if (m = re2.url.exec(text)) {
              this.nocase(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
            } else if (m = re2.unprotectedWord.exec(text)) {
              this.plaintext(normalized_node.childNodes, m[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(m[0].length);
            } else {
              this.plaintext(normalized_node.childNodes, text[0], child.sourceCodeLocation.startOffset + (length - text.length));
              text = text.substring(1);
            }
          }
        }
      }
      return normalized_node;
    }
  }();
  var notAlphaNum = new RegExp(`[^${re2.L}${re2.Nd}${re2.Nl}]`);
  function babelLanguage(language2) {
    if (!language2)
      return "";
    const lc = language2.toLowerCase();
    return langmap_default[lc] || langmap_default[lc.replace(/[^a-z0-9]/, "-")] || langmap_default[lc.replace(notAlphaNum, "")] || !lc.match(notAlphaNum) && langmap_default[LanguagePrefixes.find((prefix) => lc.startsWith(prefix))] || language2;
  }
  function babelTag(langid) {
    return tag_default[langid] || "";
  }

  // content/arXiv.ts
  var arXiv = new class {
    constructor() {
      this.post2007 = /(?:^|\s|\/)(?:arXiv:\s*)?(\d{4}\.\d{4,5}(?:v\d+)?)(?:\s\[(.*?)\])?(?=$|\s)/i;
      this.pre2007 = /(?:^|\s|\/)(?:arXiv:\s*)?([a-z-]+(?:\.[A-Z]{2})?\/\d{2}(?:0[1-9]|1[012])\d{3}(?:v\d+)?(?=$|\s))/i;
    }
    parse(id2) {
      if (!id2)
        return { id: null };
      let match;
      if (match = this.post2007.exec(id2)) {
        return { id: match[1], category: match[2] && match[2].trim() };
      }
      if (match = this.pre2007.exec(id2)) {
        return { id: match[1] };
      }
      return { id: null };
    }
  }();

  // translators/bibtex/reference.ts
  var Path = {
    normalize(path) {
      return Translator.paths.caseSensitive ? path : path.toLowerCase();
    },
    drive(path) {
      if (Translator.preferences.platform !== "win")
        return "";
      return path.match(/^[a-z]:\//) ? path.substring(0, 2) : "";
    },
    relative(path) {
      if (this.drive(Translator.export.dir) !== this.drive(path))
        return path;
      const from = Translator.export.dir.split(Translator.paths.sep);
      const to2 = path.split(Translator.paths.sep);
      while (from.length && to2.length && this.normalize(from[0]) === this.normalize(to2[0])) {
        from.shift();
        to2.shift();
      }
      return `..${Translator.paths.sep}`.repeat(from.length) + to2.join(Translator.paths.sep);
    }
  };
  var fieldOrder = [
    "type",
    "ids",
    "title",
    "shorttitle",
    "booktitle",
    "author",
    "editor",
    "translator",
    "holder",
    "options",
    "date",
    "origdate",
    "year",
    "month",
    "journal",
    "journaltitle",
    "shortjournal",
    "series",
    "edition",
    "volume",
    "number",
    "eprint",
    "eprinttype",
    "primaryclass",
    "pages",
    "publisher",
    "address",
    "institution",
    "location",
    "issn",
    "doi",
    "url",
    "urldate",
    "-keywords",
    "-annotation",
    "-note",
    "-groups",
    "-timestamp",
    "-files",
    "-file"
  ].reduce((acc, field, idx) => {
    if (field[0] === "-") {
      acc[field.substring(1)] = -(idx + 1);
    } else {
      acc[field] = idx + 1;
    }
    return acc;
  }, {});
  function entry_sort(a, b) {
    return Translator.stringCompare(a[0], b[0]);
  }
  var re3 = {
    punctuationAtEnd: new Zotero.Utilities.XRegExp("[\\p{Punctuation}]$"),
    startsWithLowercase: new Zotero.Utilities.XRegExp("^[\\p{Ll}]"),
    hasLowercaseWord: new Zotero.Utilities.XRegExp("\\s[\\p{Ll}]"),
    whitespace: new Zotero.Utilities.XRegExp("\\p{Zs}")
  };
  var enc_creators_marker = {
    initials: "\x97",
    relax: "\u200C"
  };
  var isBibString = /^[a-z][-a-z0-9_]*$/i;
  var Reference = class {
    constructor(item) {
      this.has = {};
      this.inPostscript = false;
      this.quality_report = [];
      this.metadata = { DeclarePrefChars: "", noopsort: false, packages: [] };
      var _a, _b;
      this.item = item;
      this.packages = {};
      this.date = item.date ? Zotero.BetterBibTeX.parseDate(item.date) : { type: "none" };
      if (!this.item.language) {
        this.english = true;
      } else {
        this.language = babelLanguage(this.item.language);
        this.english = babelTag(this.language) === "en";
      }
      this.item.edition = (this.item.edition || "").replace(/^([0-9]+)(nd|th)$/, "$1");
      this.extraFields = JSON.parse(JSON.stringify(this.item.extraFields));
      let referencetype;
      const isPrePrint = Translator.BetterBibTeX && this.item.itemType === "report" && ((_a = this.item.extraFields.kv.type) == null ? void 0 : _a.toLowerCase()) === "article";
      let csl_type3 = this.item.extraFields.kv.type;
      if (!isPrePrint && this.typeMap.csl[csl_type3]) {
        delete this.item.extraFields.kv.type;
      } else {
        csl_type3 = null;
      }
      if (this.item.extraFields.tex.referencetype) {
        referencetype = this.item.extraFields.tex.referencetype.value;
        this.referencetype_source = `tex.${referencetype}`;
      } else if (csl_type3) {
        referencetype = this.typeMap.csl[csl_type3];
        this.referencetype_source = `csl.${csl_type3}`;
      } else if (isPrePrint) {
        referencetype = "misc";
        delete this.item.extraFields.kv.type;
        this.referencetype_source = `zotero.${this.item.itemType}`;
      } else {
        referencetype = this.typeMap.zotero[this.item.itemType] || "misc";
        this.referencetype_source = `zotero.${this.item.itemType}`;
      }
      if (typeof referencetype === "string") {
        this.referencetype = referencetype;
      } else {
        this.add({ name: "entrysubtype", value: referencetype.subtype });
        this.referencetype = referencetype.type;
      }
      for (const [name, value] of Object.entries(item.extraFields.kv)) {
        const ef = extra_fields_exports[name];
        if (ef.zotero) {
          if (!item[name] || ef.type === "date") {
            item[name] = value;
          } else {
            log.debug("extra fields: skipping", { name, value });
          }
          delete item.extraFields.kv[name];
        }
      }
      for (const [name, value] of Object.entries(item.extraFields.creator)) {
        if (extra_fields_exports[name].zotero) {
          for (const creator of value) {
            item.creators.push({ ...zoteroCreator(creator, name), source: creator });
          }
          delete item.extraFields.creator[name];
        }
      }
      if (Translator.preferences.jabrefFormat) {
        if (Translator.preferences.testing) {
          this.add({ name: "timestamp", value: "2015-02-24 12:14:36 +0100" });
        } else {
          this.add({ name: "timestamp", value: this.item.dateModified || this.item.dateAdded });
        }
      }
      if ((this.item.arXiv = arXiv.parse(this.item.publicationTitle)) && this.item.arXiv.id) {
        this.item.arXiv.source = "publicationTitle";
        if (Translator.BetterBibLaTeX)
          delete this.item.publicationTitle;
      } else if ((this.item.arXiv = arXiv.parse((_b = this.item.extraFields.tex.arxiv) == null ? void 0 : _b.value)) && this.item.arXiv.id) {
        this.item.arXiv.source = "extra";
      } else {
        this.item.arXiv = null;
      }
      if (this.item.arXiv) {
        delete this.item.extraFields.tex.arxiv;
        this.add({ name: "archiveprefix", value: "arXiv" });
        this.add({ name: "eprinttype", value: "arxiv" });
        this.add({ name: "eprint", value: this.item.arXiv.id });
        this.add({ name: "primaryclass", value: this.item.arXiv.category });
      }
    }
    static installPostscript() {
      try {
        if (Translator.preferences.postscript.trim()) {
          Reference.prototype.postscript = new Function("reference", "item", "Translator", "Zotero", "extra", body(Translator.preferences.postscript, "this.inPostscript"));
        } else {
          Reference.prototype.postscript = noop;
        }
      } catch (err) {
        Reference.prototype.postscript = noop;
        log.debug("failed to install postscript", err, "\n", body(Translator.preferences.postscript));
      }
    }
    normalizeDashes(str) {
      str = (str || "").trim();
      if (this.item.raw)
        return str;
      return str.replace(/\u2053/g, "~").replace(/[\u2014\u2015]/g, "---").replace(/[\u2012\u2013]/g, "--").split(/(,\s*)/).map((range) => {
        if (range.match(/^,\s+/))
          return ", ";
        if (range === ",")
          return range;
        return range.replace(/^([0-9]+)\s*(-+)\s*([0-9]+)\s*$/g, "$1$2$3").replace(/^([0-9]+)-([0-9]+)$/g, "$1--$2").replace(/^([0-9]+)-{4,}([0-9]+)$/g, "$1---$2");
      }).join("");
    }
    add(field) {
      if (Translator.preferences.testing && !this.inPostscript && field.name !== field.name.toLowerCase())
        throw new Error(`Do not add mixed-case field ${field.name}`);
      if (!field.value && !field.bibtex && this.inPostscript) {
        delete this.has[field.name];
        return null;
      }
      if (Translator.skipField[field.name])
        return null;
      if (field.enc === "date") {
        if (!field.value)
          return null;
        if (field.value === "today") {
          return this.add({
            ...field,
            value: "<pre>\\today</pre>",
            enc: "verbatim"
          });
        }
        if (Translator.BetterBibLaTeX && Translator.preferences.biblatexExtendedDateFormat && Zotero.BetterBibTeX.isEDTF(field.value, true)) {
          return this.add({
            ...field,
            value: field.value.replace(/\.[0-9]{3}[a-z]+$/i, ""),
            enc: "verbatim"
          });
        }
        const date2 = Zotero.BetterBibTeX.parseDate(field.value);
        this.add(datefield(date2, field));
        if (date2.orig) {
          this.add(datefield(date2.orig, {
            ...field,
            name: field.orig && field.orig.inherit ? `orig${field.name}` : field.orig && field.orig.name,
            verbatim: field.orig && field.orig.inherit && field.verbatim ? `orig${field.verbatim}` : field.orig && field.orig.verbatim
          }));
        }
        return field.name;
      }
      if (field.fallback && field.replace)
        throw new Error("pick fallback or replace, buddy");
      if (field.fallback && this.has[field.name])
        return null;
      if (!field.name) {
        const keys = Object.keys(field);
        switch (keys.length) {
          case 0:
            return null;
          case 1:
            field = { name: keys[0], value: field[keys[0]] };
            break;
          default:
            throw new Error(`Quick-add mode expects exactly one name -> value mapping, found ${JSON.stringify(field)} (${new Error().stack})`);
        }
      }
      if (!field.bibtex) {
        if (typeof field.value !== "number" && !field.value)
          return null;
        if (typeof field.value === "string" && field.value.trim() === "")
          return null;
        if (Array.isArray(field.value) && field.value.length === 0)
          return null;
      }
      if (this.has[field.name]) {
        if (this.has[field.name].value === field.value && (this.has[field.name].enc || "latex") === (field.enc || "latex"))
          return null;
        if (!this.inPostscript && !field.replace) {
          const value = field.bibtex ? "bibtex" : "value";
          throw new Error(`duplicate field '${field.name}' for ${this.item.citationKey}: old: ${this.has[field.name][value]}, new: ${field[value]}`);
        }
        if (!field.replace) {
          let v_old = this.has[field.name].value;
          let v_new = field.value;
          if (typeof v_old === "string" && typeof v_new === "string") {
            v_old = v_old.toLowerCase();
            v_new = v_new.toLowerCase();
          }
          if (v_old !== v_new)
            this.quality_report.push(`duplicate "${field.name}" ("${this.has[field.name].value}") ignored`);
        }
        delete this.has[field.name];
      }
      if (!field.bibtex) {
        let bibstring = "";
        if (typeof field.value === "number" || field.bibtexStrings && (bibstring = this.getBibString(field.value))) {
          field.bibtex = `${bibstring || field.value}`;
        } else {
          field.enc = field.enc || this.fieldEncoding[field.name] || "latex";
          let value;
          switch (field.enc) {
            case "latex":
              value = this.enc_latex(field, { raw: this.item.raw });
              break;
            case "raw":
              value = this.enc_raw(field);
              break;
            case "url":
              value = this.enc_url(field);
              break;
            case "verbatim":
              value = this.enc_verbatim(field);
              break;
            case "creators":
              value = this.enc_creators(field, this.item.raw);
              break;
            case "literal":
              value = this.enc_literal(field, this.item.raw);
              break;
            case "tags":
              value = this.enc_tags(field);
              break;
            case "attachments":
              value = this.enc_attachments(field);
              break;
            default:
              throw new Error(`Unexpected field encoding: ${JSON.stringify(field.enc)}`);
          }
          if (!value)
            return null;
          value = value.trim();
          if (!field.bare || field.value.match(/\s/)) {
            value = `{${value}}`;
          }
          field.bibtex = value;
        }
      }
      this.has[field.name] = field;
      return field.name;
    }
    remove(name) {
      const removed = this.has[name] || {};
      delete this.has[name];
      return removed;
    }
    getBibString(value) {
      if (!value || typeof value !== "string")
        return null;
      switch (Translator.preferences.exportBibTeXStrings) {
        case "off":
          return null;
        case "detect":
          return isBibString.test(value) && value;
        case "match":
          return Exporter.strings[value.toUpperCase()] && value;
        case "match+reverse":
          value = value.toUpperCase();
          return Exporter.strings[value] ? value : Exporter.strings_reverse[value];
        default:
          return null;
      }
    }
    hasCreator(type2) {
      return (this.item.creators || []).some((creator) => creator.creatorType === type2);
    }
    override(field) {
      const itemtype_name = field.name.split(".");
      let name;
      if (itemtype_name.length === 2) {
        if (this.referencetype !== itemtype_name[0])
          return;
        name = itemtype_name[1];
      } else {
        name = field.name;
      }
      if (typeof field.value === "string" && field.value.trim() === "") {
        this.remove(name);
        return;
      }
      this.add({ ...field, name, replace: typeof field.replace !== "boolean" && typeof field.fallback !== "boolean" || field.replace });
    }
    complete() {
      var _a, _b, _c;
      if (Translator.preferences.jabrefFormat >= 4 && ((_a = this.item.collections) == null ? void 0 : _a.length)) {
        const groups = Array.from(new Set(this.item.collections.map((key) => {
          var _a2;
          return (_a2 = Translator.collections[key]) == null ? void 0 : _a2.name;
        }).filter((name) => name))).sort();
        this.add({ name: "groups", value: groups.join(",") });
      }
      if (this.item.extraFields.aliases.length) {
        this.add({ name: "ids", value: this.item.extraFields.aliases.filter((alias) => alias !== this.item.citationKey).join(","), enc: "verbatim" });
      }
      if (Translator.BetterBibLaTeX)
        this.add({ name: "pubstate", value: this.item.status });
      for (const [key, value] of Object.entries(this.item.extraFields.kv)) {
        const type2 = extra_fields_exports[key].type;
        let enc = { name: "creator", text: "latex" }[type2] || type2;
        const replace = type2 === "date";
        if (["PMID", "PMCID"].includes(key) && typeof value === "string") {
          this.item.extraFields.tex[key.toLowerCase()] = { value };
          delete this.item.extraFields.kv[key];
          continue;
        }
        let name = null;
        if (Translator.BetterBibLaTeX) {
          switch (key) {
            case "issuingAuthority":
              name = "institution";
              break;
            case "title":
              name = this.referencetype === "book" ? "maintitle" : null;
              break;
            case "publicationTitle":
              switch (this.referencetype_source) {
                case "zotero.film":
                case "zotero.tvBroadcast":
                case "zotero.videoRecording":
                case "csl.motion_picture":
                  name = "booktitle";
                  break;
                case "zotero.bookSection":
                case "csl.chapter":
                  name = "maintitle";
                  break;
                default:
                  name = "journaltitle";
                  break;
              }
              break;
            case "original-publisher":
              name = "origpublisher";
              enc = "literal";
              break;
            case "original-publisher-place":
              name = "origlocation";
              enc = "literal";
              break;
            case "original-title":
              name = "origtitle";
              break;
            case "original-date":
            case "originalDate":
              name = "origdate";
              enc = "date";
              break;
            case "place":
              name = "location";
              enc = "literal";
              break;
            case "pages":
              name = "pages";
              break;
            case "date":
              name = "date";
              break;
            case "event-place":
              name = "venue";
              break;
            case "accessed":
              name = "urldate";
              break;
            case "number":
            case "volume":
            case "DOI":
            case "ISBN":
            case "ISSN":
              name = key.toLowerCase();
              break;
          }
        }
        if (Translator.BetterBibTeX) {
          switch (key) {
            case "call-number":
              name = "lccn";
              break;
            case "DOI":
            case "ISSN":
              name = key.toLowerCase();
              break;
          }
        }
        if (name) {
          this.override({ name, verbatim: name, orig: { inherit: true }, value, enc, replace, fallback: !replace });
        } else {
          log.debug("Unmapped extra field", key, "=", value);
        }
      }
      this.add({ name: "annotation", value: (_b = this.item.extra) == null ? void 0 : _b.replace(/\n+/g, " ") });
      if (Translator.options.exportNotes) {
        if (!(Translator.BetterBibTeX && Translator.preferences.bibtexURL === "note"))
          this.add({ name: "note", value: (_c = this.item.notes) == null ? void 0 : _c.map((note) => note.note).join("</p><p>"), html: true });
      }
      const bibtexStrings = Translator.preferences.exportBibTeXStrings.startsWith("match");
      for (const [name, field] of Object.entries(this.item.extraFields.tex)) {
        if (name === "referencetype") {
          this.referencetype = field.value;
          continue;
        }
        switch (name) {
          case "mr":
            this.override({ name: "mrnumber", value: field.value, raw: field.raw });
            break;
          case "zbl":
            this.override({ name: "zmnumber", value: field.value, raw: field.raw });
            break;
          case "lccn":
          case "pmcid":
            this.override({ name, value: field.value, raw: field.raw });
            break;
          case "pmid":
          case "arxiv":
          case "jstor":
          case "hdl":
            if (Translator.BetterBibLaTeX) {
              this.override({ name: "eprinttype", value: name });
              this.override({ name: "eprint", value: field.value, raw: field.raw });
            } else {
              this.override({ name, value: field.value, raw: field.raw });
            }
            break;
          case "googlebooksid":
            if (Translator.BetterBibLaTeX) {
              this.override({ name: "eprinttype", value: "googlebooks" });
              this.override({ name: "eprint", value: field.value, raw: field.raw });
            } else {
              this.override({ name: "googlebooks", value: field.value, raw: field.raw });
            }
            break;
          case "xref":
            this.override({ name, value: field.value, raw: field.raw });
            break;
          default:
            this.override({ ...field, name, bibtexStrings });
            break;
        }
      }
      const keys = Object.keys(this.has).sort((a, b) => {
        const fa2 = fieldOrder[a];
        const fb = fieldOrder[b];
        if (fa2 && fb)
          return Math.abs(fa2) - Math.abs(fb);
        if (fa2)
          return -fa2;
        if (fb)
          return fb;
        return a.localeCompare(b);
      });
      for (const field of keys) {
        const value = this.has[field];
        delete this.has[field];
        this.has[field] = value;
      }
      let allow = { cache: true, write: true };
      try {
        allow = this.postscript(this, this.item, Translator, Zotero, this.extraFields);
      } catch (err) {
        if (Translator.preferences.testing)
          throw err;
        log.error("Reference.postscript failed:", err);
        allow.cache = false;
      }
      this.item.$cacheable = this.item.$cacheable && allow.cache;
      for (const name of Translator.skipFields) {
        this.remove(name);
      }
      if (this.has.url && this.has.doi) {
        switch (Translator.preferences.DOIandURL) {
          case "url":
            delete this.has.doi;
            break;
          case "doi":
            delete this.has.url;
            break;
        }
      }
      if (!this.has.url)
        this.remove("urldate");
      if (!Object.keys(this.has).length)
        this.add({ name: "type", value: this.referencetype });
      const fields = Object.values(this.has).map((field) => `  ${field.name} = ${field.bibtex}`);
      let ref = `@${this.referencetype}{${this.item.citationKey},
`;
      ref += fields.join(",\n");
      ref += "\n}\n";
      ref += this.qualityReport();
      ref += "\n";
      if (allow.write)
        Zotero.write(ref);
      this.metadata.DeclarePrefChars = Exporter.unique_chars(this.metadata.DeclarePrefChars);
      this.metadata.packages = Object.keys(this.packages);
      if (this.item.$cacheable)
        Zotero.BetterBibTeX.cacheStore(this.item.itemID, Translator.options, Translator.preferences, ref, this.metadata);
      Exporter.postfix.add(this.metadata);
    }
    enc_raw(f) {
      return f.value;
    }
    enc_url(f) {
      if (Translator.BetterBibTeX && Translator.preferences.bibtexURL.endsWith("-ish")) {
        return (f.value || "").replace(/([#\\%&{}])/g, "\\$1");
      } else if (Translator.BetterBibTeX && Translator.preferences.bibtexURL === "note") {
        return `\\url{${this.enc_verbatim(f)}}`;
      } else {
        return this.enc_verbatim(f);
      }
    }
    enc_verbatim(f) {
      return (f.value || "").replace(/([\\{}])/g, "\\$1");
    }
    _enc_creators_scrub_name(name) {
      return Zotero.Utilities.XRegExp.replace(name, re3.whitespace, " ", "all");
    }
    enc_creators(f, raw) {
      if (f.value.length === 0)
        return null;
      const encoded = [];
      for (const creator of f.value) {
        let name;
        if (creator.name || creator.lastName && creator.fieldMode === 1) {
          name = creator.name || creator.lastName;
          if (name !== "others")
            name = raw ? `{${name}}` : this.enc_latex({ value: new String(this._enc_creators_scrub_name(name)) });
        } else if (raw) {
          name = [creator.lastName || "", creator.firstName || ""].join(", ");
        } else if (creator.lastName || creator.firstName) {
          name = {
            family: this._enc_creators_scrub_name(creator.lastName || ""),
            given: this._enc_creators_scrub_name(creator.firstName || "")
          };
          if (Translator.preferences.parseParticles)
            CSL3.parseParticles(name);
          if (!Translator.BetterBibLaTeX || !Translator.preferences.biblatexExtendedNameFormat) {
            if (!this.useprefix)
              this.useprefix = !!name["non-dropping-particle"];
            if (!this.juniorcomma)
              this.juniorcomma = f.juniorcomma && name["comma-suffix"];
          }
          if (Translator.BetterBibTeX) {
            name = this._enc_creators_bibtex(name);
          } else {
            name = this._enc_creators_biblatex(name);
          }
          name = name.replace(/ and /g, " {and} ");
          if (Translator.and.names.repl !== " {and} ")
            name = name.replace(Translator.and.names.re, Translator.and.names.repl);
        } else {
          continue;
        }
        encoded.push(name.trim());
      }
      return replace_command_spacers(encoded.join(Translator.preferences.separatorNames));
    }
    enc_literal(f, raw = false) {
      if (!f.value)
        return null;
      return this.enc_latex({ ...f, value: Translator.preferences.exportBraceProtection ? new String(f.value) : f.value }, { raw });
    }
    enc_latex(f, options = {}) {
      if (typeof f.value === "number")
        return f.value;
      if (!f.value)
        return null;
      if (Array.isArray(f.value)) {
        if (f.value.length === 0)
          return null;
        return f.value.map((elt) => this.enc_latex({ ...f, bibtex: void 0, value: elt }, options)).join(f.sep || "");
      }
      if (f.raw || options.raw)
        return f.value;
      const caseConversion = this.caseConversion[f.name] || f.caseConversion;
      const latex = text2latex(f.value, { html: f.html, caseConversion: caseConversion && this.english, creator: options.creator });
      for (const pkg of latex.packages) {
        this.packages[pkg] = true;
      }
      let value = latex.latex;
      if (caseConversion && Translator.BetterBibTeX && !this.english && Translator.preferences.exportBraceProtection)
        value = `{${value}}`;
      if (f.value instanceof String && !latex.raw)
        value = new String(`{${value}}`);
      return value;
    }
    enc_tags(f) {
      const tags = f.value.map((tag) => typeof tag === "string" ? { tag } : tag).filter((tag) => (Translator.preferences.automaticTags || tag.type !== 1) && tag.tag !== Translator.preferences.rawLaTag);
      if (tags.length === 0)
        return null;
      tags.sort((a, b) => Translator.stringCompare(a.tag, b.tag));
      for (const tag of tags) {
        if (Translator.BetterBibTeX) {
          tag.tag = tag.tag.replace(/([#\\%&])/g, "\\$1");
        } else {
          tag.tag = tag.tag.replace(/([#%\\])/g, "\\$1");
        }
        tag.tag = tag.tag.replace(/,/g, ";");
        let balanced = 0;
        for (const ch of tag.tag) {
          switch (ch) {
            case "{":
              balanced += 1;
              break;
            case "}":
              balanced -= 1;
              break;
          }
          if (balanced < 0)
            break;
        }
        if (balanced !== 0)
          tag.tag = tag.tag.replace(/{/g, "(").replace(/}/g, ")");
      }
      return tags.map((tag) => tag.tag).join(",");
    }
    enc_attachments(f, modify) {
      log.debug("encoding attachments", f);
      if (!f.value || f.value.length === 0)
        return null;
      const attachments = [];
      if (modify)
        this.item.$cacheable = false;
      for (const attachment of f.value) {
        const att = {
          title: attachment.title,
          mimetype: attachment.contentType || "",
          path: ""
        };
        if (Translator.options.exportFileData) {
          att.path = attachment.saveFile ? attachment.defaultPath : "";
        } else if (attachment.localPath) {
          att.path = attachment.localPath;
        }
        log.debug("encoding attachment", att);
        if (!att.path)
          continue;
        att.path = att.path.replace(/(?:\s*[{}]+)+\s*/g, " ");
        if (Translator.options.exportFileData) {
          attachment.saveFile(att.path, true);
        }
        if (!att.title)
          att.title = att.path.replace(/.*[\\/]/, "") || "attachment";
        if (!att.mimetype && att.path.slice(-4).toLowerCase() === ".pdf")
          att.mimetype = "application/pdf";
        if (Translator.preferences.relativeFilePaths && Translator.export.dir) {
          const relative = Path.relative(att.path);
          if (relative !== att.path) {
            this.item.$cacheable = false;
            att.path = relative;
          }
        }
        if (Translator.preferences.testing)
          att.path = att.path.replace(/.*[.]BBTZ5TEST\/(zotero|jurism)\//, "~/BBTZ5TEST/").replace(/\/storage\/[^/]+\//, "/storage/");
        if (modify)
          att.path = modify(att.path);
        attachments.push(att);
      }
      log.debug("encoded attachments", attachments);
      if (attachments.length === 0)
        return null;
      attachments.sort((a, b) => {
        if (a.mimetype === "text/html" && b.mimetype !== "text/html")
          return 1;
        if (b.mimetype === "text/html" && a.mimetype !== "text/html")
          return -1;
        return Translator.stringCompare(a.path, b.path);
      });
      if (Translator.preferences.jabrefFormat)
        return attachments.map((att) => [att.title, att.path, att.mimetype].map((part) => part.replace(/([\\{}:;])/g, "\\$1")).join(":")).join(";");
      return attachments.map((att) => att.path.replace(/([\\{}:;])/g, "\\$1")).join(";");
    }
    _enc_creators_pad_particle(particle, relax = false) {
      if (particle[particle.length - 1] === " ")
        return particle;
      if (Translator.BetterBibLaTeX) {
        if (Zotero.Utilities.XRegExp.test(particle, re3.punctuationAtEnd))
          this.metadata.DeclarePrefChars += particle[particle.length - 1];
        return `${particle} `;
      }
      if (particle[particle.length - 1] === ".")
        return `${particle} `;
      if (Zotero.Utilities.XRegExp.test(particle, re3.punctuationAtEnd)) {
        if (relax)
          return `${particle}${enc_creators_marker.relax} `;
        return particle;
      }
      return `${particle} `;
    }
    _enc_creator_part(part) {
      const { latex, packages } = text2latex(part, { creator: true, commandspacers: true });
      for (const pkg of packages) {
        this.packages[pkg] = true;
      }
      return part instanceof String ? new String(`{${latex}}`) : latex;
    }
    _enc_creators_biblatex(name) {
      let family;
      if (name.family.length > 1 && name.family[0] === '"' && name.family[name.family.length - 1] === '"') {
        family = new String(name.family.slice(1, -1));
      } else {
        ({ family } = name);
      }
      const initials_marker_pos = (name.given || "").indexOf(enc_creators_marker.initials);
      let initials;
      if (Translator.preferences.biblatexExtendedNameFormat && (name["dropping-particle"] || name["non-dropping-particle"] || name["comma-suffix"])) {
        if (initials_marker_pos >= 0) {
          initials = name.given.substring(0, initials_marker_pos);
          if (initials.length > 1)
            initials = new String(initials);
          name.given = name.given.replace(enc_creators_marker.initials, "");
        } else {
          initials = "";
        }
        const namebuilder = [];
        if (family)
          namebuilder.push(`family=${this._enc_creator_part(family)}`);
        if (name.given)
          namebuilder.push(`given=${this._enc_creator_part(name.given)}`);
        if (initials)
          namebuilder.push(`given-i=${this._enc_creator_part(initials)}`);
        if (name.suffix)
          namebuilder.push(`suffix=${this._enc_creator_part(name.suffix)}`);
        if (name["dropping-particle"] || name["non-dropping-particle"]) {
          namebuilder.push(`prefix=${this._enc_creator_part(name["dropping-particle"] || name["non-dropping-particle"])}`);
          namebuilder.push(`useprefix=${!!name["non-dropping-particle"]}`);
        }
        if (name["comma-suffix"])
          namebuilder.push("juniorcomma=true");
        return namebuilder.join(", ");
      }
      if (family && Zotero.Utilities.XRegExp.test(family, re3.startsWithLowercase))
        family = new String(family);
      if (family)
        family = this._enc_creator_part(family);
      if (initials_marker_pos >= 0)
        name.given = `<span relax="true">${name.given.replace(enc_creators_marker.initials, "</span>")}`;
      let latex = "";
      if (name["dropping-particle"])
        latex += this._enc_creator_part(this._enc_creators_pad_particle(name["dropping-particle"]));
      if (name["non-dropping-particle"])
        latex += this._enc_creator_part(this._enc_creators_pad_particle(name["non-dropping-particle"]));
      if (family)
        latex += family;
      if (name.suffix)
        latex += `, ${this._enc_creator_part(name.suffix)}`;
      if (name.given)
        latex += `, ${this._enc_creator_part(name.given)}`;
      return latex;
    }
    _enc_creators_bibtex(name) {
      let family;
      if (name.family.length > 1 && name.family[0] === '"' && name.family[name.family.length - 1] === '"') {
        family = new String(name.family.slice(1, -1));
      } else {
        family = name.family;
      }
      if (name.given && name.given.indexOf(enc_creators_marker.initials) >= 0) {
        name.given = `<span relax="true">${name.given.replace(enc_creators_marker.initials, "</span>")}`;
      }
      if (name["non-dropping-particle"])
        family = new String(this._enc_creators_pad_particle(name["non-dropping-particle"]) + family);
      if (Zotero.Utilities.XRegExp.test(family, re3.startsWithLowercase) || Zotero.Utilities.XRegExp.test(family, re3.hasLowercaseWord))
        family = new String(family);
      family = family ? this._enc_creator_part(family) : "";
      if (family[0] !== "{" && name.family.match(/[-\u2014\u2015\u2012\u2013]/))
        family = `{${family}}`;
      if (name["dropping-particle"])
        family = `${this._enc_creator_part(this._enc_creators_pad_particle(name["dropping-particle"], true))}${family}`;
      if (Translator.BetterBibTeX && Translator.preferences.bibtexParticleNoOp && (name["non-dropping-particle"] || name["dropping-particle"])) {
        family = `{\\noopsort{${this._enc_creator_part(name.family.toLowerCase())}}}${family}`;
        this.metadata.noopsort = true;
      }
      if (name.given)
        name.given = this._enc_creator_part(name.given);
      if (name.suffix)
        name.suffix = this._enc_creator_part(name.suffix);
      let latex = family;
      if (name.suffix)
        latex += `, ${name.suffix}`;
      if (name.given)
        latex += `, ${name.given}`;
      return latex;
    }
    postscript(_reference, _item, _translator, _zotero, _extra) {
      return { cache: true, write: true };
    }
    thesistype(type2, phdthesis, mastersthesis, bathesis, candthesis) {
      return {
        phd: phdthesis,
        dissertation: phdthesis,
        phddissertation: phdthesis,
        doctoraldissertation: phdthesis,
        ma: mastersthesis,
        masters: mastersthesis,
        master: mastersthesis,
        ba: bathesis,
        bachelor: bathesis,
        cand: candthesis,
        candidate: candthesis
      }[type2 == null ? void 0 : type2.toLowerCase().replace(/[^a-z]/g, "").replace(/thesis$/, "")];
    }
    qualityReport() {
      const $cacheable = this.item.$cacheable;
      try {
        if (!Translator.preferences.qualityReport)
          return "";
        let report = this.lint({
          timestamp: `added because JabRef format is set to ${Translator.preferences.jabrefFormat || "?"}`
        });
        if (report) {
          if (this.has.pages) {
            const dashes = this.has.pages.bibtex.match(/-+/g);
            if (dashes && dashes.includes("---"))
              report.push("? em-dash found in pages field, did you mean to use an en-dash?");
          }
          if (this.has.journal && this.has.journal.value.indexOf(".") >= 0)
            report.push(`? Possibly abbreviated journal title ${this.has.journal.value}`);
          if (this.has.journaltitle && this.has.journaltitle.value.indexOf(".") >= 0)
            report.push(`? Possibly abbreviated journal title ${this.has.journaltitle.value}`);
          if (this.referencetype === "inproceedings" && this.has.booktitle) {
            if (!this.has.booktitle.value.match(/:|Proceedings|Companion| '/) || this.has.booktitle.value.match(/\.|workshop|conference|symposium/)) {
              report.push("? Unsure about the formatting of the booktitle");
            }
          }
          if (this.has.title && Translator.preferences.exportTitleCase) {
            const titleCased2 = Zotero.BetterBibTeX.titleCase(this.has.title.value) === this.has.title.value;
            if (this.has.title.value.match(/\s/)) {
              if (titleCased2)
                report.push("? Title looks like it was stored in title-case in Zotero");
            } else {
              if (!titleCased2)
                report.push("? Title looks like it was stored in lower-case in Zotero");
            }
          }
        } else {
          report = [`I don't know how to quality-check ${this.referencetype} references`];
        }
        report = report.concat(this.quality_report);
        if (!report.length)
          return "";
        report.unshift(`== ${Translator.BetterBibTeX ? "BibTeX" : "BibLateX"} quality report for ${this.item.citationKey}:`);
        const used = Object.values(this.has).filter((field) => typeof field.value === "string" || typeof field.value === "number").map((field) => typeof field.value === "string" ? field.value.toLowerCase().replace(/[^a-zA-z0-9]/g, "") : field.value);
        const fields = Object.entries(this.item).sort(entry_sort);
        const extra_fields = Object.entries(this.item.extraFields.kv).sort(entry_sort).map(([field, value]) => [`extraFields.kv.${field}`, value]);
        const ignore_unused_fields = [
          "abstractNote",
          "accessDate",
          "autoJournalAbbreviation",
          "citationKey",
          "citekey",
          "collections",
          "date",
          "dateAdded",
          "dateModified",
          "itemID",
          "itemType",
          "itemKey",
          "key",
          "libraryID",
          "relations",
          "uri"
        ];
        for (const [field, value] of fields.concat(extra_fields)) {
          if (!value)
            continue;
          if (ignore_unused_fields.includes(field))
            continue;
          let v;
          switch (typeof value) {
            case "string":
              v = value.toLowerCase().replace(/[^a-zA-z0-9]/g, "");
              if (used.includes(v))
                continue;
              if (field === "libraryCatalog" && v.includes("arxiv") && this.item.arXiv)
                continue;
              if (field === "language" && this.has.langid)
                continue;
              break;
            case "number":
              if (used.includes(value))
                continue;
              break;
            default:
              continue;
          }
          report.push(`? Unused ${field}: ${value}`);
        }
        return report.map((line) => `% ${line}
`).join("");
      } finally {
        this.item.$cacheable = $cacheable;
      }
    }
  };

  // translators/Better BibLaTeX.ts
  Reference.prototype.fieldEncoding = {
    groups: "verbatim",
    url: "url",
    doi: "verbatim",
    eprint: "verbatim",
    eprintclass: "verbatim",
    crossref: "raw",
    xdata: "raw",
    xref: "raw",
    entrykey: "raw",
    childentrykey: "raw",
    verba: "verbatim",
    verbb: "verbatim",
    verbc: "verbatim",
    institution: "literal",
    publisher: "literal",
    origpublisher: "literal",
    organization: "literal",
    location: "literal",
    origlocation: "literal"
  };
  Reference.prototype.caseConversion = {
    title: true,
    series: true,
    shorttitle: true,
    origtitle: true,
    booktitle: true,
    maintitle: true,
    eventtitle: true
  };
  Reference.prototype.lint = require_biber_tool();
  Reference.prototype.addCreators = function() {
    if (!this.item.creators || !this.item.creators.length)
      return;
    const creators = {
      author: [],
      bookauthor: [],
      commentator: [],
      editor: [],
      editora: [],
      editorb: [],
      holder: [],
      translator: []
    };
    creators.editora.type = "collaborator";
    creators.editorb.type = "redactor";
    for (const creator of this.item.creators) {
      switch (creator.creatorType) {
        case "director":
          if (["video", "movie"].includes(this.referencetype)) {
            creators.editor.push(creator);
            creators.editor.type = "director";
          } else {
            creators.author.push(creator);
          }
          break;
        case "author":
        case "inventor":
        case "interviewer":
        case "programmer":
        case "artist":
        case "podcaster":
        case "presenter":
          creators.author.push(creator);
          break;
        case "bookAuthor":
          creators.bookauthor.push(creator);
          break;
        case "commenter":
          creators.commentator.push(creator);
          break;
        case "editor":
          creators.editor.push(creator);
          break;
        case "assignee":
          creators.holder.push(creator);
          break;
        case "translator":
          creators.translator.push(creator);
          break;
        case "seriesEditor":
          creators.editorb.push(creator);
          break;
        case "scriptwriter":
          creators.editora.push(creator);
          if (["video", "movie"].includes(this.referencetype)) {
            creators.editora.type = "scriptwriter";
          }
          break;
        default:
          creators.editora.push(creator);
      }
    }
    for (const [field, value] of Object.entries(creators)) {
      this.remove(field);
      this.remove(`${field}type`);
      if (!value.length)
        continue;
      this.add({ name: field, value, enc: "creators" });
      if (value.type)
        this.add({ name: `${field}type`, value: value.type });
    }
  };
  Reference.prototype.typeMap = {
    csl: {
      article: "article",
      "article-journal": "article",
      "article-magazine": { type: "article", subtype: "magazine" },
      "article-newspaper": { type: "article", subtype: "newspaper" },
      bill: "legislation",
      book: "book",
      broadcast: { type: "misc", subtype: "broadcast" },
      chapter: "incollection",
      data: "dataset",
      dataset: "dataset",
      entry: "inreference",
      "entry-dictionary": "inreference",
      "entry-encyclopedia": "inreference",
      figure: "image",
      graphic: "image",
      interview: { type: "misc", subtype: "interview" },
      legal_case: "jurisdiction",
      legislation: "legislation",
      manuscript: "unpublished",
      map: { type: "misc", subtype: "map" },
      motion_picture: "movie",
      musical_score: "audio",
      pamphlet: "booklet",
      "paper-conference": "inproceedings",
      patent: "patent",
      personal_communication: "letter",
      post: "online",
      "post-weblog": "online",
      report: "report",
      review: "review",
      "review-book": "review",
      song: "music",
      speech: { type: "misc", subtype: "speech" },
      thesis: "thesis",
      treaty: "legal",
      webpage: "online"
    },
    zotero: {
      artwork: "artwork",
      audioRecording: "audio",
      bill: "legislation",
      blogPost: "online",
      book: "book",
      bookSection: "incollection",
      case: "jurisdiction",
      computerProgram: "software",
      conferencePaper: "inproceedings",
      dictionaryEntry: "inreference",
      document: "misc",
      email: "letter",
      encyclopediaArticle: "inreference",
      film: "movie",
      forumPost: "online",
      gazette: "jurisdiction",
      hearing: "jurisdiction",
      instantMessage: "misc",
      interview: "misc",
      journalArticle: "article",
      letter: "letter",
      magazineArticle: { type: "article", subtype: "magazine" },
      manuscript: "unpublished",
      map: "misc",
      newspaperArticle: { type: "article", subtype: "newspaper" },
      patent: "patent",
      podcast: "audio",
      presentation: "unpublished",
      radioBroadcast: "audio",
      report: "report",
      statute: "legislation",
      thesis: "thesis",
      tvBroadcast: "video",
      videoRecording: "video",
      webpage: "online"
    }
  };
  function looks_like_number(n) {
    if (n.match(/^(?=[MDCLXVI])M*(C[MD]|D?C*)(X[CL]|L?X*)(I[XV]|V?I*)$/))
      return "roman";
    if (n.match(/^[A-Z]?[0-9]+(\.[0-9]+)?$/i))
      return "arabic";
    if (n.match(/^[A-Z]$/i))
      return "arabic";
    return false;
  }
  function looks_like_number_field(n) {
    if (!n)
      return false;
    const ns = n.trim().split(/\s*-+|–|,|\/\s*/);
    switch (ns.length) {
      case 1:
        return looks_like_number(ns[0]);
      case 2:
        return looks_like_number(ns[0]) && looks_like_number(ns[0]) === looks_like_number(ns[1]);
      default:
        return false;
    }
  }
  var patent = new class {
    constructor() {
      this.countries = ["de", "eu", "fr", "uk", "us"];
      this.prefix = { us: "us", ep: "eu", gb: "uk", de: "de", fr: "fr" };
    }
    region(item) {
      if (item.itemType !== "patent")
        return "";
      if (item.country) {
        const country2 = item.country.toLowerCase();
        if (this.countries.includes(country2))
          return country2;
      }
      for (const patentNumber2 of [item.number, item.applicationNumber]) {
        if (patentNumber2) {
          const prefix = this.prefix[patentNumber2.substr(0, 2).toLowerCase()];
          if (prefix)
            return prefix;
        }
      }
      return "";
    }
    number(item) {
      if (item.itemType !== "patent" || !item.number && !item.applicationNumber)
        return "";
      for (const patentNumber2 of [item.number, item.applicationNumber]) {
        if (patentNumber2) {
          const country2 = patentNumber2.substr(0, 2).toLowerCase();
          if (this.prefix[country2])
            return patentNumber2.substr(country2.length);
        }
      }
      return item.number || item.applicationNumber;
    }
    type(item) {
      if (item.itemType !== "patent")
        return "";
      const region = this.region(item);
      if (region && item.number)
        return `patent${region}`;
      if (region && item.applicationNumber)
        return `patreq${region}`;
      return "patent";
    }
  }();
  function doExport() {
    var _a, _b, _c, _d, _e, _f, _g;
    Translator.init("export");
    Reference.installPostscript();
    Exporter.prepare_strings();
    Zotero.write("\n");
    for (const item of Exporter.items) {
      const ref = new Reference(item);
      if (ref.referencetype === "incollection" && ref.hasCreator("bookAuthor"))
        ref.referencetype = "inbook";
      if (ref.referencetype === "book" && item.numberOfVolumes)
        ref.referencetype = "mvbook";
      if (ref.referencetype === "report" && ((_a = item.type) == null ? void 0 : _a.toLowerCase().includes("manual")))
        ref.referencetype = "manual";
      if (Translator.preferences.biblatexExtractEprint) {
        let m;
        if (item.url && (m = item.url.match(/^https?:\/\/www.jstor.org\/stable\/([\S]+)$/i))) {
          ref.override({ name: "eprinttype", value: "jstor" });
          ref.override({ name: "eprint", value: m[1].replace(/\?.*/, "") });
          ref.remove("archiveprefix");
          ref.remove("primaryclass");
          delete item.url;
          ref.remove("url");
        } else if (item.url && (m = item.url.match(/^https?:\/\/books.google.com\/books?id=([\S]+)$/i))) {
          ref.override({ name: "eprinttype", value: "googlebooks" });
          ref.override({ name: "eprint", value: m[1] });
          ref.remove("archiveprefix");
          ref.remove("primaryclass");
          delete item.url;
          ref.remove("url");
        } else if (item.url && (m = item.url.match(/^https?:\/\/www.ncbi.nlm.nih.gov\/pubmed\/([\S]+)$/i))) {
          ref.override({ name: "eprinttype", value: "pubmed" });
          ref.override({ name: "eprint", value: m[1] });
          ref.remove("archiveprefix");
          ref.remove("primaryclass");
          delete item.url;
          ref.remove("url");
        }
      }
      ref.add({ name: "langid", value: ref.language });
      if (ref.referencetype === "patent") {
        if (item.country && !patent.region(item))
          ref.add({ name: "location", value: item.country || item.extraFields.kv["publisher-place"] });
      } else if (ref.referencetype === "unpublished" && item.itemType === "presentation") {
        ref.add({ name: "venue", value: item.place, enc: "literal" });
      } else {
        ref.add({ name: "location", value: item.place || item.extraFields.kv["publisher-place"], enc: "literal" });
      }
      ref.add({ name: "title", value: item.title });
      ref.add({ name: "edition", value: item.edition });
      ref.add({ name: "isbn", value: item.ISBN });
      ref.add({ name: "issn", value: item.ISSN });
      ref.add({ name: "url", value: item.url || item.extraFields.kv.url });
      ref.add({ name: "doi", value: (item.DOI || item.extraFields.kv.DOI || "").replace(/^https?:\/\/doi.org\//i, "") });
      ref.add({ name: "shorttitle", value: item.shortTitle });
      ref.add({ name: "abstract", value: (_b = item.abstractNote) == null ? void 0 : _b.replace(/\n+/g, " ") });
      ref.add({ name: "volumes", value: item.numberOfVolumes });
      ref.add({ name: "version", value: item.versionNumber });
      ref.add({ name: "eventtitle", value: item.conferenceName });
      ref.add({ name: "eventtitle", value: item.meetingName, replace: true });
      ref.add({ name: "pagetotal", value: item.numPages });
      const number_added = ref.add({ name: "number", value: patent.number(item) || item.number || item.seriesNumber });
      ref.add({ name: !number_added && looks_like_number_field(item.issue) ? "number" : "issue", value: item.issue });
      switch (ref.referencetype) {
        case "jurisdiction":
          ref.add({ name: "journaltitle", value: item.reporter || item.publicationTitle !== item.title && item.publicationTitle, bibtexStrings: true });
          break;
        case "legislation":
          ref.add({ name: "journaltitle", value: item.code || item.publicationTitle !== item.title && item.publicationTitle, bibtexStrings: true });
          break;
        case "incollection":
        case "chapter":
        case "inproceedings":
        case "inreference":
        case "movie":
        case "video":
        case "inbook":
          if (!ref.has.booktitle)
            ref.add({ name: "booktitle", value: item.publicationTitle, bibtexStrings: true });
          break;
        case "online":
          ref.add({ name: "organization", value: item.publicationTitle, bibtexStrings: true });
          break;
        case "article":
          if (ref.getBibString(item.publicationTitle)) {
            ref.add({ name: "journaltitle", value: item.publicationTitle, bibtexStrings: true });
          } else if (Translator.options.useJournalAbbreviation && item.publicationTitle && item.journalAbbreviation) {
            ref.add({ name: "journaltitle", value: item.journalAbbreviation, bibtexStrings: true });
          } else {
            ref.add({ name: "journaltitle", value: item.publicationTitle, bibtexStrings: true });
            if (((_c = ref.has.entrysubtype) == null ? void 0 : _c.value) === "newspaper") {
              ref.add({ name: "journalsubtitle", value: item.section });
            } else {
              ref.add({ name: "shortjournal", value: item.journalAbbreviation, bibtexStrings: true });
            }
          }
          break;
        default:
          if (!ref.has.journaltitle && item.publicationTitle !== item.title)
            ref.add({ name: "journaltitle", value: item.publicationTitle });
      }
      let main;
      if (((_e = (_d = item.multi) == null ? void 0 : _d._keys) == null ? void 0 : _e.title) && (main = ((_f = item.multi.main) == null ? void 0 : _f.title) || item.language)) {
        const languages = Object.keys(item.multi._keys.title).filter((lang) => lang !== main);
        main += "-";
        languages.sort((a, b) => {
          if (a === b)
            return 0;
          if (a.indexOf(main) === 0 && b.indexOf(main) !== 0)
            return -1;
          if (a.indexOf(main) !== 0 && b.indexOf(main) === 0)
            return 1;
          if (a < b)
            return -1;
          return 1;
        });
        for (let i = 0; i < languages.length; i++) {
          ref.add({
            name: i === 0 ? "titleaddon" : `user${String.fromCharCode("d".charCodeAt(0) + i)}`,
            value: item.multi._keys.title[languages[i]]
          });
        }
      }
      ref.add({ name: "series", value: item.seriesTitle || item.series, bibtexStrings: true });
      switch (ref.referencetype) {
        case "report":
        case "thesis":
          ref.add({ name: "institution", value: item.publisher, bibtexStrings: true });
          break;
        case "jurisdiction":
          ref.add({ name: "institution", value: item.court, bibtexStrings: true });
          break;
        case "software":
          ref.add({ name: "organization", value: item.publisher, bibtexStrings: true });
          break;
        default:
          ref.add({ name: "publisher", value: item.publisher, bibtexStrings: true });
      }
      switch (ref.referencetype) {
        case "letter":
          ref.add({ name: "type", value: item.type || (item.itemType === "email" ? "E-mail" : "Letter") });
          break;
        case "thesis":
          ref.add({ name: "type", value: ref.thesistype(item.type, "phdthesis", "mathesis", "bathesis", "candthesis") || item.type });
          break;
        case "report":
          if (((_g = item.type) == null ? void 0 : _g.toLowerCase().trim()) === "techreport") {
            ref.add({ name: "type", value: "techreport" });
          } else {
            ref.add({ name: "type", value: item.type });
          }
          break;
        case "patent":
          ref.add({ name: "type", value: patent.type(item) });
          break;
        default:
          ref.add({ name: "type", value: item.type });
      }
      if (ref.referencetype === "unpublished" && item.itemType !== "presentation")
        ref.add({ name: "howpublished", value: item.type });
      if (item.accessDate && item.url)
        ref.add({ name: "urldate", value: Zotero.BetterBibTeX.strToISO(item.accessDate), enc: "date" });
      ref.add({
        name: "date",
        verbatim: "year",
        orig: { name: "origdate", verbatim: "origdate" },
        value: item.date,
        enc: "date"
      });
      ref.add({
        name: "origdate",
        value: item.originalDate,
        enc: "date",
        replace: true
      });
      ref.add({ name: "eventdate", value: item.conferenceDate, enc: "date" });
      ref.add({ name: "pages", value: ref.normalizeDashes(item.pages) });
      ref.add({ name: "volume", value: ref.normalizeDashes(item.volume) });
      ref.add({ name: "keywords", value: item.tags, enc: "tags" });
      if (!item.creators)
        item.creators = [];
      if (item.itemType === "patent" && item.assignee && !item.creators.find((cr) => cr.name === item.assignee || cr.lastName === item.assignee && cr.fieldMode === 1)) {
        item.creators.push({
          name: item.assignee,
          creatorType: "assignee"
        });
      }
      ref.addCreators();
      if (ref.useprefix)
        ref.add({ name: "options", value: "useprefix=true" });
      ref.add({ name: "file", value: item.attachments, enc: "attachments" });
      if (item.volumeTitle) {
        if (ref.referencetype === "book" && ref.has.title) {
          ref.add({ name: "maintitle", value: item.volumeTitle });
          [ref.has.title.bibtex, ref.has.maintitle.bibtex] = [ref.has.maintitle.bibtex, ref.has.title.bibtex];
          [ref.has.title.value, ref.has.maintitle.value] = [ref.has.maintitle.value, ref.has.title.value];
        }
        if (["incollection", "chapter"].includes(ref.referencetype) && ref.has.booktitle) {
          ref.add({ name: "maintitle", value: item.volumeTitle });
          [ref.has.booktitle.bibtex, ref.has.maintitle.bibtex] = [ref.has.maintitle.bibtex, ref.has.booktitle.bibtex];
          [ref.has.booktitle.value, ref.has.maintitle.value] = [ref.has.maintitle.value, ref.has.booktitle.value];
        }
      }
      for (const eprinttype of ["pmid", "arxiv", "jstor", "hdl", "googlebooks"]) {
        if (ref.has[eprinttype]) {
          if (!ref.has.eprinttype) {
            ref.add({ name: "eprinttype", value: eprinttype });
            ref.add({ name: "eprint", value: ref.has[eprinttype].value });
          }
          ref.remove(eprinttype);
        }
      }
      if (item.archive && item.archiveLocation) {
        let archive2 = true;
        switch (item.archive.toLowerCase()) {
          case "arxiv":
            if (!ref.has.eprinttype)
              ref.add({ name: "eprinttype", value: "arxiv" });
            ref.add({ name: "eprintclass", value: item.callNumber });
            break;
          case "jstor":
            if (!ref.has.eprinttype)
              ref.add({ name: "eprinttype", value: "jstor" });
            break;
          case "pubmed":
            if (!ref.has.eprinttype)
              ref.add({ name: "eprinttype", value: "pubmed" });
            break;
          case "hdl":
            if (!ref.has.eprinttype)
              ref.add({ name: "eprinttype", value: "hdl" });
            break;
          case "googlebooks":
          case "google books":
            if (!ref.has.eprinttype)
              ref.add({ name: "eprinttype", value: "googlebooks" });
            break;
          default:
            archive2 = false;
        }
        if (archive2) {
          if (!ref.has.eprint)
            ref.add({ name: "eprint", value: item.archiveLocation });
        }
      }
      if (item.arXiv && !ref.has.journaltitle && ref.referencetype === "article")
        ref.referencetype = "online";
      ref.complete();
    }
    Exporter.complete();
    Zotero.write("\n");
  }
  return Better_BibLaTeX_exports;
})();
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
var { Translator, doExport } = BetterBibLaTeX__Translator__doExport;
